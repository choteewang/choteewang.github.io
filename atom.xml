<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>choteewang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-19T09:27:12.384Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>choteewang@qq.com</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue-router 源码解读 07 - RouterLink组件</title>
    <link href="http://yoursite.com/2019/10/22/vue-source-25/"/>
    <id>http://yoursite.com/2019/10/22/vue-source-25/</id>
    <published>2019-10-22T15:39:21.000Z</published>
    <updated>2019-12-19T09:27:12.384Z</updated>
    
    <content type="html"><![CDATA[<p>本节来分析<code>router-link</code>组件.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/link.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'RouterLink'</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    to: &#123;</span><br><span class="line">      type: toTypes,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    tag: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">'a'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    exact: <span class="built_in">Boolean</span>,</span><br><span class="line">    append: <span class="built_in">Boolean</span>,</span><br><span class="line">    replace: <span class="built_in">Boolean</span>,</span><br><span class="line">    activeClass: <span class="built_in">String</span>,</span><br><span class="line">    exactActiveClass: <span class="built_in">String</span>,</span><br><span class="line">    event: &#123;</span><br><span class="line">      type: eventTypes,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">'click'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  render (h: <span class="built_in">Function</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> router = <span class="keyword">this</span>.$router</span><br><span class="line">    <span class="keyword">const</span> current = <span class="keyword">this</span>.$route <span class="comment">// 当前路径</span></span><br><span class="line">    <span class="comment">// -&gt; router.resolve, 得到将要跳转的路径</span></span><br><span class="line">    <span class="keyword">const</span> &#123; location, route, href &#125; = router.resolve(<span class="keyword">this</span>.to, current, <span class="keyword">this</span>.append)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对router-link上的class做处理</span></span><br><span class="line">    <span class="keyword">const</span> classes = &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> globalActiveClass = router.options.linkActiveClass</span><br><span class="line">    <span class="keyword">const</span> globalExactActiveClass = router.options.linkExactActiveClass</span><br><span class="line">    <span class="comment">// Support global empty active class</span></span><br><span class="line">    <span class="keyword">const</span> activeClassFallback = globalActiveClass == <span class="literal">null</span></span><br><span class="line">            ? <span class="string">'router-link-active'</span></span><br><span class="line">            : globalActiveClass</span><br><span class="line">    <span class="keyword">const</span> exactActiveClassFallback = globalExactActiveClass == <span class="literal">null</span></span><br><span class="line">            ? <span class="string">'router-link-exact-active'</span></span><br><span class="line">            : globalExactActiveClass</span><br><span class="line">    <span class="keyword">const</span> activeClass = <span class="keyword">this</span>.activeClass == <span class="literal">null</span></span><br><span class="line">            ? activeClassFallback</span><br><span class="line">            : <span class="keyword">this</span>.activeClass</span><br><span class="line">    <span class="keyword">const</span> exactActiveClass = <span class="keyword">this</span>.exactActiveClass == <span class="literal">null</span></span><br><span class="line">            ? exactActiveClassFallback</span><br><span class="line">            : <span class="keyword">this</span>.exactActiveClass</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 用createRoute计算跳转route</span></span><br><span class="line">    <span class="keyword">const</span> compareTarget = location.path</span><br><span class="line">      <span class="comment">// 根据传入的record创建并返回对应的route对象</span></span><br><span class="line">      ? createRoute(<span class="literal">null</span>, location, <span class="literal">null</span>, router)</span><br><span class="line">      : route</span><br><span class="line"></span><br><span class="line">    <span class="comment">// router-link类处理</span></span><br><span class="line">    classes[exactActiveClass] = isSameRoute(current, compareTarget)</span><br><span class="line">    classes[activeClass] = <span class="keyword">this</span>.exact</span><br><span class="line">      ? classes[exactActiveClass]</span><br><span class="line">      : isIncludedRoute(current, compareTarget)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义事件回调函数, 调用路由对应的push和replace方法</span></span><br><span class="line">    <span class="keyword">const</span> handler = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (guardEvent(e)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.replace) &#123;</span><br><span class="line">          router.replace(location)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          router.push(location)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点击事件 -&gt; guardEvent</span></span><br><span class="line">    <span class="comment">// 点击事件时调用preventDefault, 调用handler</span></span><br><span class="line">    <span class="keyword">const</span> on = &#123; <span class="attr">click</span>: guardEvent &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(<span class="keyword">this</span>.event)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.event.forEach(<span class="function"><span class="params">e</span> =&gt;</span> &#123; on[e] = handler &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      on[<span class="keyword">this</span>.event] = handler</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data: any = &#123;</span><br><span class="line">      class: classes</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.tag === <span class="string">'a'</span>) &#123;</span><br><span class="line">      data.on = on</span><br><span class="line">      data.attrs = &#123; href &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// find the first &lt;a&gt; child and apply listener and href</span></span><br><span class="line">      <span class="comment">// 如果不是a标签, 递归找到插槽中的a标签,绑定对应属性</span></span><br><span class="line">      <span class="keyword">const</span> a = findAnchor(<span class="keyword">this</span>.$slots.default)</span><br><span class="line">      <span class="keyword">if</span> (a) &#123;</span><br><span class="line">        <span class="comment">// in case the &lt;a&gt; is a static node</span></span><br><span class="line">        a.isStatic = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">const</span> extend = _Vue.util.extend</span><br><span class="line">        <span class="keyword">const</span> aData = a.data = extend(&#123;&#125;, a.data)</span><br><span class="line">        aData.on = on</span><br><span class="line">        <span class="keyword">const</span> aAttrs = a.data.attrs = extend(&#123;&#125;, a.data.attrs)</span><br><span class="line">        aAttrs.href = href</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// doesn't have &lt;a&gt; child, apply listener to self</span></span><br><span class="line">        data.on = on</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将routerLink渲染为任意标签</span></span><br><span class="line">    <span class="keyword">return</span> h(<span class="keyword">this</span>.tag, data, <span class="keyword">this</span>.$slots.default)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>RouterLink</code>的<code>render</code>函数先用当前路径<code>this.$route</code>调用<code>router.resolve</code>方法, 该方法实现如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/index.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VueRouter</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  resolve (</span><br><span class="line">    to: RawLocation,</span><br><span class="line">    current?: Route,</span><br><span class="line">    append?: boolean</span><br><span class="line">  ): &#123;</span><br><span class="line">    location: Location,</span><br><span class="line">    route: Route,</span><br><span class="line">    href: string,</span><br><span class="line">    <span class="comment">// for backwards compat</span></span><br><span class="line">    normalizedTo: Location,</span><br><span class="line">    resolved: Route</span><br><span class="line">  &#125; &#123;</span><br><span class="line">    <span class="comment">// 根据当前浏览器url传入的路径, 返回一个描述该路径的对象 location </span></span><br><span class="line">    <span class="comment">// &#123; _normalized: true, path, query, hash &#125;</span></span><br><span class="line">    <span class="keyword">const</span> location = normalizeLocation(</span><br><span class="line">      to,</span><br><span class="line">      current || <span class="keyword">this</span>.history.current,</span><br><span class="line">      append,</span><br><span class="line">      <span class="keyword">this</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 调用match方法, 配合location返回新的路径</span></span><br><span class="line">    <span class="keyword">const</span> route = <span class="keyword">this</span>.match(location, current)</span><br><span class="line">    <span class="keyword">const</span> fullPath = route.redirectedFrom || route.fullPath</span><br><span class="line">    <span class="keyword">const</span> base = <span class="keyword">this</span>.history.base</span><br><span class="line">    <span class="keyword">const</span> href = createHref(base, fullPath, <span class="keyword">this</span>.mode)</span><br><span class="line">    <span class="comment">// 返回路径</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      location,</span><br><span class="line">      route,</span><br><span class="line">      href,</span><br><span class="line">      <span class="comment">// for backwards compat</span></span><br><span class="line">      normalizedTo: location,</span><br><span class="line">      resolved: route</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ..</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果不是a标签, 递归找children中的a标签</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findAnchor</span> (<span class="params">children</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (children) &#123;</span><br><span class="line">    <span class="keyword">let</span> child</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span><br><span class="line">      child = children[i]</span><br><span class="line">      <span class="keyword">if</span> (child.tag === <span class="string">'a'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> child</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (child.children &amp;&amp; (child = findAnchor(child.children))) &#123;</span><br><span class="line">        <span class="keyword">return</span> child</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法内部会先调用<code>normalizeLocation</code>获取<code>location</code>对象(对当前<code>url</code>的另一种描述), 再用<code>location</code>为参数调用<code>match</code>方法获取匹配到的路径<code>route</code>, 最终组合一下属性返回.</p><p>回到<code>render</code>方法, 在对<code>class</code>属性做过一些处理后, 定义<code>click</code>的处理函数<code>handler</code>, 之后将<code>handler</code>绑定到<code>a</code>标签的点击事件上.</p><p>这里会判断如果<code>RouterLink</code>不是a标签, 会递归的找其插槽中的<code>a</code>标签, 继续后续绑定事件和<code>data</code>和<code>attrs</code>的逻辑.</p><p>最后通过<code>h</code>函数将<code>RouterLink</code>渲染到页面上.</p><p>最后来看看<code>handler</code>的逻辑, 会先调用<code>guardEvent</code>逻辑, 对事件做一些公共处理, 同时调用<code>preventDefault</code>, 阻止事件默认行为:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/link.js</span></span><br><span class="line"><span class="comment">// 对事件做一些公共处理, 保护, 调用preventDefault</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">guardEvent</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// don't redirect with control keys</span></span><br><span class="line">  <span class="keyword">if</span> (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) <span class="keyword">return</span></span><br><span class="line">  <span class="comment">// don't redirect when preventDefault called</span></span><br><span class="line">  <span class="keyword">if</span> (e.defaultPrevented) <span class="keyword">return</span></span><br><span class="line">  <span class="comment">// don't redirect on right click</span></span><br><span class="line">  <span class="keyword">if</span> (e.button !== <span class="literal">undefined</span> &amp;&amp; e.button !== <span class="number">0</span>) <span class="keyword">return</span></span><br><span class="line">  <span class="comment">// don't redirect if `target="_blank"`</span></span><br><span class="line">  <span class="keyword">if</span> (e.currentTarget &amp;&amp; e.currentTarget.getAttribute) &#123;</span><br><span class="line">    <span class="keyword">const</span> target = e.currentTarget.getAttribute(<span class="string">'target'</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/\b_blank\b/i</span>.test(target)) <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// this may be a Weex event which doesn't have this method</span></span><br><span class="line">  <span class="keyword">if</span> (e.preventDefault) &#123;</span><br><span class="line">    e.preventDefault()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>handler</code>最后根据是<code>push</code>还是<code>replace</code>调用<code>router</code>的<code>replace</code>或<code>push</code>方法, 之后发生前面几节分析过的<code>URL</code>跳转过程.</p><p>至此, <code>VueRouter</code>的主线逻辑全部分析完毕.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本节来分析&lt;code&gt;router-link&lt;/code&gt;组件.&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;spa
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue-router 源码解读 06 - RouterView组件</title>
    <link href="http://yoursite.com/2019/10/02/vue-source-24/"/>
    <id>http://yoursite.com/2019/10/02/vue-source-24/</id>
    <published>2019-10-02T13:17:21.000Z</published>
    <updated>2019-12-19T09:26:55.261Z</updated>
    
    <content type="html"><![CDATA[<p>上节分析了路径切换的过程, URL切换后, 还是要触发对应的组件渲染过程, 本节来分析组件渲染的过程.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/install.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">install</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 保证installed方法只执行一次</span></span><br><span class="line">  <span class="keyword">if</span> (install.installed &amp;&amp; _Vue === Vue) <span class="keyword">return</span></span><br><span class="line">  install.installed = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  _Vue = Vue</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> isDef = <span class="function"><span class="params">v</span> =&gt;</span> v !== <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> registerInstance = <span class="function">(<span class="params">vm, callVal</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> i = vm.$options._parentVnode</span><br><span class="line">    <span class="keyword">if</span> (isDef(i) &amp;&amp; isDef(i = i.data) &amp;&amp; isDef(i = i.registerRouteInstance)) &#123;</span><br><span class="line">      i(vm, callVal)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用全局Vue.mixin让给每个组件都添加beforeCreate和destroyed的部分逻辑</span></span><br><span class="line">  Vue.mixin(&#123;</span><br><span class="line">    beforeCreate () &#123;</span><br><span class="line">      <span class="comment">// 根Vue实例的options上用户才会定义router配置对象</span></span><br><span class="line">      <span class="keyword">if</span> (isDef(<span class="keyword">this</span>.$options.router)) &#123;</span><br><span class="line">        <span class="comment">// 将当前vue实例赋值给this._routerRoot</span></span><br><span class="line">        <span class="keyword">this</span>._routerRoot = <span class="keyword">this</span></span><br><span class="line">        <span class="keyword">this</span>._router = <span class="keyword">this</span>.$options.router</span><br><span class="line">        <span class="comment">// 执行init方法</span></span><br><span class="line">        <span class="keyword">this</span>._router.init(<span class="keyword">this</span>)</span><br><span class="line">        <span class="comment">// 将_route对象定义为响应式的</span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 对根vm实例的_route属性进行响应式监听, 依赖收集渲染watcher(router-view), 在setter发生时重新出发渲染watcher(router-view)的render函数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// setter -&gt; history.listen</span></span><br><span class="line">        Vue.util.defineReactive(<span class="keyword">this</span>, <span class="string">'_route'</span>, <span class="keyword">this</span>._router.history.current)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 让每一个组件初始化时就将_routerRoot赋值为根vue实例</span></span><br><span class="line">        <span class="keyword">this</span>._routerRoot = (<span class="keyword">this</span>.$parent &amp;&amp; <span class="keyword">this</span>.$parent._routerRoot) || <span class="keyword">this</span></span><br><span class="line">      &#125;</span><br><span class="line">      registerInstance(<span class="keyword">this</span>, <span class="keyword">this</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    destroyed () &#123;</span><br><span class="line">      registerInstance(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 原型上定义 $router 为 rootVue实例.$options.router</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(Vue.prototype, <span class="string">'$router'</span>, &#123;</span><br><span class="line">    get () &#123; <span class="keyword">return</span> <span class="keyword">this</span>._routerRoot._router &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 原型上定义 $route 为 rootVue实例.$route</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(Vue.prototype, <span class="string">'$route'</span>, &#123;</span><br><span class="line">    get () &#123; <span class="keyword">return</span> <span class="keyword">this</span>._routerRoot._route &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 全局注册RouterView和RouterLink组件</span></span><br><span class="line">  Vue.component(<span class="string">'RouterView'</span>, View)</span><br><span class="line">  Vue.component(<span class="string">'RouterLink'</span>, Link)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> strats = Vue.config.optionMergeStrategies</span><br><span class="line">  <span class="comment">// use the same hook merging strategy for route hooks</span></span><br><span class="line">  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>install</code>方法的逻辑最后, 会执行<code>Vue.component</code>方法注册<code>RouterView</code>和<code>RouterLink</code>组件, 继续看看<code>RouterView</code>组件的实现:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/view.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'RouterView'</span>,</span><br><span class="line">  functional: <span class="literal">true</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">'default'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  render (_, &#123; props, children, parent, data &#125;) &#123;</span><br><span class="line">    data.routerView = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// directly use parent context's createElement() function</span></span><br><span class="line">    <span class="comment">// so that components rendered by router-view can resolve named slots</span></span><br><span class="line">    <span class="comment">// parent是承载viewRouter组件的上层vue实例 </span></span><br><span class="line">    <span class="comment">// &lt;App&gt;组件的模板中有&lt;router-view/&gt;, 这里的parent就是App对应的vm实例</span></span><br><span class="line">    <span class="keyword">const</span> h = parent.$createElement</span><br><span class="line">    <span class="comment">// 命名视图</span></span><br><span class="line">    <span class="keyword">const</span> name = props.name</span><br><span class="line">    <span class="comment">// 访问$route实际访问的是 this._router.history.current</span></span><br><span class="line">    <span class="comment">// 也就是找到当前路径</span></span><br><span class="line">    <span class="keyword">const</span> route = parent.$route</span><br><span class="line">    <span class="keyword">const</span> cache = parent._routerViewCache || (parent._routerViewCache = &#123;&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// determine current view depth, also check to see if the tree</span></span><br><span class="line">    <span class="comment">// has been toggled inactive but kept-alive.</span></span><br><span class="line">    <span class="keyword">let</span> depth = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> inactive = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">while</span> (parent &amp;&amp; parent._routerRoot !== parent) &#123;</span><br><span class="line">      <span class="comment">// router-view组件的data.routerView=true</span></span><br><span class="line">      <span class="comment">// 当父占位节点存在切父占位节点是router-view组件时, 深度++</span></span><br><span class="line">      <span class="comment">// 将深度赋值给data.routerViewDepth上, 以此来找到和用户定义的routes中对应组件该显示在哪层router-view上.(用户定义的routes和data.routerViewDepth的层级一一对应)</span></span><br><span class="line">      <span class="keyword">if</span> (parent.$vnode &amp;&amp; parent.$vnode.data.routerView) &#123;</span><br><span class="line">        depth++</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (parent._inactive) &#123;</span><br><span class="line">        inactive = <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      parent = parent.$parent</span><br><span class="line">    &#125;</span><br><span class="line">    data.routerViewDepth = depth</span><br><span class="line"></span><br><span class="line">    <span class="comment">// render previous view if the tree is inactive and kept-alive</span></span><br><span class="line">    <span class="keyword">if</span> (inactive) &#123;</span><br><span class="line">      <span class="keyword">return</span> h(cache[name], data, children)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里通过当前路由的matched数组, 找到对应路由组件</span></span><br><span class="line">    <span class="comment">// (matched数组是[祖先, 父, 子]的结构, 前面几节分析了)</span></span><br><span class="line">    <span class="keyword">const</span> matched = route.matched[depth]</span><br><span class="line">    <span class="comment">// render empty node if no matched route</span></span><br><span class="line">    <span class="keyword">if</span> (!matched) &#123;</span><br><span class="line">      cache[name] = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">return</span> h()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 匹配到的组件先从缓存中取</span></span><br><span class="line">    <span class="keyword">const</span> component = cache[name] = matched.components[name]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// attach instance registration hook</span></span><br><span class="line">    <span class="comment">// this will be called in the instance's injected lifecycle hooks</span></span><br><span class="line">    data.registerRouteInstance = <span class="function">(<span class="params">vm, val</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// val could be undefined for unregistration</span></span><br><span class="line">      <span class="keyword">const</span> current = matched.instances[name]</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        (val &amp;&amp; current !== vm) ||</span><br><span class="line">        (!val &amp;&amp; current === vm)</span><br><span class="line">      ) &#123;</span><br><span class="line">        matched.instances[name] = val</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// also register instance in prepatch hook</span></span><br><span class="line">    <span class="comment">// in case the same component instance is reused across different routes</span></span><br><span class="line">    ;<span class="function">(<span class="params">data.hook || (data.hook = &#123;&#125;</span>)).<span class="params">prepatch</span> = (<span class="params">_, vnode</span>) =&gt;</span> &#123;</span><br><span class="line">      matched.instances[name] = vnode.componentInstance</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// resolve props</span></span><br><span class="line">    <span class="keyword">let</span> propsToPass = data.props = resolveProps(route, matched.props &amp;&amp; matched.props[name])</span><br><span class="line">    <span class="keyword">if</span> (propsToPass) &#123;</span><br><span class="line">      <span class="comment">// clone to prevent mutation</span></span><br><span class="line">      propsToPass = data.props = extend(&#123;&#125;, propsToPass)</span><br><span class="line">      <span class="comment">// pass non-declared props as attrs</span></span><br><span class="line">      <span class="keyword">const</span> attrs = data.attrs = data.attrs || &#123;&#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> propsToPass) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!component.props || !(key <span class="keyword">in</span> component.props)) &#123;</span><br><span class="line">          attrs[key] = propsToPass[key]</span><br><span class="line">          <span class="keyword">delete</span> propsToPass[key]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用h函数渲染该组件</span></span><br><span class="line">    <span class="comment">// -&gt; 如何出发此render函数? defineReactive -&gt; _route</span></span><br><span class="line">    <span class="keyword">return</span> h(component, data, children)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>router-view</code>组件有一个<code>name</code>的<code>prop</code>来定义命名视图, 然后就是<code>render</code>函数的逻辑.</p><p><code>render</code>函数首先将<code>data.routerView</code>设置为<code>true</code>(后续层级计算的重要依据), 然后获取父实例对应的<code>createElement</code>方法(<code>h</code>函数), 然后获取<code>parent.$route</code>, 实际上是获取当前的<code>route</code>对象, 我们回到<code>install</code>方法可以看到对应的逻辑.</p><p>在<code>install</code>方法中, <code>vm</code>实例的<code>$route</code>设置为返回<code>this._routerRoot._route</code>, 在之前分析<code>install</code>方法时, 每一个<code>vm</code>实例上的<code>_routerRoot</code>都指向跟<code>vue</code>实例, 它的<code>_route</code>属性用<code>defineReactive</code>方法设置为返回<code>this._router.history.current</code>, 也就是当前路径.</p><p>回到<code>RouterView</code>的<code>render</code>方法的逻辑中, 之后会计算计算当前<code>routerView</code>的深度, 当父占位节点存在切父占位节点是<code>router-view</code>组件时, 深度++, 将深度赋值给<code>data.routerViewDepth</code>上, 以此来找到和用户定义的routes中对应组件该显示在哪层<code>router-view</code>上.(用户定义的<code>routes</code>和<code>data.routerViewDepth</code>的层级一一对应).</p><p>根据<code>depth</code>, 去<code>route</code>的<code>matched</code>属性(前面分析过)根据层级获取对应的用户定义<code>route</code>对象, 从而拿到用户定义的<code>component</code>. 最终调用<code>h</code>函数将组件渲染到页面上.</p><p>当<code>new VueRouter</code>时, 组件会执行全局混入的<code>beforeCreate</code>方法, 之中会执行<code>this._router.init(this)</code>, 之后会执行<code>this.history.listen</code>方法, 如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/index.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VueRouter</span> </span>&#123;</span><br><span class="line">  init() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 注册history.listen的回调</span></span><br><span class="line">    <span class="comment">// 在路由发生变化时对根实例的_route进行改变从而出发_route的响应式setter</span></span><br><span class="line">    <span class="comment">// 再触发对应渲染watcher(router-view)的render方法的更新</span></span><br><span class="line">    history.listen(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.apps.forEach(<span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// app是根vue实例, 根vue实例</span></span><br><span class="line">        app._route = route</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在路由切换后, 会执行<code>history.listen</code>注册的回调, 如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/history/base.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">History</span> </span>&#123;</span><br><span class="line">  listen (cb: <span class="built_in">Function</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.cb = cb</span><br><span class="line">  &#125;</span><br><span class="line">  updateRoute (route: Route) &#123;</span><br><span class="line">    <span class="keyword">const</span> prev = <span class="keyword">this</span>.current</span><br><span class="line">    <span class="keyword">this</span>.current = route</span><br><span class="line">    <span class="keyword">this</span>.cb &amp;&amp; <span class="keyword">this</span>.cb(route)</span><br><span class="line">    <span class="keyword">this</span>.router.afterHooks.forEach(<span class="function"><span class="params">hook</span> =&gt;</span> &#123;</span><br><span class="line">      hook &amp;&amp; hook(route, prev)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时会将<code>app._route</code>赋值为<code>route</code>, 又因为在组件<code>beforeCreate</code>的过程中(<code>install</code>方法中), 会执行<code>Vue.util.defineReactive(this, &#39;_route&#39;, this._router.history.current)</code>, 所以其实给<code>_route</code>赋值触发的是<code>_route</code>属性的<code>getter</code>, 会触发<code>route</code>依赖的对应<code>routerView</code>组件的<code>render Watcer</code>的更新, 从而触发<code>render</code>函数, 从新渲染对应组件.</p><p>至此, 我们分析了<code>RouterView</code>根据路径切换渲染对应组件的过程.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上节分析了路径切换的过程, URL切换后, 还是要触发对应的组件渲染过程, 本节来分析组件渲染的过程.&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue-router 源码解读 05 - URL切换</title>
    <link href="http://yoursite.com/2019/09/30/vue-source-23/"/>
    <id>http://yoursite.com/2019/09/30/vue-source-23/</id>
    <published>2019-09-30T15:15:24.000Z</published>
    <updated>2019-12-19T09:26:37.935Z</updated>
    
    <content type="html"><![CDATA[<p>上节分析了路由守卫的集中调度管理, 这节分析下在执行了<code>push</code>或<code>replace</code>方法之后, URL变化的过程.</p><h3 id="监听路由变化"><a href="#监听路由变化" class="headerlink" title="监听路由变化"></a>监听路由变化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/index.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VueRouter</span> </span>&#123;</span><br><span class="line">  push (location: RawLocation, onComplete?: <span class="built_in">Function</span>, onAbort?: <span class="built_in">Function</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.history.push(location, onComplete, onAbort)</span><br><span class="line">  &#125;</span><br><span class="line">  replace (location: RawLocation, onComplete?: <span class="built_in">Function</span>, onAbort?: <span class="built_in">Function</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.history.replace(location, onComplete, onAbort)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户调用的路由方法, 最后会调用<code>history</code>上的路由方法, 以<code>push</code>方法举例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashHistory</span> <span class="keyword">extends</span> <span class="title">History</span> </span>&#123;</span><br><span class="line">  setupListeners () &#123;</span><br><span class="line">    <span class="keyword">const</span> router = <span class="keyword">this</span>.router</span><br><span class="line">    <span class="keyword">const</span> expectScroll = router.options.scrollBehavior</span><br><span class="line">    <span class="keyword">const</span> supportsScroll = supportsPushState &amp;&amp; expectScroll</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (supportsScroll) &#123;</span><br><span class="line">      setupScroll()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听对应的路由切换方法</span></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(supportsPushState ? <span class="string">'popstate'</span> : <span class="string">'hashchange'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> current = <span class="keyword">this</span>.current</span><br><span class="line">      <span class="keyword">if</span> (!ensureSlash()) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 拿到新的hash再调一次transitionTo, 所以点回退按钮会再一次路径切换</span></span><br><span class="line">      <span class="keyword">this</span>.transitionTo(getHash(), route =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (supportsScroll) &#123;</span><br><span class="line">          handleScroll(<span class="keyword">this</span>.router, route, current, <span class="literal">true</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!supportsPushState) &#123;</span><br><span class="line">          replaceHash(route.fullPath)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  push (location: RawLocation, onComplete?: <span class="built_in">Function</span>, onAbort?: <span class="built_in">Function</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">current</span>: fromRoute &#125; = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">this</span>.transitionTo(location, <span class="comment">/* transitonTo调用的onComplete方法 */</span>route =&gt; &#123;</span><br><span class="line">      <span class="comment">// 改变url -&gt; pushHash</span></span><br><span class="line">      pushHash(route.fullPath)</span><br><span class="line">      <span class="comment">// 改变滚动条相关</span></span><br><span class="line">      handleScroll(<span class="keyword">this</span>.router, route, fromRoute, <span class="literal">false</span>)</span><br><span class="line">      onComplete &amp;&amp; onComplete(route)</span><br><span class="line">    &#125;, onAbort)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改变url</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pushHash</span> (<span class="params">path</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 是否使用htmlHistory</span></span><br><span class="line">  <span class="comment">// 如果模式使用HistoryApi</span></span><br><span class="line">  <span class="keyword">if</span> (supportsPushState) &#123;</span><br><span class="line">    pushState(getUrl(path))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果模式使用hash, 直接切换hash</span></span><br><span class="line">    <span class="built_in">window</span>.location.hash = path</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用path替换url中#号后的部分</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrl</span> (<span class="params">path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> href = <span class="built_in">window</span>.location.href</span><br><span class="line">  <span class="keyword">const</span> i = href.indexOf(<span class="string">'#'</span>)</span><br><span class="line">  <span class="keyword">const</span> base = i &gt;= <span class="number">0</span> ? href.slice(<span class="number">0</span>, i) : href</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;base&#125;</span>#<span class="subst">$&#123;path&#125;</span>`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>push</code>方法会先调用<code>transitionTo</code>方法, 之后会执行<code>pushHash</code>, 会判断使用<code>historyAPI</code>还是<code>hash</code>模式, 调用不同的改变url的方法, 先看<code>historyAPI</code>, 先用<code>getUrl</code>方法用参数替换掉<code>#</code>后面的内容, 再调用<code>pushState</code>方法.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/util/push-state.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">pushState</span> (<span class="params">url?: string, replace?: boolean</span>) </span>&#123;</span><br><span class="line">  saveScrollPosition()</span><br><span class="line">  <span class="comment">// try...catch the pushState call to get around Safari</span></span><br><span class="line">  <span class="comment">// DOM Exception 18 where it limits to 100 pushState calls</span></span><br><span class="line">  <span class="keyword">const</span> history = <span class="built_in">window</span>.history</span><br><span class="line">  <span class="comment">// 根据是否replace调用对应api -&gt; 监听浏览器导航按钮变化</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (replace) &#123;</span><br><span class="line">      history.replaceState(&#123; <span class="attr">key</span>: _key &#125;, <span class="string">''</span>, url)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      _key = genKey()</span><br><span class="line">      history.pushState(&#123; <span class="attr">key</span>: _key &#125;, <span class="string">''</span>, url)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">window</span>.location[replace ? <span class="string">'replace'</span> : <span class="string">'assign'</span>](url)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>pushState</code>方法调用对应的historyAPI改变URL. </p><h3 id="监听路由变化-1"><a href="#监听路由变化-1" class="headerlink" title="监听路由变化"></a>监听路由变化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VueRouter</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  init (app: any <span class="comment">/* Vue component instance */</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">const</span> history = <span class="keyword">this</span>.history</span><br><span class="line">    <span class="comment">// 针对不同模式做不同处理</span></span><br><span class="line">    <span class="keyword">if</span> (history <span class="keyword">instanceof</span> HTML5History) &#123;</span><br><span class="line">      history.transitionTo(history.getCurrentLocation())</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (history <span class="keyword">instanceof</span> HashHistory) &#123;</span><br><span class="line">      <span class="keyword">const</span> setupHashListener = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 为什么点后退可以回退, 在history初始化时执行了history.setupListeners -&gt; setupListeners</span></span><br><span class="line">        history.setupListeners()</span><br><span class="line">      &#125;</span><br><span class="line">      history.transitionTo(</span><br><span class="line">        history.getCurrentLocation(),</span><br><span class="line">        setupHashListener,</span><br><span class="line">        setupHashListener</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>VueRouter</code>初始化阶段, 会先执行一次<code>transtionTo</code>方法, <code>complete</code>的回调里会执行<code>setupListeners</code>, 该方法监听了<code>popState</code>和<code>hashChange</code>事件, 当浏览器后退前进按钮导致历史栈变化时, 响应函数被触发, 会再执行一次<code>transitionTo</code>方法重新计算新的<code>hash</code>, 并<code>replace</code>历史栈.</p><p>至此, 我们分析了<code>VueRouter</code>中URL切换的过程. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上节分析了路由守卫的集中调度管理, 这节分析下在执行了&lt;code&gt;push&lt;/code&gt;或&lt;code&gt;replace&lt;/code&gt;方法之后, URL变化的过程.&lt;/p&gt;
&lt;h3 id=&quot;监听路由变化&quot;&gt;&lt;a href=&quot;#监听路由变化&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue-router 源码解读 04 - 路由守卫管理</title>
    <link href="http://yoursite.com/2019/09/02/vue-source-22/"/>
    <id>http://yoursite.com/2019/09/02/vue-source-22/</id>
    <published>2019-09-02T13:44:34.000Z</published>
    <updated>2019-12-19T09:29:49.672Z</updated>
    
    <content type="html"><![CDATA[<p>在路由切换时, 会执行<code>history.transitionTo</code>方法. 来看看其实现:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/history/base.js</span></span><br><span class="line"><span class="comment">// location是push方法的第一个参数, router.push(&#123; name: 'user', params: &#123; userId: '123' &#125;&#125;)</span></span><br><span class="line">transitionTo (location: RawLocation, onComplete?: <span class="built_in">Function</span>, onAbort?: <span class="built_in">Function</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    RawLocation:</span></span><br><span class="line"><span class="comment">      String || Location = &#123;</span></span><br><span class="line"><span class="comment">        _normalized?: boolean;</span></span><br><span class="line"><span class="comment">        name?: string;</span></span><br><span class="line"><span class="comment">        path?: string;</span></span><br><span class="line"><span class="comment">        hash?: string;</span></span><br><span class="line"><span class="comment">        query?: Dictionary&lt;string&gt;;</span></span><br><span class="line"><span class="comment">        params?: Dictionary&lt;string&gt;;</span></span><br><span class="line"><span class="comment">        append?: boolean;</span></span><br><span class="line"><span class="comment">        replace?: boolean;</span></span><br><span class="line"><span class="comment">      &#125; </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="comment">// 调用match方法, 根据传入url的描述和当前路径计算真实路径</span></span><br><span class="line">  <span class="keyword">const</span> route = <span class="keyword">this</span>.router.match(location, <span class="keyword">this</span>.current)</span><br><span class="line">  <span class="comment">// 进行一次真实路径切换 -&gt; confirmTransition</span></span><br><span class="line">  <span class="keyword">this</span>.confirmTransition(route, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">this</span>.updateRoute(route)</span><br><span class="line">    onComplete &amp;&amp; onComplete(route)</span><br><span class="line">    <span class="keyword">this</span>.ensureURL()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fire ready cbs once</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.ready) &#123;</span><br><span class="line">      <span class="keyword">this</span>.ready = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">this</span>.readyCbs.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> &#123; cb(route) &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (onAbort) &#123;</span><br><span class="line">      onAbort(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (err &amp;&amp; !<span class="keyword">this</span>.ready) &#123;</span><br><span class="line">      <span class="keyword">this</span>.ready = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">this</span>.readyErrorCbs.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> &#123; cb(err) &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里首先会调用上节介绍的<code>match</code>方法, 对要跳转的<code>location</code>和当前<code>route</code>信息进行匹配, 返回一个新的匹配到的<code>route</code>对象, 这都是上节讲的内容.</p><p>然后回执行<code>this.confirmTransition</code>方法, 传入得到的<code>route</code>, 进行一系列导航守卫处理, 在这些处理完成后, 执行回调更新<code>url</code>, 并在对应的<code>router-view</code>中渲染匹配的<code>component</code>.</p><p>我们这节主要分析导航守卫的集中处理, 看下<code>confirmTransition</code>的实现:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/history/base.js</span></span><br><span class="line">confirmTransition (route: Route, <span class="attr">onComplete</span>: <span class="built_in">Function</span>, onAbort?: <span class="built_in">Function</span>) &#123;</span><br><span class="line">  <span class="comment">// 当前路径, 切换前的路径, route实例</span></span><br><span class="line">  <span class="keyword">const</span> current = <span class="keyword">this</span>.current</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 取消跳转方法</span></span><br><span class="line">  <span class="keyword">const</span> abort = <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isError(err)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.errorCbs.length) &#123;</span><br><span class="line">        <span class="keyword">this</span>.errorCbs.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> &#123; cb(err) &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        warn(<span class="literal">false</span>, <span class="string">'uncaught error during route navigation:'</span>)</span><br><span class="line">        <span class="built_in">console</span>.error(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    onAbort &amp;&amp; onAbort(err)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="comment">// 跳转路径和当前路径是不是同一个路径, abort()</span></span><br><span class="line">    isSameRoute(route, current) &amp;&amp;</span><br><span class="line">    <span class="comment">// in the case the route map has been dynamically appended to</span></span><br><span class="line">    route.matched.length === current.matched.length</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">this</span>.ensureURL()</span><br><span class="line">    <span class="keyword">return</span> abort()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// -&gt; matched: record ? formatMatch(record) : []</span></span><br><span class="line">  <span class="comment">// -&gt; resolveQueue方法</span></span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    updated,</span><br><span class="line">    deactivated,</span><br><span class="line">    activated</span><br><span class="line">  &#125; = resolveQueue(<span class="keyword">this</span>.current.matched, route.matched)</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  declare type NavigationGuard = (</span></span><br><span class="line"><span class="comment">    to: Route,</span></span><br><span class="line"><span class="comment">    from: Route,</span></span><br><span class="line"><span class="comment">    next: (to?: RawLocation | false | Function | void) =&gt; void</span></span><br><span class="line"><span class="comment">  ) =&gt; any</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 形成以navigationGuard为元素的一维数组, navigationGuard是导航守卫函数</span></span><br><span class="line">  <span class="keyword">const</span> queue: <span class="built_in">Array</span>&lt;?NavigationGuard&gt; = [].concat(</span><br><span class="line">    <span class="comment">// in-component leave guards</span></span><br><span class="line">    extractLeaveGuards(deactivated),</span><br><span class="line">    <span class="comment">// global before hooks</span></span><br><span class="line">    <span class="keyword">this</span>.router.beforeHooks,</span><br><span class="line">    <span class="comment">// in-component update hooks</span></span><br><span class="line">    extractUpdateHooks(updated),</span><br><span class="line">    <span class="comment">// in-config enter guards</span></span><br><span class="line">    activated.map(<span class="function"><span class="params">m</span> =&gt;</span> m.beforeEnter),</span><br><span class="line">    <span class="comment">// async components</span></span><br><span class="line">    resolveAsyncComponents(activated)</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.pending = route</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义迭代器函数, next是step(index + 1)</span></span><br><span class="line">  <span class="keyword">const</span> iterator = <span class="function">(<span class="params">hook: NavigationGuard, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.pending !== route) &#123;</span><br><span class="line">      <span class="keyword">return</span> abort()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 第三个参数是导航守卫中next的逻辑</span></span><br><span class="line">      hook(route, current, (to: any) =&gt; &#123;</span><br><span class="line">        <span class="comment">// 做一些判断, 异常的时候abort掉, 正常时调用next, 也就是step(index + 1), 执行下个导航守卫</span></span><br><span class="line">        <span class="keyword">if</span> (to === <span class="literal">false</span> || isError(to)) &#123;</span><br><span class="line">          <span class="comment">// next(false) -&gt; abort navigation, ensure current URL</span></span><br><span class="line">          <span class="keyword">this</span>.ensureURL(<span class="literal">true</span>)</span><br><span class="line">          abort(to)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">          <span class="keyword">typeof</span> to === <span class="string">'string'</span> ||</span><br><span class="line">          (<span class="keyword">typeof</span> to === <span class="string">'object'</span> &amp;&amp; (</span><br><span class="line">            <span class="keyword">typeof</span> to.path === <span class="string">'string'</span> ||</span><br><span class="line">            <span class="keyword">typeof</span> to.name === <span class="string">'string'</span></span><br><span class="line">          ))</span><br><span class="line">        ) &#123;</span><br><span class="line">          <span class="comment">// next('/') or next(&#123; path: '/' &#125;) -&gt; redirect</span></span><br><span class="line">          abort()</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> to === <span class="string">'object'</span> &amp;&amp; to.replace) &#123;</span><br><span class="line">            <span class="keyword">this</span>.replace(to)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.push(to)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// confirm transition and pass on the value</span></span><br><span class="line">          next(to)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      abort(e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行runQueue方法, 遍历navigatonGuard数组queue -&gt; runQueue</span></span><br><span class="line">  runQueue(queue, iterator, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> postEnterCbs = []</span><br><span class="line">    <span class="keyword">const</span> isValid = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.current === route</span><br><span class="line">    <span class="comment">// wait until async components are resolved before</span></span><br><span class="line">    <span class="comment">// extracting in-component enter guards</span></span><br><span class="line">    <span class="keyword">const</span> enterGuards = extractEnterGuards(activated, postEnterCbs, isValid)</span><br><span class="line">    <span class="keyword">const</span> queue = enterGuards.concat(<span class="keyword">this</span>.router.resolveHooks)</span><br><span class="line">    runQueue(queue, iterator, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.pending !== route) &#123;</span><br><span class="line">        <span class="keyword">return</span> abort()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.pending = <span class="literal">null</span></span><br><span class="line">      <span class="comment">// onComplete时结束全部导航守卫</span></span><br><span class="line">      onComplete(route)</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.router.app) &#123;</span><br><span class="line">        <span class="keyword">this</span>.router.app.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          postEnterCbs.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> &#123; cb() &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>confirmTransition</code>方法先定义异常取消跳转的处理<code>abort</code>方法(内部调用用户传入的<code>onAbort</code>方法), 如果是需要跳转的路径和当前路径是同一路径(<code>isSameRoute</code>), abort.</p><p>之后会执行<code>resolveQueue</code>逻辑, 得到由当前路径和需要跳转的路径计算得出的<code>updated, deactivated, activated</code>, 为了理解这里的逻辑, 需要回去看看生成<code>route</code>对象的逻辑</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/util/route.js</span></span><br><span class="line">createRoute() &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">const</span> route: Route = &#123;</span><br><span class="line">    name: location.name || (record &amp;&amp; record.name),</span><br><span class="line">    meta: (record &amp;&amp; record.meta) || &#123;&#125;,</span><br><span class="line">    path: location.path || <span class="string">'/'</span>,</span><br><span class="line">    hash: location.hash || <span class="string">''</span>,</span><br><span class="line">    query,</span><br><span class="line">    params: location.params || &#123;&#125;,</span><br><span class="line">    fullPath: getFullPath(location, stringifyQuery),</span><br><span class="line">    <span class="comment">// -&gt; formatMatch</span></span><br><span class="line">    matched: record ? formatMatch(record) : []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>route</code>对象会生成<code>matched</code>属性, 里面会执行<code>formatMatch(record)</code>逻辑</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/util/route.js</span></span><br><span class="line"><span class="comment">// 循环构建record以及其parentRecord的数组</span></span><br><span class="line"><span class="comment">// 数组中从第一个到最后一个是通向record这个匹配路由结果的record路径</span></span><br><span class="line"><span class="comment">// (record是pathList, pathMap, nameMap中匹配当前路径location匹配出的record)</span></span><br><span class="line"><span class="comment">// (record由当前路由用户传入的route对象location生成, 是对route的又描述)</span></span><br><span class="line"><span class="comment">// 例: a/b, a是b的parentRecord</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatMatch</span> (<span class="params">record: ?RouteRecord</span>): <span class="title">Array</span>&lt;<span class="title">RouteRecord</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = []</span><br><span class="line">  <span class="keyword">while</span> (record) &#123;</span><br><span class="line">    res.unshift(record)</span><br><span class="line">    record = record.parent</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>formatMatch</code>会循环构建record及其父record, 并把所有结果存入一个数组返回, 数组中从第一个到最后一个是通向record这个匹配路由结果的record路径, 举例: <code>/a/b</code>, <code>a</code>的<code>record</code>是<code>b</code>的<code>parentRecord</code>.</p><p>这里看下<code>resolveQueue</code>的逻辑:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据当前路径和跳转路径, 返回updated, activated, deactivated</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolveQueue</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  current: Array&lt;RouteRecord&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  next: Array&lt;RouteRecord&gt;</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): </span>&#123;</span><br><span class="line">  updated: <span class="built_in">Array</span>&lt;RouteRecord&gt;,</span><br><span class="line">  activated: <span class="built_in">Array</span>&lt;RouteRecord&gt;,</span><br><span class="line">  deactivated: <span class="built_in">Array</span>&lt;RouteRecord&gt;</span><br><span class="line">&#125; &#123;</span><br><span class="line">  <span class="keyword">let</span> i</span><br><span class="line">  <span class="keyword">const</span> max = <span class="built_in">Math</span>.max(current.length, next.length)</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; max; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (current[i] !== next[i]) &#123;</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    /a -&gt; /a/b, b是activated</span></span><br><span class="line"><span class="comment">    /a/b -&gt; /a/c, /c是activated /a是updated</span></span><br><span class="line"><span class="comment">    /a/b -&gt; /a, /b是deactivaed</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    updated: next.slice(<span class="number">0</span>, i),</span><br><span class="line">    activated: next.slice(i),</span><br><span class="line">    deactivated: current.slice(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>resolveQueue</code>根据当前<code>route</code>和要跳转的<code>route</code>, 返回<code>updated</code>, <code>activated</code>, <code>deactivated</code>数组,</p><p>举个例子来说明这三个数组:<br>  如果/a -&gt; /a/b, 则b是activated<br>  如果/a/b -&gt; /a/c, 则c是activated, a是updated<br>  如果/a/b -&gt; /a, 则b是deactivated</p><p>回到<code>confirmTransition</code>逻辑中, 接下来使用刚生成的<code>updated</code>, <code>activated</code>, <code>deactivated</code>三个数组, 组合了所有的路由守卫钩子返回, 每个钩子都是一个<code>NavigationGuard</code>对象.</p><p>之后定义一个<code>iterator</code>方法, 用于处理遍历时的逻辑(后详), 然后将<code>queue</code>和<code>iterator</code>方法传递给<code>runQuque</code>方法.</p><p>下面看看<code>runQueue</code>方法的实现:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/util/async.js</span></span><br><span class="line"><span class="comment">/* @flow */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">runQueue</span> (<span class="params">queue: Array&lt;?NavigationGuard&gt;, fn: Function, cb: Function</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 经典尾调用模式, fn是iterator方法</span></span><br><span class="line">  <span class="keyword">const</span> step = <span class="function"><span class="params">index</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= queue.length) &#123;</span><br><span class="line">      cb()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (queue[index]) &#123;</span><br><span class="line">        fn(queue[index], () =&gt; &#123;</span><br><span class="line">          step(index + <span class="number">1</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        step(index + <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  step(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>runQueue</code>方法是一个经典的尾递归调用方式, 在每一个异步方法执行完后, 调用<code>step(index+1)</code>, 这里执行异步方法用的<code>fn</code>就是<code>iterator</code>方法, 我们继续分析下<code>iterator</code>方法.</p><p><code>iterator</code>方法将路由守卫方法注入<code>route</code>, <code>currentRoute</code>和<code>callback</code>执行, 其中<code>callback</code>是主要逻辑, 做一些判断, 异常的时候<code>abort</code>, 正常执行完调用<code>next</code>方法, 也就是<code>runQueue</code>中的<code>step(index+1)</code>从而顺序执行下个路由守卫.</p><p>回到<code>confirmTransition</code>逻辑中调用<code>runQueue</code>的地方, 在<code>queue</code>中所有路由守卫被执行完毕后, 会执行传入的字面量函数, 在<code>runQueue</code>作为<code>cb</code>执行, 其中调用用户传入的<code>onComplete</code>. 这个<code>onComplete</code>实际上就是调用<code>this.confirmTransition</code>时的第二个参数对应的字面量方法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/history/base.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">History</span> </span>&#123;</span><br><span class="line">  transitionTo() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">this</span>.confirmTransition(route, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.updateRoute(route)</span><br><span class="line">      onComplete &amp;&amp; onComplete(route)</span><br><span class="line">      <span class="keyword">this</span>.ensureURL()</span><br><span class="line"></span><br><span class="line">      <span class="comment">// fire ready cbs once</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.ready) &#123;</span><br><span class="line">        <span class="keyword">this</span>.ready = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">this</span>.readyCbs.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> &#123; cb(route) &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, err =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (onAbort) &#123;</span><br><span class="line">        onAbort(err)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (err &amp;&amp; !<span class="keyword">this</span>.ready) &#123;</span><br><span class="line">        <span class="keyword">this</span>.ready = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">this</span>.readyErrorCbs.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> &#123; cb(err) &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  listen (cb: <span class="built_in">Function</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.cb = cb</span><br><span class="line">  &#125;</span><br><span class="line">  updateRoute (route: Route) &#123;</span><br><span class="line">    <span class="keyword">const</span> prev = <span class="keyword">this</span>.current</span><br><span class="line">    <span class="keyword">this</span>.current = route</span><br><span class="line">    <span class="keyword">this</span>.cb &amp;&amp; <span class="keyword">this</span>.cb(route)</span><br><span class="line">    <span class="keyword">this</span>.router.afterHooks.forEach(<span class="function"><span class="params">hook</span> =&gt;</span> &#123;</span><br><span class="line">      hook &amp;&amp; hook(route, prev)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个匿名函数调用<code>updateRoute</code>方法, <code>updateRoute</code>会调用<code>this.cb</code>, <code>this.cb</code>是<code>history.listen</code>方法注册的, 来看看<code>history.listen</code>的调用:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/install.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">install</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 保证installed方法只执行一次</span></span><br><span class="line">  <span class="keyword">if</span> (install.installed &amp;&amp; _Vue === Vue) <span class="keyword">return</span></span><br><span class="line">  install.installed = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  _Vue = Vue</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> isDef = <span class="function"><span class="params">v</span> =&gt;</span> v !== <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> registerInstance = <span class="function">(<span class="params">vm, callVal</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> i = vm.$options._parentVnode</span><br><span class="line">    <span class="keyword">if</span> (isDef(i) &amp;&amp; isDef(i = i.data) &amp;&amp; isDef(i = i.registerRouteInstance)) &#123;</span><br><span class="line">      i(vm, callVal)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用全局Vue.mixin让给每个组件都添加beforeCreate和destroyed的部分逻辑</span></span><br><span class="line">  Vue.mixin(&#123;</span><br><span class="line">    beforeCreate () &#123;</span><br><span class="line">      <span class="comment">// 根Vue实例的options上用户才会定义router配置对象</span></span><br><span class="line">      <span class="keyword">if</span> (isDef(<span class="keyword">this</span>.$options.router)) &#123;</span><br><span class="line">        <span class="comment">// 将当前vue实例赋值给this._routerRoot</span></span><br><span class="line">        <span class="keyword">this</span>._routerRoot = <span class="keyword">this</span></span><br><span class="line">        <span class="keyword">this</span>._router = <span class="keyword">this</span>.$options.router</span><br><span class="line">        <span class="comment">// 执行init方法</span></span><br><span class="line">        <span class="keyword">this</span>._router.init(<span class="keyword">this</span>)</span><br><span class="line">        <span class="comment">// 将_route对象定义为响应式的</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对根vm实例的_route属性进行响应式监听, 依赖收集渲染watcher(router-view), 在setter发生时重新出发渲染watcher(router-view)的render函数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// setter -&gt; history.listen</span></span><br><span class="line">        Vue.util.defineReactive(<span class="keyword">this</span>, <span class="string">'_route'</span>, <span class="keyword">this</span>._router.history.current)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 让每一个组件初始化时就将_routerRoot赋值为根vue实例</span></span><br><span class="line">        <span class="keyword">this</span>._routerRoot = (<span class="keyword">this</span>.$parent &amp;&amp; <span class="keyword">this</span>.$parent._routerRoot) || <span class="keyword">this</span></span><br><span class="line">      &#125;</span><br><span class="line">      registerInstance(<span class="keyword">this</span>, <span class="keyword">this</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    destroyed () &#123;</span><br><span class="line">      registerInstance(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/index.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VueRouter</span> </span>&#123;</span><br><span class="line">  init() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 注册history.listen的回调</span></span><br><span class="line">    <span class="comment">// 在路由发生变化时对根实例的_route进行改变从而出发_route的响应式setter</span></span><br><span class="line">    <span class="comment">// 再触发对应渲染watcher(router-view)的render方法的更新</span></span><br><span class="line">    history.listen(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.apps.forEach(<span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// app是根vue实例, 根vue实例</span></span><br><span class="line">        app._route = route</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在每个组件<code>beforeCreate</code>时会执行<code>init</code>方法, <code>init</code>方法内部会调用<code>history.listen</code>, 注册<code>history.cb</code>, 在<code>transitionTo</code>后, 会调用<code>updateRoute</code>方法, 之中调用注册的<code>cb</code>, 执行<code>app._route = route</code>.</p><p>在组件<code>beforeCreate</code>的过程中(<code>install</code>方法中), 会执行<code>Vue.util.defineReactive(this, &#39;_route&#39;, this._router.history.current)</code>, 所以其实给<code>_route</code>赋值触发的是<code>_route</code>属性的<code>getter</code>, 会触发<code>route</code>依赖的对应<code>routerView</code>组件的<code>render Watcer</code>的更新, 从而触发<code>render</code>函数, 从新渲染对应组件.</p><p>至此, 我们详细分析了<code>Vue-Router</code>中路由守卫的触发和管理, 并提前分析了路由切换引起视图更新的相关过程. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在路由切换时, 会执行&lt;code&gt;history.transitionTo&lt;/code&gt;方法. 来看看其实现:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue源码解读 03 - vm._render, vnode</title>
    <link href="http://yoursite.com/2019/08/30/vue-source-03/"/>
    <id>http://yoursite.com/2019/08/30/vue-source-03/</id>
    <published>2019-08-30T13:10:11.000Z</published>
    <updated>2019-12-19T09:07:21.313Z</updated>
    
    <content type="html"><![CDATA[<p>继续上节的内容, 先来剖析<code>vm._render</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/render.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// renderMixin在Vue初始化过程中被执行</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">renderMixin</span> (<span class="params">Vue: Class&lt;Component&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// install runtime convenience helpers</span></span><br><span class="line">  installRenderHelpers(Vue.prototype)</span><br><span class="line"></span><br><span class="line">  Vue.prototype.$nextTick = <span class="function"><span class="keyword">function</span> (<span class="params">fn: Function</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nextTick(fn, <span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// vm._render方法定义</span></span><br><span class="line">  Vue.prototype._render = <span class="function"><span class="keyword">function</span> (<span class="params"></span>): <span class="title">VNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> vm: Component = <span class="keyword">this</span></span><br><span class="line">    <span class="comment">// 从$options上拿到render函数</span></span><br><span class="line">    <span class="keyword">const</span> &#123; render, _parentVnode &#125; = vm.$options</span><br><span class="line"></span><br><span class="line">    <span class="comment">// reset _rendered flag on slots for duplicate slot check</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> vm.$slots) &#123;</span><br><span class="line">        <span class="comment">// $flow-disable-line</span></span><br><span class="line">        vm.$slots[key]._rendered = <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_parentVnode) &#123;</span><br><span class="line">      vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set parent vnode. this allows render functions to have access</span></span><br><span class="line">    <span class="comment">// to the data on the placeholder node.</span></span><br><span class="line">    vm.$vnode = _parentVnode</span><br><span class="line">    <span class="comment">// render self</span></span><br><span class="line">    <span class="keyword">let</span> vnode</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// render方法产生vnode并返回, 调用vm.$createElement方法</span></span><br><span class="line">      <span class="comment">// vm._renderProxy在生产环境就是vm, 在开发环境是个proxy代理对象, 不需过多关注, 可以理解直接点, vm._renderProxy就是vue实例vm本身</span></span><br><span class="line">      <span class="comment">// render.call的返回值就是$createElement的返回值, 就是createElement的返回值, 就是_createElement的返回值</span></span><br><span class="line">      vnode = render.call(vm._renderProxy, vm.$createElement)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="comment">// 如果vNode没有正确返回, 给用户一个处理错误的接口</span></span><br><span class="line">      handleError(e, vm, <span class="string">`render`</span>)</span><br><span class="line">      <span class="comment">// return error render result,</span></span><br><span class="line">      <span class="comment">// or previous vnode to prevent render error causing blank component</span></span><br><span class="line">      <span class="comment">/* istanbul ignore else */</span></span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (vm.$options.renderError) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            handleError(e, vm, <span class="string">`renderError`</span>)</span><br><span class="line">            vnode = vm._vnode</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          vnode = vm._vnode</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        vnode = vm._vnode</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// return empty vnode in case the render function errored out</span></span><br><span class="line">    <span class="keyword">if</span> (!(vnode <span class="keyword">instanceof</span> VNode)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; <span class="built_in">Array</span>.isArray(vnode)) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          <span class="string">'Multiple root nodes returned from render function. Render function '</span> +</span><br><span class="line">          <span class="string">'should return a single root node.'</span>,</span><br><span class="line">          vm</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">      vnode = createEmptyVNode()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// set parent</span></span><br><span class="line">    vnode.parent = _parentVnode</span><br><span class="line">    <span class="comment">// 返回vnode</span></span><br><span class="line">    <span class="keyword">return</span> vnode</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义<code>vm._render</code>方法的外层方法<code>renderMixin</code>是在之前讲解的<code>new Vue</code>初始化过程中被执行的, 我们关注下面几个步骤</p><ol><li>先从<code>vm.$options</code>上获取<code>render</code>方法</li><li>执行<code>let vnode = render.call(vm._renderProxy, vm.$createElement)</code>, 其中<code>vm._renderProxy</code>做了一些实例属性代理检测, 可以简单理解为就是<code>vm</code>, 这里可以看到, <code>render</code>方法返回生成的<code>vnode</code></li><li>如果在2的过程中, <code>vnode</code>没有正确生成, 给用户一个处理错误的接口<code>handleError</code></li><li>如果返回的<code>vnode</code>是一个数组, 证明<code>render</code>函数锁表示的结构没有一个根节点包裹, 抛错</li><li>返回<code>vnode</code></li></ol><p>可以看到, 我们未知的只有<code>vm.$createElement</code>方法</p><h3 id="vm-c-vm-createElement"><a href="#vm-c-vm-createElement" class="headerlink" title="vm._c, vm.$createElement"></a>vm._c, vm.$createElement</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/render.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// initRender在Vue初始化过程中被执行</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initRender</span> (<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  vm._vnode = <span class="literal">null</span> <span class="comment">// the root of the child tree</span></span><br><span class="line">  vm._staticTrees = <span class="literal">null</span> <span class="comment">// v-once cached trees</span></span><br><span class="line">  <span class="keyword">const</span> options = vm.$options</span><br><span class="line">  <span class="keyword">const</span> parentVnode = vm.$vnode = options._parentVnode <span class="comment">// the placeholder node in parent tree</span></span><br><span class="line">  <span class="keyword">const</span> renderContext = parentVnode &amp;&amp; parentVnode.context</span><br><span class="line">  vm.$slots = resolveSlots(options._renderChildren, renderContext)</span><br><span class="line">  vm.$scopedSlots = emptyObject</span><br><span class="line">  <span class="comment">// bind the createElement fn to this instance</span></span><br><span class="line">  <span class="comment">// so that we get proper render context inside it.</span></span><br><span class="line">  <span class="comment">// args order: tag, data, children, normalizationType, alwaysNormalize</span></span><br><span class="line">  <span class="comment">// internal version is used by render functions compiled from templates</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// vm.$createElement 和 vm._c方法的定义, 内部都调用createElement方法, 只是最后一个参数传的布尔值不同.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// vm._c方法: 被编译生成的render函数所使用的方法, 返回vnode</span></span><br><span class="line">  vm._c = <span class="function">(<span class="params">a, b, c, d</span>) =&gt;</span> createElement(vm, a, b, c, d, <span class="literal">false</span>)</span><br><span class="line">  <span class="comment">// normalization is always applied for the public version, used in</span></span><br><span class="line">  <span class="comment">// user-written render functions.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// vm.$createElement方法: 用来给手写的render函数创建vnode的方法, 返回vnode</span></span><br><span class="line">  vm.$createElement = <span class="function">(<span class="params">a, b, c, d</span>) =&gt;</span> createElement(vm, a, b, c, d, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// $attrs &amp; $listeners are exposed for easier HOC creation.</span></span><br><span class="line">  <span class="comment">// they need to be reactive so that HOCs using them are always updated</span></span><br><span class="line">  <span class="keyword">const</span> parentData = parentVnode &amp;&amp; parentVnode.data</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* istanbul ignore else */</span></span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    defineReactive(vm, <span class="string">'$attrs'</span>, parentData &amp;&amp; parentData.attrs || emptyObject, () =&gt; &#123;</span><br><span class="line">      !isUpdatingChildComponent &amp;&amp; warn(<span class="string">`$attrs is readonly.`</span>, vm)</span><br><span class="line">    &#125;, <span class="literal">true</span>)</span><br><span class="line">    defineReactive(vm, <span class="string">'$listeners'</span>, options._parentListeners || emptyObject, () =&gt; &#123;</span><br><span class="line">      !isUpdatingChildComponent &amp;&amp; warn(<span class="string">`$listeners is readonly.`</span>, vm)</span><br><span class="line">    &#125;, <span class="literal">true</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    defineReactive(vm, <span class="string">'$attrs'</span>, parentData &amp;&amp; parentData.attrs || emptyObject, <span class="literal">null</span>, <span class="literal">true</span>)</span><br><span class="line">    defineReactive(vm, <span class="string">'$listeners'</span>, options._parentListeners || emptyObject, <span class="literal">null</span>, <span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>vm._c</code>和<code>vm.$createElement</code>方法是在<code>initRender</code>方法中定义的, 该方法在<code>new Vue</code>的过程中被执行.</p><p>这两个方法内部都调用了<code>createElement</code>方法, 只是参数传入的最后一个布尔值不同. 它们都用来创建和返回<code>vnode</code></p><p>从功能上区分, 被<code>vue-loader</code>编译的<code>render</code>函数会使用<code>_c</code>方法, 而用户定义的<code>render</code>函数会使用<code>$createElement</code>方法.</p><h3 id="vnode-virtual-dom"><a href="#vnode-virtual-dom" class="headerlink" title="vnode, virtual-dom"></a>vnode, virtual-dom</h3><p>先简单说一下, <code>vnode</code>和虚拟dom的概念.</p><p>真实<code>dom</code>对象的属性众多, 操作真实<code>dom</code>的代价是十分昂贵的, 虚拟dom可以用较少的属性来描述dom结构, 比如:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"haha"</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>haha<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  hehe</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>描述成虚拟dom后, 可以是这样的一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vnode = &#123;</span><br><span class="line">  tagName: <span class="string">'div'</span>,</span><br><span class="line">  attrs: &#123;</span><br><span class="line">    id: <span class="string">"haha"</span>,</span><br><span class="line">    className: <span class="string">"test"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// children数组的每一项也是一个vnode对象</span></span><br><span class="line">  children: [</span><br><span class="line">    &#123;</span><br><span class="line">      tagName: <span class="string">'span'</span>,</span><br><span class="line">      text: <span class="string">'haha'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      tagName: <span class="string">'#text'</span>,</span><br><span class="line">      text: <span class="string">'hehe'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>vnode</code>是<code>Vue</code>对于<code>virtual-dom</code>的实现, 下面是其类定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/vdom/vnode.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">VNode</span> </span>&#123;</span><br><span class="line">  tag: string | <span class="keyword">void</span>;</span><br><span class="line">  data: VNodeData | <span class="keyword">void</span>;</span><br><span class="line">  children: ?<span class="built_in">Array</span>&lt;VNode&gt;;</span><br><span class="line">  text: string | <span class="keyword">void</span>;</span><br><span class="line">  elm: Node | <span class="keyword">void</span>;</span><br><span class="line">  ns: string | <span class="keyword">void</span>;</span><br><span class="line">  context: Component | <span class="keyword">void</span>; <span class="comment">// rendered in this component's scope</span></span><br><span class="line">  key: string | number | <span class="keyword">void</span>;</span><br><span class="line">  componentOptions: VNodeComponentOptions | <span class="keyword">void</span>;</span><br><span class="line">  componentInstance: Component | <span class="keyword">void</span>; <span class="comment">// component instance</span></span><br><span class="line">  parent: VNode | <span class="keyword">void</span>; <span class="comment">// component placeholder node</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// strictly internal</span></span><br><span class="line">  raw: boolean; <span class="comment">// contains raw HTML? (server only)</span></span><br><span class="line">  isStatic: boolean; <span class="comment">// hoisted static node</span></span><br><span class="line">  isRootInsert: boolean; <span class="comment">// necessary for enter transition check</span></span><br><span class="line">  isComment: boolean; <span class="comment">// empty comment placeholder?</span></span><br><span class="line">  isCloned: boolean; <span class="comment">// is a cloned node?</span></span><br><span class="line">  isOnce: boolean; <span class="comment">// is a v-once node?</span></span><br><span class="line">  asyncFactory: <span class="built_in">Function</span> | <span class="keyword">void</span>; <span class="comment">// async component factory function</span></span><br><span class="line">  asyncMeta: <span class="built_in">Object</span> | <span class="keyword">void</span>;</span><br><span class="line">  isAsyncPlaceholder: boolean;</span><br><span class="line">  ssrContext: <span class="built_in">Object</span> | <span class="keyword">void</span>;</span><br><span class="line">  fnContext: Component | <span class="keyword">void</span>; <span class="comment">// real context vm for functional nodes</span></span><br><span class="line">  fnOptions: ?ComponentOptions; <span class="comment">// for SSR caching</span></span><br><span class="line">  fnScopeId: ?string; <span class="comment">// functional scope id support</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span> (</span><br><span class="line">    tag?: string,</span><br><span class="line">    data?: VNodeData,</span><br><span class="line">    children?: ?Array&lt;VNode&gt;,</span><br><span class="line">    text?: string,</span><br><span class="line">    elm?: Node,</span><br><span class="line">    context?: Component,</span><br><span class="line">    componentOptions?: VNodeComponentOptions,</span><br><span class="line">    asyncFactory?: Function</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">this</span>.tag = tag</span><br><span class="line">    <span class="keyword">this</span>.data = data</span><br><span class="line">    <span class="keyword">this</span>.children = children</span><br><span class="line">    <span class="keyword">this</span>.text = text</span><br><span class="line">    <span class="keyword">this</span>.elm = elm</span><br><span class="line">    <span class="keyword">this</span>.ns = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.context = context</span><br><span class="line">    <span class="keyword">this</span>.fnContext = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.fnOptions = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.fnScopeId = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.key = data &amp;&amp; data.key</span><br><span class="line">    <span class="keyword">this</span>.componentOptions = componentOptions</span><br><span class="line">    <span class="keyword">this</span>.componentInstance = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.parent = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.raw = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.isStatic = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.isRootInsert = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">this</span>.isComment = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.isCloned = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.isOnce = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.asyncFactory = asyncFactory</span><br><span class="line">    <span class="keyword">this</span>.asyncMeta = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.isAsyncPlaceholder = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此, 我们应该继续向后分析<code>vm.$createElement</code>方法的实现, 看看<code>vnode</code>是怎么生成和返回的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;继续上节的内容, 先来剖析&lt;code&gt;vm._render&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue-router 源码解读 03 - 路由匹配函数match</title>
    <link href="http://yoursite.com/2019/08/27/vue-source-21/"/>
    <id>http://yoursite.com/2019/08/27/vue-source-21/</id>
    <published>2019-08-27T06:00:12.000Z</published>
    <updated>2019-12-19T09:29:08.763Z</updated>
    
    <content type="html"><![CDATA[<p>上节分析了<code>new VueRouter</code>过程中, 所有路由的注册和初始化过程. 这节来分析在一个新的<code>url</code>被输入时, 路由的匹配过程.</p><h3 id="match方法"><a href="#match方法" class="headerlink" title="match方法"></a>match方法</h3><p>上节提到的<code>createMatcher</code>的返回值里面有一个属性是<code>match</code>, 对应路由匹配的函数, 我们来看下它的实现.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/create-matcher.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据传入路径匹配对应的vue组件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">location是对当前浏览器url的描述</span></span><br><span class="line"><span class="comment">Location: string | Location = &#123;s</span></span><br><span class="line"><span class="comment">  _normalized?: boolean;</span></span><br><span class="line"><span class="comment">  name?: string;</span></span><br><span class="line"><span class="comment">  path?: string;</span></span><br><span class="line"><span class="comment">  hash?: string;</span></span><br><span class="line"><span class="comment">  query?: Dictionary&lt;string&gt;;</span></span><br><span class="line"><span class="comment">  params?: Dictionary&lt;string&gt;;</span></span><br><span class="line"><span class="comment">  append?: boolean;</span></span><br><span class="line"><span class="comment">  replace?: boolean;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// location是push方法的第一个参数, router.push(&#123; name: 'user', params: &#123; userId: '123' &#125;&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">match</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  raw: RawLocation,</span></span></span><br><span class="line"><span class="function"><span class="params">  currentRoute?: Route,</span></span></span><br><span class="line"><span class="function"><span class="params">  redirectedFrom?: Location</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Route</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 根据当前浏览器url传入的路径, 返回一个描述该路径的对象location</span></span><br><span class="line">  <span class="keyword">const</span> location = normalizeLocation(raw, currentRoute, <span class="literal">false</span>, router)</span><br><span class="line">  <span class="keyword">const</span> &#123; name &#125; = location</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果normalizeLocation的结果有name属性</span></span><br><span class="line">  <span class="keyword">if</span> (name) &#123;</span><br><span class="line">    <span class="comment">// record代表从nameMap中匹配location的name属性匹配到的 RouteRecord</span></span><br><span class="line">    <span class="keyword">const</span> record = nameMap[name]</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      warn(record, <span class="string">`Route with name '<span class="subst">$&#123;name&#125;</span>' does not exist`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 有name没有record, 调用_createRoute(null, location)</span></span><br><span class="line">    <span class="keyword">if</span> (!record) <span class="keyword">return</span> _createRoute(<span class="literal">null</span>, location)</span><br><span class="line">    <span class="keyword">const</span> paramNames = record.regex.keys</span><br><span class="line">      .filter(<span class="function"><span class="params">key</span> =&gt;</span> !key.optional)</span><br><span class="line">      .map(<span class="function"><span class="params">key</span> =&gt;</span> key.name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> location.params !== <span class="string">'object'</span>) &#123;</span><br><span class="line">      location.params = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currentRoute &amp;&amp; <span class="keyword">typeof</span> currentRoute.params === <span class="string">'object'</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> currentRoute.params) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(key <span class="keyword">in</span> location.params) &amp;&amp; paramNames.indexOf(key) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">          location.params[key] = currentRoute.params[key]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (record) &#123;</span><br><span class="line">      location.path = fillParams(record.path, location.params, <span class="string">`named route "<span class="subst">$&#123;name&#125;</span>"`</span>)</span><br><span class="line">      <span class="comment">// 执行_createRoute</span></span><br><span class="line">      <span class="keyword">return</span> _createRoute(record, location, redirectedFrom)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="comment">// 如果没有name属性</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (location.path) &#123;</span><br><span class="line">    location.params = &#123;&#125;</span><br><span class="line">    <span class="comment">// 从pathList数组中和pathMap数组中匹配location的路径, 并调用_createRoute</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; pathList.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> path = pathList[i]</span><br><span class="line">      <span class="comment">// record代表从pathMap中匹配location的name属性匹配到的RouteRecord</span></span><br><span class="line">      <span class="keyword">const</span> record = pathMap[path]</span><br><span class="line">      <span class="keyword">if</span> (matchRoute(record.regex, location.path, location.params)) &#123;</span><br><span class="line">        <span class="keyword">return</span> _createRoute(record, location, redirectedFrom)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// no match</span></span><br><span class="line">  <span class="comment">// 如果无匹配 调用_createRoute(null, location) -&gt; _createRoute</span></span><br><span class="line">  <span class="comment">// createRoute方法是通过当前浏览器url(location),和当前location匹配到的routeRecord, 去生成$route对象</span></span><br><span class="line">  <span class="comment">// 如果record是null, 其实是匹配不到任何vue组件的</span></span><br><span class="line">  <span class="keyword">return</span> _createRoute(<span class="literal">null</span>, location)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>raw</code>这个参数是<code>RouteLocation</code>类型, 代表对路由url的描述, 或一个路径字符串. 然后会执行<code>normalizeLocation</code>逻辑:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/util/location.js</span></span><br><span class="line"><span class="comment">// 根据当前浏览器url传入的路径, 返回一个描述该路径的对象location</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">normalizeLocation</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  raw: RawLocation,</span></span></span><br><span class="line"><span class="function"><span class="params">  current: ?Route,</span></span></span><br><span class="line"><span class="function"><span class="params">  append: ?boolean,</span></span></span><br><span class="line"><span class="function"><span class="params">  router: ?VueRouter</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Location</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 构造承载rawLocation的next对象</span></span><br><span class="line">  <span class="keyword">let</span> next: Location = <span class="keyword">typeof</span> raw === <span class="string">'string'</span> ? &#123; <span class="attr">path</span>: raw &#125; : raw</span><br><span class="line">  <span class="comment">// named target</span></span><br><span class="line">  <span class="comment">// 如果next有name属性或者已经被normalize过了, 直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (next.name || next._normalized) &#123;</span><br><span class="line">    <span class="keyword">return</span> next</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// relative params</span></span><br><span class="line">  <span class="comment">// 参数处理</span></span><br><span class="line">  <span class="keyword">if</span> (!next.path &amp;&amp; next.params &amp;&amp; current) &#123;</span><br><span class="line">    next = assign(&#123;&#125;, next)</span><br><span class="line">    next._normalized = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">const</span> params: any = assign(assign(&#123;&#125;, current.params), next.params)</span><br><span class="line">    <span class="keyword">if</span> (current.name) &#123;</span><br><span class="line">      next.name = current.name</span><br><span class="line">      next.params = params</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (current.matched.length) &#123;</span><br><span class="line">      <span class="keyword">const</span> rawPath = current.matched[current.matched.length - <span class="number">1</span>].path</span><br><span class="line">      next.path = fillParams(rawPath, params, <span class="string">`path <span class="subst">$&#123;current.path&#125;</span>`</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      warn(<span class="literal">false</span>, <span class="string">`relative params navigation requires a current route.`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> next</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据原始path解析出path, hash, query的对象</span></span><br><span class="line">  <span class="keyword">const</span> parsedPath = parsePath(next.path || <span class="string">''</span>)</span><br><span class="line">  <span class="keyword">const</span> basePath = (current &amp;&amp; current.path) || <span class="string">'/'</span></span><br><span class="line">  <span class="comment">// resolvePath方法, 根据当前path和next.path计算出的ParsedPath计算出path</span></span><br><span class="line">  <span class="keyword">const</span> path = parsedPath.path</span><br><span class="line">    ? resolvePath(parsedPath.path, basePath, append || next.append)</span><br><span class="line">    : basePath</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计算query对象</span></span><br><span class="line">  <span class="keyword">const</span> query = resolveQuery(</span><br><span class="line">    parsedPath.query,</span><br><span class="line">    next.query,</span><br><span class="line">    router &amp;&amp; router.options.parseQuery</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计算出hash</span></span><br><span class="line">  <span class="keyword">let</span> hash = next.hash || parsedPath.hash</span><br><span class="line">  <span class="keyword">if</span> (hash &amp;&amp; hash.charAt(<span class="number">0</span>) !== <span class="string">'#'</span>) &#123;</span><br><span class="line">    hash = <span class="string">`#<span class="subst">$&#123;hash&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    _normalized: <span class="literal">true</span>,</span><br><span class="line">    path,</span><br><span class="line">    query,</span><br><span class="line">    hash</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>normalizeLocation</code>的逻辑接收需要导航的路由和当前路由, 如果需要导航的路由有<code>name</code>属性或已经计算算过了, 直接re返回, 否则计算出一个 <code>{ _normalized: true, path, query, hash }</code>的<code>location</code>对象返回</p><p>回到<code>match</code>逻辑, 如果<code>location.name</code>存在, 直接去<code>nameMap</code>中找到对应的<code>RouteRecord</code>, 并调用<code>_createRoute(record, location, redirectedFrom)</code>, 如果没找到则调用<code>_createRoute(null, location)</code>.</p><p>如果<code>location</code>没有<code>name</code>属性, 则用<code>location.path</code>去<code>pathList</code>和<code>pathMap</code>找对应<code>RouteRecord</code>, 并调用<code>_createRoute(record, location, redirectedFrom)</code></p><p>如果都没找到对应<code>RouteRecord</code>, 调用<code>_createRoute(null, location)</code></p><p>最终逻辑都指向了<code>_createRoute</code>, 但其实<code>_createRoute</code>内部调用了<code>createRoute</code>方法, 我们继续分析该方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/create-matcher.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_createRoute</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  record: ?RouteRecord,</span></span></span><br><span class="line"><span class="function"><span class="params">  location: Location,</span></span></span><br><span class="line"><span class="function"><span class="params">  redirectedFrom?: Location</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Route</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (record &amp;&amp; record.redirect) &#123;</span><br><span class="line">    <span class="keyword">return</span> redirect(record, redirectedFrom || location)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (record &amp;&amp; record.matchAs) &#123;</span><br><span class="line">    <span class="keyword">return</span> alias(record, location, record.matchAs)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// -&gt;createRoute</span></span><br><span class="line">  <span class="keyword">return</span> createRoute(record, location, redirectedFrom, router)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/util/route.js</span></span><br><span class="line"><span class="comment">// createRoute方法是通过当前浏览器url(location),和当前location匹配到的routeRecord, 去生成$route对象</span></span><br><span class="line"><span class="comment">// 如果record是null, 其实是匹配不到任何vue组件的</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createRoute</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  record: ?RouteRecord,</span></span></span><br><span class="line"><span class="function"><span class="params">  location: Location,</span></span></span><br><span class="line"><span class="function"><span class="params">  redirectedFrom?: ?Location,</span></span></span><br><span class="line"><span class="function"><span class="params">  router?: VueRouter</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Route</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> stringifyQuery = router &amp;&amp; router.options.stringifyQuery</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 深拷贝query, 保证不可变</span></span><br><span class="line">  <span class="keyword">let</span> query: any = location.query || &#123;&#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    query = clone(query)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建路径对象(数据源自location对象)</span></span><br><span class="line">  <span class="keyword">const</span> route: Route = &#123;</span><br><span class="line">    name: location.name || (record &amp;&amp; record.name),</span><br><span class="line">    meta: (record &amp;&amp; record.meta) || &#123;&#125;,</span><br><span class="line">    path: location.path || <span class="string">'/'</span>,</span><br><span class="line">    hash: location.hash || <span class="string">''</span>,</span><br><span class="line">    query,</span><br><span class="line">    params: location.params || &#123;&#125;,</span><br><span class="line">    fullPath: getFullPath(location, stringifyQuery),</span><br><span class="line">    <span class="comment">// 匹配不到就是空数组</span></span><br><span class="line">    matched: record ? formatMatch(record) : []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (redirectedFrom) &#123;</span><br><span class="line">    route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 防止外界对route对象做修改</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.freeze(route)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>createRoute</code>方法用<code>location</code>和<code>record</code>上的各种属性生成一个<code>route</code>对象(<code>$route</code>), <code>route</code>指向了一条路径并描述了该路径的元信息以及该匹配哪些<code>record</code>, 也就是匹配哪些<code>vue</code>组件.</p><p>这里看一下<code>matched</code>中的<code>formatMatch</code>逻辑, <code>route</code>对象会生成<code>matched</code>属性, 里面会执行<code>formatMatch(record)</code>逻辑</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/util/route.js</span></span><br><span class="line"><span class="comment">// 循环构建record以及其parentRecord的数组</span></span><br><span class="line"><span class="comment">// 数组中从第一个到最后一个是通向record这个匹配路由结果的record路径</span></span><br><span class="line"><span class="comment">// (record是pathList, pathMap, nameMap中匹配当前路径location匹配出的record)</span></span><br><span class="line"><span class="comment">// (record由当前路由用户传入的route对象location生成, 是对route的又描述)</span></span><br><span class="line"><span class="comment">// 例: a/b, a是b的parentRecord</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatMatch</span> (<span class="params">record: ?RouteRecord</span>): <span class="title">Array</span>&lt;<span class="title">RouteRecord</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = []</span><br><span class="line">  <span class="keyword">while</span> (record) &#123;</span><br><span class="line">    res.unshift(record)</span><br><span class="line">    record = record.parent</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>formatMatch</code>会循环构建record及其父record, 并把所有结果存入一个数组返回, 数组中从第一个到最后一个是通向record这个匹配路由结果的record路径, 举例: <code>/a/b</code>, <code>a</code>的<code>record</code>是<code>b</code>的<code>parentRecord</code>.</p><p>所以如果像之前提到的<code>createRoute</code>的第一个参数传<code>null</code>的情况, 实际是匹配不到任何<code>vue</code>组件的.</p><p>至此, 我们分析了路由匹配阶段<code>match</code>方法的逻辑.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上节分析了&lt;code&gt;new VueRouter&lt;/code&gt;过程中, 所有路由的注册和初始化过程. 这节来分析在一个新的&lt;code&gt;url&lt;/code&gt;被输入时, 路由的匹配过程.&lt;/p&gt;
&lt;h3 id=&quot;match方法&quot;&gt;&lt;a href=&quot;#match方法&quot; class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue-router 源码解读 02 - 路由注册</title>
    <link href="http://yoursite.com/2019/08/26/vue-source-20/"/>
    <id>http://yoursite.com/2019/08/26/vue-source-20/</id>
    <published>2019-08-26T01:33:34.000Z</published>
    <updated>2019-12-19T09:25:39.042Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-router-源码解读-02-路由注册"><a href="#Vue-router-源码解读-02-路由注册" class="headerlink" title="Vue-router 源码解读 02 - 路由注册"></a>Vue-router 源码解读 02 - 路由注册</h1><p>在使用<code>Vue-Router</code>开发的过程中, 会书写一个<code>routes</code>数组, 里面用对象的形式描述路由的数据结构信息, 本节来分析这些路由是如何初始化的.</p><p>在<code>new VueRouter()</code>的过程中, 会自行<code>createMatcher</code>过程.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/index.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VueRouter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 创建matcher, 注册所有路由</span></span><br><span class="line">    <span class="keyword">this</span>.matcher = createMatcher(options.routes || [], <span class="keyword">this</span>)</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个过程实际就是注册所有路由的过程, 继续看<code>createMatcher</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/create-matcher.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createMatcher</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  routes: Array&lt;RouteConfig&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  router: VueRouter</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Matcher</span> </span>&#123;</span><br><span class="line">  <span class="comment">// -&gt; createRouteMap 创建路由映射表</span></span><br><span class="line">  <span class="keyword">const</span> &#123; pathList, pathMap, nameMap &#125; = createRouteMap(routes)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// addRoutes作为动态添加路由的方法被返回, 内部仍然嗲用createRouteMap</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">addRoutes</span> (<span class="params">routes</span>) </span>&#123;</span><br><span class="line">    createRouteMap(routes, pathList, pathMap, nameMap)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">match</span>(<span class="params"></span>) </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    match,</span><br><span class="line">    addRoutes</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>createMatcher</code>会继续用<code>routes</code>作为参数创建<code>pathList</code>, <code>pathMap</code>, <code>nameMap</code>, 这个过程实际就是路由注册过程(后详), 最后返回的<code>matcher</code>方法里有2个方法, <code>match</code>方法用于动态匹配对应路由, 实际上就是从<code>createRouteMap</code>返回的三个对象中匹配. <code>addRoutes</code>内部仍然调用<code>createMap</code>方法, 用于在原有路由表上, 动态添加新的路由方法(<code>pathList</code>, <code>pathMap</code>, <code>nameMap</code>为同一引用).</p><p>继续看<code>createRouteMap</code>实现:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/create-route-map.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createRouteMap</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  routes: Array&lt;RouteConfig&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  oldPathList?: Array&lt;string&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  oldPathMap?: Dictionary&lt;RouteRecord&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  oldNameMap?: Dictionary&lt;RouteRecord&gt;</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): </span>&#123;</span><br><span class="line">  pathList: <span class="built_in">Array</span>&lt;string&gt;;</span><br><span class="line">  pathMap: Dictionary&lt;RouteRecord&gt;;</span><br><span class="line">  nameMap: Dictionary&lt;RouteRecord&gt;;</span><br><span class="line">&#125; &#123;</span><br><span class="line">  <span class="comment">// the path list is used to control path matching priority</span></span><br><span class="line">  <span class="keyword">const</span> pathList: <span class="built_in">Array</span>&lt;string&gt; = oldPathList || []</span><br><span class="line">  <span class="comment">// $flow-disable-line</span></span><br><span class="line">  <span class="keyword">const</span> pathMap: Dictionary&lt;RouteRecord&gt; = oldPathMap || <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">  <span class="comment">// $flow-disable-line</span></span><br><span class="line">  <span class="keyword">const</span> nameMap: Dictionary&lt;RouteRecord&gt; = oldNameMap || <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 递归注册每一个路由对象及其children</span></span><br><span class="line">  routes.forEach(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// route是配置的路由数组中每个路由配置对象 -&gt; addRouteRecord</span></span><br><span class="line">    addRouteRecord(pathList, pathMap, nameMap, route)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在PathList中将通配符路径放在最后一个运行</span></span><br><span class="line">  <span class="comment">// ensure wildcard routes are always at the end</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = pathList.length; i &lt; l; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (pathList[i] === <span class="string">'*'</span>) &#123;</span><br><span class="line">      pathList.push(pathList.splice(i, <span class="number">1</span>)[<span class="number">0</span>])</span><br><span class="line">      l--</span><br><span class="line">      i--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回注册过的路由信息</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    pathList,</span><br><span class="line">    pathMap,</span><br><span class="line">    nameMap</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>createRouteMap</code>方法首先使用变量继承参数中的<code>pathList</code>, <code>pathMap</code>, <code>nameMap</code>, 如果没有就新建. 然后循环<code>routes</code>数组, 调用<code>addRouteRecord</code>方法. <code>addRouteRecord</code>方法会递归注册路由, 将每个路由格式化为<code>routeRecord</code>格式, 并记录进<code>pathList</code>, <code>PathMap</code>, <code>nameMap</code>(后详). </p><p>之后, 会将所有通配符<code>*</code>路由放在<code>pathList</code>最后, 保证其最后一个被匹配. 最后返回<code>pathList</code>, <code>pathMap</code>, <code>nameMap</code>.</p><p>我们回来看看<code>addRouteRecord</code>的逻辑:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/create-route-map.js</span></span><br><span class="line"><span class="comment">// 递归注册路由, 将每个路由格式化为routeRecord格式, 并记录进pathList, PathMap, nameMap</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addRouteRecord</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  pathList: Array&lt;string&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  pathMap: Dictionary&lt;RouteRecord&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  nameMap: Dictionary&lt;RouteRecord&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  route: RouteConfig,</span></span></span><br><span class="line"><span class="function"><span class="params">  parent?: RouteRecord,</span></span></span><br><span class="line"><span class="function"><span class="params">  matchAs?: string</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 拿到用户配置的path和name</span></span><br><span class="line">  <span class="keyword">const</span> &#123; path, name &#125; = route</span><br><span class="line">  <span class="comment">// path不能为空, component不能是string, 必须是一个组件构造函数</span></span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    assert(path != <span class="literal">null</span>, <span class="string">`"path" is required in a route configuration.`</span>)</span><br><span class="line">    assert(</span><br><span class="line">      <span class="keyword">typeof</span> route.component !== <span class="string">'string'</span>,</span><br><span class="line">      <span class="string">`route config "component" for path: <span class="subst">$&#123;<span class="built_in">String</span>(path || name)&#125;</span> cannot be a `</span> +</span><br><span class="line">      <span class="string">`string id. Use an actual component instead.`</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> pathToRegexpOptions: PathToRegexpOptions = route.pathToRegexpOptions || &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// -&gt; normalizePath, 拼接parentPath和path, 并规范化Path</span></span><br><span class="line">  <span class="keyword">const</span> normalizedPath = normalizePath(</span><br><span class="line">    path,</span><br><span class="line">    parent,</span><br><span class="line">    pathToRegexpOptions.strict</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> route.caseSensitive === <span class="string">'boolean'</span>) &#123;</span><br><span class="line">    pathToRegexpOptions.sensitive = route.caseSensitive</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对根据用户传入的route对象, 对路由的重新描述</span></span><br><span class="line">  <span class="keyword">const</span> record: RouteRecord = &#123;</span><br><span class="line">    path: normalizedPath,</span><br><span class="line">    regex: compileRouteRegex(normalizedPath, pathToRegexpOptions),</span><br><span class="line">    components: route.components || &#123; <span class="attr">default</span>: route.component &#125;,</span><br><span class="line">    instances: &#123;&#125;,</span><br><span class="line">    name,</span><br><span class="line">    parent,</span><br><span class="line">    matchAs,</span><br><span class="line">    redirect: route.redirect,</span><br><span class="line">    beforeEnter: route.beforeEnter,</span><br><span class="line">    meta: route.meta || &#123;&#125;,</span><br><span class="line">    props: route.props == <span class="literal">null</span></span><br><span class="line">      ? &#123;&#125;</span><br><span class="line">      : route.components</span><br><span class="line">        ? route.props</span><br><span class="line">        : &#123; <span class="attr">default</span>: route.props &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当route有children的时候(children从对应的router-view渲染)</span></span><br><span class="line">  <span class="keyword">if</span> (route.children) &#123;</span><br><span class="line">    <span class="comment">// Warn if route is named, does not redirect and has a default child route.</span></span><br><span class="line">    <span class="comment">// If users navigate to this route by name, the default child will</span></span><br><span class="line">    <span class="comment">// not be rendered (GH Issue #629)</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (route.name &amp;&amp; !route.redirect &amp;&amp; route.children.some(<span class="function"><span class="params">child</span> =&gt;</span> /^\/?$/.test(child.path))) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          <span class="literal">false</span>,</span><br><span class="line">          <span class="string">`Named Route '<span class="subst">$&#123;route.name&#125;</span>' has a default child route. `</span> +</span><br><span class="line">          <span class="string">`When navigating to this named route (:to="&#123;name: '<span class="subst">$&#123;route.name&#125;</span>'"), `</span> +</span><br><span class="line">          <span class="string">`the default child route will not be rendered. Remove the name from `</span> +</span><br><span class="line">          <span class="string">`this route and use the name of the default child route for named `</span> +</span><br><span class="line">          <span class="string">`links instead.`</span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历children, 递归调用addRouteRecord</span></span><br><span class="line">    route.children.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> childMatchAs = matchAs</span><br><span class="line">        ? cleanPath(<span class="string">`<span class="subst">$&#123;matchAs&#125;</span>/<span class="subst">$&#123;child.path&#125;</span>`</span>)</span><br><span class="line">        : <span class="literal">undefined</span></span><br><span class="line">      addRouteRecord(</span><br><span class="line">        pathList, <span class="comment">// 透传</span></span><br><span class="line">        pathMap, <span class="comment">// 透传</span></span><br><span class="line">        nameMap, <span class="comment">// 透传</span></span><br><span class="line">        child, <span class="comment">// 循环到的子路由</span></span><br><span class="line">        record, <span class="comment">// 当前路由record对象, 这里可以创建record的父子关系</span></span><br><span class="line">        childMatchAs)</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      </span></span><br><span class="line"><span class="comment">      function addRouteRecord (</span></span><br><span class="line"><span class="comment">        pathList: Array&lt;string&gt;,</span></span><br><span class="line"><span class="comment">        pathMap: Dictionary&lt;RouteRecord&gt;,</span></span><br><span class="line"><span class="comment">        nameMap: Dictionary&lt;RouteRecord&gt;,</span></span><br><span class="line"><span class="comment">        route: RouteConfig,</span></span><br><span class="line"><span class="comment">        parent?: RouteRecord,</span></span><br><span class="line"><span class="comment">        matchAs?: string</span></span><br><span class="line"><span class="comment">      ) &#123;&#125;</span></span><br><span class="line"><span class="comment">      </span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 别名相关处理</span></span><br><span class="line">  <span class="keyword">if</span> (route.alias !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> aliases = <span class="built_in">Array</span>.isArray(route.alias)</span><br><span class="line">      ? route.alias</span><br><span class="line">      : [route.alias]</span><br><span class="line"></span><br><span class="line">    aliases.forEach(<span class="function"><span class="params">alias</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> aliasRoute = &#123;</span><br><span class="line">        path: alias,</span><br><span class="line">        children: route.children</span><br><span class="line">      &#125;</span><br><span class="line">      addRouteRecord(</span><br><span class="line">        pathList,</span><br><span class="line">        pathMap,</span><br><span class="line">        nameMap,</span><br><span class="line">        aliasRoute,</span><br><span class="line">        parent,</span><br><span class="line">        record.path || <span class="string">'/'</span> <span class="comment">// matchAs</span></span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果在pathMap中不存在当前路径</span></span><br><span class="line">  <span class="keyword">if</span> (!pathMap[record.path]) &#123;</span><br><span class="line">    <span class="comment">// pathList数组推入当前路径</span></span><br><span class="line">    pathList.push(record.path)</span><br><span class="line">    <span class="comment">// 当前路径作为key在PathMap中存储record对象</span></span><br><span class="line">    pathMap[record.path] = record</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果定义了组件名称, 会以name为key记录进nameMap</span></span><br><span class="line">  <span class="keyword">if</span> (name) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!nameMap[name]) &#123;</span><br><span class="line">      nameMap[name] = record</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; !matchAs) &#123;</span><br><span class="line">      warn(</span><br><span class="line">        <span class="literal">false</span>,</span><br><span class="line">        <span class="string">`Duplicate named routes definition: `</span> +</span><br><span class="line">        <span class="string">`&#123; name: "<span class="subst">$&#123;name&#125;</span>", path: "<span class="subst">$&#123;record.path&#125;</span>" &#125;`</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对路径做一些规范化处理</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">normalizePath</span> (<span class="params">path: string, parent?: RouteRecord, strict?: boolean</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 最后一个斜线去掉</span></span><br><span class="line">  <span class="keyword">if</span> (!strict) path = path.replace(<span class="regexp">/\/$/</span>, <span class="string">''</span>)</span><br><span class="line">  <span class="comment">// 第一个是/ 父路径是空, 直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (path[<span class="number">0</span>] === <span class="string">'/'</span>) <span class="keyword">return</span> path</span><br><span class="line">  <span class="keyword">if</span> (parent == <span class="literal">null</span>) <span class="keyword">return</span> path</span><br><span class="line">  <span class="comment">// 拼接父路径和当前路径, // 变 / (clearPath) 并返回</span></span><br><span class="line">  <span class="keyword">return</span> cleanPath(<span class="string">`<span class="subst">$&#123;parent.path&#125;</span>/<span class="subst">$&#123;path&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>addRouteRecord</code>会先校验下<code>route</code>对象的信息是否符合规则(component必须是一个Vue构造器, 不能是string, path不能为空). 然后调用<code>normalizePath</code>方法, 该方法对<code>parentPath</code>和<code>path</code>进行了拼接, 其逻辑如下:</p><ol><li>将当前<code>path</code>最后一个<code>/</code>去掉</li><li>如果当前路径以<code>/</code>开头或没有传入<code>parent record</code>, return</li><li>否则拼接<code>parentPath</code>和<code>path</code>后再返回, 并将<code>//</code>替换为<code>/</code></li></ol><p>回到<code>addRouteRecord</code>方法, 这时根据所有<code>route</code>上的信息生成<code>RouteRecord</code>对象, 从新描述当前路由. </p><p>然后进入<code>children</code>处理, 如果有<code>children</code>, 对每一个<code>child</code>递归调用<code>addRouteRecord</code>方法, 并将当前路由作为<code>parent</code>传入, 进行子路由的注册过程.</p><p>继续当前路由的注册逻辑, 将路由记录进<code>pathList</code>(只保存拼接路径), <code>pathMap</code>(以拼接路径为key).</p><p>所以, 在所有递归调用<code>addRouteRecord</code>完成后, 所有路由都被记录进了<code>pathList</code>, <code>nameMap</code>, <code>pathMap</code>. 在外层<code>createMatcher</code>又以闭包接口的方式返回了<code>match</code>方法(用于在<code>pathList</code>, <code>nameMap</code>, <code>pathMap</code>中动态匹配路由), <code>addRoutes</code>方法(用于在<code>pathList</code>, <code>nameMap</code>, <code>pathMap</code>中动态注册路由)</p><p>至此, 我们分析了路由注册过程. 下节将分析路由匹配的过程.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue-router-源码解读-02-路由注册&quot;&gt;&lt;a href=&quot;#Vue-router-源码解读-02-路由注册&quot; class=&quot;headerlink&quot; title=&quot;Vue-router 源码解读 02 - 路由注册&quot;&gt;&lt;/a&gt;Vue-router 源码解读
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue-router 源码解读 01 - 注册 &amp; 初始化</title>
    <link href="http://yoursite.com/2019/07/30/vue-source-19/"/>
    <id>http://yoursite.com/2019/07/30/vue-source-19/</id>
    <published>2019-07-30T10:22:22.000Z</published>
    <updated>2019-12-19T09:25:07.361Z</updated>
    
    <content type="html"><![CDATA[<p><code>Vue-router</code>是在<code>Vue.js</code>之上的一个前端路由解决方案, 本节主要分析<code>Vue.use(router)</code>和<code>new Vue</code>时发生的<code>vue</code>实例初始化过程.</p><h3 id="Vue-use"><a href="#Vue-use" class="headerlink" title="Vue.use"></a>Vue.use</h3><p>首先看看<code>Vue.use</code>的逻辑</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/global-api/use.js</span></span><br><span class="line">Vue.use = <span class="function"><span class="keyword">function</span> (<span class="params">plugin: Function | Object</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> installedPlugins = (<span class="keyword">this</span>._installedPlugins || (<span class="keyword">this</span>._installedPlugins = []))</span><br><span class="line">  <span class="comment">// 保证插件只注册一次</span></span><br><span class="line">  <span class="keyword">if</span> (installedPlugins.indexOf(plugin) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// additional parameters</span></span><br><span class="line">  <span class="comment">// 将Vue构造函数作为插件方法第一个参数</span></span><br><span class="line">  <span class="keyword">const</span> args = toArray(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">  args.unshift(<span class="keyword">this</span>)</span><br><span class="line">  <span class="comment">// 运行插件的install方法, 大Vue是第一个参数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> plugin.install === <span class="string">'function'</span>) &#123;</span><br><span class="line">    plugin.install.apply(plugin, args)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> plugin === <span class="string">'function'</span>) &#123;</span><br><span class="line">    plugin.apply(<span class="literal">null</span>, args)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 推入插件数组</span></span><br><span class="line">  installedPlugins.push(plugin)</span><br><span class="line">  <span class="comment">// return Vue构造函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>use</code>方法的参数是<code>plugin</code>, 它可以是一个<code>function</code>或一个对象, 该函数的逻辑如下:</p><ol><li>保证每个插件只被注册一次</li><li>拿到<code>Vue</code>构造函数</li><li>如果插件是一个<code>function</code>, 运行之, 否则运行传入插件的<code>install</code>方法, 将<code>Vue</code>构造函数传入</li></ol><h3 id="Vue-Router的install方法"><a href="#Vue-Router的install方法" class="headerlink" title="Vue-Router的install方法"></a>Vue-Router的install方法</h3><p>看完了<code>Vue.use</code>的原理, 我们继续看看<code>vue router</code>的<code>install</code>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/install.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> _Vue</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">install</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 保证installed方法只执行一次</span></span><br><span class="line">  <span class="keyword">if</span> (install.installed &amp;&amp; _Vue === Vue) <span class="keyword">return</span></span><br><span class="line">  install.installed = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  _Vue = Vue</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> isDef = <span class="function"><span class="params">v</span> =&gt;</span> v !== <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> registerInstance = <span class="function">(<span class="params">vm, callVal</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> i = vm.$options._parentVnode</span><br><span class="line">    <span class="keyword">if</span> (isDef(i) &amp;&amp; isDef(i = i.data) &amp;&amp; isDef(i = i.registerRouteInstance)) &#123;</span><br><span class="line">      i(vm, callVal)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用全局Vue.mixin让给每个组件都添加beforeCreate和destroyed的部分逻辑</span></span><br><span class="line">  Vue.mixin(&#123;</span><br><span class="line">    beforeCreate () &#123;</span><br><span class="line">      <span class="comment">// 根Vue实例的options上用户才会定义router配置对象</span></span><br><span class="line">      <span class="keyword">if</span> (isDef(<span class="keyword">this</span>.$options.router)) &#123;</span><br><span class="line">        <span class="comment">// 将当前vue实例赋值给this._routerRoot</span></span><br><span class="line">        <span class="keyword">this</span>._routerRoot = <span class="keyword">this</span></span><br><span class="line">        <span class="comment">// 用_router持有vueRouter实例</span></span><br><span class="line">        <span class="keyword">this</span>._router = <span class="keyword">this</span>.$options.router</span><br><span class="line">        <span class="comment">// 执行init方法</span></span><br><span class="line">        <span class="keyword">this</span>._router.init(<span class="keyword">this</span>)</span><br><span class="line">        <span class="comment">// 将_route对象定义为响应式的</span></span><br><span class="line">        Vue.util.defineReactive(<span class="keyword">this</span>, <span class="string">'_route'</span>, <span class="keyword">this</span>._router.history.current)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 让每一个组件初始化世就将_routerRoot赋值为根vue实例</span></span><br><span class="line">        <span class="keyword">this</span>._routerRoot = (<span class="keyword">this</span>.$parent &amp;&amp; <span class="keyword">this</span>.$parent._routerRoot) || <span class="keyword">this</span></span><br><span class="line">      &#125;</span><br><span class="line">      registerInstance(<span class="keyword">this</span>, <span class="keyword">this</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    destroyed () &#123;</span><br><span class="line">      registerInstance(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 原型上定义 $router 为 rootVue实例.$options.router</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(Vue.prototype, <span class="string">'$router'</span>, &#123;</span><br><span class="line">    get () &#123; <span class="keyword">return</span> <span class="keyword">this</span>._routerRoot._router &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 原型上定义 $route 为 rootVue实例.$route</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(Vue.prototype, <span class="string">'$route'</span>, &#123;</span><br><span class="line">    get () &#123; <span class="keyword">return</span> <span class="keyword">this</span>._routerRoot._route &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 全局注册RouterView和RouterLink组件</span></span><br><span class="line">  Vue.component(<span class="string">'RouterView'</span>, View)</span><br><span class="line">  Vue.component(<span class="string">'RouterLink'</span>, Link)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> strats = Vue.config.optionMergeStrategies</span><br><span class="line">  <span class="comment">// use the same hook merging strategy for route hooks</span></span><br><span class="line">  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>install</code>方法逻辑:</p><ol><li>保证<code>install</code>方法只被执行一次</li><li>使用<code>Vue.mixin</code>全局混入<code>beforeCreate</code>和<code>destroyed</code>逻辑, 让注册后每个<code>vue</code>实例的生命周期都回执行之中的逻辑.</li><li><code>beforeCreate</code>逻辑:<ol><li>如果是根vue实例, 用<code>_routerRoot</code>持有根vue实例</li><li>用<code>_router</code>持有用户传入的<code>router</code>实例</li><li>执行实例的<code>init</code>方法</li><li>将<code>_route</code>属性加入响应式监听</li><li>如果不是根vue实例, 不断向上找, 保证vue实例的<code>_routerRoot</code>属性永远指向根<code>vue</code>实例</li></ol></li><li>原型定义<code>vm.$router</code>的getter, 返回<code>router</code>实例</li><li>圆形定义<code>vm.$route</code>的getter</li><li>全局注册<code>router-view</code>和<code>router-link</code>组件</li><li>设置merge逻辑</li></ol><h3 id="Router实例"><a href="#Router实例" class="headerlink" title="Router实例"></a>Router实例</h3><p>在使用<code>Vue.use</code>前, 会先执行<code>new VueRouter()</code>的过程, 下面分析一下<code>VueRouter</code>构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">VueRouter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> install: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">  <span class="keyword">static</span> version: string;</span><br><span class="line"></span><br><span class="line">  app: any;</span><br><span class="line">  apps: <span class="built_in">Array</span>&lt;any&gt;;</span><br><span class="line">  ready: boolean;</span><br><span class="line">  readyCbs: <span class="built_in">Array</span>&lt;<span class="built_in">Function</span>&gt;;</span><br><span class="line">  options: RouterOptions;</span><br><span class="line">  mode: string;</span><br><span class="line">  history: HashHistory | HTML5History | AbstractHistory;</span><br><span class="line">  matcher: Matcher;</span><br><span class="line">  fallback: boolean;</span><br><span class="line">  beforeHooks: <span class="built_in">Array</span>&lt;?NavigationGuard&gt;;</span><br><span class="line">  resolveHooks: <span class="built_in">Array</span>&lt;?NavigationGuard&gt;;</span><br><span class="line">  afterHooks: <span class="built_in">Array</span>&lt;?AfterNavigationHook&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span> (options: RouterOptions = &#123;&#125;) &#123;</span><br><span class="line">    <span class="comment">// 定义变量初值</span></span><br><span class="line">    <span class="keyword">this</span>.app = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.apps = []</span><br><span class="line">    <span class="keyword">this</span>.options = options <span class="comment">// 存储vueRouter配置</span></span><br><span class="line">    <span class="keyword">this</span>.beforeHooks = []</span><br><span class="line">    <span class="keyword">this</span>.resolveHooks = []</span><br><span class="line">    <span class="keyword">this</span>.afterHooks = []</span><br><span class="line">    <span class="keyword">this</span>.matcher = createMatcher(options.routes || [], <span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认hash模式</span></span><br><span class="line">    <span class="keyword">let</span> mode = options.mode || <span class="string">'hash'</span></span><br><span class="line">    <span class="comment">// 如果当前浏览器不支持htmlHistory模式, 降级为hash</span></span><br><span class="line">    <span class="keyword">this</span>.fallback = mode === <span class="string">'history'</span> &amp;&amp; !supportsPushState &amp;&amp; options.fallback !== <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.fallback) &#123;</span><br><span class="line">      mode = <span class="string">'hash'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!inBrowser) &#123;</span><br><span class="line">      mode = <span class="string">'abstract'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.mode = mode</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据不同的模式, 使用不同的类来管理历史记录, 三个类都继承自公共类History</span></span><br><span class="line">    <span class="keyword">switch</span> (mode) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'history'</span>:</span><br><span class="line">        <span class="keyword">this</span>.history = <span class="keyword">new</span> HTML5History(<span class="keyword">this</span>, options.base)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'hash'</span>:</span><br><span class="line">        <span class="keyword">this</span>.history = <span class="keyword">new</span> HashHistory(<span class="keyword">this</span>, options.base, <span class="keyword">this</span>.fallback)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'abstract'</span>:</span><br><span class="line">        <span class="keyword">this</span>.history = <span class="keyword">new</span> AbstractHistory(<span class="keyword">this</span>, options.base)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">          assert(<span class="literal">false</span>, <span class="string">`invalid mode: <span class="subst">$&#123;mode&#125;</span>`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// init方法</span></span><br><span class="line">  init (app: any <span class="comment">/* Vue component instance */</span>) &#123;</span><br><span class="line">    <span class="comment">// app是根vue实例</span></span><br><span class="line">    process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; assert(</span><br><span class="line">      install.installed,</span><br><span class="line">      <span class="string">`not installed. Make sure to call \`Vue.use(VueRouter)\` `</span> +</span><br><span class="line">      <span class="string">`before creating root instance.`</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 支持多vueRouter实例(基本不用, 忽略)</span></span><br><span class="line">    <span class="keyword">this</span>.apps.push(app)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// main app already initialized.</span></span><br><span class="line">    <span class="comment">// 保证init逻辑只运行一次</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.app) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.app = app</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> history = <span class="keyword">this</span>.history</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 针对不同模式做不同处理</span></span><br><span class="line">    <span class="keyword">if</span> (history <span class="keyword">instanceof</span> HTML5History) &#123;</span><br><span class="line">      history.transitionTo(history.getCurrentLocation())</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (history <span class="keyword">instanceof</span> HashHistory) &#123;</span><br><span class="line">      <span class="keyword">const</span> setupHashListener = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        history.setupListeners()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// -&gt; history.transitionTo方法</span></span><br><span class="line">      history.transitionTo(</span><br><span class="line">        history.getCurrentLocation(),</span><br><span class="line">        setupHashListener,</span><br><span class="line">        setupHashListener</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册history.listen的回调</span></span><br><span class="line">    history.listen(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.apps.forEach(<span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">        app._route = route</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>new VueRouter</code>的逻辑如下:</p><ol><li>初始化变量</li><li>初始化<code>mode</code>, 默认是<code>hash</code>模式, 并判断如果浏览器卜支持<code>history</code>模式, 降级为<code>hash</code>模式</li><li>根据不同的模式, 使用不同的类来管理历史记录, 这三个类在源码的<code>history</code>目录下, 他们都继承自<code>History</code>基类</li></ol><p>前面分析了<code>install</code>方法, 在根<code>vue</code>实例<code>beforeCreated</code>时会执行<code>this._router.init(this)</code>, 这个<code>this._router</code>就是<code>VueRouter</code>实例, 下面是<code>init</code>的逻辑</p><ol><li>保证<code>init</code>逻辑只执行一次</li><li>获取<code>this.history</code>(在<code>new VueRouter</code>时生成)</li><li>根据不同的<code>history</code>做不同处理</li><li>注册<code>history.listen</code>的回调</li></ol><p>至此, 我们大致分析了<code>Vue.use(new VueRouter())</code>的过程, 在下面的章节会具体分析其细节实现.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;Vue-router&lt;/code&gt;是在&lt;code&gt;Vue.js&lt;/code&gt;之上的一个前端路由解决方案, 本节主要分析&lt;code&gt;Vue.use(router)&lt;/code&gt;和&lt;code&gt;new Vue&lt;/code&gt;时发生的&lt;code&gt;vue&lt;/code&gt;实例初
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue源码解读 18 - 组件更新</title>
    <link href="http://yoursite.com/2019/06/01/vue-source-18/"/>
    <id>http://yoursite.com/2019/06/01/vue-source-18/</id>
    <published>2019-06-01T01:05:04.000Z</published>
    <updated>2019-12-19T09:24:48.280Z</updated>
    
    <content type="html"><![CDATA[<p>本节来分析组件更新的过程.</p><p>前面的章节我们分析了, <code>updateComponent</code>方法内部调用了<code>vm._update(vm._render())</code>, 而<code>updateComponent</code>方法是作为<code>render watcher</code>的<code>getter</code>传入的, 当数据发生变化时, 作为变化数据依赖的<code>render watcher</code>会重新计算, 执行<code>updateComponent</code>就会调用. 在<code>nextTick</code>执行.</p><p>这个过程首先会执行<code>vm._render</code>方法, 它的目的是从新生成一个<code>vnode</code>, 然后执行<code>vm._update</code>并传入这个<code>new vnode</code>, 将<code>new vnode</code>更新到页面dom上去(<code>patch</code>的过程).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/lifecycle.js</span></span><br><span class="line">Vue.prototype._update = <span class="function"><span class="keyword">function</span> (<span class="params">vnode: VNode, hydrating?: boolean</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> vm: Component = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">const</span> prevEl = vm.$el</span><br><span class="line">  <span class="comment">// prevVnode存在, 是渲染vnode</span></span><br><span class="line">  <span class="keyword">const</span> prevVnode = vm._vnode</span><br><span class="line">  <span class="keyword">const</span> prevActiveInstance = activeInstance</span><br><span class="line">  activeInstance = vm</span><br><span class="line">  <span class="comment">// 把渲染vnode赋值给下划线vnode</span></span><br><span class="line">  vm._vnode = vnode</span><br><span class="line">  <span class="comment">// Vue.prototype.__patch__ is injected in entry points</span></span><br><span class="line">  <span class="comment">// based on the rendering backend used.</span></span><br><span class="line">  <span class="keyword">if</span> (!prevVnode) &#123;</span><br><span class="line">    <span class="comment">// initial render</span></span><br><span class="line">    vm.$el = vm.__patch__(vm.$el, vnode, hydrating, <span class="literal">false</span> <span class="comment">/* removeOnly */</span>)</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="comment">// else 对应数据改变</span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// updates</span></span><br><span class="line">    vm.$el = vm.__patch__(prevVnode, vnode)</span><br><span class="line">  &#125;</span><br><span class="line">  activeInstance = prevActiveInstance</span><br><span class="line">  <span class="comment">// update __vue__ reference</span></span><br><span class="line">  <span class="keyword">if</span> (prevEl) &#123;</span><br><span class="line">    prevEl.__vue__ = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (vm.$el) &#123;</span><br><span class="line">    vm.$el.__vue__ = vm</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// if parent is an HOC, update its $el as well</span></span><br><span class="line">  <span class="keyword">if</span> (vm.$vnode &amp;&amp; vm.$parent &amp;&amp; vm.$vnode === vm.$parent._vnode) &#123;</span><br><span class="line">    vm.$parent.$el = vm.$el</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// updated hook is called by the scheduler to ensure that children are</span></span><br><span class="line">  <span class="comment">// updated in a parent's updated hook.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组件更新时, 参数<code>vnode</code>是<code>render</code>函数生成的<code>vnode</code>, 此时<code>prevVnode</code>是<code>render vnode</code>, 会执行<code>vm.$el=vm.__patch__(prevVnode, vnode)</code>, 我们继续看看<code>patch</code>方法的实现:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/vdom/patch.js</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">patch</span>(<span class="params">oldVnode, vnode, hydrating, removeOnly</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isUndef(vnode)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isDef(oldVnode)) invokeDestroyHook(oldVnode)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> isInitialPatch = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">const</span> insertedVnodeQueue = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isUndef(oldVnode)) &#123;</span><br><span class="line">    <span class="comment">// empty mount (likely as component), create new root element</span></span><br><span class="line">    isInitialPatch = <span class="literal">true</span></span><br><span class="line">    createElm(vnode, insertedVnodeQueue)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 不是原生节点, 都是vnode, isRealElement为false</span></span><br><span class="line">    <span class="keyword">const</span> isRealElement = isDef(oldVnode.nodeType)</span><br><span class="line">    <span class="comment">// 比对新旧vnode节点 -&gt; sameVnode方法</span></span><br><span class="line">    <span class="keyword">if</span> (!isRealElement &amp;&amp; sameVnode(oldVnode, vnode)) &#123;</span><br><span class="line">      <span class="comment">// patch existing root node</span></span><br><span class="line">      <span class="comment">// 新旧vnode节点是同一个vnode, 走patchVnode方法</span></span><br><span class="line">      patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 新旧节点不是同一个vnode,走这里</span></span><br><span class="line">      <span class="keyword">if</span> (isRealElement) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// replacing existing element</span></span><br><span class="line">      <span class="comment">// 第一步, 创新新的节点</span></span><br><span class="line">      <span class="comment">// 通过旧节点的dom节点拿到父dom节点</span></span><br><span class="line">      <span class="keyword">const</span> oldElm = oldVnode.elm</span><br><span class="line">      <span class="keyword">const</span> parentElm = nodeOps.parentNode(oldElm)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// create new node</span></span><br><span class="line">      <span class="comment">// 将新节点和父dom节点传入</span></span><br><span class="line">      <span class="comment">// 这样createElm逻辑就知道创建的节点应该挂载在父dom的下面</span></span><br><span class="line">      createElm(</span><br><span class="line">        vnode,</span><br><span class="line">        insertedVnodeQueue,</span><br><span class="line">        <span class="comment">// extremely rare edge case: do not insert if old element is in a</span></span><br><span class="line">        <span class="comment">// leaving transition. Only happens when combining transition +</span></span><br><span class="line">        <span class="comment">// keep-alive + HOCs. (#4590)</span></span><br><span class="line">        oldElm._leaveCb ? <span class="literal">null</span> : parentElm,</span><br><span class="line">        nodeOps.nextSibling(oldElm)</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">      <span class="comment">// update parent placeholder node element, recursively</span></span><br><span class="line">      <span class="comment">// 第二步, 更新父占位符节点</span></span><br><span class="line">      <span class="comment">// vnode是App组件模板的最外层div的dom, vnode.parent是占位符节点&lt;App /&gt;</span></span><br><span class="line">      <span class="keyword">if</span> (isDef(vnode.parent)) &#123;</span><br><span class="line">        <span class="comment">// 保存 &lt;App /&gt;</span></span><br><span class="line">        <span class="keyword">let</span> ancestor = vnode.parent</span><br><span class="line">        <span class="comment">// 判断当前vnode节点是否是可挂载的 -&gt; isPatchable</span></span><br><span class="line">        <span class="keyword">const</span> patchable = isPatchable(vnode)</span><br><span class="line">        <span class="keyword">while</span> (ancestor) &#123;</span><br><span class="line">          <span class="comment">// 执行&lt;App/&gt;的snabdom destroy钩子</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cbs.destroy.length; ++i) &#123;</span><br><span class="line">            cbs.destroy[i](ancestor)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 将占位符节点的elm赋值为新vnode的elm(createElm生成的真实dom)</span></span><br><span class="line">          ancestor.elm = vnode.elm</span><br><span class="line">          <span class="keyword">if</span> (patchable) &#123;</span><br><span class="line">            <span class="comment">// 可挂载的话 执行create钩子和insert钩子</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cbs.create.length; ++i) &#123;</span><br><span class="line">              cbs.create[i](emptyNode, ancestor)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// #6513</span></span><br><span class="line">            <span class="comment">// invoke insert hooks that may have been merged by create hooks.</span></span><br><span class="line">            <span class="comment">// e.g. for directives that uses the "inserted" hook.</span></span><br><span class="line">            <span class="keyword">const</span> insert = ancestor.data.hook.insert</span><br><span class="line">            <span class="keyword">if</span> (insert.merged) &#123;</span><br><span class="line">              <span class="comment">// start at index 1 to avoid re-invoking component mounted hook</span></span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; insert.fns.length; i++) &#123;</span><br><span class="line">                insert.fns[i]()</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            registerRef(ancestor)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 将ancester指向&lt;App/&gt;的父节点, 递归向上找</span></span><br><span class="line">          <span class="comment">// (假设&lt;App/&gt;的父占位符节点还是一个组件&lt;Bpp/&gt;, 继续进行while里面的逻辑)</span></span><br><span class="line">          <span class="comment">// 重复更新父占位符节点过程, 直到&lt;App/&gt;的外层直接套一个div而不是自定义组件节点</span></span><br><span class="line">          ancestor = ancestor.parent</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// destroy old node</span></span><br><span class="line">      <span class="comment">// 第三步, 删除旧的节点  </span></span><br><span class="line">      <span class="comment">// 如果父dom节点存在, 从父dom节点里删除oldVnode对应的节点      </span></span><br><span class="line">      <span class="keyword">if</span> (isDef(parentElm)) &#123;</span><br><span class="line">        removeVnodes(parentElm, [oldVnode], <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(oldVnode.tag)) &#123;</span><br><span class="line">        invokeDestroyHook(oldVnode)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch)</span><br><span class="line">  <span class="keyword">return</span> vnode.elm</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>patch</code>方法的逻辑比较复杂, 我们慢慢分析. 此时<code>oldVnode</code>存在, 进入else逻辑, <code>isRealElement</code>为<code>false</code>.<br>此时会判断<code>sameVnode(oldVnode, vnode)</code>, 如果真, 证明<code>oldVnode</code>和<code>vnode</code>是同一节点, 进入<code>patchVnode</code>逻辑. 如果假, <code>oldVnode</code>和<code>vnode</code>是不是同一节点, 需新增节点替换旧借点. </p><p>先看看<code>sameVnode</code>逻辑, <code>sameVnode</code>用来判断两个<code>vnode</code>是否是同一个节点, 逻辑注释所示. </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sameVnode</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">// key要相等(vfor的key)</span></span><br><span class="line">    a.key === b.key &amp;&amp;</span><br><span class="line">    <span class="comment">// tag要相等, 是不是注释借点相等, data是否都定义了相等, 是不是同样的input类型要相等</span></span><br><span class="line">    ((a.tag === b.tag &amp;&amp;</span><br><span class="line">      a.isComment === b.isComment &amp;&amp;</span><br><span class="line">      isDef(a.data) === isDef(b.data) &amp;&amp;</span><br><span class="line">      sameInputType(a, b)) ||</span><br><span class="line">      (isTrue(a.isAsyncPlaceholder) &amp;&amp;</span><br><span class="line">        a.asyncFactory === b.asyncFactory &amp;&amp;</span><br><span class="line">        isUndef(b.asyncFactory.error)))</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让我们先假设<code>oldVnode</code>和<code>vnode</code>不是同一个节点, 进入else逻辑, 首先需要创建新的节点, 步骤如下:</p><ol><li>先根据<code>oldVnode</code>挂载的<code>elm</code>得到父dom元素<code>parentElm</code></li><li>执行<code>createElm</code>, 因为传入了父dom元素, 于是新建的元素被挂载在父dom元素下, 旧dom元素的<code>nextSibling</code></li></ol><p>第二步,需要更新父占位符节点, 先获取<code>ancestor</code>, 其值<code>vnode.parent</code>对应类<code>&lt;App/&gt;</code>这样的占位Vnode, 然后判断一个节点<code>isPatchable</code>, 该方法逻辑如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断一个vnode是否为可挂载的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPatchable</span>(<span class="params">vnode</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 如果vnode有componentInstance方法, 证明是一个占位符vnode(&lt;App/&gt;)</span></span><br><span class="line">  <span class="keyword">while</span> (vnode.componentInstance) &#123;</span><br><span class="line">    <span class="comment">// 将vnode赋值为组件vnode的渲染vnode(&lt;App/&gt;的template最外层div), 循环判断</span></span><br><span class="line">    vnode = vnode.componentInstance._vnode</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 直到找到一个占位符vnode的模板最外层节点不是占位符, 而是一个真实html标签(div), 则当前节点为可挂载节点</span></span><br><span class="line">  <span class="keyword">return</span> isDef(vnode.tag)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析一下<code>isPatchable</code>方法, 如果<code>vnode.componentInstance</code>存在证明该方法是一个占位符vnode(<code>&lt;App/&gt;</code>), 继续找到该占位符vnode的<code>render watcher</code>, 如此递归一直找到<code>vnode</code>最外层不是占位符<code>vnode</code>, 而是一个<code>html</code>标签, 则当前节点为可挂载节点</p><p>回到<code>patch</code>方法逻辑, 进入<code>while</code>逻辑, 步骤如下:</p><ol><li>执行<code>snabbdom</code>的<code>destroy</code>钩子</li><li>将占位符节点的<code>elm</code>赋值为新<code>vnode</code>的<code>elm</code>(<code>createElm</code>生成的真实dom)</li><li>如果<code>vnode``isPatchable</code>, 执行<code>snabbdom</code>的<code>create</code>和<code>insert</code>钩子</li><li>将<code>ancester</code>指向<code>&lt;App/&gt;</code>的父节点, 递归向上找, 重复更新父占位符节点的<code>elm</code>属性的过程, 直到<code>&lt;App/&gt;</code>外层直接套一个html元素而不是自定义组件节点为止.</li></ol><p>在完成更新父占位符节点后, 还要删除掉之前的旧<code>vnode</code>节点对应的dom, 完成dom更新. 至此, <code>oldVnode</code>和<code>vnode</code>不是同一个节点的逻辑更新完毕.</p><p>我们再假设<code>oldVnode</code>和<code>vnode</code>是同一个节点, 此时进入<code>patchVnode</code>逻辑:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/vdom/patch.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">patchVnode</span>(<span class="params">oldVnode, vnode, insertedVnodeQueue, removeOnly</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 新节点 = 旧借点 return</span></span><br><span class="line">  <span class="keyword">if</span> (oldVnode === vnode) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 取旧vnode的dom节点赋值给新vnode(因为新旧节点相同)</span></span><br><span class="line">  <span class="keyword">const</span> elm = (vnode.elm = oldVnode.elm)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 异步组件的情况, 可跳过</span></span><br><span class="line">  <span class="keyword">if</span> (isTrue(oldVnode.isAsyncPlaceholder)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isDef(vnode.asyncFactory.resolved)) &#123;</span><br><span class="line">      hydrate(oldVnode.elm, vnode, insertedVnodeQueue)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      vnode.isAsyncPlaceholder = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// reuse element for static trees.</span></span><br><span class="line">  <span class="comment">// note we only do this if the vnode is cloned -</span></span><br><span class="line">  <span class="comment">// if the new node is not cloned it means the render functions have been</span></span><br><span class="line">  <span class="comment">// reset by the hot-reload-api and we need to do a proper re-render.</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    isTrue(vnode.isStatic) &amp;&amp;</span><br><span class="line">    isTrue(oldVnode.isStatic) &amp;&amp;</span><br><span class="line">    vnode.key === oldVnode.key &amp;&amp;</span><br><span class="line">    (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))</span><br><span class="line">  ) &#123;</span><br><span class="line">    vnode.componentInstance = oldVnode.componentInstance</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> i</span><br><span class="line">  <span class="keyword">const</span> data = vnode.data</span><br><span class="line">  <span class="comment">// 如果vnode定义了data, 且定义了data.hook.prepatch方法, 执行prepatch方法 -&gt; prepatch方法</span></span><br><span class="line">  <span class="keyword">if</span> (isDef(data) &amp;&amp; isDef((i = data.hook)) &amp;&amp; isDef((i = i.prepatch))) &#123;</span><br><span class="line">    <span class="comment">// 执行prepatch方法</span></span><br><span class="line">    i(oldVnode, vnode)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 拿新vnode的children</span></span><br><span class="line">  <span class="keyword">const</span> oldCh = oldVnode.children</span><br><span class="line">  <span class="keyword">const</span> ch = vnode.children</span><br><span class="line">  <span class="comment">// 执行update钩子</span></span><br><span class="line">  <span class="keyword">if</span> (isDef(data) &amp;&amp; isPatchable(vnode)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cbs.update.length; ++i) cbs.update[i](oldVnode, vnode)</span><br><span class="line">    <span class="keyword">if</span> (isDef((i = data.hook)) &amp;&amp; isDef((i = i.update))) i(oldVnode, vnode)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果vnode没有文本节点</span></span><br><span class="line">  <span class="keyword">if</span> (isUndef(vnode.text)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isDef(oldCh) &amp;&amp; isDef(ch)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (oldCh !== ch)</span><br><span class="line">        <span class="comment">// 如果新旧节点的children不一样(同一个vnode, 下面子节点的内容换了), 执行updateChildren(diff算法, 内部递归调用updateChildren)</span></span><br><span class="line">        updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(ch)) &#123;</span><br><span class="line">      <span class="comment">// 如果新节点有children老节点没有, 将新children插入即可</span></span><br><span class="line">      <span class="keyword">if</span> (isDef(oldVnode.text)) nodeOps.setTextContent(elm, <span class="string">''</span>)</span><br><span class="line">      addVnodes(elm, <span class="literal">null</span>, ch, <span class="number">0</span>, ch.length - <span class="number">1</span>, insertedVnodeQueue)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(oldCh)) &#123;</span><br><span class="line">      <span class="comment">// 旧节点有children但新节点没有, 从旧借点处删除旧children</span></span><br><span class="line">      removeVnodes(elm, oldCh, <span class="number">0</span>, oldCh.length - <span class="number">1</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(oldVnode.text)) &#123;</span><br><span class="line">      <span class="comment">// 如果新节点没有children, 老节点也没有children, 但老节点有文本节点, 将其置空</span></span><br><span class="line">      nodeOps.setTextContent(elm, <span class="string">''</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldVnode.text !== vnode.text) &#123;</span><br><span class="line">    <span class="comment">// 如果有文本节点且文本节点内容更新, 设置文本节点</span></span><br><span class="line">    nodeOps.setTextContent(elm, vnode.text)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 执行postpatch钩子</span></span><br><span class="line">  <span class="keyword">if</span> (isDef(data)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isDef((i = data.hook)) &amp;&amp; isDef((i = i.postpatch))) i(oldVnode, vnode)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>patchVnode</code>因为在处理同一个<code>vnode</code>的更新前后的异同, 实际是在执行<code>diff算法</code>的过程.</p><p>首先直接取旧<code>vnode</code>的dom节点赋值给新<code>vnode</code>(因为新旧节点相同), 之后执行<code>prepatch</code>方法, 先来看看<code>prepatch</code>的代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/vdom/create-component.js</span></span><br><span class="line">prepatch (oldVnode: MountedComponentVNode, <span class="attr">vnode</span>: MountedComponentVNode) &#123;</span><br><span class="line">  <span class="keyword">const</span> options = vnode.componentOptions</span><br><span class="line">  <span class="keyword">const</span> child = vnode.componentInstance = oldVnode.componentInstance</span><br><span class="line">  <span class="comment">// 执行updateChildComponent方法, 更新组件内组件的props 事件等</span></span><br><span class="line">  <span class="comment">// 所以在更新父组件内部的data时, 可以触发父组件data传入子组件作为props时, 子组件的更新</span></span><br><span class="line">  <span class="comment">// 因为这里updateChildComponent会触发对应的子组件props的setter,从而触发子组件的更新</span></span><br><span class="line">  updateChildComponent(</span><br><span class="line">    child,</span><br><span class="line">    options.propsData, <span class="comment">// updated props</span></span><br><span class="line">    options.listeners, <span class="comment">// updated listeners</span></span><br><span class="line">    vnode, <span class="comment">// new parent vnode</span></span><br><span class="line">    options.children <span class="comment">// new children</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>prepatch</code>方法主要调用<code>updateChildComponent</code>, 根据<code>vnode</code>数据的改变更新子组件<code>props</code>, <code>listeners</code>等. 所以在父组件<code>vnode</code>的数据项通过<code>setter</code>发生改变后, 才会触发子组件<code>props</code>等连锁更改, 都是这里触发的逻辑.</p><p>回到<code>patchVnode</code>方法, 拿到新旧<code>vnode</code>的<code>children</code>, 先执行<code>snabbdom</code>的<code>update</code>钩子, 然后开始一连串更新逻辑:</p><ol><li>如果<code>vnode</code>有文本节点, 且文本节点内容更新, 调用<code>dom</code>方法更新文本节点内容</li><li>如果<code>vnode</code>没有文本节点, 分类讨论<ul><li>如果新旧节点的<code>children</code>不一样(同一个<code>vnode</code>, 下面子节点的内容换了), 执行<code>updateChildren</code>, 该方法内部使用<code>diff</code>算法, 高效的更新dom</li><li>如果新节点有<code>children</code>老节点没有, 将新<code>children</code>插入即可</li><li>如果旧节点有<code>children</code>但新节点没有, 删除旧借点下的旧<code>children</code></li><li>如果新节点没有<code>children</code>, 老节点也没有<code>children</code>, 但老节点有文本节点, 将其置空</li></ul></li></ol><p>至此 我们分析了组件更新时, <code>render watcher</code>的<code>getter</code>(<code>vm._update(vm._render())</code>)执行过程中, <code>Vue.js</code>内部的更新逻辑.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本节来分析组件更新的过程.&lt;/p&gt;
&lt;p&gt;前面的章节我们分析了, &lt;code&gt;updateComponent&lt;/code&gt;方法内部调用了&lt;code&gt;vm._update(vm._render())&lt;/code&gt;, 而&lt;code&gt;updateComponent&lt;/code&gt;方
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue源码解读 17 - watch</title>
    <link href="http://yoursite.com/2019/05/22/vue-source-17/"/>
    <id>http://yoursite.com/2019/05/22/vue-source-17/</id>
    <published>2019-05-22T10:22:33.000Z</published>
    <updated>2019-12-19T09:24:29.223Z</updated>
    
    <content type="html"><![CDATA[<p>本节分析下<code>Vue.js</code>监听属性的实现, 在<code>Vue</code>初始化时会执行<code>initState</code>过程, 其中会执行<code>initWatch</code>过程</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/state.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initState</span> (<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  vm._watchers = []</span><br><span class="line">  <span class="keyword">const</span> opts = vm.$options</span><br><span class="line">  <span class="comment">// 初始化props</span></span><br><span class="line">  <span class="keyword">if</span> (opts.props) initProps(vm, opts.props)</span><br><span class="line">  <span class="comment">// 初始化methods</span></span><br><span class="line">  <span class="keyword">if</span> (opts.methods) initMethods(vm, opts.methods)</span><br><span class="line">  <span class="comment">// 初始化data</span></span><br><span class="line">  <span class="keyword">if</span> (opts.data) &#123;</span><br><span class="line">    initData(vm)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 给数据创建响应式</span></span><br><span class="line">    observe(vm._data = &#123;&#125;, <span class="literal">true</span> <span class="comment">/* asRootData */</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 初始化计算属性computed</span></span><br><span class="line">  <span class="keyword">if</span> (opts.computed) initComputed(vm, opts.computed)</span><br><span class="line">  <span class="comment">// 初始化watch</span></span><br><span class="line">  <span class="keyword">if</span> (opts.watch &amp;&amp; opts.watch !== nativeWatch) &#123;</span><br><span class="line">    initWatch(vm, opts.watch)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initWatch</span> (<span class="params">vm: Component, watch: Object</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 对watch对象内的方法调用createWatcher方法 -&gt; createWatcher方法</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> watch) &#123;</span><br><span class="line">    <span class="keyword">const</span> handler = watch[key]</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(handler)) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; handler.length; i++) &#123;</span><br><span class="line">        createWatcher(vm, key, handler[i])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      createWatcher(vm, key, handler)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWatcher</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  vm: Component,</span></span></span><br><span class="line"><span class="function"><span class="params">  expOrFn: string | Function,</span></span></span><br><span class="line"><span class="function"><span class="params">  handler: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  options?: Object</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isPlainObject(handler)) &#123;</span><br><span class="line">    options = handler</span><br><span class="line">    handler = handler.handler</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> handler === <span class="string">'string'</span>) &#123;</span><br><span class="line">    handler = vm[handler]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 数据规范化后, 最终调用vm.$watch -&gt; watch方法</span></span><br><span class="line">  <span class="keyword">return</span> vm.$watch(expOrFn, handler, options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">Vue.prototype.$watch = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  expOrFn: string | Function,</span></span></span><br><span class="line"><span class="function"><span class="params">  cb: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  options?: Object</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Function</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> vm: Component = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">if</span> (isPlainObject(cb)) &#123;</span><br><span class="line">    <span class="keyword">return</span> createWatcher(vm, expOrFn, cb, options)</span><br><span class="line">  &#125;</span><br><span class="line">  options = options || &#123;&#125;</span><br><span class="line">  options.user = <span class="literal">true</span></span><br><span class="line">  <span class="comment">// 创建一个watcher对象, cb是watch回调</span></span><br><span class="line">  <span class="comment">// options &#123; user: true &#125;</span></span><br><span class="line">  <span class="keyword">const</span> watcher = <span class="keyword">new</span> Watcher(vm, expOrFn, cb, options)</span><br><span class="line">  <span class="comment">// 如果配置了immediate, 立即执行回调一次</span></span><br><span class="line">  <span class="keyword">if</span> (options.immediate) &#123;</span><br><span class="line">    cb.call(vm, watcher.value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回一个方法可以取消watch(销毁这个watcher)</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">unwatchFn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    watcher.teardown()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>initWatch</code>中对每一个<code>watch</code>调用了<code>createWatcher</code>方法, 该方法继续调用<code>vm.$watch</code>方法.</p><p><code>$watch</code>方法定义在<code>Vue</code>的原型上, 该方法的逻辑如下:</p><ol><li><code>new Watcher</code>, 其中<code>options</code>是写死的<code>{ user: true }</code></li><li>如果设置了<code>immediate</code>, 立即执行一次<code>watch</code>方法</li><li>返回一个可以销毁监听器的<code>unwatch</code>函数.</li></ol><p>下面看看<code>new Watcher</code>的过程:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/observer/watcher.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">  vm: Component;</span><br><span class="line">  expression: string;</span><br><span class="line">  cb: <span class="built_in">Function</span>;</span><br><span class="line">  id: number;</span><br><span class="line">  deep: boolean;</span><br><span class="line">  user: boolean;</span><br><span class="line">  computed: boolean;</span><br><span class="line">  sync: boolean;</span><br><span class="line">  dirty: boolean;</span><br><span class="line">  active: boolean;</span><br><span class="line">  dep: Dep;</span><br><span class="line">  deps: <span class="built_in">Array</span>&lt;Dep&gt;;</span><br><span class="line">  newDeps: <span class="built_in">Array</span>&lt;Dep&gt;;</span><br><span class="line">  depIds: SimpleSet;</span><br><span class="line">  newDepIds: SimpleSet;</span><br><span class="line">  before: ?<span class="built_in">Function</span>;</span><br><span class="line">  getter: <span class="built_in">Function</span>;</span><br><span class="line">  value: any;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span> (</span><br><span class="line">    vm: Component, // vm实例</span><br><span class="line">    expOrFn: string | Function,  // watch路径</span><br><span class="line">    cb: Function, // watch回调</span><br><span class="line">    options?: ?Object, // &#123; user: <span class="literal">true</span> &#125;</span><br><span class="line">    isRenderWatcher?: boolean <span class="comment">// true</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">this</span>.vm = vm</span><br><span class="line">    <span class="keyword">if</span> (isRenderWatcher) &#123;</span><br><span class="line">      vm._watcher = <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将watcher实例push入vm._watchers数组</span></span><br><span class="line">    vm._watchers.push(<span class="keyword">this</span>)</span><br><span class="line">    <span class="comment">// options</span></span><br><span class="line">    <span class="keyword">if</span> (options) &#123;</span><br><span class="line">      <span class="keyword">this</span>.deep = !!options.deep</span><br><span class="line">      <span class="keyword">this</span>.user = !!options.user <span class="comment">// this.user = true</span></span><br><span class="line">      <span class="keyword">this</span>.computed = !!options.computed</span><br><span class="line">      <span class="keyword">this</span>.sync = !!options.sync</span><br><span class="line">      <span class="keyword">this</span>.before = options.before</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.deep = <span class="keyword">this</span>.user = <span class="keyword">this</span>.computed = <span class="keyword">this</span>.sync = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.cb = cb</span><br><span class="line">    <span class="keyword">this</span>.id = ++uid <span class="comment">// uid for batching</span></span><br><span class="line">    <span class="keyword">this</span>.active = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">this</span>.dirty = <span class="keyword">this</span>.computed <span class="comment">// for computed watchers</span></span><br><span class="line">    <span class="keyword">this</span>.deps = []</span><br><span class="line">    <span class="keyword">this</span>.newDeps = []</span><br><span class="line">    <span class="keyword">this</span>.depIds = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">    <span class="keyword">this</span>.newDepIds = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">    <span class="keyword">this</span>.expression = process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line">      ? expOrFn.toString()</span><br><span class="line">      : <span class="string">''</span></span><br><span class="line">    <span class="comment">// parse expression for getter</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> expOrFn === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.getter = expOrFn</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// parse路径, 返回监听函数</span></span><br><span class="line">      <span class="keyword">this</span>.getter = parsePath(expOrFn)</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.getter) &#123;</span><br><span class="line">        <span class="keyword">this</span>.getter = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">        process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; warn(</span><br><span class="line">          <span class="string">`Failed watching path: "<span class="subst">$&#123;expOrFn&#125;</span>" `</span> +</span><br><span class="line">          <span class="string">'Watcher only accepts simple dot-delimited paths. '</span> +</span><br><span class="line">          <span class="string">'For full control, use a function instead.'</span>,</span><br><span class="line">          vm</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.computed) &#123;</span><br><span class="line">      <span class="keyword">this</span>.value = <span class="literal">undefined</span></span><br><span class="line">      <span class="keyword">this</span>.dep = <span class="keyword">new</span> Dep()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// watch是一上来就求值的</span></span><br><span class="line">      <span class="keyword">this</span>.value = <span class="keyword">this</span>.get()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  get () &#123;</span><br><span class="line">    <span class="comment">// 赋值Dep.target, 值为userWatcher</span></span><br><span class="line">    pushTarget(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">let</span> value</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">this</span>.vm</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 求值过程, 触发watch相关依赖的getter, 收集userWatcher进入对应dep.subs为依赖</span></span><br><span class="line">      value = <span class="keyword">this</span>.getter.call(vm, vm)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.user) &#123;</span><br><span class="line">        handleError(e, vm, <span class="string">`getter for watcher "<span class="subst">$&#123;<span class="keyword">this</span>.expression&#125;</span>"`</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> e</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="comment">// "touch" every property so they are all tracked as</span></span><br><span class="line">      <span class="comment">// dependencies for deep watching</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.deep) &#123;</span><br><span class="line">        traverse(value)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 出栈Dep.target</span></span><br><span class="line">      popTarget()</span><br><span class="line">      <span class="comment">// 清除依赖的过程</span></span><br><span class="line">      <span class="keyword">this</span>.cleanupDeps()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line">  update () &#123;</span><br><span class="line">    <span class="comment">/* istanbul ignore else */</span></span><br><span class="line">    <span class="comment">// 计算属性部分 </span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.computed) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 同步watcher部分</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.sync) &#123;</span><br><span class="line">      <span class="keyword">this</span>.run()</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// user watcher($watch)最后走的queueWatcher</span></span><br><span class="line">      queueWatcher(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  getAndInvoke (cb: <span class="built_in">Function</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">this</span>.get()</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      value !== <span class="keyword">this</span>.value ||</span><br><span class="line">      <span class="comment">// Deep watchers and watchers on Object/Arrays should fire even</span></span><br><span class="line">      <span class="comment">// when the value is the same, because the value may</span></span><br><span class="line">      <span class="comment">// have mutated.</span></span><br><span class="line">      isObject(value) ||</span><br><span class="line">      <span class="keyword">this</span>.deep</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="comment">// set new value</span></span><br><span class="line">      <span class="keyword">const</span> oldValue = <span class="keyword">this</span>.value</span><br><span class="line">      <span class="keyword">this</span>.value = value</span><br><span class="line">      <span class="keyword">this</span>.dirty = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.user) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// watch函数执行</span></span><br><span class="line">          cb.call(<span class="keyword">this</span>.vm, value, oldValue)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          handleError(e, <span class="keyword">this</span>.vm, <span class="string">`callback for watcher "<span class="subst">$&#123;<span class="keyword">this</span>.expression&#125;</span>"`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cb.call(<span class="keyword">this</span>.vm, value, oldValue)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>new Watcher</code>的过程:</p><ol><li><code>this.user = true</code></li><li><code>expOrFn</code>为<code>string</code>, 所以执行<code>parsePath</code>返回一个监听函数(后详)</li><li>执行<code>this.value = this.get()</code>直接求值.</li></ol><p><code>this.get</code>的过程</p><ol><li><code>pushTarget</code>过程, 将<code>Dep.target</code>赋值为<code>user watcher</code></li><li>执行<code>this.getter</code>, 就是<code>parsePath</code>返回的函数, 让<code>watch</code>的数据项收集<code>userWatcher</code>进入对应<code>dep</code>的<code>subs</code>成为依赖</li><li><code>popTarget</code>, <code>Dep.target</code>还原为<code>渲染watcher</code></li></ol><p>下面分析下<code>parsePath</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/util/lang.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">parsePath</span> (<span class="params">path: string</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (bailRE.test(path)) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> segments = path.split(<span class="string">'.'</span>)</span><br><span class="line">  <span class="comment">// obj这里传入的是vm, 所以可以解析出需要watch的是vm.a</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; segments.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!obj) <span class="keyword">return</span></span><br><span class="line">      <span class="comment">// 这里访问监听的值, 触发监听的属性的getter</span></span><br><span class="line">      <span class="comment">// 在userWatcher(负责$watch)的watcher.get()的过程中, pushTarget会将Dep.target置为userWatcher, </span></span><br><span class="line">      <span class="comment">// 然后对watcher求值会访问到相关的依赖变量, 这个过程会将userWatcher加入这些依赖变量的dep的subs数组中, 收集为依赖</span></span><br><span class="line">      <span class="comment">// 后续这些watch相关的变量的setter触发时, 会将已经加入this.subs的userWatcher执行update</span></span><br><span class="line">      obj = obj[segments[i]]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>parsePath</code>方法返回的函数, 拆解传入的路径字符串, 并返回最后监听的对象中的<code>key</code>的值. 在这个过程中会触发对应key的<code>getter</code>, 会将<code>user watcher</code>收集进监听key对应的<code>dep</code>的<code>subs</code>数组作为依赖.</p><p>后续该<code>key</code>的<code>setter</code>, 派发更新时, 进入<code>userWatcer</code>的<code>update</code>逻辑. 执行<code>queueWatcher</code>, 这个过程前几节分析派发更新源码的时候我们分析过, <code>queueWatcher</code>会调用<code>watcher.run()</code>, 进入<code>getAndInvoke(this.cb)</code>逻辑.</p><p>继续分析<code>getAndInvoke</code>过程, 如果两次求值不一样, 且<code>this.user</code>为true时, 会去执行<code>cb.call(this.vm, value, oldValue)</code>, 执行了<code>watch</code>的回调函数逻辑.</p><p>至此, 我们分析了<code>Vue.js</code>的监听器的实现.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本节分析下&lt;code&gt;Vue.js&lt;/code&gt;监听属性的实现, 在&lt;code&gt;Vue&lt;/code&gt;初始化时会执行&lt;code&gt;initState&lt;/code&gt;过程, 其中会执行&lt;code&gt;initWatch&lt;/code&gt;过程&lt;/p&gt;
&lt;figure class=&quot;highl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>two-vuex: 小程序状态管理的研究和实现</title>
    <link href="http://yoursite.com/2019/05/06/two-vuex/"/>
    <id>http://yoursite.com/2019/05/06/two-vuex/</id>
    <published>2019-05-06T01:56:04.000Z</published>
    <updated>2019-12-19T09:01:07.289Z</updated>
    
    <content type="html"><![CDATA[<p>一直以来, 小程序组件和页面间传值的方式处于一个比较传统的状态. 小程序的页面间通过 <code>queryString</code> 的方式进行传值, 组件间通过<code>triggerEvent</code> 进行传值. 这些都是比较传统的值传递方式. 在实际业务开发中, 碰到前端场景比较复杂的情况, 这种落后的状态共享方式, 不能满足开发需要, 引入状态管理势在必行.</p><p>因为对这方面比较感兴趣, 再加上工作有交集, 我开始了实现小程序状态管理功能的一次尝试.</p><h2 id="需求都有什么-？"><a href="#需求都有什么-？" class="headerlink" title="需求都有什么 ？"></a>需求都有什么 ？</h2><p>要给小程序添加状态管理, 要对需求功能点做细致的考量. 网上有很多<code>&quot;demo&quot;</code>, 但因为只是<code>demo</code>, 功能点太少, 无法满足复杂业务开发的需要. 另外, 很多大型的编译框架也给小程序运行时添加了状态管理, 但一般会依赖其他npm库, 也没有针对小程序的特性做处理. </p><p>综上, 开发小程序的状态管理, 我考虑有三点必要性:</p><ol><li>一定要是可独立运行的模块(可以脱离任何框架, 在任何小程序项目中使用)</li><li>一定要针对小程序开发的特性(逻辑层和视图层通讯的方式)做特殊处理</li><li>可以应用于大型项目</li></ol><p>于是, 考虑了业务开发中的具体需求, 我将要求细化为以下几点.</p><ul><li>具备状态管理的一般功能, 不自造标准, 向流行规范靠拢.</li><li>可追踪到状态引起视图改变已完成的时间点(什么时候<code>setData</code>完毕)</li><li>模块化, 可适应大型项目需要</li></ul><p>经过几周的调研和开发, <code>two-vuex</code>就这么迎来了初版.</p><h2 id="two-vuex实现解读"><a href="#two-vuex实现解读" class="headerlink" title="two-vuex实现解读"></a>two-vuex实现解读</h2><p><code>two-vuex</code>的调用模式十分接近<code>Vue.js</code>的状态管理库<code>vuex</code>, 并针对小程序<code>setData</code>的方式进行了特殊处理. 使开发者可以在<code>dispatch</code>的<code>Promise</code>中获取视图全部更新完毕的时间点. 下面, 我们从设计层面分析下<code>two-vuex</code>是怎么实现的.</p><h3 id="store对象"><a href="#store对象" class="headerlink" title="store对象"></a>store对象</h3><p><code>two-vuex</code>最终导出一个<code>Store</code>类, 通过传入配置对象, 实例化一个<code>store</code>对象, 状态管理的一切都由这个对象控制.</p><p>调用方式大概是这样:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    getterCount: <span class="function">(<span class="params">state, getters</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.count + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment(setData, state, payload) &#123;</span><br><span class="line">      <span class="keyword">return</span> setData(&#123; <span class="attr">count</span>: state.count + payload.add &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    increment(&#123; commit &#125;, payload) &#123;</span><br><span class="line">      commit(<span class="string">'increment'</span>, payload)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    a: moduleA</span><br><span class="line">  &#125;,</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    getterCount: <span class="function">(<span class="params">state, getters</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.count + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment(setData, state, payload) &#123;</span><br><span class="line">      <span class="keyword">return</span> setData(&#123; <span class="attr">count</span>: state.count + payload.add &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    increment(&#123; commit &#125;, payload) &#123;</span><br><span class="line">      commit(<span class="string">'increment'</span>, payload)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Store(config)</span><br></pre></td></tr></table></figure><p>先来看看store对象的结构:</p><p><img src="https://i.loli.net/2019/04/11/5caf27f46845f.jpg" alt="store对象结构"></p><p>这就是最终想生成的store对象, 按照<code>vuex</code>规范, 状态<code>state</code>是按照模块名层层嵌套的一个树结构, 但<code>mutation</code>, <code>action</code>和<code>getters</code>却是扁平化的, 模块之间用<code>/</code>连接. 这样的设计和<code>vuex</code>规范完全相符. </p><p>下面先来了解下<code>Store</code>实例化的最外层流程</p><h3 id="总体流程"><a href="#总体流程" class="headerlink" title="总体流程"></a>总体流程</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options = &#123;&#125;) &#123;</span><br><span class="line">     <span class="comment">// store的mutations映射表, 一个type字段(包含namespage)可以对应多个mutations</span></span><br><span class="line">     <span class="keyword">this</span>._mutations = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">     <span class="comment">// store的state与组件内this.data.$states的映射表</span></span><br><span class="line">     <span class="keyword">this</span>._statesMap = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line"> </span><br><span class="line">     <span class="comment">// store的getters 映射表, 一个type字段只能代表一个计算属性方法方法</span></span><br><span class="line">     <span class="keyword">this</span>._wrappedGetters = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">     <span class="comment">// store的getters与组件内this.data.$getters的映射表</span></span><br><span class="line">     <span class="keyword">this</span>._gettersMap = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line"> </span><br><span class="line">     <span class="comment">// store的actions映射表, 一个type字段(包含namespace)可以对应多个action</span></span><br><span class="line">     <span class="keyword">this</span>._actions = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">     </span><br><span class="line">     <span class="comment">// 以namespacedKey存储所有模块</span></span><br><span class="line">     <span class="keyword">this</span>._modulesNamespaceMap = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line"> </span><br><span class="line">     <span class="comment">// 重要步骤1. 递归生成所有modules及其父子关系</span></span><br><span class="line">     <span class="keyword">this</span>._modules = <span class="keyword">new</span> ModuleCollection(options)</span><br><span class="line">   </span><br><span class="line">     <span class="comment">// 重要步骤2. 给actions mutations getters 赋值</span></span><br><span class="line">     installModule(<span class="keyword">this</span>, state, [], <span class="keyword">this</span>._modules.root)</span><br><span class="line">     </span><br><span class="line">     <span class="comment">// 给store.getters增加getter</span></span><br><span class="line">     addGetterToStoreGetters(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是一份<code>Store</code>类的<code>constructor</code>伪代码, <code>Store</code>类在实例化的过程中首先为<code>mutations</code>, <code>getters</code>, <code>actions</code>等生成了各自对应的容器空对象, 然后进行两个重要步骤, 第一个步骤递归生成所有<code>modules</code>节点, 并形成嵌套的模块关系. 第二个步骤从根节点开始, 给每个模块的<code>mutations</code>, <code>getters</code>, <code>actions</code>赋值.</p><h3 id="new-ModuleCollection的过程-生成模块树"><a href="#new-ModuleCollection的过程-生成模块树" class="headerlink" title="new ModuleCollection的过程, 生成模块树"></a>new ModuleCollection的过程, 生成模块树</h3><p>先来看<code>new ModuleCollection</code>的过程.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModuleCollection</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(rawRootModule) &#123;</span><br><span class="line">    <span class="comment">// 外部调用: new ModuleCollection(options)</span></span><br><span class="line">    <span class="keyword">this</span>.register([], rawRootModule, <span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  register(path, rawModule, isRoot) &#123;</span><br><span class="line">    <span class="comment">// 将每个对应模块实例化为Module类型</span></span><br><span class="line">    <span class="keyword">const</span> newModule = <span class="keyword">new</span> Module(rawModule, isRoot)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果是根模块, 将moduleCollection实例的root属性设置为根模块</span></span><br><span class="line">    <span class="keyword">if</span> (path.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.root = newModule</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果不是根模块, 则找到当前模块的父模块(父模块肯定先于子模块注册)</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> parent = <span class="keyword">this</span>.get(path.slice(<span class="number">0</span>, <span class="number">-1</span>))</span><br><span class="line">      <span class="comment">// 给父模块的_children数组中设置对应的子模块, 这里的parent也是Module类型的模块</span></span><br><span class="line">      parent.addChild(path[path.length - <span class="number">1</span>], newModule)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果该模块有modules配置, 递归执行register方法</span></span><br><span class="line">    <span class="keyword">if</span> (rawModule.modules) &#123;</span><br><span class="line">      forEachValue(rawModule.modules, (rawChildModule, key) =&gt; &#123;</span><br><span class="line">        <span class="comment">// path在这里会concat key, 从而形成路径结构</span></span><br><span class="line">        <span class="keyword">this</span>.register(path.concat(key), rawChildModule)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Module</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(rawModule, isRoot) &#123;</span><br><span class="line">      <span class="keyword">this</span>._children = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">      <span class="comment">// 每个module的在config中字面量对象的原始定义</span></span><br><span class="line">      <span class="keyword">this</span>._rawModule = rawModule</span><br><span class="line">      <span class="comment">// 获取module原始定义上的原始state定义(不嵌套的), 并挂载在this.state上</span></span><br><span class="line">      <span class="keyword">const</span> rawState = rawModule.state</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="keyword">typeof</span> rawState === <span class="string">'function'</span> ? rawState() : rawState || &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ModuleCollection</code>对象生成的过程中, 会为每一个单独模块生成一个<code>Module</code>类对象, 对象中有<code>children</code>数组, 用来装载当前模块的所有子模块, 并给每个<code>Module</code>挂载模块下的<code>state</code>值, 在运行<code>register</code>方法时, 将模块间的父子关系定义下来, 并给<code>Module</code>的每一个子模块递归调用<code>register</code>方法, 递归生成模块树.</p><p>下面, 我们看看<code>installModule</code>的过程.</p><h3 id="installModule-递归给每个模块注册mutation-getters-和-action"><a href="#installModule-递归给每个模块注册mutation-getters-和-action" class="headerlink" title="installModule, 递归给每个模块注册mutation, getters 和 action"></a>installModule, 递归给每个模块注册mutation, getters 和 action</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">installModule</span>(<span class="params">store, rootState, path, module</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isRoot = !path.length</span><br><span class="line">  <span class="keyword">const</span> namespace = store._modules.getNamespace(path)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!isRoot) &#123;</span><br><span class="line">    <span class="keyword">const</span> parentState = getNestedState(rootState, path.slice(<span class="number">0</span>, <span class="number">-1</span>))</span><br><span class="line">    <span class="keyword">const</span> moduleName = path[path.length - <span class="number">1</span>]</span><br><span class="line">    <span class="comment">// 给父模块的state设置当前子模块的state</span></span><br><span class="line">    <span class="comment">// store.state[...parent]['son'] = son['state']</span></span><br><span class="line">    parentState[moduleName] = <span class="built_in">module</span>.state</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> local = (<span class="built_in">module</span>.context = makeLocalContext(store, namespace, path))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 给当前模块注册mutation</span></span><br><span class="line">  <span class="built_in">module</span>.forEachMutation(<span class="function">(<span class="params">mutation, key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> namespacedType = namespace + key</span><br><span class="line">    registerMutation(store, namespacedType, mutation, local)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 给当前模块注册getters</span></span><br><span class="line">  <span class="built_in">module</span>.forEachGetter(<span class="function">(<span class="params">getter, key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> namespacedType = namespace + key</span><br><span class="line">    registerGetter(store, namespacedType, getter, local)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 给当前模块注册action</span></span><br><span class="line">  <span class="built_in">module</span>.forEachAction(<span class="function">(<span class="params">action, key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> namespacedType = namespace + key</span><br><span class="line">    registerAction(store, namespacedType, action, local)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 递归对当前模块的子模块(this._children)调用installModule</span></span><br><span class="line">  <span class="built_in">module</span>.forEachChild(<span class="function">(<span class="params">child, key</span>) =&gt;</span> &#123;</span><br><span class="line">    installModule(store, rootState, path.concat(key), child)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>installModule</code>的过程会对每个模块进行一系列处理, 然后再递归对其子模块进行同样的处理. 我们先关注下处理过程: 首先会根据<code>path</code>数组生成每个模块的<code>namespace</code>, 这个<code>namespace</code>即<code>&quot;a/b&quot;</code>这样的扁平化的命名空间字符串的拼接, 再用<code>getNestedState</code>方法找到当前模块的父模块, 并给父模块命名空间下挂载当前模块的<code>state</code>(注意, 直到此时, 才生成了真正逻辑上由各个模块组合的<code>state</code>树). 然后, 会用<code>makeLocalContext</code>方法生成一个本地化的<code>local</code>对象. 最后, 会进入到依次注册<code>mutation</code>, <code>getters</code> 和 <code>action</code>的过程中, 这些过程都需要用到<code>local</code>对象.</p><p>继续分析生成<code>local</code>对象的过程.</p><h3 id="makeLocalContext的过程-生成局部化的store对象"><a href="#makeLocalContext的过程-生成局部化的store对象" class="headerlink" title="makeLocalContext的过程, 生成局部化的store对象"></a>makeLocalContext的过程, 生成局部化的store对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeLocalContext</span>(<span class="params">store, namespace, path</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// noNamespace标识当前模块是否是嵌套子模块</span></span><br><span class="line">  <span class="keyword">const</span> noNamespace = namespace === <span class="string">''</span></span><br><span class="line">  <span class="keyword">const</span> local = &#123;</span><br><span class="line">    state: getNestedState(store.state, path),</span><br><span class="line">    dispatch: noNamespace</span><br><span class="line">      ? store.dispatch</span><br><span class="line">      : <span class="function">(<span class="params">type, payload, options</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 如果没设置options: &#123; root:true &#125;, 给action type拼接namespace前缀, 并检查是否有该action被注册</span></span><br><span class="line">          <span class="keyword">if</span> (!options || !options.root) &#123;</span><br><span class="line">            type = namespace + type</span><br><span class="line">            <span class="keyword">if</span> (!store._actions[type]) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="built_in">console</span>.error(</span><br><span class="line">                <span class="string">`[two-vuex] unknown local action type: <span class="subst">$&#123;type&#125;</span>`</span></span><br><span class="line">              )</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> store.dispatch(type, payload)</span><br><span class="line">        &#125;,</span><br><span class="line">    commit: noNamespace</span><br><span class="line">      ? store.commit</span><br><span class="line">      : <span class="function">(<span class="params">type, payload, options</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 如果没设置options: &#123; root:true &#125;, 给 mutation type拼接namespace前缀, 并检查是否有该action被注册</span></span><br><span class="line">          <span class="keyword">if</span> (!options || !options.root) &#123;</span><br><span class="line">            type = namespace + type</span><br><span class="line">            <span class="keyword">if</span> (!store._mutations[type]) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="built_in">console</span>.error(</span><br><span class="line">                <span class="string">`[two-vuex] unknow local mutation type: <span class="subst">$&#123;type&#125;</span>`</span></span><br><span class="line">              )</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> store.commit(type, payload)</span><br><span class="line">        &#125;,</span><br><span class="line">    setStore: noNamespace</span><br><span class="line">      ? store.setStore</span><br><span class="line">      : <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> prefix = namespace</span><br><span class="line">            .split(<span class="string">'/'</span>)</span><br><span class="line">            .filter(<span class="function"><span class="params">item</span> =&gt;</span> item)</span><br><span class="line">            .join(<span class="string">'.'</span>)</span><br><span class="line">          config = <span class="built_in">Object</span>.keys(config).reduce(<span class="function">(<span class="params">accumulator, key</span>) =&gt;</span> &#123;</span><br><span class="line">            accumulator[<span class="string">`<span class="subst">$&#123;prefix&#125;</span>.<span class="subst">$&#123;key&#125;</span>`</span>] = config[key]</span><br><span class="line">            <span class="keyword">return</span> accumulator</span><br><span class="line">          &#125;, &#123;&#125;)</span><br><span class="line">          <span class="keyword">return</span> store.setStore(config)</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// state和getters会产生改变, 所以用lazy获取的方式</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperties(local, &#123;</span><br><span class="line">    getters: &#123;</span><br><span class="line">      get: noNamespace</span><br><span class="line">        ? <span class="function"><span class="params">()</span> =&gt;</span> store.getters</span><br><span class="line">        : <span class="function"><span class="params">()</span> =&gt;</span> makeLocalGetters(store, namespace)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> local</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>makeLocalContext</code>方法是vuex源码中的重要一环, dispatch action时的第一个参数, 可以拿到局部模块的<code>state</code>, <code>commit</code>, <code>dispatch</code>, <code>setStore</code>(一会再解释<code>setStore</code>是什么). 实际上, 它是在<code>commit</code>, <code>dispatch</code>, <code>setStore</code>外再包一层, 使这些方法在真正执行时, 执行的对应方法<code>key</code>前加了命名空间前缀(比如<code>commit</code>一个<code>a</code>模块下的<code>add</code>方法, 实际上执行的<code>mutation</code>是<code>a/add</code>). <code>local</code>内部的<code>state</code>是根据<code>path</code>从根状态上取到的, 所以也做到了局部化.</p><h3 id="注册Mutation"><a href="#注册Mutation" class="headerlink" title="注册Mutation"></a>注册Mutation</h3><p>生成<code>local</code>对象后, 要给模块分别注册<code>mutation</code>, <code>getters</code>, <code>action</code>, 争取扁平化的存储这些要素.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给当前模块注册mutation</span></span><br><span class="line"><span class="built_in">module</span>.forEachMutation(<span class="function">(<span class="params">mutation, key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> namespacedType = namespace + key</span><br><span class="line">  registerMutation(store, namespacedType, mutation, local)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerMutation</span>(<span class="params">store, type, mutation, local</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> entry = store._mutations[type] || (store._mutations[type] = [])</span><br><span class="line">  entry.push(<span class="function"><span class="keyword">function</span> <span class="title">wrappedMutationHandler</span>(<span class="params">payload</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mutation.call(store, local.setStore, local.state, payload)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>store._mutations</code>用于扁平化的存储所有store中的<code>mutations</code>, 首先<code>mutation type</code>是 <code>模块名</code> 与 <code>mutation名</code> 的一个拼接, 以此达到扁平化的目的, 每一个扁平化的<code>key</code>对应一个<code>mutation</code>数组, 其中存放的方法绑定了上下文<code>store</code>, 并将<code>local</code>对象传入, 达到参数局部化的目的.</p><h3 id="注册Action"><a href="#注册Action" class="headerlink" title="注册Action"></a>注册Action</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给当前模块注册action</span></span><br><span class="line"><span class="built_in">module</span>.forEachAction(<span class="function">(<span class="params">action, key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> namespacedType = namespace + key</span><br><span class="line">  registerAction(store, namespacedType, action, local)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerAction</span>(<span class="params">store, type, action, local</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> entry = store._actions[type] || (store._actions[type] = [])</span><br><span class="line">  entry.push(<span class="function"><span class="keyword">function</span> <span class="title">wrappedActionHandler</span>(<span class="params">payload, cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = action.call(</span><br><span class="line">      store,</span><br><span class="line">      &#123;</span><br><span class="line">        dispatch: local.dispatch,</span><br><span class="line">        getters: local.getters,</span><br><span class="line">        commit: local.commit,</span><br><span class="line">        state: local.state,</span><br><span class="line">        rootState: store.state,</span><br><span class="line">        rootGetters: store.getters</span><br><span class="line">      &#125;,</span><br><span class="line">      payload</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 将action的返回结果promise化</span></span><br><span class="line">    <span class="keyword">if</span> (!isPromise(res)) &#123;</span><br><span class="line">      res = <span class="built_in">Promise</span>.resolve(res)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>action</code>的注册过程和<code>mutation</code>类似, 在<code>action</code>被<code>call</code>时根据<code>local</code>对象组装局部<code>context</code>对象, 并将返回结果<code>Promise</code>化, 方便后续调用.</p><h3 id="store-setStore-与-store-commit"><a href="#store-setStore-与-store-commit" class="headerlink" title="store.setStore 与 store.commit"></a>store.setStore 与 store.commit</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store.setStore方法</span></span><br><span class="line">setStore(config = &#123;&#125;) &#123;</span><br><span class="line">  <span class="comment">// setStore返回一个promise</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 遍历setStore的config, 对每个key, value做处理</span></span><br><span class="line">    forEachValue(config, (val, key) =&gt; &#123;</span><br><span class="line">      processNestedState(<span class="keyword">this</span>, key, (nestedState, tailKey) =&gt; &#123;</span><br><span class="line">        <span class="comment">// 给store中的对应项赋值</span></span><br><span class="line">        nestedState[tailKey] = val</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历_statesMap中的依赖项, 对每个依赖项调用setData, 在渲染完成后resolve</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果调用namespacedKey state 没有组件注册过, 报警, return</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>._statesMap[key])</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">console</span>.warn(</span><br><span class="line">            <span class="string">`[two-vuex] 没有页面或组件订阅store中的状态: "<span class="subst">$&#123;key&#125;</span>"`</span></span><br><span class="line">          )</span><br><span class="line">        <span class="comment">// 循环_statesMap映射表, 找到namespacedKey对应的数组, 对其数组中的每一个注册过的依赖项执行setData</span></span><br><span class="line">        <span class="comment">// 在setData的回调中收集promise的resolved状态, 方便在最后的Promise.all中获取全部视图渲染完毕的状态</span></span><br><span class="line">        <span class="keyword">const</span> promises = <span class="keyword">this</span>._statesMap[key].map(<span class="function"><span class="params">o</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; component, dataKey &#125; = o</span><br><span class="line">            <span class="keyword">const</span> setData =</span><br><span class="line">              <span class="keyword">typeof</span> component.$setData === <span class="string">'function'</span></span><br><span class="line">                ? component.$setData</span><br><span class="line">                : component.setData</span><br><span class="line">            setData.call(component, &#123; [<span class="string">`$state.<span class="subst">$&#123;dataKey&#125;</span>`</span>]: val &#125;, () =&gt; &#123;</span><br><span class="line">              resolve()</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这个Promise resolved 时代表所有states和getters在所有组件上渲染完毕(所有setData的回调执行完毕)</span></span><br><span class="line">        <span class="built_in">Promise</span>.all(promises.concat(computedPromises)).then(<span class="function"><span class="params">promises</span> =&gt;</span> &#123;</span><br><span class="line">          resolve(promises)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// store.commit 方法</span></span><br><span class="line">commit(type, payload) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// options中的root若为true, 可以在命名空间里提交根mutation</span></span><br><span class="line">    <span class="comment">// 需在这里给mutation传递setStore方法</span></span><br><span class="line">    <span class="keyword">const</span> entry = <span class="keyword">this</span>._mutations[type]</span><br><span class="line">    <span class="comment">// 如果没有该mutation, 报错</span></span><br><span class="line">    <span class="keyword">if</span> (!entry)</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">console</span>.error(<span class="string">`[two-vuex] unknown mutation type: <span class="subst">$&#123;type&#125;</span>`</span>)</span><br><span class="line">    <span class="comment">// 将所有mutation循环调用, 实际调用的是wrappedMutationHandler</span></span><br><span class="line">    <span class="keyword">const</span> promises = entry.map(<span class="function"><span class="params">mutation</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">typeof</span> <span class="keyword">this</span>._withCommit === <span class="string">'function'</span></span><br><span class="line">        ? <span class="keyword">this</span>._withCommit(mutation.bind(<span class="keyword">this</span>, payload))</span><br><span class="line">        : mutation(payload)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">Promise</span>.all(promises).then(<span class="function"><span class="params">promises</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(promises)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>two-vuex</code>并没有采用<code>vue</code>的数据监听机制, 为了不引入其他npm库, 并对代码的性能做严格把控. 我选择在每个组件注册时记录每个组件对store内数据的订阅者, 用一套类发布订阅机制去触发数据的改变, 触发数据改变的扳机就是<code>setStore</code>方法, 它作为<code>mutation</code>的第一个参数被传入, 在<code>mutation</code>内约定用<code>setStore</code>方法触发数据的改变.</p><p>在代码设计上, 在<code>mutation</code>中返回<code>setStore</code>方法的运行结果(一个包装过的<code>Promise</code>), 在所有依赖<code>store</code>中<code>state</code>的数据和更改过的计算属性在页面上渲染完毕后, 可以用<code>commit.then</code>获取所有页面更新完毕的时间节点, 这个改动我认为对小程序开发是十分必要的. 在许多场景的<code>action</code>封装中, 获取数据全部渲染完成的时间点(所有<code>setData</code>执行完毕)是一个必要需求.</p><h3 id="store-dispatch"><a href="#store-dispatch" class="headerlink" title="store.dispatch"></a>store.dispatch</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dispatch(type, payload) &#123;</span><br><span class="line">  <span class="keyword">const</span> entry = <span class="keyword">this</span>._actions[type]</span><br><span class="line">  <span class="keyword">if</span> (!entry) <span class="keyword">return</span> <span class="built_in">console</span>.error(<span class="string">`[two-vuex] unknown action type: <span class="subst">$&#123;type&#125;</span>`</span>)</span><br><span class="line">  <span class="keyword">const</span> result =</span><br><span class="line">    entry.length &gt; <span class="number">1</span></span><br><span class="line">      ? <span class="built_in">Promise</span>.all(entry.map(<span class="function"><span class="params">action</span> =&gt;</span> action(payload)))</span><br><span class="line">      : entry[<span class="number">0</span>](payload)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于Action在注册时已经将返回结果<code>Promise</code>化, 所以<code>dispatch</code>方法在调用<code>action</code>后传递<code>Promise</code>即可</p><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p><code>store</code>的计算属性<code>getters</code>是<code>vuex</code>思想中重要的一环, 但由于小程序不宜使用<code>new Vue</code>实例的<code>computed</code>功能进行监听, 从实现上要做一些修改. </p><p>先来看一下在<code>installModule</code>的过程中, <code>getters</code>的注册过程:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在installModule的过程中注册getters</span></span><br><span class="line"><span class="built_in">module</span>.forEachGetter(<span class="function">(<span class="params">getter, key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> namespacedType = namespace + key</span><br><span class="line">  registerGetter(store, namespacedType, getter, local)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerGetter</span>(<span class="params">store, type, rawGetter, local</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 如果_wrappedGetters表中, type已经有值, 警告重复声明getter, 返回</span></span><br><span class="line">  <span class="keyword">if</span> (store._wrappedGetters[type])</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.error(<span class="string">`[two-vuex] duplicate getter key: <span class="subst">$&#123;type&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line">  store._wrappedGetters[type] = <span class="function"><span class="keyword">function</span> <span class="title">wrappedGetter</span>(<span class="params">store</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log('registerGetter', type)</span></span><br><span class="line">    <span class="keyword">return</span> rawGetter(</span><br><span class="line">      local.state, <span class="comment">// local state</span></span><br><span class="line">      local.getters, <span class="comment">// local getters</span></span><br><span class="line">      store.state, <span class="comment">// root state</span></span><br><span class="line">      store.getters <span class="comment">// root getters</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在所有installModule步骤结束后, 给store.getters对象赋值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addGetterToStoreGetters</span>(<span class="params">store</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 给store增加getters属性</span></span><br><span class="line">  store.getters = &#123;&#125;</span><br><span class="line">  <span class="comment">// 遍历_wrappedGetters映射表, 给store.getters增加:</span></span><br><span class="line">  <span class="comment">// 以namespacedKey为属性名, 惰性求值的getter为值的Object property</span></span><br><span class="line">  forEachValue(store._wrappedGetters, (getter, namespacedKey) =&gt; &#123;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(store.getters, namespacedKey, &#123;</span><br><span class="line">      get: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getter(store)</span><br><span class="line">      &#125;,</span><br><span class="line">      enumerable: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>store._wrappedGetters</code>对象用来承载经过扁平化模块名拼接的<code>getters</code>, 在<code>installModule</code>过程结束后, 会统一用<code>lazy getter</code>的方式挂载所有计算属性到<code>store.getters</code>对象上.</p><p>下面是<code>makeLocalContext</code>过程中,针对计算属性做的处理.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在makeLocalContext过程中, 产生的和计算属性的相关处理</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeLocalContext</span>(<span class="params">store, namespace, path</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// noNamespace标识当前模块是否是嵌套子模块</span></span><br><span class="line">  <span class="keyword">const</span> noNamespace = namespace === <span class="string">''</span></span><br><span class="line">  <span class="keyword">const</span> local = &#123; </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// state和getters会产生改变, 所以用lazy获取的方式</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperties(local, &#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">      get: <span class="function"><span class="params">()</span> =&gt;</span> getNestedState(store.state, path)</span><br><span class="line">    &#125;,</span><br><span class="line">    getters: &#123;</span><br><span class="line">      get: noNamespace</span><br><span class="line">        ? <span class="function"><span class="params">()</span> =&gt;</span> store.getters</span><br><span class="line">        : <span class="function"><span class="params">()</span> =&gt;</span> makeLocalGetters(store, namespace)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> local</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeLocalGetters</span>(<span class="params">store, namespace</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> gettersProxy = &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> namespaceLen = namespace.length</span><br><span class="line">  forEachValue(store._wrappedGetters, (getter, type) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 如果命名空间不是以namespace开头, 过滤掉</span></span><br><span class="line">    <span class="keyword">if</span> (type.slice(<span class="number">0</span>, namespaceLen) !== namespace) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// localType: a/b/c -&gt; c</span></span><br><span class="line">    <span class="keyword">const</span> localType = type.slice(namespaceLen)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getterProxy['c'] = getter: () =&gt; store.getters['a/b/c']</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(gettersProxy, localType, &#123;</span><br><span class="line">      get: <span class="function"><span class="params">()</span> =&gt;</span> getter(store),</span><br><span class="line">      enumerable: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> gettersProxy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>makeLocalContext</code>的过程中, 通过<code>defineProperty</code>用<code>lazy get</code>的方式将<code>getters</code>的<code>key</code>指向注册<code>getters</code>时包装的<code>wrappedGetter</code>方法的实际运行结果.</p><p>下面是<code>setStore</code>执行的过程中关于<code>getter</code>的处理.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// setStore的过程中产生的和计算属性相关的处理</span></span><br><span class="line">setStore(config = &#123;&#125;) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 计算属性Promises数组</span></span><br><span class="line">  <span class="keyword">let</span> computedPromises = []</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 循环computed映射表, 计算全部getter, 再去_gettersMap中找到对应的依赖项setData</span></span><br><span class="line">  forEachValue(<span class="keyword">this</span>._wrappedGetters, (getter, key) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 计算对应的计算属性值</span></span><br><span class="line">    <span class="keyword">const</span> computedValue = getter(<span class="keyword">this</span>)</span><br><span class="line">    <span class="comment">// 如果计算属性值和上次缓存值不同, 进行计算属性渲染逻辑</span></span><br><span class="line">    <span class="keyword">if</span> (getter.cache !== computedValue) &#123;</span><br><span class="line">      <span class="comment">// 将计算属性缓存值更新</span></span><br><span class="line">      getter.cache = computedValue</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果没有任何组件注册了计算属性, 计算属性也要计算(上面几行逻辑), 但不需进行下面的关联组件渲染逻辑</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>._gettersMap[key]) <span class="keyword">return</span></span><br><span class="line">      <span class="comment">// 循环gettersMap映射表, 找到namespacedKey对应的数组, 对其数组中的每一个注册过的依赖项执行setData</span></span><br><span class="line">      <span class="comment">// 在setData的回调中收集promise的resolved状态, 方便在最后的Promise.all中获取全部视图渲染完毕的状态</span></span><br><span class="line">      computedPromises = <span class="keyword">this</span>._gettersMap[key].map(<span class="function"><span class="params">o</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> &#123; component, dataKey &#125; = o</span><br><span class="line">          <span class="keyword">const</span> setData =</span><br><span class="line">            <span class="keyword">typeof</span> component.$setData === <span class="string">'function'</span></span><br><span class="line">              ? component.$setData</span><br><span class="line">              : component.setData</span><br><span class="line">          <span class="comment">// key: 'ABCount', value: this._wrappedGetters['a/b/count'](store)</span></span><br><span class="line">          setData.call(</span><br><span class="line">            component,</span><br><span class="line">            &#123; [<span class="string">`$getters.<span class="subst">$&#123;dataKey&#125;</span>`</span>]: computedValue &#125;,</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">              resolve()</span><br><span class="line">            &#125;</span><br><span class="line">          )</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在每次<code>setStore</code>执行时, 会依次计算新的<code>getter</code>的值和缓存中的是否三等, 设计为是否三等是出于对性能的考虑, 如果计算属性计算的是一个引用类型, 需要返回一个新引用地址的字面量对象.</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p><code>two-vuex</code>是一项非常有意思的尝试, 在实现过程中遇到了很多设计层面的抉择, 思考并实践过后, 着实受益匪浅, 自己的技术和设计能力也得到了成长.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一直以来, 小程序组件和页面间传值的方式处于一个比较传统的状态. 小程序的页面间通过 &lt;code&gt;queryString&lt;/code&gt; 的方式进行传值, 组件间通过&lt;code&gt;triggerEvent&lt;/code&gt; 进行传值. 这些都是比较传统的值传递方式. 在实际业务开发
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue源码解读 16 - Computed</title>
    <link href="http://yoursite.com/2019/04/12/vue-source-16/"/>
    <id>http://yoursite.com/2019/04/12/vue-source-16/</id>
    <published>2019-04-12T00:00:51.000Z</published>
    <updated>2019-12-19T09:24:12.447Z</updated>
    
    <content type="html"><![CDATA[<p>本节主要分析下计算属性的实现.</p><p>在Vue初始化的过程中, 会执行<code>initState</code>过程, 其中有初始化计算属性的过程:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/state.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initState</span> (<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  vm._watchers = []</span><br><span class="line">  <span class="keyword">const</span> opts = vm.$options</span><br><span class="line">  <span class="comment">// 初始化props</span></span><br><span class="line">  <span class="keyword">if</span> (opts.props) initProps(vm, opts.props)</span><br><span class="line">  <span class="comment">// 初始化methods</span></span><br><span class="line">  <span class="keyword">if</span> (opts.methods) initMethods(vm, opts.methods)</span><br><span class="line">  <span class="comment">// 初始化data</span></span><br><span class="line">  <span class="keyword">if</span> (opts.data) &#123;</span><br><span class="line">    initData(vm)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 给数据创建响应式</span></span><br><span class="line">    observe(vm._data = &#123;&#125;, <span class="literal">true</span> <span class="comment">/* asRootData */</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 初始化计算属性computed</span></span><br><span class="line">  <span class="keyword">if</span> (opts.computed) initComputed(vm, opts.computed)</span><br><span class="line">  <span class="comment">// 初始化watch</span></span><br><span class="line">  <span class="keyword">if</span> (opts.watch &amp;&amp; opts.watch !== nativeWatch) &#123;</span><br><span class="line">    initWatch(vm, opts.watch)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面来看看<code>initComputed</code>的实现: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/state.js</span></span><br><span class="line"><span class="keyword">const</span> computedWatcherOptions = &#123; <span class="attr">computed</span>: <span class="literal">true</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算属性初始化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initComputed</span> (<span class="params">vm: Component, computed: Object</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// $flow-disable-line</span></span><br><span class="line">  <span class="keyword">const</span> watchers = vm._computedWatchers = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">  <span class="comment">// computed properties are just getters during SSR</span></span><br><span class="line">  <span class="keyword">const</span> isSSR = isServerRendering()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> computed) &#123;</span><br><span class="line">    <span class="keyword">const</span> userDef = computed[key]</span><br><span class="line">    <span class="comment">// 拿到每一个计算属性, 如果是对象形式必须有getter, 否则警告</span></span><br><span class="line">    <span class="keyword">const</span> getter = <span class="keyword">typeof</span> userDef === <span class="string">'function'</span> ? userDef : userDef.get</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; getter == <span class="literal">null</span>) &#123;</span><br><span class="line">      warn(</span><br><span class="line">        <span class="string">`Getter is missing for computed property "<span class="subst">$&#123;key&#125;</span>".`</span>,</span><br><span class="line">        vm</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isSSR) &#123;</span><br><span class="line">      <span class="comment">// create internal watcher for the computed property.</span></span><br><span class="line">      <span class="comment">// 每个计算属性实例化一个watcher, 挂载在watchers下</span></span><br><span class="line">      watchers[key] = <span class="keyword">new</span> Watcher(</span><br><span class="line">        vm, <span class="comment">// vm实例</span></span><br><span class="line">        getter || noop, <span class="comment">// computed getter</span></span><br><span class="line">        noop,</span><br><span class="line">        computedWatcherOptions <span class="comment">// &#123; computed: true &#125;</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// component-defined computed properties are already defined on the</span></span><br><span class="line">    <span class="comment">// component prototype. We only need to define computed properties defined</span></span><br><span class="line">    <span class="comment">// at instantiation here.</span></span><br><span class="line">    <span class="keyword">if</span> (!(key <span class="keyword">in</span> vm)) &#123;</span><br><span class="line">      <span class="comment">// 如果key不在vm上, 调用defineComputed, 传入vm, key名, 设置的回调或对象</span></span><br><span class="line">      defineComputed(vm, key, userDef)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="comment">// 否则证明计算属性同名在data或props中已经定义过了, 警告</span></span><br><span class="line">      <span class="keyword">if</span> (key <span class="keyword">in</span> vm.$data) &#123;</span><br><span class="line">        warn(<span class="string">`The computed property "<span class="subst">$&#123;key&#125;</span>" is already defined in data.`</span>, vm)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (vm.$options.props &amp;&amp; key <span class="keyword">in</span> vm.$options.props) &#123;</span><br><span class="line">        warn(<span class="string">`The computed property "<span class="subst">$&#123;key&#125;</span>" is already defined as a prop.`</span>, vm)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">defineComputed</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  target: any, <span class="regexp">//</span> vm实例</span></span></span><br><span class="line"><span class="function"><span class="params">  key: string, <span class="regexp">//</span> computed key名</span></span></span><br><span class="line"><span class="function"><span class="params">  userDef: Object | Function <span class="regexp">//</span> 用户书写的: computed[key]</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> shouldCache = !isServerRendering()</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> userDef === <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    此方法的作用域上有此全局变量:</span></span><br><span class="line"><span class="comment">    const sharedPropertyDefinition = &#123;</span></span><br><span class="line"><span class="comment">      enumerable: true,</span></span><br><span class="line"><span class="comment">      configurable: true,</span></span><br><span class="line"><span class="comment">      get: noop,</span></span><br><span class="line"><span class="comment">      set: noop</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    sharedPropertyDefinition.get = shouldCache</span><br><span class="line">      ? createComputedGetter(key)</span><br><span class="line">      : userDef</span><br><span class="line">    sharedPropertyDefinition.set = noop</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    sharedPropertyDefinition.get = userDef.get</span><br><span class="line">      ? shouldCache &amp;&amp; userDef.cache !== <span class="literal">false</span></span><br><span class="line">        ? createComputedGetter(key)</span><br><span class="line">        : userDef.get</span><br><span class="line">      : noop</span><br><span class="line">    sharedPropertyDefinition.set = userDef.set</span><br><span class="line">      ? userDef.set</span><br><span class="line">      : noop</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">      sharedPropertyDefinition.set === noop) &#123;</span><br><span class="line">    sharedPropertyDefinition.set = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      warn(</span><br><span class="line">        <span class="string">`Computed property "<span class="subst">$&#123;key&#125;</span>" was assigned to but it has no setter.`</span>,</span><br><span class="line">        <span class="keyword">this</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将vm的key用defineProperty定义</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(target, key, sharedPropertyDefinition)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createComputedGetter</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">computedGetter</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 通过缓存的vm._computedWatchers[key]拿到对应watcher</span></span><br><span class="line">    <span class="keyword">const</span> watcher = <span class="keyword">this</span>._computedWatchers &amp;&amp; <span class="keyword">this</span>._computedWatchers[key]</span><br><span class="line">    <span class="comment">// 求值时触发computedGetter, 拿到watcher, 执行watcher.depend, evaluate</span></span><br><span class="line">    <span class="keyword">if</span> (watcher) &#123;</span><br><span class="line">      watcher.depend()</span><br><span class="line">      <span class="keyword">return</span> watcher.evaluate()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>initCompued</code>的逻辑:</p><ol><li>创建<code>vm._computedWatchers</code>对象, 用来存储计算属性.</li><li>验证<code>computed</code>对象合理性</li><li>对每一个计算属性<code>new Watcher()</code>, 放入<code>vm._computedWatchers</code>对象</li><li>如果通过<code>vm.key</code>还未定义(没有在data或props中定义过该属性名, 合理), 调用<code>defineComputed</code>, 否则警告.</li></ol><p>先看看<code>new Watcher</code>时发生了什么:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/observer/watcher.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">  vm: Component;</span><br><span class="line">  expression: string;</span><br><span class="line">  cb: <span class="built_in">Function</span>;</span><br><span class="line">  id: number;</span><br><span class="line">  deep: boolean;</span><br><span class="line">  user: boolean;</span><br><span class="line">  computed: boolean;</span><br><span class="line">  sync: boolean;</span><br><span class="line">  dirty: boolean;</span><br><span class="line">  active: boolean;</span><br><span class="line">  dep: Dep;</span><br><span class="line">  deps: <span class="built_in">Array</span>&lt;Dep&gt;;</span><br><span class="line">  newDeps: <span class="built_in">Array</span>&lt;Dep&gt;;</span><br><span class="line">  depIds: SimpleSet;</span><br><span class="line">  newDepIds: SimpleSet;</span><br><span class="line">  before: ?<span class="built_in">Function</span>;</span><br><span class="line">  getter: <span class="built_in">Function</span>;</span><br><span class="line">  value: any;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span> (</span><br><span class="line">    vm: Component, // vm实例</span><br><span class="line">    expOrFn: string | Function, // computed 回调</span><br><span class="line">    cb: Function, // noop, 空方法</span><br><span class="line">    options?: ?Object, // &#123; computed: <span class="literal">true</span> &#125; </span><br><span class="line">    isRenderWatcher?: boolean <span class="comment">// true</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">this</span>.vm = vm</span><br><span class="line">    <span class="keyword">if</span> (isRenderWatcher) &#123;</span><br><span class="line">      vm._watcher = <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将watcher实例push入vm._watchers数组</span></span><br><span class="line">    vm._watchers.push(<span class="keyword">this</span>)</span><br><span class="line">    <span class="comment">// options</span></span><br><span class="line">    <span class="keyword">if</span> (options) &#123;</span><br><span class="line">      <span class="keyword">this</span>.deep = !!options.deep</span><br><span class="line">      <span class="keyword">this</span>.user = !!options.user</span><br><span class="line">      <span class="keyword">this</span>.computed = !!options.computed <span class="comment">// this.computed=true</span></span><br><span class="line">      <span class="keyword">this</span>.sync = !!options.sync</span><br><span class="line">      <span class="keyword">this</span>.before = options.before</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.deep = <span class="keyword">this</span>.user = <span class="keyword">this</span>.computed = <span class="keyword">this</span>.sync = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.cb = cb</span><br><span class="line">    <span class="keyword">this</span>.id = ++uid <span class="comment">// uid for batching</span></span><br><span class="line">    <span class="keyword">this</span>.active = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">this</span>.dirty = <span class="keyword">this</span>.computed <span class="comment">// this.dirty=true</span></span><br><span class="line">    <span class="keyword">this</span>.deps = []</span><br><span class="line">    <span class="keyword">this</span>.newDeps = []</span><br><span class="line">    <span class="keyword">this</span>.depIds = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">    <span class="keyword">this</span>.newDepIds = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">    <span class="keyword">this</span>.expression = process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line">      ? expOrFn.toString()</span><br><span class="line">      : <span class="string">''</span></span><br><span class="line">    <span class="comment">// parse expression for getter</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> expOrFn === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.getter = expOrFn <span class="comment">// 传入用户定义的computed回调函数</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.getter = parsePath(expOrFn)</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.getter) &#123;</span><br><span class="line">        <span class="keyword">this</span>.getter = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">        process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; warn(</span><br><span class="line">          <span class="string">`Failed watching path: "<span class="subst">$&#123;expOrFn&#125;</span>" `</span> +</span><br><span class="line">          <span class="string">'Watcher only accepts simple dot-delimited paths. '</span> +</span><br><span class="line">          <span class="string">'For full control, use a function instead.'</span>,</span><br><span class="line">          vm</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算属性不会立刻求值, this.value是undefined, this.dep=new Dep()</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.computed) &#123;</span><br><span class="line">      <span class="keyword">this</span>.value = <span class="literal">undefined</span></span><br><span class="line">      <span class="keyword">this</span>.dep = <span class="keyword">new</span> Dep()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.value = <span class="keyword">this</span>.get()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>new Watcher</code>时的逻辑: </p><ol><li><code>this.dirty = this.computed = true</code></li><li><code>this.getter</code>赋值为computed回调</li><li><code>this.value=undefined</code>, <code>this.dep = new Dep()</code></li></ol><p>注意这里不会求值, 在<code>createComputedGetter</code>的返回函数中会有求值过程.</p><p>再继续看看<code>defineComputed</code>逻辑: </p><p>对每一个<code>vm</code>上的计算属性<code>key</code>调用<code>defineProperty</code>, <code>setter</code>的值为用户计算属性传入的<code>setter</code>或noop, <code>getter</code>值是<code>createComputedGetter(key)</code>的返回值.</p><p><code>createComputedGetter(key)</code>返回方法的逻辑:</p><ol><li>在对<code>vm[key]</code>计算属性进行求值时先拿到对应的<code>computed watcher</code></li><li>再执行<code>watcher.depend()</code>, 返回<code>watcher.evaluate()</code></li></ol><p>下面分析下<code>watcher.depend</code>和<code>watcher.evaluate</code>后发生了什么:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/observer/watcher.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  get () &#123;</span><br><span class="line">    <span class="comment">// 赋值Dep.target</span></span><br><span class="line">    <span class="comment">// pushTarget执行, Dep.target会变成computed watcher, </span></span><br><span class="line">    <span class="comment">// 后续访问到的依赖变量的getter执行的过程, 都会将computed watcher收集到自己的dep中</span></span><br><span class="line">    pushTarget(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">let</span> value</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">this</span>.vm</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 执行computed方法, 会执行所有依赖项的getter, 依赖的getter会收集computed watcher</span></span><br><span class="line">      value = <span class="keyword">this</span>.getter.call(vm, vm)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.user) &#123;</span><br><span class="line">        handleError(e, vm, <span class="string">`getter for watcher "<span class="subst">$&#123;<span class="keyword">this</span>.expression&#125;</span>"`</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> e</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="comment">// "touch" every property so they are all tracked as</span></span><br><span class="line">      <span class="comment">// dependencies for deep watching</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.deep) &#123;</span><br><span class="line">        traverse(value)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 出栈Dep.target</span></span><br><span class="line">      popTarget()</span><br><span class="line">      <span class="comment">// 清除依赖的过程</span></span><br><span class="line">      <span class="keyword">this</span>.cleanupDeps()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line">  depend () &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.dep &amp;&amp; Dep.target) &#123;</span><br><span class="line">      <span class="comment">// 渲染阶段 Dep.target是渲染watcher, 渲染watcher就订阅(addDep)了this.dep</span></span><br><span class="line">      <span class="keyword">this</span>.dep.depend()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 求值, 返回</span></span><br><span class="line">  evaluate () &#123;</span><br><span class="line">    <span class="comment">// 如果computed依赖发生改变, this.dirty = true, 执行watcher.get方法求值</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.dirty) &#123;</span><br><span class="line">      <span class="keyword">this</span>.value = <span class="keyword">this</span>.get()</span><br><span class="line">      <span class="keyword">this</span>.dirty = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果computed的依赖没有发生改变, this.dirty = false, 直接返回值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.value</span><br><span class="line">  &#125;</span><br><span class="line">  update () &#123;</span><br><span class="line">    <span class="comment">/* istanbul ignore else */</span></span><br><span class="line">    <span class="comment">// 计算属性部分 </span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.computed) &#123;</span><br><span class="line">      <span class="comment">// A computed property watcher has two modes: lazy and activated.</span></span><br><span class="line">      <span class="comment">// It initializes as lazy by default, and only becomes activated when</span></span><br><span class="line">      <span class="comment">// it is depended on by at least one subscriber, which is typically</span></span><br><span class="line">      <span class="comment">// another computed property or a component's render function.</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.dep.subs.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// In lazy mode, we don't want to perform computations until necessary,</span></span><br><span class="line">        <span class="comment">// so we simply mark the watcher as dirty. The actual computation is</span></span><br><span class="line">        <span class="comment">// performed just-in-time in this.evaluate() when the computed property</span></span><br><span class="line">        <span class="comment">// is accessed.</span></span><br><span class="line">        <span class="keyword">this</span>.dirty = <span class="literal">true</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// In activated mode, we want to proactively perform the computation</span></span><br><span class="line">        <span class="comment">// but only notify our subscribers when the value has indeed changed.</span></span><br><span class="line">        <span class="comment">// 当computedWatcher.update时, 因为computedWatcher.dep.depend()时将对应的渲染watcher加入了dep.subs</span></span><br><span class="line">        <span class="comment">// 收集了依赖, this.dep.subs.length = 1</span></span><br><span class="line">        <span class="keyword">this</span>.getAndInvoke(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 计算属性如果前后两次value求值不同, 通知依赖的渲染watcher执行update重新渲染(进入渲染watcher的queueWatcher逻辑)</span></span><br><span class="line">          <span class="keyword">this</span>.dep.notify()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 同步watcher部分</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.sync) &#123;</span><br><span class="line">      <span class="keyword">this</span>.run()</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      queueWatcher(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  getAndInvoke (cb: <span class="built_in">Function</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">this</span>.get()</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      value !== <span class="keyword">this</span>.value ||</span><br><span class="line">      <span class="comment">// Deep watchers and watchers on Object/Arrays should fire even</span></span><br><span class="line">      <span class="comment">// when the value is the same, because the value may</span></span><br><span class="line">      <span class="comment">// have mutated.</span></span><br><span class="line">      isObject(value) ||</span><br><span class="line">      <span class="keyword">this</span>.deep</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="comment">// set new value</span></span><br><span class="line">      <span class="keyword">const</span> oldValue = <span class="keyword">this</span>.value</span><br><span class="line">      <span class="keyword">this</span>.value = value</span><br><span class="line">      <span class="keyword">this</span>.dirty = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.user) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          cb.call(<span class="keyword">this</span>.vm, value, oldValue)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          handleError(e, <span class="keyword">this</span>.vm, <span class="string">`callback for watcher "<span class="subst">$&#123;<span class="keyword">this</span>.expression&#125;</span>"`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        () =&gt; &#123;</span></span><br><span class="line"><span class="comment">          this.dep.notify()</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        cb.call(<span class="keyword">this</span>.vm, value, oldValue)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/observer/dep.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 让当前渲染watcher收集computed watcher.dep</span></span><br><span class="line">  depend () &#123;</span><br><span class="line">    <span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">      Dep.target.addDep(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 遍历所有之前收集的渲染watcher, 调用update方法</span></span><br><span class="line">  notify () &#123;</span><br><span class="line">    <span class="comment">// stabilize the subscriber list first</span></span><br><span class="line">    <span class="keyword">const</span> subs = <span class="keyword">this</span>.subs.slice()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = subs.length; i &lt; l; i++) &#123;</span><br><span class="line">      subs[i].update()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>watcher.depend</code>的逻辑执行时, 因为是<code>render</code>函数读取阶段, 所以<code>Dep.target</code>就是渲染watcher. 这个过程就是将<code>this.dep.subs</code>添加了当前<code>渲染watcher</code></p><p>然后执行<code>watcher.evaluate</code>, 会执行<code>watcher.get</code>对计算属性进行求值, 并返回值.</p><p>下面看看<code>get</code>方法的过程:</p><ol><li>执行<code>pushTarget</code>, 此时<code>Dep.target</code>变为<code>computed watcher</code></li><li>执行用户定义的<code>computed</code>回调, 会逐一执行依赖项的<code>getter</code>, 在这个过程中<code>computed watcher</code>会被添加给每个依赖数据项对应<code>dep</code>的<code>subs</code>数组.</li><li><code>popTarget</code>, <code>Dep.target</code>又变回渲染watcher</li></ol><p>以上的逻辑是第一次<code>computed</code>求值的过程. 现在我们假设<code>computed</code>依赖的一项数据项变化了, 会发生以下过程:</p><ol><li>数据项变化, 数据项对应<code>dep</code>的<code>subs</code>数组中每一个<code>watcher</code>执行<code>update</code>方法, 其中包括<code>computed watcher</code></li><li><code>computed watcher</code>执行<code>update</code>方法, 进入<code>if(this.computed)</code>逻辑</li><li>因为之前<code>this.dep.depend()</code>的过程, 此时<code>this.dep.subs</code>的长度为1, 数组元素为<code>渲染watcher</code>, 所以此时执行<code>getAndInvoke</code>方法</li></ol><p>下面看看<code>getAndInvoke</code>方法的执行过程:</p><ol><li>对<code>computed</code>再进行一次求值</li><li>如果两次值不同, 执行<code>this.dep.notify()</code>, 通知渲染watcher更新.</li></ol><p>之后, 渲染watcher更新, 新的计算属性渲染到页面上. 至此, 我们分析了计算属性的实现原理.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本节主要分析下计算属性的实现.&lt;/p&gt;
&lt;p&gt;在Vue初始化的过程中, 会执行&lt;code&gt;initState&lt;/code&gt;过程, 其中有初始化计算属性的过程:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue源码解读 15 - 动态添加响应式: Vue.Set 与 数组方法重写</title>
    <link href="http://yoursite.com/2019/03/14/vue-source-15/"/>
    <id>http://yoursite.com/2019/03/14/vue-source-15/</id>
    <published>2019-03-14T01:00:02.000Z</published>
    <updated>2019-12-19T09:23:51.343Z</updated>
    
    <content type="html"><![CDATA[<p>前几节我们分析了<code>Vue</code>添加响应式的原理的方法, 但这种方法无法给对象或数组增加新的响应式数据项, 这种时候我们要用到<code>Vue.set</code>和经过Vue内部重写的方法.</p><h3 id="Vue-set"><a href="#Vue-set" class="headerlink" title="Vue.set"></a>Vue.set</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/observer/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span> (<span class="params">target: Array&lt;any&gt; | Object, key: any, val: any</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 不能对Undefined或基础类型调用Vue.set</span></span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">    (isUndef(target) || isPrimitive(target))</span><br><span class="line">  ) &#123;</span><br><span class="line">    warn(<span class="string">`Cannot set reactive property on undefined, null, or primitive value: <span class="subst">$&#123;(target: any)&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 数组的set过程</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(target) &amp;&amp; isValidArrayIndex(key)) &#123;</span><br><span class="line">    <span class="comment">// 获取数组长度和传入索引最大值, 并插入数据</span></span><br><span class="line">    target.length = <span class="built_in">Math</span>.max(target.length, key)</span><br><span class="line">    target.splice(key, <span class="number">1</span>, val)</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 当前key是否已存在在对象中, 直接赋值触发rerender</span></span><br><span class="line">  <span class="keyword">if</span> (key <span class="keyword">in</span> target &amp;&amp; !(key <span class="keyword">in</span> <span class="built_in">Object</span>.prototype)) &#123;</span><br><span class="line">    target[key] = val</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ob是响应式对象上的observer实例</span></span><br><span class="line">  <span class="keyword">const</span> ob = (target: any).__ob__</span><br><span class="line">  <span class="comment">// 有vmCount证明是rootData(用户写的data对象), 避免对Vue实例和rootData对象做处理</span></span><br><span class="line">  <span class="keyword">if</span> (target._isVue || (ob &amp;&amp; ob.vmCount)) &#123;</span><br><span class="line">    process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; warn(</span><br><span class="line">      <span class="string">'Avoid adding reactive properties to a Vue instance or its root $data '</span> +</span><br><span class="line">      <span class="string">'at runtime - declare it upfront in the data option.'</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果target对象没有被调用过响应式(就是个普通对象), 直接普通对象赋值</span></span><br><span class="line">  <span class="keyword">if</span> (!ob) &#123;</span><br><span class="line">    target[key] = val</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ob.value就是响应式对象, 给响应式对象添加新的key并触发更新</span></span><br><span class="line">  defineReactive(ob.value, key, val)</span><br><span class="line">  <span class="comment">// 通知更新</span></span><br><span class="line">  <span class="comment">// childOb已经收集了依赖</span></span><br><span class="line">  ob.dep.notify()</span><br><span class="line">  <span class="keyword">return</span> val</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析下<code>set</code>方法的过程:</p><ol><li>类型检测, <code>undefined</code>, <code>null</code>和基础类型, 报警告</li><li>如果是数组, 将数组长度设置为传入索引和数组长度的最大值, 执行插入(<strong>注意这里数组方法已经是变异过的数组方法</strong>)</li><li>如果是对象, 但对象的key已经存在于对象中(已经添加过响应式), 直接赋值触发<code>setter</code></li><li>获取响应式对象上的<code>__ob__</code>属性, 获取<code>observer</code>, 如果对象是<code>vue</code>实例或<code>observer</code>是rootData(rootData就是用户定义过的data, vmCount有值证明是rootData), 报警告.</li><li>如果<code>target</code>不是响应式对象(就是一个普通对象), 赋值后返回</li><li>如果需要进行响应式添加, 进行响应式添加过程.</li></ol><p>下面具体分析一下响应式添加过程:<br>首先调用<code>defineReactive</code>对响应式对象添加key<br>然后调用<code>observer.dep.notify</code>派发更新.</p><p>关于这里dep是怎么收集到<code>watcher</code>的依赖项, 我们可以回过头来看看<code>observer</code>的代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/observer/index.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">obj, key, val</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 如果求值后值还是一个对象, 递归observe, 让对象里的对象也进行observe过程</span></span><br><span class="line">  <span class="keyword">let</span> childOb = !shallow &amp;&amp; observe(val)</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> <span class="title">reactiveGetter</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> value = getter ? getter.call(obj) : val</span><br><span class="line">      <span class="comment">// 如果渲染watcher存在</span></span><br><span class="line">      <span class="comment">// Dep.target是一个单例, 是Watcher类型, 因为全局只同时处理一个watcher</span></span><br><span class="line">      <span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">        <span class="comment">// 依赖收集过程</span></span><br><span class="line">        dep.depend()</span><br><span class="line">        <span class="comment">// 如果childOb被返回了对象, 证明key对应一个对象, 在getter时候需要对子对象也做依赖收集</span></span><br><span class="line">        <span class="comment">// 所以用Vue.set()才能触发界面变化, 因为这里进行了子对象的依赖收集</span></span><br><span class="line">        <span class="keyword">if</span> (childOb) &#123;</span><br><span class="line">          childOb.dep.depend()</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line">            dependArray(value)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在对<code>key</code>求值后, 会递归对<code>val</code>执行<code>observe</code>, 如果<code>key</code>对应一个对象, 会递归对子对象执行<code>observer</code>和<code>defineReactvie</code>. 并返回这个子对象对应的<code>observer</code>(如果key对应的是基本值, 返回<code>undefined</code>).</p><p>在依赖收集的时候, 如果子对象对应的<code>observer</code>存在, 也会让该<code>observer</code>收集当前渲染watcher.</p><p>因为有了上述过程, 所以<code>ob.dep.notify()</code>可以通知到子对象<code>observer</code>已经对应的<code>dep</code>中所有的<code>watcher</code>更新.</p><h3 id="重写数组方法"><a href="#重写数组方法" class="headerlink" title="重写数组方法"></a>重写数组方法</h3><p><code>Vue.js</code>文档中说明了为了支持数组的响应式添加, 重写了数组的变异方法, 这里来探究一下是怎么实现的.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/observer/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">  value: any;</span><br><span class="line">  dep: Dep;</span><br><span class="line">  vmCount: number; <span class="comment">// number of vms that has this object as root $data</span></span><br><span class="line">  <span class="keyword">constructor</span> (value: any) &#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value</span><br><span class="line">    <span class="keyword">this</span>.dep = <span class="keyword">new</span> Dep()</span><br><span class="line">    <span class="keyword">this</span>.vmCount = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 给对象挂载__ob__, 值是Observer实例</span></span><br><span class="line">    def(value, <span class="string">'__ob__'</span>, <span class="keyword">this</span>)</span><br><span class="line">    <span class="comment">// 重写数组方法</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line">      <span class="comment">// can we use __proto__?</span></span><br><span class="line">      <span class="comment">// '__proto__' in &#123;&#125;, </span></span><br><span class="line">      <span class="keyword">const</span> augment = hasProto</span><br><span class="line">        ? protoAugment</span><br><span class="line">        : copyAugment</span><br><span class="line">      <span class="comment">// 递归对数组每一项调用observe方法</span></span><br><span class="line">      <span class="comment">// arrayMethods原型继承自Array.prototype, 并在本层对象上增加了所有数组变异方法, 来自array.js</span></span><br><span class="line">      augment(value, arrayMethods, arrayKeys)</span><br><span class="line">      <span class="keyword">this</span>.observeArray(value)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 递归对对象每一项调用observe方法</span></span><br><span class="line">      <span class="keyword">this</span>.walk(value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Augment an target Object or Array by intercepting</span></span><br><span class="line"><span class="comment"> * the prototype chain using __proto__</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 如果可以用__proto__, 将target的原型链指向src</span></span><br><span class="line"><span class="comment">// 调用 protoAugment(array, Object.create(Array.prototype))</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">protoAugment</span> (<span class="params">target, src: Object, keys: any</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* eslint-disable no-proto */</span></span><br><span class="line">  target.__proto__ = src</span><br><span class="line">  <span class="comment">/* eslint-enable no-proto */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Augment an target Object or Array by defining</span></span><br><span class="line"><span class="comment"> * hidden properties.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/* istanbul ignore next */</span></span><br><span class="line"><span class="comment">// 如果不能用__proto__,</span></span><br><span class="line"><span class="comment">// 调用 protoAugment(array, Object.create(Array.prototype), Object.getOwnPropertyNames(Object.create(Array.prototype)))</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copyAugment</span> (<span class="params">target: Object, src: Object, keys: Array&lt;string&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = keys.length; i &lt; l; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = keys[i]</span><br><span class="line">    def(target, key, src[key])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>new Observer</code>的过程中, 如果值是一个数组, 会先判断浏览器是否可以使用<code>__proto__</code>追溯对象的原型. 如果浏览器支持, 用修改原型链的方式修改数组对象的原型链, 如果不支持, 给数组元素添加所有<code>arrayMethods</code>上的数组变异方法.</p><p>跳到<code>array.js</code>了解下<code>arrayMethods</code>的实现.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/observer/array.js</span></span><br><span class="line"><span class="keyword">const</span> arrayProto = <span class="built_in">Array</span>.prototype</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> arrayMethods = <span class="built_in">Object</span>.create(arrayProto)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> methodsToPatch = [</span><br><span class="line">  <span class="string">'push'</span>,</span><br><span class="line">  <span class="string">'pop'</span>,</span><br><span class="line">  <span class="string">'shift'</span>,</span><br><span class="line">  <span class="string">'unshift'</span>,</span><br><span class="line">  <span class="string">'splice'</span>,</span><br><span class="line">  <span class="string">'sort'</span>,</span><br><span class="line">  <span class="string">'reverse'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Intercept mutating methods and emit events</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">methodsToPatch.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">method</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// cache original method</span></span><br><span class="line">  <span class="comment">// 缓存原始原型方法</span></span><br><span class="line">  <span class="keyword">const</span> original = arrayProto[method]</span><br><span class="line">  <span class="comment">// 对数组方法做统一改写</span></span><br><span class="line">  def(arrayMethods, method, <span class="function"><span class="keyword">function</span> <span class="title">mutator</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = original.apply(<span class="keyword">this</span>, args)</span><br><span class="line">    <span class="comment">// 拿到需变异数组的observer</span></span><br><span class="line">    <span class="keyword">const</span> ob = <span class="keyword">this</span>.__ob__</span><br><span class="line">    <span class="comment">// 收集向数组中增加的数据</span></span><br><span class="line">    <span class="keyword">let</span> inserted</span><br><span class="line">    <span class="keyword">switch</span> (method) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'push'</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'unshift'</span>:</span><br><span class="line">        inserted = args</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'splice'</span>:</span><br><span class="line">        inserted = args.slice(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果向数组内添加了东西, 调用observer.observeArray, 就是对数组的每一项添加observer</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    observeArray (items: Array&lt;any&gt;) &#123;</span></span><br><span class="line"><span class="comment">      for (let i = 0, l = items.length; i &lt; l; i++) &#123;</span></span><br><span class="line"><span class="comment">        observe(items[i])</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (inserted) ob.observeArray(inserted)</span><br><span class="line">    <span class="comment">// notify change</span></span><br><span class="line">    <span class="comment">// 通知变化</span></span><br><span class="line">    ob.dep.notify()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>arrayMethods</code>原型继承自<code>Array.prototype</code>, 这个对象上的数组变异方法都已经被改写, 改写逻辑如下:</p><ol><li>先缓存数组原始方法</li><li>用数组原始方法计算出结果</li><li>拿到数组的<code>observer</code>对象</li><li>对于变异数组的方法<code>push</code>, <code>unshift</code>, <code>splice</code>, 记录变异数组的参数数组</li><li>调用<code>observeArray</code>方法, 给新增的每一项添加响应式方法</li><li>用原始数组的<code>observer</code>对应的<code>dep</code>对象通知依赖的渲染<code>watcher</code>更新</li><li>返回结果, 符合数组<code>api</code>预期</li></ol><p>至此, 我们的分析完毕, 展示了<code>Vue.js</code>如何动态的添加响应式.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前几节我们分析了&lt;code&gt;Vue&lt;/code&gt;添加响应式的原理的方法, 但这种方法无法给对象或数组增加新的响应式数据项, 这种时候我们要用到&lt;code&gt;Vue.set&lt;/code&gt;和经过Vue内部重写的方法.&lt;/p&gt;
&lt;h3 id=&quot;Vue-set&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue源码解读 14 - nextTick</title>
    <link href="http://yoursite.com/2019/02/19/vue-source-14/"/>
    <id>http://yoursite.com/2019/02/19/vue-source-14/</id>
    <published>2019-02-19T15:14:55.000Z</published>
    <updated>2019-12-19T09:23:33.030Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><blockquote><p><code>tick</code>:<br>浏览器js事件循环的所有同步主线程现存任务的执行过程是一个tick</p><p><code>macroTacsk</code>和<code>microTask</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (macroTask <span class="keyword">of</span> macroTasks) &#123;</span><br><span class="line"><span class="comment">// 每次拿出一个宏任务执行</span></span><br><span class="line">  macroTask()</span><br><span class="line">  <span class="comment">// 每次单个宏任务执行完毕后, 执行所有的微任务</span></span><br><span class="line">  <span class="keyword">for</span> (microTask <span class="keyword">of</span> microTasks) &#123;</span><br><span class="line">    microTask()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>浏览器环境中的常见<code>macroTask</code>:</p><ul><li><code>setTimeout</code></li><li><code>messageChannel</code></li><li><code>postMessage</code></li><li><code>setImmediate</code></li></ul><p>浏览器环境的常见<code>microTask</code></p><ul><li><code>MutationObserver</code></li><li><code>Promise.then</code></li></ul></blockquote><h3 id="Vue-js中的nextTick实现"><a href="#Vue-js中的nextTick实现" class="headerlink" title="Vue.js中的nextTick实现"></a>Vue.js中的nextTick实现</h3><p>先看看<code>next-tick.js</code>: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/util/next-tick.js</span></span><br><span class="line"><span class="keyword">const</span> callbacks = []</span><br><span class="line"><span class="keyword">let</span> pending = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行callbacks中所有的回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flushCallbacks</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 打开pending锁</span></span><br><span class="line">  pending = <span class="literal">false</span></span><br><span class="line">  <span class="comment">// </span></span><br><span class="line">  <span class="keyword">const</span> copies = callbacks.slice(<span class="number">0</span>)</span><br><span class="line">  callbacks.length = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; copies.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 这里不绑定ctx, 让回调回到nextTick执行栈中绑定ctx</span></span><br><span class="line">    copies[i]()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> microTimerFunc</span><br><span class="line"><span class="keyword">let</span> macroTimerFunc</span><br><span class="line"><span class="keyword">let</span> useMacroTask = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> setImmediate !== <span class="string">'undefined'</span> &amp;&amp; isNative(setImmediate)) &#123;</span><br><span class="line">  macroTimerFunc = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setImmediate(flushCallbacks)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 否则降级为messageChannel</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> MessageChannel !== <span class="string">'undefined'</span> &amp;&amp; (</span><br><span class="line">  isNative(MessageChannel) ||</span><br><span class="line">  <span class="comment">// PhantomJS</span></span><br><span class="line">  MessageChannel.toString() === <span class="string">'[object MessageChannelConstructor]'</span></span><br><span class="line">)) &#123;</span><br><span class="line">  <span class="keyword">const</span> channel = <span class="keyword">new</span> MessageChannel()</span><br><span class="line">  <span class="keyword">const</span> port = channel.port2</span><br><span class="line">  channel.port1.onmessage = flushCallbacks</span><br><span class="line">  macroTimerFunc = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    port.postMessage(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 否则降级为setTimeout 0</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">/* istanbul ignore next */</span></span><br><span class="line">  macroTimerFunc = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(flushCallbacks, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Determine microtask defer implementation.</span></span><br><span class="line"><span class="comment">// 如果浏览器支持Promise, 使用promise.then作为微任务调度方式</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Promise</span> !== <span class="string">'undefined'</span> &amp;&amp; isNative(<span class="built_in">Promise</span>)) &#123;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="built_in">Promise</span>.resolve()</span><br><span class="line">  microTimerFunc = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    p.then(flushCallbacks)</span><br><span class="line">    <span class="keyword">if</span> (isIOS) setTimeout(noop)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 否则再次采用宏任务的调度方式(setImmediate || messageChannel || setTimeout0)</span></span><br><span class="line">  <span class="comment">// fallback to macro</span></span><br><span class="line">  microTimerFunc = macroTimerFunc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">nextTick</span> (<span class="params">cb?: Function, ctx?: Object</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> _resolve</span><br><span class="line">  <span class="comment">// 匿名函数包裹回调(为了try catch, 不让js错误崩盘), 将匿名函数push入callbacks</span></span><br><span class="line">  callbacks.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cb) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        cb.call(ctx)</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        handleError(e, ctx, <span class="string">'nextTick'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 如果没传cb, 在flushCallbacks阶段使用promise.resolve</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (_resolve) &#123;</span><br><span class="line">      _resolve(ctx)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// pending初始为false, 确保调用逻辑只执行一次</span></span><br><span class="line">  <span class="keyword">if</span> (!pending) &#123;</span><br><span class="line">    pending = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 根据使用宏任务还是微任务的标识(初始为false, 默认微任务)决定调用方式</span></span><br><span class="line">    <span class="keyword">if</span> (useMacroTask) &#123;</span><br><span class="line">      macroTimerFunc()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      microTimerFunc()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// $flow-disable-line</span></span><br><span class="line">  <span class="comment">// 如果没传cb, 使用nextTick().then()的方法, 赋值resolve</span></span><br><span class="line">  <span class="keyword">if</span> (!cb &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Promise</span> !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      _resolve = resolve</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Vue</code>指定了宏任务和微任务的调度方式:</p><p>如果是宏任务调度方式, 先判断是否能使用<code>setImmediate</code>, 再判断<code>MessageChannel</code>, 最后降级到<code>setTimeout, 0</code>.</p><p>如果是微任务调度方式, 先判断能否使用<code>promise</code>, 如果不行降级为宏任务的调度方式.</p><p>再看<code>nextTick</code>的逻辑, 如果使用<code>nextTick(cb)</code>的调用方式:</p><ol><li>用一个匿名函数包裹回调, 这个调用栈可以在后续执行时指定传入的<code>ctx</code>, 将匿名函数push入<code>callbacks</code>数组中</li><li>将<code>pending</code>置为true, 确保调用逻辑只执行一次</li><li>按当前调度方式决定用宏任务或微任务的方式调度<code>flushCallbacks</code></li></ol><p>如果使用<code>nextTick().then()</code>的方式, 在初始化时即<code>new Promise</code>, 在匿名函数中<code>resolve</code>, 让外部注册的后续逻辑执行.</p><p>再看看<code>flushCallbacks</code>的逻辑:</p><ol><li>打开<code>pending</code>锁</li><li>拷贝<code>callbacks</code>数组, 使<code>callbacks</code>可以接收新一轮的回调</li><li>遍历拷贝数组依次执行回调, <code>ctx</code>回到包裹的匿名函数中指定为用户传入的ctx.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前置知识&quot;&gt;&lt;a href=&quot;#前置知识&quot; class=&quot;headerlink&quot; title=&quot;前置知识&quot;&gt;&lt;/a&gt;前置知识&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;tick&lt;/code&gt;:&lt;br&gt;浏览器js事件循环的所有同步主线程现存任务的执行过程是
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue源码解读 13 - 派发更新</title>
    <link href="http://yoursite.com/2019/02/13/vue-source-13/"/>
    <id>http://yoursite.com/2019/02/13/vue-source-13/</id>
    <published>2019-02-13T13:22:10.000Z</published>
    <updated>2019-12-19T09:23:09.481Z</updated>
    
    <content type="html"><![CDATA[<p>本节来剖析派发更新的过程. 在<code>defineReactive</code>中对数据项定义的<code>setter</code>中:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/observer/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  obj: Object,</span></span></span><br><span class="line"><span class="function"><span class="params">  key: string,</span></span></span><br><span class="line"><span class="function"><span class="params">  val: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  customSetter?: ?Function,</span></span></span><br><span class="line"><span class="function"><span class="params">  shallow?: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 创建该dataKey对应的dep(一对一对应, 底下都是闭包访问)</span></span><br><span class="line">  <span class="keyword">const</span> dep = <span class="keyword">new</span> Dep()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果descriptor不可配置, 直接return</span></span><br><span class="line">  <span class="keyword">const</span> property = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, key)</span><br><span class="line">  <span class="keyword">if</span> (property &amp;&amp; property.configurable === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// cater for pre-defined getter/setters</span></span><br><span class="line">  <span class="keyword">const</span> getter = property &amp;&amp; property.get</span><br><span class="line">  <span class="keyword">const</span> setter = property &amp;&amp; property.set</span><br><span class="line">  <span class="comment">// 如果没定义getter setter, 且没传value, 对 对象key求值</span></span><br><span class="line">  <span class="keyword">if</span> ((!getter || setter) &amp;&amp; <span class="built_in">arguments</span>.length === <span class="number">2</span>) &#123;</span><br><span class="line">    val = obj[key]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果求值后值还是一个对象, 递归observe, 让对象里的对象也进行observe过程</span></span><br><span class="line">  <span class="keyword">let</span> childOb = !shallow &amp;&amp; observe(val)</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    get() &#123; <span class="comment">/* ... */</span>&#125;</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span> <span class="title">reactiveSetter</span> (<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 求值, 与newVal对比</span></span><br><span class="line">      <span class="keyword">const</span> value = getter ? getter.call(obj) : val</span><br><span class="line">      <span class="comment">/* eslint-disable no-self-compare */</span></span><br><span class="line">      <span class="comment">// 与旧值相等 return </span></span><br><span class="line">      <span class="keyword">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/* eslint-enable no-self-compare */</span></span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; customSetter) &#123;</span><br><span class="line">        customSetter()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 赋值新值</span></span><br><span class="line">      <span class="keyword">if</span> (setter) &#123;</span><br><span class="line">        setter.call(obj, newVal)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        val = newVal</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果赋值的新值也是个对象, 会给赋值的新对象添加响应式</span></span><br><span class="line">      childOb = !shallow &amp;&amp; observe(newVal)</span><br><span class="line">      <span class="comment">// 通知数据对应的dep, 派发更新</span></span><br><span class="line">      dep.notify()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在数据进行更新时, <code>setter</code>判断新旧值不相等时, 更新<code>val</code>(这个<code>val</code>是闭包引用, 设置后会在<code>getter</code>执行时拿到新值), 然后执行<code>dep.notify</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/observer/dep.js</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  notify () &#123;</span><br><span class="line">    <span class="comment">// stabilize the subscriber list first</span></span><br><span class="line">    <span class="keyword">const</span> subs = <span class="keyword">this</span>.subs.slice()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = subs.length; i &lt; l; i++) &#123;</span><br><span class="line">      subs[i].update()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>notify</code>方法主要通知当前key对应的<code>dep</code>的所有对应渲染watcher进行<code>update</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/observer/watcher.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">  update () &#123;</span><br><span class="line">    <span class="comment">/* istanbul ignore else */</span></span><br><span class="line">    <span class="comment">// 计算属性部分</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.computed) &#123;</span><br><span class="line">      <span class="comment">// A computed property watcher has two modes: lazy and activated.</span></span><br><span class="line">      <span class="comment">// It initializes as lazy by default, and only becomes activated when</span></span><br><span class="line">      <span class="comment">// it is depended on by at least one subscriber, which is typically</span></span><br><span class="line">      <span class="comment">// another computed property or a component's render function.</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.dep.subs.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// In lazy mode, we don't want to perform computations until necessary,</span></span><br><span class="line">        <span class="comment">// so we simply mark the watcher as dirty. The actual computation is</span></span><br><span class="line">        <span class="comment">// performed just-in-time in this.evaluate() when the computed property</span></span><br><span class="line">        <span class="comment">// is accessed.</span></span><br><span class="line">        <span class="keyword">this</span>.dirty = <span class="literal">true</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// In activated mode, we want to proactively perform the computation</span></span><br><span class="line">        <span class="comment">// but only notify our subscribers when the value has indeed changed.</span></span><br><span class="line">        <span class="keyword">this</span>.getAndInvoke(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.dep.notify()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 同步watcher部分</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.sync) &#123;</span><br><span class="line">      <span class="keyword">this</span>.run()</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      queueWatcher(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>watcher.update</code>方法会调用<code>queueWatcher(watcher)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// src/core/observer/scheduler.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queue: <span class="built_in">Array</span>&lt;Watcher&gt; = [] <span class="comment">// 所有需更新的watcher的数组</span></span><br><span class="line"><span class="keyword">const</span> activatedChildren: <span class="built_in">Array</span>&lt;Component&gt; = [] <span class="comment">// 激活的children</span></span><br><span class="line"><span class="keyword">let</span> has: &#123; [key: number]: ?<span class="literal">true</span> &#125; = &#123;&#125; <span class="comment">// has判断watcher有没重复添加</span></span><br><span class="line"><span class="keyword">let</span> circular: &#123; [key: number]: number &#125; = &#123;&#125; <span class="comment">// 循环更新用的</span></span><br><span class="line"><span class="keyword">let</span> waiting = <span class="literal">false</span> <span class="comment">// 标志位</span></span><br><span class="line"><span class="keyword">let</span> flushing = <span class="literal">false</span> <span class="comment">// 标志位</span></span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span> <span class="comment">// 当前watcher索引</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">queueWatcher</span> (<span class="params">watcher: Watcher</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// watcher时当前渲染watcher</span></span><br><span class="line">  <span class="keyword">const</span> id = watcher.id</span><br><span class="line">  <span class="comment">// 保证一个tick内, 不管调用几次queueWatcher</span></span><br><span class="line">  <span class="comment">// 下面逻辑只执行一次</span></span><br><span class="line">  <span class="keyword">if</span> (has[id] == <span class="literal">null</span>) &#123;</span><br><span class="line">    has[id] = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (!flushing) &#123;</span><br><span class="line">      queue.push(watcher)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// flushSchedulerQueue 调用过程中会执行wathcer.run</span></span><br><span class="line">      <span class="comment">// 然后还会进入queueWatcher逻辑, 这时flushing = true, 进入else逻辑</span></span><br><span class="line">      <span class="comment">// watcher排过序, 所以找到watcher.id比queue.id大的地方插入, 在flushScedulerQueue中的</span></span><br><span class="line">      <span class="comment">//   for (index = 0; index &lt; queue.length; index++) &#123; 处, 由于动态长度, 动态插入, 插入的会立刻更新</span></span><br><span class="line">      <span class="comment">// if already flushing, splice the watcher based on its id</span></span><br><span class="line">      <span class="comment">// if already past its id, it will be run next immediately.</span></span><br><span class="line">      <span class="keyword">let</span> i = queue.length - <span class="number">1</span></span><br><span class="line">      <span class="keyword">while</span> (i &gt; index &amp;&amp; queue[i].id &gt; watcher.id) &#123;</span><br><span class="line">        i--</span><br><span class="line">      &#125;</span><br><span class="line">      queue.splice(i + <span class="number">1</span>, <span class="number">0</span>, watcher)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// queue the flush</span></span><br><span class="line">    <span class="comment">// 保证一个tick内, 不管调用几次queueWatcher</span></span><br><span class="line">    <span class="comment">// 保证flushSchedulerQueue只执行一次</span></span><br><span class="line">    <span class="keyword">if</span> (!waiting) &#123;</span><br><span class="line">      waiting = <span class="literal">true</span></span><br><span class="line">      nextTick(flushSchedulerQueue)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>queueWatcher</code>的逻辑会保证在一个tick内, 如果多次重复触发同一watcher的setter, <code>flushSchedulerQueue</code>只会执行一次. 在这个过程中, <code>watcher</code>被加入<code>queue</code>队列中.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/observer/scheduler.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flushSchedulerQueue</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  flushing = <span class="literal">true</span> </span><br><span class="line">  <span class="keyword">let</span> watcher, id</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Sort queue before flush.</span></span><br><span class="line">  <span class="comment">// This ensures that:</span></span><br><span class="line">  <span class="comment">// 1. Components are updated from parent to child. (because parent is always</span></span><br><span class="line">  <span class="comment">//    created before the child)</span></span><br><span class="line">  <span class="comment">// 2. A component's user watchers are run before its render watcher (because</span></span><br><span class="line">  <span class="comment">//    user watchers are created before the render watcher)</span></span><br><span class="line">  <span class="comment">// 3. If a component is destroyed during a parent component's watcher run,</span></span><br><span class="line">  <span class="comment">//    its watchers can be skipped.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 基于三种问题, 需要把watcher按id排列</span></span><br><span class="line">  <span class="comment">// 1. 父先于子创建, 先更新父</span></span><br><span class="line">  <span class="comment">// 2. 组件内的watch在render watcher建立前执行</span></span><br><span class="line">  <span class="comment">// 3. 组件的destroy在父组件的更新中执行, 组件的watcher可跳过</span></span><br><span class="line">  queue.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.id - b.id)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// do not cache length because more watchers might be pushed</span></span><br><span class="line">  <span class="comment">// as we run existing watchers</span></span><br><span class="line">  <span class="comment">// 从queue中依次取出watcher, 执行watcher.run</span></span><br><span class="line">  <span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; queue.length; index++) &#123;</span><br><span class="line">    watcher = queue[index]</span><br><span class="line">    <span class="keyword">if</span> (watcher.before) &#123;</span><br><span class="line">      <span class="comment">// 执行beforeUpdate生命周期</span></span><br><span class="line">      watcher.before()</span><br><span class="line">    &#125;</span><br><span class="line">    id = watcher.id</span><br><span class="line">    has[id] = <span class="literal">null</span></span><br><span class="line">    <span class="comment">// run方法, 在其运行过程中可能再次调起flushSchedulerQueue过程</span></span><br><span class="line">    watcher.run()</span><br><span class="line">    <span class="comment">// in dev build, check and stop circular updates.</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; has[id] != <span class="literal">null</span>) &#123;</span><br><span class="line">      circular[id] = (circular[id] || <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">      <span class="keyword">if</span> (circular[id] &gt; MAX_UPDATE_COUNT) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          <span class="string">'You may have an infinite update loop '</span> + (</span><br><span class="line">            watcher.user</span><br><span class="line">              ? <span class="string">`in watcher with expression "<span class="subst">$&#123;watcher.expression&#125;</span>"`</span></span><br><span class="line">              : <span class="string">`in a component render function.`</span></span><br><span class="line">          ),</span><br><span class="line">          watcher.vm</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// keep copies of post queues before resetting state</span></span><br><span class="line">  <span class="keyword">const</span> activatedQueue = activatedChildren.slice()</span><br><span class="line">  <span class="keyword">const</span> updatedQueue = queue.slice()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重置has, circular, waiting flushing queue</span></span><br><span class="line">  resetSchedulerState()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// call component updated and activated hooks</span></span><br><span class="line">  callActivatedHooks(activatedQueue)</span><br><span class="line">  <span class="comment">// 新后调updated</span></span><br><span class="line">  callUpdatedHooks(updatedQueue)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// devtool hook</span></span><br><span class="line">  <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">  <span class="keyword">if</span> (devtools &amp;&amp; config.devtools) &#123;</span><br><span class="line">    devtools.emit(<span class="string">'flush'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在下个<code>nextTick</code>, <code>flushSchedulerQueue</code>执行, 将<code>queue</code>中本次tick内积累的<code>watcher</code>降序排列, 排列的原因, <code>vue</code>的注释已经给了我们答案:</p><ol><li>父先于子创建, 先更新父</li><li>父组件内的<code>watch</code>会在组件渲染watcher建立前执行</li><li>如果子组件在父组件的更新过程中销毁, 子组件不用更新(子组件的id更大)</li></ol><p>因为上述三种情况的存在, 会将<code>queue</code>按watcher的id从小到大排列下, 然后循环<code>queue</code>数组, 单独执行每个<code>watcher</code>的更新并重新渲染过程. 首先执行<code>beforeUpdate</code>钩子, 然后执行<code>run</code>方法. <code>run</code>方法执行了更新过程(后详), 更新完毕后, 执行<code>updated</code>生命周期, 这部分我们之前已经详细叙述过.</p><p>现在分析<code>run</code>方法的过程:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/observer/watcher.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">  run () &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.active) &#123;</span><br><span class="line">      <span class="keyword">this</span>.getAndInvoke(<span class="keyword">this</span>.cb)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getAndInvoke (cb: <span class="built_in">Function</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">this</span>.get()</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      value !== <span class="keyword">this</span>.value ||</span><br><span class="line">      <span class="comment">// Deep watchers and watchers on Object/Arrays should fire even</span></span><br><span class="line">      <span class="comment">// when the value is the same, because the value may</span></span><br><span class="line">      <span class="comment">// have mutated.</span></span><br><span class="line">      isObject(value) ||</span><br><span class="line">      <span class="keyword">this</span>.deep</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="comment">// set new value</span></span><br><span class="line">      <span class="keyword">const</span> oldValue = <span class="keyword">this</span>.value</span><br><span class="line">      <span class="keyword">this</span>.value = value</span><br><span class="line">      <span class="keyword">this</span>.dirty = <span class="literal">false</span></span><br><span class="line">      <span class="comment">// 如果由类似watch触发, cb就是watch的回调</span></span><br><span class="line">      <span class="comment">// 因为watch的过程中可能对某个数据项赋新值</span></span><br><span class="line">      <span class="comment">// 会重新调起flushSchedulerQueue过程</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.user) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          cb.call(<span class="keyword">this</span>.vm, value, oldValue)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          handleError(e, <span class="keyword">this</span>.vm, <span class="string">`callback for watcher "<span class="subst">$&#123;<span class="keyword">this</span>.expression&#125;</span>"`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cb.call(<span class="keyword">this</span>.vm, value, oldValue)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>run</code>方法继续调用<code>getAndInvoke</code>方法, 会执行<code>watcher.get</code>方法, 现在watcher是渲染watcher, 所以<code>get</code>方法会执行<code>updateComponent</code>方法, 执行<code>vm._update(vm._render())</code>, 在这个过程中<code>render</code>函数会重新执行数据项的<code>getter</code>, <code>getter</code>会去取<code>val</code>的值, 这个<code>val</code>是<code>defineReactive</code>函数栈中的闭包变量, 刚才被<code>setter</code>设置过, 是<code>newVal</code>, 后续会被<code>vm._update</code>过程更新到dom上.</p><p>后续进入if逻辑, 如果<code>this.user</code>为<code>true</code>, 可以把这个key的触发想象为<code>vue</code>实例的<code>watch</code>属性的回调函数触发的, 这里的<code>cb</code>是<code>watch</code>的回调, 在回调中可能对某些数据项赋新值, 这个过程会继续调起<code>flushSchedulerQueue</code>的过程. 然后我们回到<code>queueWatcher</code>和<code>flushSchedulerQueue</code>的过程:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/observer/scheduler.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">queueWatcher</span> (<span class="params">watcher: Watcher</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// watcher时当前渲染watcher</span></span><br><span class="line">  <span class="keyword">const</span> id = watcher.id</span><br><span class="line">  <span class="comment">// 保证一个tick内, 不管调用几次queueWatcher</span></span><br><span class="line">  <span class="comment">// 下面逻辑只执行一次</span></span><br><span class="line">  <span class="keyword">if</span> (has[id] == <span class="literal">null</span>) &#123;</span><br><span class="line">    has[id] = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (!flushing) &#123;</span><br><span class="line">      queue.push(watcher)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// flushSchedulerQueue 调用过程中会执行wathcer.run</span></span><br><span class="line">      <span class="comment">// 然后还会进入queueWatcher逻辑, 这时flushing = true, 进入else逻辑</span></span><br><span class="line">      <span class="comment">// watcher排过序, 所以找到watcher.id比queue.id大的地方插入, 在flushScedulerQueue中的</span></span><br><span class="line">      <span class="comment">//   for (index = 0; index &lt; queue.length; index++) &#123; 处, 由于动态长度, 动态插入, 插入的会立刻更新</span></span><br><span class="line">      <span class="comment">// if already flushing, splice the watcher based on its id</span></span><br><span class="line">      <span class="comment">// if already past its id, it will be run next immediately.</span></span><br><span class="line">      <span class="keyword">let</span> i = queue.length - <span class="number">1</span></span><br><span class="line">      <span class="keyword">while</span> (i &gt; index &amp;&amp; queue[i].id &gt; watcher.id) &#123;</span><br><span class="line">        i--</span><br><span class="line">      &#125;</span><br><span class="line">      queue.splice(i + <span class="number">1</span>, <span class="number">0</span>, watcher)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// queue the flush</span></span><br><span class="line">    <span class="comment">// 保证一个tick内, 不管调用几次queueWatcher</span></span><br><span class="line">    <span class="comment">// 保证flushSchedulerQueue只执行一次</span></span><br><span class="line">    <span class="keyword">if</span> (!waiting) &#123;</span><br><span class="line">      waiting = <span class="literal">true</span></span><br><span class="line">      nextTick(flushSchedulerQueue)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于此时第一次更新的过程中把<code>flushing</code>置为true, 会进入else逻辑, 这里会把<code>watch</code>更改后对应的数据项对应的渲染watcher加入到可以立刻更新的位置, 然后继续上一轮<code>flushSchedulerQueue</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; queue.length; index++) &#123;</span><br><span class="line">  watcher = queue[index]</span><br><span class="line">  <span class="keyword">if</span> (watcher.before) &#123;</span><br><span class="line">    <span class="comment">// 执行beforeUpdate生命周期</span></span><br><span class="line">    watcher.before()</span><br><span class="line">  &#125;</span><br><span class="line">  id = watcher.id</span><br><span class="line">  has[id] = <span class="literal">null</span></span><br><span class="line">  <span class="comment">// run方法, 在其运行过程中可能再次调起flushSchedulerQueue过程</span></span><br><span class="line">  watcher.run()</span><br><span class="line">  <span class="comment">// in dev build, check and stop circular updates.</span></span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; has[id] != <span class="literal">null</span>) &#123;</span><br><span class="line">    circular[id] = (circular[id] || <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (circular[id] &gt; MAX_UPDATE_COUNT) &#123;</span><br><span class="line">      warn(</span><br><span class="line">        <span class="string">'You may have an infinite update loop '</span> + (</span><br><span class="line">          watcher.user</span><br><span class="line">            ? <span class="string">`in watcher with expression "<span class="subst">$&#123;watcher.expression&#125;</span>"`</span></span><br><span class="line">            : <span class="string">`in a component render function.`</span></span><br><span class="line">        ),</span><br><span class="line">        watcher.vm</span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回到上一轮的<code>flushSchedulerQueue</code>, 所以<code>queue</code>被插入了, 这里会立刻执行由<code>watch</code>引起的渲染watcher的更新, 如果这里出现循环嵌套, 会报一个错误提示.</p><p>至此, 我们分析了<code>Vue</code>收集依赖后, 派发更新的过程.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本节来剖析派发更新的过程. 在&lt;code&gt;defineReactive&lt;/code&gt;中对数据项定义的&lt;code&gt;setter&lt;/code&gt;中:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue源码解读 12 - 依赖收集</title>
    <link href="http://yoursite.com/2019/01/01/vue-source-12/"/>
    <id>http://yoursite.com/2019/01/01/vue-source-12/</id>
    <published>2019-01-01T11:23:21.000Z</published>
    <updated>2019-12-19T09:22:51.604Z</updated>
    
    <content type="html"><![CDATA[<p>上节讲到<code>defineReactive</code>方法, 该方法给每一个<code>key</code>添加<code>getter</code>和<code>setter</code>. 其中<code>getter</code>是<code>收集依赖</code>的过程, <code>setter</code>是派发更新的过程. 本节主要剖析<code>getter</code>中依赖收集的过程.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/lifecycle.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mountComponent</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  vm: Component,</span></span></span><br><span class="line"><span class="function"><span class="params">  el: ?Element,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrating?: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  updateComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    vm._update(vm._render(), hydrating)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> Watcher(vm, updateComponent, noop <span class="comment">/* 空方法 */</span>, &#123;</span><br><span class="line">    before () &#123;</span><br><span class="line">      <span class="keyword">if</span> (vm._isMounted) &#123;</span><br><span class="line">        callHook(vm, <span class="string">'beforeUpdate'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="literal">true</span> <span class="comment">/* isRenderWatcher */</span>)</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/observer/watcher.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">  vm: Component;</span><br><span class="line">  expression: string;</span><br><span class="line">  cb: <span class="built_in">Function</span>;</span><br><span class="line">  id: number;</span><br><span class="line">  deep: boolean;</span><br><span class="line">  user: boolean;</span><br><span class="line">  computed: boolean;</span><br><span class="line">  sync: boolean;</span><br><span class="line">  dirty: boolean;</span><br><span class="line">  active: boolean;</span><br><span class="line">  dep: Dep;</span><br><span class="line">  deps: <span class="built_in">Array</span>&lt;Dep&gt;;</span><br><span class="line">  newDeps: <span class="built_in">Array</span>&lt;Dep&gt;;</span><br><span class="line">  depIds: SimpleSet;</span><br><span class="line">  newDepIds: SimpleSet;</span><br><span class="line">  before: ?<span class="built_in">Function</span>;</span><br><span class="line">  getter: <span class="built_in">Function</span>;</span><br><span class="line">  value: any;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span> (</span><br><span class="line">    vm: Component,</span><br><span class="line">    expOrFn: string | Function, // updateComponent方法</span><br><span class="line">    cb: Function, // noop, 空方法</span><br><span class="line">    options?: ?Object, // 配置项, 配置执行生命周期beforeUpdate</span><br><span class="line">    isRenderWatcher?: boolean // true</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">this</span>.vm = vm</span><br><span class="line">    <span class="comment">// 如果是渲染watcher, 将当前watcher实例赋值给vm._wacher</span></span><br><span class="line">    <span class="keyword">if</span> (isRenderWatcher) &#123;</span><br><span class="line">      vm._watcher = <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将watcher实例push入vm._watchers数组</span></span><br><span class="line">    vm._watchers.push(<span class="keyword">this</span>)</span><br><span class="line">    <span class="comment">// options</span></span><br><span class="line">    <span class="keyword">if</span> (options) &#123;</span><br><span class="line">      <span class="keyword">this</span>.deep = !!options.deep</span><br><span class="line">      <span class="keyword">this</span>.user = !!options.user</span><br><span class="line">      <span class="keyword">this</span>.computed = !!options.computed</span><br><span class="line">      <span class="keyword">this</span>.sync = !!options.sync</span><br><span class="line">      <span class="keyword">this</span>.before = options.before</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.deep = <span class="keyword">this</span>.user = <span class="keyword">this</span>.computed = <span class="keyword">this</span>.sync = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.cb = cb</span><br><span class="line">    <span class="keyword">this</span>.id = ++uid <span class="comment">// uid for batching</span></span><br><span class="line">    <span class="keyword">this</span>.active = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">this</span>.dirty = <span class="keyword">this</span>.computed <span class="comment">// for computed watchers</span></span><br><span class="line">    <span class="keyword">this</span>.deps = []</span><br><span class="line">    <span class="keyword">this</span>.newDeps = []</span><br><span class="line">    <span class="keyword">this</span>.depIds = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">    <span class="keyword">this</span>.newDepIds = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">    <span class="keyword">this</span>.expression = process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line">      ? expOrFn.toString()</span><br><span class="line">      : <span class="string">''</span></span><br><span class="line">    <span class="comment">// parse expression for getter</span></span><br><span class="line">    <span class="comment">// 将updateComponent方法赋值给watcher.getter</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> expOrFn === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.getter = expOrFn</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.getter = parsePath(expOrFn)</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.getter) &#123;</span><br><span class="line">        <span class="keyword">this</span>.getter = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">        process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; warn(</span><br><span class="line">          <span class="string">`Failed watching path: "<span class="subst">$&#123;expOrFn&#125;</span>" `</span> +</span><br><span class="line">          <span class="string">'Watcher only accepts simple dot-delimited paths. '</span> +</span><br><span class="line">          <span class="string">'For full control, use a function instead.'</span>,</span><br><span class="line">          vm</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.computed) &#123;</span><br><span class="line">      <span class="keyword">this</span>.value = <span class="literal">undefined</span></span><br><span class="line">      <span class="keyword">this</span>.dep = <span class="keyword">new</span> Dep()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 执行this.get() -&gt; 执行了updateComponent -&gt; 执行了vm._update(vm._render())</span></span><br><span class="line">      <span class="keyword">this</span>.value = <span class="keyword">this</span>.get()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Evaluate the getter, and re-collect dependencies.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  get () &#123;</span><br><span class="line">    <span class="comment">// 赋值Dep.target</span></span><br><span class="line">    pushTarget(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">let</span> value</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">this</span>.vm</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 以vm为上下文执行updateComponent -&gt; 执行render方法 -&gt; 执行render中一些dataKey的getter -&gt; Dep.target 依赖收集阶段</span></span><br><span class="line">      value = <span class="keyword">this</span>.getter.call(vm, vm)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.user) &#123;</span><br><span class="line">        handleError(e, vm, <span class="string">`getter for watcher "<span class="subst">$&#123;<span class="keyword">this</span>.expression&#125;</span>"`</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> e</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="comment">// "touch" every property so they are all tracked as</span></span><br><span class="line">      <span class="comment">// dependencies for deep watching</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.deep) &#123;</span><br><span class="line">        traverse(value)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 出栈Dep.target</span></span><br><span class="line">      popTarget()</span><br><span class="line">      <span class="comment">// 清除依赖的过程</span></span><br><span class="line">      <span class="keyword">this</span>.cleanupDeps()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在前面章节中提到的<code>mountComponent</code>的过程中, 会将<code>vm._update(vm._render())</code>的过程定义给<code>updateComponent</code>方法传递给<code>Watcher</code>的构造函数. 之后的过程分析如下:</p><ol><li><code>watcher.getter = updateComponent</code></li><li>执行<code>this.get</code>方法</li><li>执行<code>pushTarget</code>方法, 赋值<code>Dep.target</code></li><li>执行<code>updateComponent</code>方法</li><li>执行<code>popTarget</code>方法</li><li>执行<code>cleanupDeps</code>方法</li></ol><p>下面将具体分析这一过程.</p><h3 id="pushTarget-与-popTarget"><a href="#pushTarget-与-popTarget" class="headerlink" title="pushTarget 与 popTarget"></a>pushTarget 与 popTarget</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/observer/dep.js</span></span><br><span class="line"><span class="keyword">const</span> targetStack = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">pushTarget</span> (<span class="params">_target: ?Watcher</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (Dep.target) targetStack.push(Dep.target)</span><br><span class="line">  Dep.target = _target</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">popTarget</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  Dep.target = targetStack.pop()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>pushTarget</code>方法存储上一个<code>Dep.target</code>赋值的<code>渲染watcher</code>, 并将本次的<code>渲染watcher</code>赋值给<code>Dep.target</code></p><p>在<code>渲染watcher</code>的<code>get</code>方法执行结束后, 执行<code>popTarget</code>, 将<code>Dep.target</code>恢复为上个<code>渲染watcher</code></p><p>我们来具体分析下这个过程, <code>Dep.target</code>是<code>Dep</code>类的一个静态属性, 是一个全局单例, 它代表当前正在收集依赖过程中(后详)的渲染watcher, 在同一时间, 只能有一个渲染watcher的收集依赖过程.</p><p>所以在父组件的<code>render</code>过程中, <code>Dep.target</code>先赋值为父组件的渲染watcher, 如果又加入了一个子组件的<code>render</code>过程, 会将父组件的渲染watcher先推入<code>targetStack</code>数组, 然后将<code>Dep.target</code>赋值为子组件的渲染watcher, 开始子组件的收集过程, 等子组件的依赖收集过程结束后, 又执行<code>popTarget</code>将<code>Dep.target</code>恢复为父组件渲染watcher</p><h3 id="收集依赖的过程"><a href="#收集依赖的过程" class="headerlink" title="收集依赖的过程"></a>收集依赖的过程</h3><p>在给<code>Dep.target</code>赋值后, <code>watcher.get</code>方法继续向下执行, 执行<code>this.getter</code>方法实际就是执行<code>updateComponent</code>方法的过程. 在这个过程中, <code>render</code>函数上的变量会被访问, 依次执行<code>defineReactive</code>方法之前绑定好的<code>getter</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/observer/index.js</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">  enumerable: <span class="literal">true</span>,</span><br><span class="line">  configurable: <span class="literal">true</span>,</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span> <span class="title">reactiveGetter</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> value = getter ? getter.call(obj) : val</span><br><span class="line">    <span class="comment">// 如果渲染watcher存在</span></span><br><span class="line">    <span class="comment">// Dep.target是一个单例, 是Watcher类型, 因为全局只同时处理一个watcher</span></span><br><span class="line">    <span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">      <span class="comment">// 依赖收集过程</span></span><br><span class="line">      dep.depend()</span><br><span class="line">      <span class="keyword">if</span> (childOb) &#123;</span><br><span class="line">        childOb.dep.depend()</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line">          dependArray(value)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果<code>Dep.target</code>(渲染watcher)存在, 执行<code>dep.depend</code>, 下面看看<code>Dep</code>类.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/observer/dep.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> target: ?Watcher;</span><br><span class="line">  id: number;</span><br><span class="line">  subs: <span class="built_in">Array</span>&lt;Watcher&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line">    <span class="comment">// 每个dep有独立的uid</span></span><br><span class="line">    <span class="keyword">this</span>.id = uid++</span><br><span class="line">    <span class="comment">// subs数组用来存储当前的渲染watcher</span></span><br><span class="line">    <span class="comment">// (当前渲染watcher调用vm._update(vm._render)方法才会导致Observer中的getter被执行)</span></span><br><span class="line">    <span class="comment">// 所以当前dataKey对应的dep应该关联当前渲染watcher</span></span><br><span class="line">    <span class="comment">// 用dep.depend方法和dep.addSub方法中间的过程关联</span></span><br><span class="line">    <span class="keyword">this</span>.subs = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// dep.subs push入 渲染watcher(Dep.target)</span></span><br><span class="line">  <span class="comment">// 渲染watcher内收集着所有本轮更新界面上需要改动的数据对应的dep</span></span><br><span class="line">  <span class="comment">// 渲染watcher既然有收集的dep, 就知道该调用哪些setter</span></span><br><span class="line">  addSub (sub: Watcher) &#123;</span><br><span class="line">    <span class="keyword">this</span>.subs.push(sub)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  removeSub (sub: Watcher) &#123;</span><br><span class="line">    remove(<span class="keyword">this</span>.subs, sub)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 渲染watcher收集本轮的需要更新的数据的dep</span></span><br><span class="line">  <span class="comment">// 在vm._patch(vm._render())执行时, 会比对渲染watcher内收集的deps哪个本轮没用到</span></span><br><span class="line">  <span class="comment">// (比如v-else让render函数没有访问哪个dataKey), </span></span><br><span class="line">  <span class="comment">// 会从渲染watcher中删除本轮更新没用到的deps</span></span><br><span class="line">  depend () &#123;</span><br><span class="line">    <span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">      Dep.target.addDep(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历所有之前收集的渲染watcher, 调用update方法</span></span><br><span class="line">  notify () &#123;</span><br><span class="line">    <span class="comment">// stabilize the subscriber list first</span></span><br><span class="line">    <span class="keyword">const</span> subs = <span class="keyword">this</span>.subs.slice()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = subs.length; i &lt; l; i++) &#123;</span><br><span class="line">      subs[i].update()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>dep.depend</code>方法实际执行的是<code>Dep.target.addDep(this)</code>, <code>Dep.target</code>实际是<code>Watcher</code>类实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/observer/watcher.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// addDep过程, 对应cleanupDeps的过程</span></span><br><span class="line">  <span class="comment">// new开头的项添加dep</span></span><br><span class="line">  <span class="comment">// 如果上轮渲染时没添加过该dep, 让该dep收集 渲染watcher(自己, this)</span></span><br><span class="line">  addDep (dep: Dep) &#123;</span><br><span class="line">    <span class="keyword">const</span> id = dep.id</span><br><span class="line">    <span class="comment">// 如果this.newDep中已经有该dep了, 不执行下述逻辑</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.newDepIds.has(id)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.newDepIds.add(id)</span><br><span class="line">      <span class="keyword">this</span>.newDeps.push(dep)</span><br><span class="line">      <span class="comment">// 如果this.dep中已经有该dep了, 不执行下述逻辑</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.depIds.has(id)) &#123;</span><br><span class="line">        dep.addSub(<span class="keyword">this</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// cleanupDeps过程时addDep的反过程</span></span><br><span class="line">  <span class="comment">// 目的是让本轮没参与渲染的dep项们清除掉 渲染watcher(自己, this)</span></span><br><span class="line">  <span class="comment">// 清空本轮所有新的render时收集的new开头的项(清空是为了给下轮渲染时收集dep)</span></span><br><span class="line">  <span class="comment">// 保留本轮所有收集的dep(保留是为了下次render时做比对, 从保留的dep中删除掉本轮没参与渲染的dep)</span></span><br><span class="line">  <span class="comment">// 比如v-else导致的没参与渲染的模板插值</span></span><br><span class="line">  cleanupDeps () &#123;</span><br><span class="line">    <span class="comment">// 遍历this.deps中上轮渲染收集的所有deps, </span></span><br><span class="line">    <span class="comment">// 如果newDepIds中有没有应dep(新一轮渲染时没有收集该dep)</span></span><br><span class="line">    <span class="comment">// 从该dep.subs数组中的当前渲染watcher删除掉</span></span><br><span class="line">    <span class="keyword">let</span> i = <span class="keyword">this</span>.deps.length</span><br><span class="line">    <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">      <span class="keyword">const</span> dep = <span class="keyword">this</span>.deps[i]</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.newDepIds.has(dep.id)) &#123;</span><br><span class="line">        dep.removeSub(<span class="keyword">this</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 用depIds保存这次的newDepIds</span></span><br><span class="line">    <span class="comment">// 用deps保存这次的newDeps</span></span><br><span class="line">    <span class="comment">// 然后将new开头的全清空</span></span><br><span class="line">    <span class="comment">// new开头的两个, 每次addDep都会新增</span></span><br><span class="line">    <span class="keyword">let</span> tmp = <span class="keyword">this</span>.depIds</span><br><span class="line">    <span class="keyword">this</span>.depIds = <span class="keyword">this</span>.newDepIds</span><br><span class="line">    <span class="keyword">this</span>.newDepIds = tmp</span><br><span class="line">    <span class="keyword">this</span>.newDepIds.clear()</span><br><span class="line">    tmp = <span class="keyword">this</span>.deps</span><br><span class="line">    <span class="keyword">this</span>.deps = <span class="keyword">this</span>.newDeps</span><br><span class="line">    <span class="keyword">this</span>.newDeps = tmp</span><br><span class="line">    <span class="keyword">this</span>.newDeps.length = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>watcher.addDep</code>的逻辑和<code>cleanupDeps</code>是紧密绑定, 先不用过分关注. 总之知道<code>addDep</code>是执行了<code>dep.addSub(watcher)</code>, 这里的watcher是当前渲染watcher, 也是<code>Dep.target</code>.</p><p><code>dep.addSub</code>就是将当前渲染<code>watcher</code>添加进当前<code>dep</code>的<code>this.subs</code>数组中, 收集了当前对象<code>key</code>(对应<code>dep</code>)的依赖(当前渲染watcher)进依赖数组(<code>dep.subs</code>)</p><p>在该key的<code>setter</code>执行时, 会通知同一个<code>dep</code>(仔细看, <code>dep</code>其实是一个闭包引用), 对所有<code>dep.subs</code>中的依赖项进行更新.</p><p>下面重点说一下<code>addDep</code>和<code>cleanupDeps</code>的逻辑.</p><h3 id="cleanupDeps的过程-清除本次依赖收集中-模板中没用过的dep-每个dep代表一个data中监听的数据项"><a href="#cleanupDeps的过程-清除本次依赖收集中-模板中没用过的dep-每个dep代表一个data中监听的数据项" class="headerlink" title="cleanupDeps的过程: 清除本次依赖收集中, 模板中没用过的dep(每个dep代表一个data中监听的数据项)"></a>cleanupDeps的过程: 清除本次依赖收集中, 模板中没用过的dep(每个dep代表一个data中监听的数据项)</h3><p>在渲染watcher的<code>get</code>方法执行过程中, 会执行<code>render</code>方法. 在此过程中会收集所有渲染watcher(<code>Dep.target</code>)的依赖.</p><p>之后继续执行<code>cleanupDeps</code>方法, 该方法会遍历<code>watcher.deps</code>中存储的上轮收集的依赖, 如果本轮收集的依赖中没有此依赖, 就从<code>deps</code>数组中删除掉该依赖. 之后再将<code>deps</code>数组清空.</p><p>初看这段逻辑有点绕, 感觉没有必要. 实际上, 在数据更新上, <code>render</code>函数上的依赖项也是变化的. 比如上轮还需要的一项数据项, 本轮因为<code>v-if</code>导致没有被<code>render</code>函数收集, 此时就需要从该数据项的<code>deps</code>数组中删除该项依赖(渲染watcher), 因为反正不会被渲染, 数据是否变化也就无所谓了, 应该忽略掉.</p><p>知道上述逻辑后, 再看<code>watcher.addDep</code>方法. 也就明白了为什么要分<code>newDeps</code>和<code>deps</code>, 他们分别代表本轮需要新收集的依赖, 和上轮已经收集的依赖.</p><p>至此, 我们详细分析了依赖收集的过程, 下节将剖析<code>setter</code>派发更新的过程.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上节讲到&lt;code&gt;defineReactive&lt;/code&gt;方法, 该方法给每一个&lt;code&gt;key&lt;/code&gt;添加&lt;code&gt;getter&lt;/code&gt;和&lt;code&gt;setter&lt;/code&gt;. 其中&lt;code&gt;getter&lt;/code&gt;是&lt;code&gt;收集依赖&lt;/co
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue源码解读 11 - 给对象添加响应式</title>
    <link href="http://yoursite.com/2018/12/22/vue-source-11/"/>
    <id>http://yoursite.com/2018/12/22/vue-source-11/</id>
    <published>2018-12-21T16:05:49.000Z</published>
    <updated>2019-12-19T09:22:32.548Z</updated>
    
    <content type="html"><![CDATA[<p>这节开始分析响应式的原理, 首先看看初始化<code>props</code>和<code>data</code>的过程:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/state.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initProps</span> (<span class="params">vm: Component, propsOptions: Object</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> propsData = vm.$options.propsData || &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> props = vm._props = &#123;&#125;</span><br><span class="line">  <span class="comment">// cache prop keys so that future props updates can iterate using Array</span></span><br><span class="line">  <span class="comment">// instead of dynamic object key enumeration.</span></span><br><span class="line">  <span class="keyword">const</span> keys = vm.$options._propKeys = []</span><br><span class="line">  <span class="comment">// 只检测根节点的props, 非根节点不用observe</span></span><br><span class="line">  <span class="comment">// 因为子组件的props都是父组件传过来的, 父组件的data都会被observe</span></span><br><span class="line">  <span class="comment">// 所以子组件不需重复observe</span></span><br><span class="line">  <span class="keyword">const</span> isRoot = !vm.$parent</span><br><span class="line">  <span class="comment">// root instance props should be converted</span></span><br><span class="line">  <span class="keyword">if</span> (!isRoot) &#123;</span><br><span class="line">    toggleObserving(<span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> propsOptions) &#123;</span><br><span class="line">    keys.push(key)</span><br><span class="line">    <span class="keyword">const</span> value = validateProp(key, propsOptions, propsData, vm)</span><br><span class="line">    <span class="comment">/* istanbul ignore else */</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> hyphenatedKey = hyphenate(key)</span><br><span class="line">      <span class="keyword">if</span> (isReservedAttribute(hyphenatedKey) ||</span><br><span class="line">          config.isReservedAttr(hyphenatedKey)) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          <span class="string">`"<span class="subst">$&#123;hyphenatedKey&#125;</span>" is a reserved attribute and cannot be used as component prop.`</span>,</span><br><span class="line">          vm</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">      defineReactive(props, key, value, () =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (vm.$parent &amp;&amp; !isUpdatingChildComponent) &#123;</span><br><span class="line">          warn(</span><br><span class="line">            <span class="string">`Avoid mutating a prop directly since the value will be `</span> +</span><br><span class="line">            <span class="string">`overwritten whenever the parent component re-renders. `</span> +</span><br><span class="line">            <span class="string">`Instead, use a data or computed property based on the prop's `</span> +</span><br><span class="line">            <span class="string">`value. Prop being mutated: "<span class="subst">$&#123;key&#125;</span>"`</span>,</span><br><span class="line">            vm</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 对每个props执行defineReactive</span></span><br><span class="line">      defineReactive(props, key, value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// static props are already proxied on the component's prototype</span></span><br><span class="line">    <span class="comment">// during Vue.extend(). We only need to proxy props defined at</span></span><br><span class="line">    <span class="comment">// instantiation here.</span></span><br><span class="line">    <span class="keyword">if</span> (!(key <span class="keyword">in</span> vm)) &#123;</span><br><span class="line">      proxy(vm, <span class="string">`_props`</span>, key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  toggleObserving(<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initData</span> (<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 拿到配置里写的data</span></span><br><span class="line">  <span class="keyword">let</span> data = vm.$options.data</span><br><span class="line">  <span class="comment">// 如果data是function, 执行并取得结果, 赋值给vm._data</span></span><br><span class="line">  data = vm._data = <span class="keyword">typeof</span> data === <span class="string">'function'</span></span><br><span class="line">    ? getData(data, vm)</span><br><span class="line">    : data || &#123;&#125;</span><br><span class="line">  <span class="comment">// 如果不是对象, 抛警告</span></span><br><span class="line">  <span class="keyword">if</span> (!isPlainObject(data)) &#123;</span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; warn(</span><br><span class="line">      <span class="string">'data functions should return an object:\n'</span> +</span><br><span class="line">      <span class="string">'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function'</span>,</span><br><span class="line">      vm</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// proxy data on instance</span></span><br><span class="line">  <span class="comment">// 如果和methods或props重名, 抛警告</span></span><br><span class="line">  <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(data)</span><br><span class="line">  <span class="keyword">const</span> props = vm.$options.props</span><br><span class="line">  <span class="keyword">const</span> methods = vm.$options.methods</span><br><span class="line">  <span class="keyword">let</span> i = keys.length</span><br><span class="line">  <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = keys[i]</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (methods &amp;&amp; hasOwn(methods, key)) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          <span class="string">`Method "<span class="subst">$&#123;key&#125;</span>" has already been defined as a data property.`</span>,</span><br><span class="line">          vm</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (props &amp;&amp; hasOwn(props, key)) &#123;</span><br><span class="line">      process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; warn(</span><br><span class="line">        <span class="string">`The data property "<span class="subst">$&#123;key&#125;</span>" is already declared as a prop. `</span> +</span><br><span class="line">        <span class="string">`Use prop default value instead.`</span>,</span><br><span class="line">        vm</span><br><span class="line">      )</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isReserved(key)) &#123;</span><br><span class="line">      <span class="comment">// 代理_data对象</span></span><br><span class="line">      proxy(vm, <span class="string">`_data`</span>, key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 创建响应式</span></span><br><span class="line">  <span class="comment">// observe data</span></span><br><span class="line">  observe(data, <span class="literal">true</span> <span class="comment">/* asRootData */</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对<code>props</code>初始化前, 先判断是不是根节点, 通过前面第7节的分析, <code>vm.$parent</code>应该是父vm实例, 当此属性为空时, 证明是跟节点, 这里调用<code>toggleObserving(false)</code>, 实际上关闭了对后续属性的<code>observe</code>, 意思是<strong>只监听根节点的props, 原因是所有子组件的props都是父组件用data传递的, 而data都被监听了, 所以没必要重复再在子组件中监听props</strong>. </p><p>之后, 对每一个props调用<code>defineReactive</code>(后详), 将每个<code>props</code>代理到<code>vm</code>上.</p><p>对<code>data</code>的初始化在前面的章节分析过了, 不再赘述, 值得补充的是最后直接用<code>observe</code>方法监听了整个<code>data</code>对象, <code>observe</code>方法内部其实还是要调用<code>defineReactive</code>.</p><p>下面看看<code>observe</code>方法的实现:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/observer/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">observe</span> (<span class="params">value: any, asRootData: ?boolean</span>): <span class="title">Observer</span> | <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 不是对象, 不能是一个vnode实例</span></span><br><span class="line">  <span class="keyword">if</span> (!isObject(value) || value <span class="keyword">instanceof</span> VNode) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果得到的对象上挂载了__ob__属性(Observer实例), 直接返回之前挂载的observer</span></span><br><span class="line">  <span class="keyword">let</span> ob: Observer | <span class="keyword">void</span></span><br><span class="line">  <span class="keyword">if</span> (hasOwn(value, <span class="string">'__ob__'</span>) &amp;&amp; value.__ob__ <span class="keyword">instanceof</span> Observer) &#123;</span><br><span class="line">    ob = value.__ob__</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">    shouldObserve &amp;&amp; <span class="comment">// 没有关闭监听开关</span></span><br><span class="line">    !isServerRendering() &amp;&amp;</span><br><span class="line">    (<span class="built_in">Array</span>.isArray(value) || isPlainObject(value)) &amp;&amp; <span class="comment">// 是对象或数组</span></span><br><span class="line">    <span class="built_in">Object</span>.isExtensible(value) &amp;&amp; <span class="comment">// 可扩展对象</span></span><br><span class="line">    !value._isVue</span><br><span class="line">  ) &#123;</span><br><span class="line">    ob = <span class="keyword">new</span> Observer(value) <span class="comment">// 直接监听data对象并返回</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (asRootData &amp;&amp; ob) &#123;</span><br><span class="line">    ob.vmCount++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ob</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否打开observe的开关</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> shouldObserve: boolean = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">toggleObserving</span> (<span class="params">value: boolean</span>) </span>&#123;</span><br><span class="line">  shouldObserve = value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>observe</code>方法的流程:</p><ol><li>如果<code>value</code>不是对象或是<code>vnode</code>对象, return</li><li>如果<code>value</code>上有<code>__ob__</code>属性, 返回这个属性上已挂载的<code>observer</code></li><li>如果没有打开监听开关, 对象是数组或纯对象且可扩展, 生成一个<code>Observer</code>实例并返回</li></ol><p>其中, <code>toggleObserving</code>是开启响应式监听与否的开关.</p><p>下面看看<code>Observer</code>类的实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">  value: any;</span><br><span class="line">  dep: Dep;</span><br><span class="line">  vmCount: number; <span class="comment">// number of vms that has this object as root $data</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span> (value: any) &#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value</span><br><span class="line">    <span class="keyword">this</span>.dep = <span class="keyword">new</span> Dep()</span><br><span class="line">    <span class="keyword">this</span>.vmCount = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 给对象挂载__ob__, 值是Observer实例</span></span><br><span class="line">    def(value, <span class="string">'__ob__'</span>, <span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line">      <span class="keyword">const</span> augment = hasProto</span><br><span class="line">        ? protoAugment</span><br><span class="line">        : copyAugment</span><br><span class="line">      <span class="comment">// 递归对数组每一项调用observe方法</span></span><br><span class="line">      augment(value, arrayMethods, arrayKeys)</span><br><span class="line">      <span class="keyword">this</span>.observeArray(value)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 递归对对象每一项调用observe方法</span></span><br><span class="line">      <span class="keyword">this</span>.walk(value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Walk through each property and convert them into</span></span><br><span class="line"><span class="comment">   * getter/setters. This method should only be called when</span></span><br><span class="line"><span class="comment">   * value type is Object.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  walk (obj: <span class="built_in">Object</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(obj)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">      defineReactive(obj, keys[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Observe a list of Array items.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  observeArray (items: <span class="built_in">Array</span>&lt;any&gt;) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = items.length; i &lt; l; i++) &#123;</span><br><span class="line">      observe(items[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实例化<code>ob</code>的过程: </p><ol><li><code>ob.value</code>赋值<code>value</code>, <code>ob.dep</code>赋值为一个<code>Dep实例</code>(后详)</li><li>通过<code>defineProperty</code>给监听对象赋值一个不可枚举的<code>__ob__</code>属性并挂载当前<code>ob</code>实例, 在<code>observe</code>方法中会先判断这个实例是否存在, 存在即返回.</li><li>如果数据是数组, 对数组每一项调用<code>observe</code>方法, 如果数组项不是对象的话在<code>observe</code>中会被return掉</li><li>如果数据是对象, 对每一个<code>key</code>调用<code>defineReactive</code>, 呼应我们开篇所说, 无论<code>props</code>还是<code>data</code>, 最后都会调用<code>defineReactive</code></li></ol><p>看看<code>defineReactive</code>的实现:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  obj: Object,</span></span></span><br><span class="line"><span class="function"><span class="params">  key: string,</span></span></span><br><span class="line"><span class="function"><span class="params">  val: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  customSetter?: ?Function,</span></span></span><br><span class="line"><span class="function"><span class="params">  shallow?: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> dep = <span class="keyword">new</span> Dep()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果descriptor不可配置, 直接return</span></span><br><span class="line">  <span class="keyword">const</span> property = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, key)</span><br><span class="line">  <span class="keyword">if</span> (property &amp;&amp; property.configurable === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 缓存预定义getter和setter</span></span><br><span class="line">  <span class="comment">// cater for pre-defined getter/setters</span></span><br><span class="line">  <span class="keyword">const</span> getter = property &amp;&amp; property.get</span><br><span class="line">  <span class="keyword">const</span> setter = property &amp;&amp; property.set</span><br><span class="line">  <span class="comment">// 如果没定义getter setter, 且没传value, 对 对象key求值</span></span><br><span class="line">  <span class="keyword">if</span> ((!getter || setter) &amp;&amp; <span class="built_in">arguments</span>.length === <span class="number">2</span>) &#123;</span><br><span class="line">    val = obj[key]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果求值后值还是一个对象, 递归observe, 让对象里的对象也进行observe过程</span></span><br><span class="line">  <span class="keyword">let</span> childOb = !shallow &amp;&amp; observe(val)</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> <span class="title">reactiveGetter</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> value = getter ? getter.call(obj) : val</span><br><span class="line">      <span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">        dep.depend()</span><br><span class="line">        <span class="keyword">if</span> (childOb) &#123;</span><br><span class="line">          childOb.dep.depend()</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line">            dependArray(value)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    &#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span> <span class="title">reactiveSetter</span> (<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> value = getter ? getter.call(obj) : val</span><br><span class="line">      <span class="comment">/* eslint-disable no-self-compare */</span></span><br><span class="line">      <span class="keyword">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/* eslint-enable no-self-compare */</span></span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; customSetter) &#123;</span><br><span class="line">        customSetter()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (setter) &#123;</span><br><span class="line">        setter.call(obj, newVal)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        val = newVal</span><br><span class="line">      &#125;</span><br><span class="line">      childOb = !shallow &amp;&amp; observe(newVal)</span><br><span class="line">      dep.notify()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>defineReactive</code>的过程:</p><ol><li>new Dep()</li><li>获取当前<code>key</code>的<code>descriptor</code>, 如果不可配置, return</li><li>缓存预先定义的<code>getter</code>和<code>setter</code>, 因为一会要设置<code>getter</code>和<code>setter</code></li><li>如果没定义<code>getter</code>和<code>setter</code>, 且没传<code>value</code>, 对对象<code>key</code>求值, 获得<code>key</code>的值</li><li>得到的值如果还是对象, 递归进行<code>observe</code>过程</li><li>对key用<code>defineProperty</code>添加<code>getter</code>和<code>setter</code></li></ol><p>注意, <code>getter</code>和<code>setter</code>在添加后不会立即执行, 需要在访问该值的时候再执行. 其中<code>getter</code>执行依赖收集过程, <code>setter</code>执行对依赖派发更新的过程.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这节开始分析响应式的原理, 首先看看初始化&lt;code&gt;props&lt;/code&gt;和&lt;code&gt;data&lt;/code&gt;的过程:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue源码解读 10 - 组件注册</title>
    <link href="http://yoursite.com/2018/11/21/vue-source-10/"/>
    <id>http://yoursite.com/2018/11/21/vue-source-10/</id>
    <published>2018-11-20T16:55:34.000Z</published>
    <updated>2019-12-19T09:22:08.607Z</updated>
    
    <content type="html"><![CDATA[<p>组件注册分为两种, 用<code>Vue.component</code>注册全局组件, 或导出配置对象注册局部组件, 先来看全局组件API的实现.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/global-api/assets.js</span></span><br><span class="line">ASSET_TYPES.forEach(<span class="function"><span class="params">type</span> =&gt;</span> &#123;</span><br><span class="line">  Vue[type] = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    id: string,</span></span></span><br><span class="line"><span class="function"><span class="params">    definition: Function | Object</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>): <span class="title">Function</span> | <span class="title">Object</span> | <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!definition) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.options[type + <span class="string">'s'</span>][id]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">      <span class="comment">// 组件名校验</span></span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; type === <span class="string">'component'</span>) &#123;</span><br><span class="line">        validateComponentName(id)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果是component api</span></span><br><span class="line">      <span class="keyword">if</span> (type === <span class="string">'component'</span> &amp;&amp; isPlainObject(definition)) &#123;</span><br><span class="line">        definition.name = definition.name || id</span><br><span class="line">        <span class="comment">// Vue.extend将配置对象转化为构造器, Vue.extend</span></span><br><span class="line">        definition = <span class="keyword">this</span>.options._base.extend(definition)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (type === <span class="string">'directive'</span> &amp;&amp; <span class="keyword">typeof</span> definition === <span class="string">'function'</span>) &#123;</span><br><span class="line">        definition = &#123; <span class="attr">bind</span>: definition, <span class="attr">update</span>: definition &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 将构造器赋值给Vue.options.components[组件注册名]</span></span><br><span class="line">      <span class="keyword">this</span>.options[type + <span class="string">'s'</span>][id] = definition</span><br><span class="line">      <span class="keyword">return</span> definition</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>ASSET_TYPES</code>中有<code>component</code>这个key对应<code>Vue.component</code>的实现, 首先通过<code>Vue.extend</code>将配置对象转化为一个<code>Sub</code>类, 然后将该<code>Sub</code>挂载到<code>Vue.options.components[id]</code>下, <code>id</code>是组件注册名.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/vdom/create-element.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">_createElement</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  context: Component,  <span class="regexp">//</span> vm实例</span></span></span><br><span class="line"><span class="function"><span class="params">  tag?: string | Class&lt;Component&gt; | Function | Object,</span></span></span><br><span class="line"><span class="function"><span class="params">  data?: VNodeData,</span></span></span><br><span class="line"><span class="function"><span class="params">  children?: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  normalizationType?: number</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">VNode</span> | <span class="title">Array</span>&lt;<span class="title">VNode</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> tag === <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> Ctor</span><br><span class="line">    ns = (context.$vnode &amp;&amp; context.$vnode.ns) || config.getTagNamespace(tag)</span><br><span class="line">    <span class="comment">// 如果是html原生标签, 创建一个vnode</span></span><br><span class="line">    <span class="keyword">if</span> (config.isReservedTag(tag)) &#123;</span><br><span class="line">      <span class="comment">// platform built-in elements</span></span><br><span class="line">      vnode = <span class="keyword">new</span> VNode(</span><br><span class="line">        config.parsePlatformTagName(tag), data, children,</span><br><span class="line">        <span class="literal">undefined</span>, <span class="literal">undefined</span>, context</span><br><span class="line">      )</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 如果tag是string, 但不是html保留标签, 创建组件vnode前进入resolveAsset方法, 从该方法中获取注册过的组件构造器, 然后生成组件vnode</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (isDef(Ctor = resolveAsset(context.$options, <span class="string">'components'</span>, tag))) &#123;</span><br><span class="line">      <span class="comment">// component</span></span><br><span class="line">      <span class="comment">// 如果是vue组件</span></span><br><span class="line">      <span class="comment">// createComponent生成组件vnode</span></span><br><span class="line">      vnode = createComponent(Ctor, data, context, children, tag)</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 非html原生标签, 也是创建vnode的过程</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// unknown or unlisted namespaced elements</span></span><br><span class="line">      <span class="comment">// check at runtime because it may get assigned a namespace when its</span></span><br><span class="line">      <span class="comment">// parent normalizes children</span></span><br><span class="line">      vnode = <span class="keyword">new</span> VNode(</span><br><span class="line">        tag, data, children,</span><br><span class="line">        <span class="literal">undefined</span>, <span class="literal">undefined</span>, context</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 当tag不是一个string时, 是一个组件构造器</span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// direct component options / constructor</span></span><br><span class="line">    vnode = createComponent(tag, data, context, children)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>createElement</code>的过程中, 会进入<code>resolveAssets</code>逻辑, 返回一个组件<code>Sub</code>类构造函数. 看看<code>resolveAsset</code>实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/util/options.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">resolveAsset</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  options: Object, <span class="regexp">//</span> vm.$options, 大Vue.options和配置对象合并而来</span></span></span><br><span class="line"><span class="function"><span class="params">  type: string, <span class="regexp">//</span> <span class="string">'components'</span></span></span></span><br><span class="line"><span class="function"><span class="params">  id: string, <span class="regexp">//</span> 组件注册名</span></span></span><br><span class="line"><span class="function"><span class="params">  warnMissing?: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> id !== <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 先拿到options['components'], 再从中找id, 驼峰id, PascalId对应的属性名对应的组件并返回</span></span><br><span class="line">  <span class="keyword">const</span> assets = options[type]</span><br><span class="line">  <span class="comment">// check local registration variations first</span></span><br><span class="line">  <span class="keyword">if</span> (hasOwn(assets, id)) <span class="keyword">return</span> assets[id]</span><br><span class="line">  <span class="keyword">const</span> camelizedId = camelize(id)</span><br><span class="line">  <span class="keyword">if</span> (hasOwn(assets, camelizedId)) <span class="keyword">return</span> assets[camelizedId]</span><br><span class="line">  <span class="keyword">const</span> PascalCaseId = capitalize(camelizedId)</span><br><span class="line">  <span class="keyword">if</span> (hasOwn(assets, PascalCaseId)) <span class="keyword">return</span> assets[PascalCaseId]</span><br><span class="line">  <span class="comment">// fallback to prototype chain</span></span><br><span class="line">  <span class="keyword">const</span> res = assets[id] || assets[camelizedId] || assets[PascalCaseId]</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; warnMissing &amp;&amp; !res) &#123;</span><br><span class="line">    warn(</span><br><span class="line">      <span class="string">'Failed to resolve '</span> + type.slice(<span class="number">0</span>, <span class="number">-1</span>) + <span class="string">': '</span> + id,</span><br><span class="line">      options</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法先拿到<code>vm.$options.components</code>, 这个对象在<code>new Vue</code>初始化阶段已经合并过<code>Vue.options</code>, 回忆下相关实现:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/init.js</span></span><br><span class="line">Vue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options?: Object</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> vm: Component = <span class="keyword">this</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// merge options</span></span><br><span class="line">  <span class="keyword">if</span> (options &amp;&amp; options._isComponent) &#123;</span><br><span class="line">    <span class="comment">// optimize internal component instantiation</span></span><br><span class="line">    <span class="comment">// since dynamic options merging is pretty slow, and none of the</span></span><br><span class="line">    <span class="comment">// internal component options needs special treatment.</span></span><br><span class="line">    initInternalComponent(vm, options)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 合并配置, 将Vue.options, 组件配置对象合并到$options上</span></span><br><span class="line">    vm.$options = mergeOptions(</span><br><span class="line">      resolveConstructorOptions(vm.constructor), <span class="comment">// Vue.options</span></span><br><span class="line">      options || &#123;&#125;, <span class="comment">// new Vue()的配置对象</span></span><br><span class="line">      vm</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回到<code>resolveAsset</code>方法, 会从<code>vm.$options.components</code>上按照<code>id</code>, 驼峰<code>id</code>, <code>PascalId</code>的顺序去找对应的组件构造器(<code>Vue.component</code>时挂载的), 如果找不到会去原型上找(后详). 找到后返回.</p><p>所以, 因为全局注册的组件都会挂载在<code>Vue.$options.components</code>下, 而<code>vm.options</code>会合并<code>Vue.$options</code>, 所以全局注册的组件构造函数在总能被找到, 然后该构造函数被传递给<code>createComponent</code>后创建一个组件<code>vnode</code>.</p><p>局部注册发生在<code>Vue.extends</code>阶段, 入口在本篇最开始的<code>_createElement</code>逻辑中, 当<code>tag</code>不是<code>string</code>是一个对象时, 会进入<code>createComponent</code>逻辑, </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/vdom/create-element.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">_createElement</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  context: Component,  <span class="regexp">//</span> vm实例</span></span></span><br><span class="line"><span class="function"><span class="params">  tag?: string | Class&lt;Component&gt; | Function | Object,</span></span></span><br><span class="line"><span class="function"><span class="params">  data?: VNodeData,</span></span></span><br><span class="line"><span class="function"><span class="params">  children?: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  normalizationType?: number</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">VNode</span> | <span class="title">Array</span>&lt;<span class="title">VNode</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// direct component options / constructor</span></span><br><span class="line">    vnode = createComponent(tag, data, context, children)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/vdom/create-component.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createComponent</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="regexp">//</span> 组件构造对象</span></span></span><br><span class="line"><span class="function"><span class="params">  Ctor: Class&lt;Component&gt; | Function | Object | void,</span></span></span><br><span class="line"><span class="function"><span class="params">  data: ?VNodeData,</span></span></span><br><span class="line"><span class="function"><span class="params">  context: Component, <span class="regexp">//</span> vm实例</span></span></span><br><span class="line"><span class="function"><span class="params">  children: ?Array&lt;VNode&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  tag?: string</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">VNode</span> | <span class="title">Array</span>&lt;<span class="title">VNode</span>&gt; | <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isObject(Ctor)) &#123;</span><br><span class="line">    <span class="comment">// Ctor是Vue.extend所创建的子类</span></span><br><span class="line">    Ctor = baseCtor.extend(Ctor)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/global-api/extend.js</span></span><br><span class="line">Vue.extend = <span class="function"><span class="keyword">function</span> (<span class="params">extendOptions: Object</span>): <span class="title">Function</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 局部注册的合并位置, 合并了Vue.options, 于是有了全局注册的组件</span></span><br><span class="line">  <span class="comment">// 合并了组件配置对象, 于是有了组件上定义的局部组件</span></span><br><span class="line">  Sub.options = mergeOptions(</span><br><span class="line">    Super.options,</span><br><span class="line">    extendOptions</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>createComponent</code>逻辑会调用<code>Vue.extend</code>, 该方法中合并<code>Vue.options</code>和组件配置对象. 因为合并了<code>Vue.options</code>, 于是有了全局注册的组件, 因为合并了组件配置对象, 于是有了组件上定义的局部组件.</p><p>至此, 全局组件注册和局部组件注册的过程分析完毕</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;组件注册分为两种, 用&lt;code&gt;Vue.component&lt;/code&gt;注册全局组件, 或导出配置对象注册局部组件, 先来看全局组件API的实现.&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue源码解读 09 - 生命周期</title>
    <link href="http://yoursite.com/2018/11/01/vue-source-09/"/>
    <id>http://yoursite.com/2018/11/01/vue-source-09/</id>
    <published>2018-11-01T11:23:33.000Z</published>
    <updated>2019-12-19T09:21:41.943Z</updated>
    
    <content type="html"><![CDATA[<p>这节来分析一下<code>vm</code>实例的生命周期函数的执行时机和细节.</p><p>生命周期函数是通过<code>callHook</code>来实现的:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">callHook</span> (<span class="params">vm: Component, hook: string</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// #7573 disable dep collection when invoking lifecycle hooks</span></span><br><span class="line">  pushTarget()</span><br><span class="line">  <span class="comment">// handlers是生命周期hook对应的合并后的数组, 遍历数组, 依次执行</span></span><br><span class="line">  <span class="keyword">const</span> handlers = vm.$options[hook]</span><br><span class="line">  <span class="keyword">if</span> (handlers) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, j = handlers.length; i &lt; j; i++) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        handlers[i].call(vm)</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        handleError(e, vm, <span class="string">`<span class="subst">$&#123;hook&#125;</span> hook`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (vm._hasHookEvent) &#123;</span><br><span class="line">    vm.$emit(<span class="string">'hook:'</span> + hook)</span><br><span class="line">  &#125;</span><br><span class="line">  popTarget()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>callHook</code>方法遍历对应的合并后的生命周期数组, 将其中的生命周期函数一次依次执行. 下面看看具体的每个生命周期执行的时机和细节.</p><h3 id="beforeCreate-created"><a href="#beforeCreate-created" class="headerlink" title="beforeCreate, created"></a>beforeCreate, created</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/init.js</span></span><br><span class="line">Vue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options?: Object</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 在beforeCreated时拿不到data methods props因为还没有进行相关操作, 在created时可以拿到</span></span><br><span class="line">  <span class="comment">// 在beforeCreated时, 会进行vue-router和vuex的一些操作</span></span><br><span class="line">  <span class="comment">// beforeCreate 生命周期执行</span></span><br><span class="line">  callHook(vm, <span class="string">'beforeCreate'</span>)</span><br><span class="line">  <span class="comment">// 在处理data, props前处理inject</span></span><br><span class="line">  initInjections(vm) <span class="comment">// resolve injections before data/props</span></span><br><span class="line">  <span class="comment">// 代理props, data, methods</span></span><br><span class="line">  initState(vm)</span><br><span class="line">  <span class="comment">// 在处理data后处理provide</span></span><br><span class="line">  initProvide(vm) <span class="comment">// resolve provide after data/props</span></span><br><span class="line">  <span class="comment">// created 生命周期执行</span></span><br><span class="line">  callHook(vm, <span class="string">'created'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>beforeCreate</code>阶段后, 会给<code>vm</code>实例代理<code>props</code>,<code>data</code>,<code>methods</code>,<code>inject</code>,<code>provide</code>, 之后执行<code>created</code>生命周期.</p><h3 id="beforeMount-mounted"><a href="#beforeMount-mounted" class="headerlink" title="beforeMount, mounted"></a>beforeMount, mounted</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/lifecycle.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mountComponent</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  vm: Component,</span></span></span><br><span class="line"><span class="function"><span class="params">  el: ?Element,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrating?: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Component</span> </span>&#123;</span><br><span class="line">  vm.$el = el</span><br><span class="line">  <span class="keyword">if</span> (!vm.$options.render) &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  <span class="comment">// beforeMount生命周期执行, 执行顺序先父后子(在递归前执行, 所以先父后子, 在递归内部执行的才先子后父)</span></span><br><span class="line">  callHook(vm, <span class="string">'beforeMount'</span>)</span><br><span class="line"></span><br><span class="line">  updateComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    vm._update(vm._render(), hydrating)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> Watcher(vm, updateComponent, noop, &#123;</span><br><span class="line">    before () &#123;</span><br><span class="line">      <span class="keyword">if</span> (vm._isMounted) &#123;</span><br><span class="line">        callHook(vm, <span class="string">'beforeUpdate'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果是最外层元素, vm.$vnode为空, 占位vnode为空</span></span><br><span class="line">  <span class="keyword">if</span> (vm.$vnode == <span class="literal">null</span>) &#123;</span><br><span class="line">    vm._isMounted = <span class="literal">true</span></span><br><span class="line">    callHook(vm, <span class="string">'mounted'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> vm</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>beforeMount</code>生命周期在<code>mountComponent</code>阶段执行, 之后定义了内部调用<code>patch</code>方法的<code>updateComponent</code>函数. <code>new Watcher</code>时会生成<code>vm</code>对应的<code>vnode</code>并将其挂载在页面上.</p><p>这里先讨论最外层元素, 当<code>vm.$vnode</code>为空, 也就是说没有占位<code>vnode</code>时当前vm对应最外层的元素, 此时执行<code>mounted</code>生命周期.</p><p>内层元素的<code>mounted</code>钩子执行比较复杂, 我们先来看一点一点来分析:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/vdom/patch.js</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">patch</span>(<span class="params">oldVnode, vnode, hydrating, removeOnly</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 定义insertedVnodeQueue, 装载vnode.data上有insert钩子的vnode</span></span><br><span class="line">  <span class="keyword">const</span> insertedVnodeQueue = []</span><br><span class="line">  <span class="comment">// ... patch, createElm, createComponent</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// patch方法的最后 invokeInsertHook</span></span><br><span class="line">  invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElm</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  vnode,</span></span></span><br><span class="line"><span class="function"><span class="params">  insertedVnodeQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">  parentElm,</span></span></span><br><span class="line"><span class="function"><span class="params">  refElm,</span></span></span><br><span class="line"><span class="function"><span class="params">  nested,</span></span></span><br><span class="line"><span class="function"><span class="params">  ownerArray,</span></span></span><br><span class="line"><span class="function"><span class="params">  index</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 如果是组件vnode</span></span><br><span class="line">  <span class="keyword">if</span> (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 如果是html reserved vnode</span></span><br><span class="line">  <span class="comment">// 创建子节点, 递归的调用createElm</span></span><br><span class="line">  createChildren(vnode, children, insertedVnodeQueue)</span><br><span class="line">  <span class="keyword">if</span> (isDef(data)) &#123; <span class="comment">// vnode.data, 如果vnode.data定义了</span></span><br><span class="line">    invokeCreateHooks(vnode, insertedVnodeQueue)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 向html中插入节点</span></span><br><span class="line">  insert(parentElm, vnode.elm, refElm)</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// src/core/vdom/patch.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">invokeCreateHooks</span>(<span class="params">vnode, insertedVnodeQueue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cbs.create.length; ++i) &#123;</span><br><span class="line">    cbs.create[i](emptyNode, vnode)</span><br><span class="line">  &#125;</span><br><span class="line">  i = vnode.data.hook <span class="comment">// Reuse variable</span></span><br><span class="line">  <span class="keyword">if</span> (isDef(i)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isDef(i.create)) i.create(emptyNode, vnode)</span><br><span class="line">    <span class="comment">// 如果定义了insertHook, 会将该vnode插入到insertedVnodeQueue中</span></span><br><span class="line">    <span class="keyword">if</span> (isDef(i.insert)) insertedVnodeQueue.push(vnode)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>patch</code>开始时会定义<code>insertedVnodeQueue</code>数组, 用来装载装载有vnode.data上有insert钩子的vnode, 在执行<code>createElm</code>的过程中, 会执行<code>invokeCreateHooks</code>.</p><p><code>invokeCreateHooks</code>内部如果判断当前vnode有<code>insert</code>钩子, 就将其push入<code>insertedVnodeQueue</code>数组.</p><p>下面再分析下组件递归patch时的情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/vdom/patch.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// createElm -&gt; createComponent -&gt; initComponent</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initComponent</span>(<span class="params">vnode, insertedVnodeQueue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isDef(vnode.data.pendingInsert)) &#123;</span><br><span class="line">    insertedVnodeQueue.push.apply(</span><br><span class="line">      insertedVnodeQueue,</span><br><span class="line">      vnode.data.pendingInsert</span><br><span class="line">    )</span><br><span class="line">    vnode.data.pendingInsert = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将vnode.componentInstance.$el真实dom元素赋值给vnode.elm</span></span><br><span class="line">  vnode.elm = vnode.componentInstance.$el</span><br><span class="line">  <span class="comment">// 调用invokeCreateHooks或insertedVnodeQueue, 不断将当前组件占位vnode push入 insertVnodeQueue中(由于createComponent是递归调用的, 所以插入顺序先子后父)</span></span><br><span class="line">  <span class="keyword">if</span> (isPatchable(vnode)) &#123;</span><br><span class="line">    invokeCreateHooks(vnode, insertedVnodeQueue)</span><br><span class="line">    setScope(vnode)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// empty component root.</span></span><br><span class="line">    <span class="comment">// skip all element-related modules except for ref (#3455)</span></span><br><span class="line">    registerRef(vnode)</span><br><span class="line">    <span class="comment">// make sure to invoke the insert hook</span></span><br><span class="line">    insertedVnodeQueue.push(vnode)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>createElm</code>的过程中碰见组件标签会调用<code>createComponent</code>, 之后进行循环递归创建<code>vnode</code>和<code>patch</code>的过程, 在本轮递归结束时会执行<code>initComponent</code>方法</p><p><code>initComponent</code>方法会执行<code>invokeCreateHooks</code>或<code>insertedVnodeQueue.push(vnode)</code>, 会将带有<code>insert</code>钩子的<code>vnode</code>push入<code>insertedVnodeQueue</code>数组. 由于组件是递归执行的, 所以插入顺序先子后父</p><p>回到<code>patch</code>方法, 在<code>patch</code>的最后, 执行<code>invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">invokeInsertHook</span>(<span class="params">vnode, queue, initial</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// delay insert hooks for component root nodes, invoke them after the</span></span><br><span class="line">  <span class="comment">// element is really inserted</span></span><br><span class="line">  <span class="keyword">if</span> (isTrue(initial) &amp;&amp; isDef(vnode.parent)) &#123;</span><br><span class="line">    vnode.parent.data.pendingInsert = queue</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; queue.length; ++i) &#123;</span><br><span class="line">      <span class="comment">// 执行对应vnode.data.hook.insert, insert钩子, 将对应vnode传入</span></span><br><span class="line">      queue[i].data.hook.insert(queue[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法遍历之前过程中收集的<code>vnode</code>, 并遍历执行其中的<code>insert</code>方法, 看看<code>insert</code>实现:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/vdom/create-component.js</span></span><br><span class="line">insert (vnode: MountedComponentVNode) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; context, componentInstance &#125; = vnode</span><br><span class="line">  <span class="comment">// 如果子组件此时没挂载, 执行mounted钩子, 子组件mounted优先于父组件执行 </span></span><br><span class="line">  <span class="keyword">if</span> (!componentInstance._isMounted) &#123;</span><br><span class="line">    <span class="comment">// 首次渲染会将_isMounted赋值为true</span></span><br><span class="line">    componentInstance._isMounted = <span class="literal">true</span></span><br><span class="line">    callHook(componentInstance, <span class="string">'mounted'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>insert</code>方法内部判断如果当前实例还未标记为挂载, 执行<code>mounted</code>方法(<code>patch</code>到页面上的过程在递归调时已完成, 此时只是为了执行<code>mounted</code>生命周期), 首次挂载时还会将<code>_isMounted</code>属性置为true.</p><p>由于子组件的<code>patch</code>过程是递归执行的, 所以在<code>insertedVnodeQueue</code>中的插入顺序也先于父组件, 所以<code>mounted</code>在遍历触时也先于父组件执行.</p><h3 id="beforeUpdate-updated"><a href="#beforeUpdate-updated" class="headerlink" title="beforeUpdate, updated"></a>beforeUpdate, updated</h3><p>下面让我们来看看<code>beforeUpdate</code>和<code>updated</code>生命周期</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/observer/scheduler.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mountComponent</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  vm: Component,</span></span></span><br><span class="line"><span class="function"><span class="params">  el: ?Element,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrating?: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> Watcher(vm, updateComponent, noop, &#123;</span><br><span class="line">  <span class="comment">// beforeUpdate执行时机</span></span><br><span class="line">    before () &#123;</span><br><span class="line">      <span class="keyword">if</span> (vm._isMounted) &#123;</span><br><span class="line">        callHook(vm, <span class="string">'beforeUpdate'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="literal">true</span> <span class="comment">/* isRenderWatcher */</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/observer/watcher.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(vm, expOrFn, cb, options, isRenderWatcher) &#123;</span><br><span class="line">    <span class="comment">// 如果是渲染watcher, 将当前watcher实例赋值给vm._wacher</span></span><br><span class="line">    <span class="keyword">if</span> (isRenderWatcher) &#123;</span><br><span class="line">      vm._watcher = <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将watcher实例push入vm._watchers数组</span></span><br><span class="line">    vm._watchers.push(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">this</span>.before = options.before</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nextTick时 会执行flushSchedulerQueue</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flushSchedulerQueue</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  flushing = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">let</span> watcher, id</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Sort queue before flush.</span></span><br><span class="line">  <span class="comment">// This ensures that:</span></span><br><span class="line">  <span class="comment">// 1. Components are updated from parent to child. (because parent is always</span></span><br><span class="line">  <span class="comment">//    created before the child)</span></span><br><span class="line">  <span class="comment">// 2. A component's user watchers are run before its render watcher (because</span></span><br><span class="line">  <span class="comment">//    user watchers are created before the render watcher)</span></span><br><span class="line">  <span class="comment">// 3. If a component is destroyed during a parent component's watcher run,</span></span><br><span class="line">  <span class="comment">//    its watchers can be skipped.</span></span><br><span class="line">  queue.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.id - b.id)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// do not cache length because more watchers might be pushed</span></span><br><span class="line">  <span class="comment">// as we run existing watchers</span></span><br><span class="line">  <span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; queue.length; index++) &#123;</span><br><span class="line">    watcher = queue[index]</span><br><span class="line">    <span class="keyword">if</span> (watcher.before) &#123;</span><br><span class="line">      <span class="comment">// 先把watcher队列拿出来, 执行before方法内含beforeUpdate方法</span></span><br><span class="line">      watcher.before()</span><br><span class="line">    &#125;</span><br><span class="line">    id = watcher.id</span><br><span class="line">    has[id] = <span class="literal">null</span></span><br><span class="line">    watcher.run()</span><br><span class="line">    <span class="comment">// in dev build, check and stop circular updates.</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; has[id] != <span class="literal">null</span>) &#123;</span><br><span class="line">      circular[id] = (circular[id] || <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">      <span class="keyword">if</span> (circular[id] &gt; MAX_UPDATE_COUNT) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          <span class="string">'You may have an infinite update loop '</span> + (</span><br><span class="line">            watcher.user</span><br><span class="line">              ? <span class="string">`in watcher with expression "<span class="subst">$&#123;watcher.expression&#125;</span>"`</span></span><br><span class="line">              : <span class="string">`in a component render function.`</span></span><br><span class="line">          ),</span><br><span class="line">          watcher.vm</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// keep copies of post queues before resetting state</span></span><br><span class="line">  <span class="keyword">const</span> activatedQueue = activatedChildren.slice()</span><br><span class="line">  <span class="keyword">const</span> updatedQueue = queue.slice()</span><br><span class="line"></span><br><span class="line">  resetSchedulerState()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// call component updated and activated hooks</span></span><br><span class="line">  callActivatedHooks(activatedQueue)</span><br><span class="line">  <span class="comment">// 更新后调updated</span></span><br><span class="line">  callUpdatedHooks(updatedQueue)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// devtool hook</span></span><br><span class="line">  <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">  <span class="keyword">if</span> (devtools &amp;&amp; config.devtools) &#123;</span><br><span class="line">    devtools.emit(<span class="string">'flush'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果已经挂载过, 执行updated</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callUpdatedHooks</span> (<span class="params">queue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = queue.length</span><br><span class="line">  <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">    <span class="keyword">const</span> watcher = queue[i]</span><br><span class="line">    <span class="keyword">const</span> vm = watcher.vm</span><br><span class="line">    <span class="comment">//  如果是个渲染watcher</span></span><br><span class="line">    <span class="comment">// (new Watcher过程中如果wachter是个渲染watcher, 会将vm._watcher赋值为渲染watcher)</span></span><br><span class="line">    <span class="comment">// 且已经挂载过, 数据已经更新过(flushSchedulerQueue更新过才会执行)</span></span><br><span class="line">    <span class="keyword">if</span> (vm._watcher === watcher &amp;&amp; vm._isMounted) &#123;</span><br><span class="line">      callHook(vm, <span class="string">'updated'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在执行<code>mountComponent</code>的过程中, 在<code>new Watcher</code>时会给<code>Watcher</code>类的<code>options</code>参数传递<code>before</code>方法, 其中执行了<code>beforeUpdate</code>生命周期</p><p>在<code>Watcher</code>构造函数内, 会将渲染watcher赋值给<code>vm._watcher</code>, 并将<code>wacher</code>实例push入<code>vm._wachers</code>. 并给<code>watcher.before</code>挂载<code>before</code>方法.</p><p>在数据更新后的<code>nextTick</code>中, 会执行<code>flushSchedulerQueue</code>方法, 方法内部判断如果有<code>before</code>方法会执行, 此时执行了<code>beforeUpdate</code>生命周期</p><p>之后进行<code>watcher.run</code>逻辑进行dom更新, 更新结束后执行<code>callUpdatedHooks</code></p><p><code>callUpdatedHooks</code>中会遍历<code>updatedQueue</code>, 如果有<code>watcher</code>是渲染<code>watcher</code>, 且已经更新, 且已经挂载, 执行<code>updated</code>生命周期</p><h3 id="beforeDestroy-destroyed"><a href="#beforeDestroy-destroyed" class="headerlink" title="beforeDestroy, destroyed"></a>beforeDestroy, destroyed</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$destroy = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> vm: Component = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">if</span> (vm._isBeingDestroyed) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 先执行beforeDestroy钩子, 先父后子</span></span><br><span class="line">  callHook(vm, <span class="string">'beforeDestroy'</span>)</span><br><span class="line">  vm._isBeingDestroyed = <span class="literal">true</span></span><br><span class="line">  <span class="comment">// remove self from parent</span></span><br><span class="line">  <span class="keyword">const</span> parent = vm.$parent</span><br><span class="line">  <span class="keyword">if</span> (parent &amp;&amp; !parent._isBeingDestroyed &amp;&amp; !vm.$options.abstract) &#123;</span><br><span class="line">    remove(parent.$children, vm)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// teardown watchers</span></span><br><span class="line">  <span class="keyword">if</span> (vm._watcher) &#123;</span><br><span class="line">    vm._watcher.teardown()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> i = vm._watchers.length</span><br><span class="line">  <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">    vm._watchers[i].teardown()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// remove reference from data ob</span></span><br><span class="line">  <span class="comment">// frozen object may not have observer.</span></span><br><span class="line">  <span class="keyword">if</span> (vm._data.__ob__) &#123;</span><br><span class="line">    vm._data.__ob__.vmCount--</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// call the last hook...</span></span><br><span class="line">  vm._isDestroyed = <span class="literal">true</span></span><br><span class="line">  <span class="comment">// invoke destroy hooks on current rendered tree</span></span><br><span class="line">  <span class="comment">// 触发递归执行子组件(template内的最外层vnode)的销毁工作</span></span><br><span class="line">  vm.__patch__(vm._vnode, <span class="literal">null</span>)</span><br><span class="line">  <span class="comment">// fire destroyed hook</span></span><br><span class="line">  <span class="comment">// 一系列销毁工作执行完成后, 执行destroyed钩子, 先子后父</span></span><br><span class="line">  callHook(vm, <span class="string">'destroyed'</span>)</span><br><span class="line">  <span class="comment">// turn off all instance listeners.</span></span><br><span class="line">  vm.$off()</span><br><span class="line">  <span class="comment">// remove __vue__ reference</span></span><br><span class="line">  <span class="keyword">if</span> (vm.$el) &#123;</span><br><span class="line">    vm.$el.__vue__ = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// release circular reference (#6759)</span></span><br><span class="line">  <span class="keyword">if</span> (vm.$vnode) &#123;</span><br><span class="line">    vm.$vnode.parent = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组件销毁阶段会执行<code>vm.$destroy</code>方法, 其中会先执行<code>vm</code>实例上的<code>beforeDestroy</code>生命周期, 之后会执行<code>vm.__patch__(vm._vnode, null)</code>, 通过之前的学习我们知道这是将渲染vnode置为空, 这个动作会递归触发子组件的<code>$destroy</code>方法.</p><p>之后会触发<code>destroyed</code>生命周期, 由于是在递归中触发<code>destroyed</code>生命周期, 所以<code>destroyed</code>触发的顺序是先子后父, 不同于<code>beforeDestroy</code>的先父后子.</p><p>至此, vm实例的生命周期分析完毕.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这节来分析一下&lt;code&gt;vm&lt;/code&gt;实例的生命周期函数的执行时机和细节.&lt;/p&gt;
&lt;p&gt;生命周期函数是通过&lt;code&gt;callHook&lt;/code&gt;来实现的:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue源码解读 08 - 配置合并</title>
    <link href="http://yoursite.com/2018/10/27/vue-source-08/"/>
    <id>http://yoursite.com/2018/10/27/vue-source-08/</id>
    <published>2018-10-27T12:13:55.000Z</published>
    <updated>2019-12-19T09:21:19.115Z</updated>
    
    <content type="html"><![CDATA[<p>配置合并的过程发生在<code>extends</code>单文件组件导出对象时, 或<code>Vue.mixin</code>混入对象时. 使用的方法都是<code>mergeOptions</code>, 看看该方法的实现:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/util/options.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mergeOptions</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  parent: Object, <span class="regexp">//</span> Vue.options</span></span></span><br><span class="line"><span class="function"><span class="params">  child: Object, <span class="regexp">//</span> new Vue(</span>)的配置对象</span></span><br><span class="line"><span class="function">  <span class="title">vm</span>?: <span class="title">Component</span> // <span class="title">vm</span>实例</span></span><br><span class="line"><span class="function">): <span class="title">Object</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    checkComponents(child)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> child === <span class="string">'function'</span>) &#123;</span><br><span class="line">    child = child.options</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  normalizeProps(child, vm)</span><br><span class="line">  normalizeInject(child, vm)</span><br><span class="line">  normalizeDirectives(child)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// extends和mixins的功能是类似的</span></span><br><span class="line">  <span class="comment">// 判断配置对象是否配置了extends, 如果配置了递归mergeOptions</span></span><br><span class="line">  <span class="keyword">const</span> extendsFrom = child.extends</span><br><span class="line">  <span class="keyword">if</span> (extendsFrom) &#123;</span><br><span class="line">    parent = mergeOptions(parent, extendsFrom, vm)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判断是否配置了mixins, 如果配置了进行递归mergeOptions</span></span><br><span class="line">  <span class="keyword">if</span> (child.mixins) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = child.mixins.length; i &lt; l; i++) &#123;</span><br><span class="line">      parent = mergeOptions(parent, child.mixins[i], vm)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 真正合并的逻辑</span></span><br><span class="line">  <span class="keyword">const</span> options = &#123;&#125;</span><br><span class="line">  <span class="keyword">let</span> key</span><br><span class="line">  <span class="keyword">for</span> (key <span class="keyword">in</span> parent) &#123;</span><br><span class="line">    mergeField(key)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (key <span class="keyword">in</span> child) &#123;</span><br><span class="line">    <span class="comment">// 如果child上的key不在parent上定义的话, 会调用mergeField</span></span><br><span class="line">    <span class="keyword">if</span> (!hasOwn(parent, key)) &#123;</span><br><span class="line">      mergeField(key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">mergeField</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 默认策略: defaultStrat</span></span><br><span class="line">    <span class="comment">// 按照预先定义的各种策略合并, 或默认策略(子覆盖父)</span></span><br><span class="line">    <span class="keyword">const</span> strat = strats[key] || defaultStrat</span><br><span class="line">    <span class="comment">// 生命周期合并</span></span><br><span class="line">    options[key] = strat(parent[key], child[key], vm, key)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回options</span></span><br><span class="line">  <span class="keyword">return</span> options</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/util/options.js</span></span><br><span class="line"><span class="comment">// 默认合并策略(子替代父)</span></span><br><span class="line"><span class="keyword">const</span> defaultStrat = <span class="function"><span class="keyword">function</span> (<span class="params">parentVal: any, childVal: any</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> childVal === <span class="literal">undefined</span></span><br><span class="line">    ? parentVal</span><br><span class="line">    : childVal</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来分析一下该方法的流程:</p><ol><li>检查<code>child</code>对象的合法性</li><li>如果<code>child</code>不是配置对象, 而是一个构造函数, 取该构造函数的<code>options</code>属性</li><li>对个别配置对象属性做<code>normalize</code></li><li>判断配置对象是否配置了<code>extends</code>, 如果配置了则递归调用<code>mergeOptions</code>并返回给<code>options</code></li><li>先对<code>parent</code>上的所有<code>key</code>调用<code>mergeField</code></li><li>如果<code>parent</code>上没有<code>child</code>的当前属性, 再对当前属性调用<code>mergeField</code></li><li>返回合并后的<code>options</code></li></ol><p>下面来分析下<code>mergeField</code>方法: 如果预先定义了合并策略, 则使用合并策略合并, 否则使用默认策略合并(子代替父)</p><p>这里着重看一下合并生命周期的过程:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/util/options.js</span></span><br><span class="line">LIFECYCLE_HOOKS.forEach(<span class="function"><span class="params">hook</span> =&gt;</span> &#123;</span><br><span class="line">  strats[hook] = mergeHook</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生命周期的合并策略, 返回一个生命周期function数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeHook</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  parentVal: ?Array&lt;Function&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  childVal: ?Function | ?Array&lt;Function&gt;</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): ?<span class="title">Array</span>&lt;<span class="title">Function</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> childVal</span><br><span class="line">    ? parentVal</span><br><span class="line">      ? parentVal.concat(childVal)</span><br><span class="line">      : <span class="built_in">Array</span>.isArray(childVal)</span><br><span class="line">        ? childVal</span><br><span class="line">        : [childVal]</span><br><span class="line">    : parentVal</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到生命周期的合并过程结束后返回一个合并后的<code>function</code>数组</p><p>分析完<code>mergeOptions</code>, 来总结下合并配置的场景, 第一个是<code>Vue.mixin</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/global-api/mixin.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向大Vue.options上扩展参数object</span></span><br><span class="line">Vue.mixin = <span class="function"><span class="keyword">function</span> (<span class="params">mixin: Object</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.options = mergeOptions(<span class="keyword">this</span>.options, mixin)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Vue.mixin</code>方法用<code>mergeOptions</code>方法向<code>Vue.options</code>上扩展参数.</p><p>第二个是在组件<code>vm</code>实例生成的过程中, 在<code>new Vue</code>或<code>new Sub()</code>的过程中创建<code>vm.$options</code>的过程</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/init.js</span></span><br><span class="line">Vue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options?: Object</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">if</span> (options &amp;&amp; options._isComponent) &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    const options: InternalComponentOptions = &#123;</span></span><br><span class="line"><span class="comment">      _isComponent: true,</span></span><br><span class="line"><span class="comment">      // 父vnode,组件vnode,占位符vnode</span></span><br><span class="line"><span class="comment">      _parentVnode: vnode,</span></span><br><span class="line"><span class="comment">      // 子组件的父vm实例</span></span><br><span class="line"><span class="comment">      parent</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    initInternalComponent(vm, options)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 合并配置, 将配置合并到$options上</span></span><br><span class="line">    vm.$options = mergeOptions(</span><br><span class="line">      resolveConstructorOptions(vm.constructor), <span class="comment">// Vue.options</span></span><br><span class="line">      options || &#123;&#125;, <span class="comment">// new Vue()的配置对象</span></span><br><span class="line">      vm</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当不是组件时(<code>vm</code>是<code>new Vue</code>的实例), 走else, 其中<code>resolveConstructorOptions</code>方法返回的就是<code>Vue.options</code>, 逻辑和第一种类似.</p><p>当是组件时(<code>vm</code>是<code>new Sub</code>的实例), <code>options._isComponent</code>为true时, 实际上传入的是前面章节分析过的<code>InternalComponentOptions</code>类型的对象. 在<code>initInternalComponent</code>中, <code>vm.$options</code>被赋值为原型继承自<code>Sub.options</code>的对象.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initInternalComponent</span> (<span class="params">vm: Component, options: InternalComponentOptions</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  const options: InternalComponentOptions = &#123;</span></span><br><span class="line"><span class="comment">      _isComponent: true,</span></span><br><span class="line"><span class="comment">      // 父vnode,组件vnode,占位符vnode</span></span><br><span class="line"><span class="comment">      _parentVnode: vnode,</span></span><br><span class="line"><span class="comment">      // 子组件的父vm实例</span></span><br><span class="line"><span class="comment">      parent</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="comment">// 将Sub.options(合并自Vue.options和组件配置对象)赋值为vm.$options</span></span><br><span class="line">  vm.$options = <span class="built_in">Object</span>.create(vm.constructor.options)</span><br><span class="line">  <span class="comment">// ...向vm.$options扩展属性的过程</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么<code>Sub.options</code>是怎么来的呢? 这里回忆下之前的内容. <code>mergeOptions</code>在之前<code>new Sub</code>时调用, 逻辑主轴线如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/vodm/create-component.js</span></span><br><span class="line"><span class="comment">// 生成组件vnode的过程</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createComponent</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="regexp">//</span> 组件构造对象</span></span></span><br><span class="line"><span class="function"><span class="params">  Ctor: Class&lt;Component&gt; | Function | Object | void,</span></span></span><br><span class="line"><span class="function"><span class="params">  data: ?VNodeData,</span></span></span><br><span class="line"><span class="function"><span class="params">  context: Component, <span class="regexp">//</span> vm实例</span></span></span><br><span class="line"><span class="function"><span class="params">  children: ?Array&lt;VNode&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  tag?: string</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">VNode</span> | <span class="title">Array</span>&lt;<span class="title">VNode</span>&gt; | <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 这里baseCtor其实是Vue构造函数</span></span><br><span class="line">  <span class="keyword">const</span> baseCtor = context.$options._base</span><br><span class="line"></span><br><span class="line">  <span class="comment">// plain options object: turn it into a constructor</span></span><br><span class="line">  <span class="comment">// Vue.extend实现 </span></span><br><span class="line">  <span class="keyword">if</span> (isObject(Ctor)) &#123;</span><br><span class="line">    <span class="comment">// Ctor是Vue.extend所创建的子类</span></span><br><span class="line">    Ctor = baseCtor.extend(Ctor)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue.extend方法</span></span><br><span class="line">Vue.extend = <span class="function"><span class="keyword">function</span> (<span class="params">extendOptions: Object</span>): <span class="title">Function</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">const</span> Sub = <span class="function"><span class="keyword">function</span> <span class="title">VueComponent</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 因为原型继承过, 所以_init是Vue的方法但是在原型链中可以找到</span></span><br><span class="line">    <span class="keyword">this</span>._init(options)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 原型继承过程</span></span><br><span class="line">  Sub.prototype = <span class="built_in">Object</span>.create(Super.prototype)</span><br><span class="line">  Sub.prototype.constructor = Sub</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 合并父类(大Vue)的options和组件定义的options</span></span><br><span class="line">  Sub.options = mergeOptions(</span><br><span class="line">    Super.options,</span><br><span class="line">    extendOptions</span><br><span class="line">  )</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此, 我们分析完了配置合并的场景和过程.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;配置合并的过程发生在&lt;code&gt;extends&lt;/code&gt;单文件组件导出对象时, 或&lt;code&gt;Vue.mixin&lt;/code&gt;混入对象时. 使用的方法都是&lt;code&gt;mergeOptions&lt;/code&gt;, 看看该方法的实现:&lt;/p&gt;
&lt;figure class=&quot;hi
      
    
    </summary>
    
    
  </entry>
  
</feed>
