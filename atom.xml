<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>choteewang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-31T09:54:59.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>choteewang@qq.com</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>正反馈系列:《JavaScript高级程序设计》HTML5脚本编程,错误处理</title>
    <link href="http://yoursite.com/2017/12/31/%E9%AB%98%E7%A8%8B10-h5-error/"/>
    <id>http://yoursite.com/2017/12/31/高程10-h5-error/</id>
    <published>2017-12-31T09:53:47.000Z</published>
    <updated>2017-12-31T09:54:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML5-脚本编程-第16章"><a href="#HTML5-脚本编程-第16章" class="headerlink" title="HTML5 脚本编程 (第16章)"></a>HTML5 脚本编程 (第16章)</h1><h2 id="原生拖放"><a href="#原生拖放" class="headerlink" title="原生拖放"></a>原生拖放</h2><h3 id="拖放事件"><a href="#拖放事件" class="headerlink" title="拖放事件"></a>拖放事件</h3><blockquote><p><code>element</code>元素开始被拖放时:</p></blockquote><ol><li><code>element.dragstart</code></li><li><code>element.drag</code> 持续发生</li><li><code>element.dragend</code></li></ol><blockquote><p>拖动到一个有效放置目标<code>target</code>上时:</p></blockquote><ol><li><code>target.dragenter</code></li><li><code>target.dragover</code> 持续发生</li><li><code>target.dragleave</code> 或 <code>drop</code> 不会同时触发</li></ol><h3 id="自定义配置目标"><a href="#自定义配置目标" class="headerlink" title="自定义配置目标"></a>自定义配置目标</h3><p>如果拖动元素经过不允许放置的元素，无论用户如何操作，都不会发生<code>drop</code>事件。不过，你可以把任何元素变成有效的放置目标，方法是重写<code>dragenter</code>和<code>dragover</code>事件的默认行为。例如，假设有一个ID为”droptarget”的<code>&lt;div&gt;</code>元素，可以用如下代码将它变成一个放置目标。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> droptarget = <span class="built_in">document</span>.getElementById(<span class="string">"droptarget"</span>);</span><br><span class="line">EventUtil.addHandler(droptarget, <span class="string">"dragover"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  EventUtil.preventDefault(event);</span><br><span class="line">&#125;);</span><br><span class="line">EventUtil.addHandler(droptarget, <span class="string">"dragenter"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  EventUtil.preventDefault(event);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>在Firefox3.5+中，放置事件的默认行为是打开被放到放置目标上的URL。换句话说，如果是把图像拖放到放置目标上，页面就会转向图像文件；而如果是把文本拖放到放置目标上，则会导致无效URL错误。因此，为了让Firefox支持正常的拖放，还要取消drop事件的默认行为，阻止它打开URL：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取消drop事件原生行为(新窗口打开图片等)</span></span><br><span class="line">EventUtil.addHandler(droptarget, <span class="string">"drop"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  EventUtil.preventDefault(event);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="dataTransfer对象"><a href="#dataTransfer对象" class="headerlink" title="dataTransfer对象"></a>dataTransfer对象</h3><p>HTML5引入了<code>dataTransfer对象</code>,它是<code>event</code>事件对象的一个属性，用于从被拖动元素向放置目标传递字符串格式的数据。只能在拖放事件的事件处理程序中访问dataTransfer对象。</p><p>dataTransfer对象有两个主要方法：<code>event.dataTransfer.getData()</code>和<code>event.dataTransfer.setData()</code>。<code>getData()</code>可以取得由<code>setData()</code>保存的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置和接收文本数据 </span></span><br><span class="line">event.dataTransfer.setData(<span class="string">"text"</span>, <span class="string">"some text"</span>);</span><br><span class="line"><span class="keyword">var</span> text = event.dataTransfer.getData(<span class="string">"text"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置和接收 URL </span></span><br><span class="line">event.dataTransfer.setData(<span class="string">"URL"</span>, <span class="string">"http://www.wrox.com/"</span>);</span><br><span class="line"><span class="keyword">var</span> url = event.dataTransfer.getData(<span class="string">"URL"</span>);</span><br></pre></td></tr></table></figure><p>IE只定义了”text”和”URL”两种有效的数据类型，而HTML5则对此加以扩展，允许指定各种MIME类型。考虑到向后兼容，HTML5也支持”text”和”URL”，但这两种类型会被映射为”text/plain”和”text/uri-list”。</p><p>实际上，<code>dataTransfer对象</code>可以为每种MIME类型都保存一个值。换句话说，同时在这个对象中保存一段文本和一个URL不会有任何问题。不过，保存在<code>dataTransfer对象</code>中的数据只能在<code>drop</code>事件处理程序中读取。如果在ondrop处理程序中没有读到数据，那就是<code>dataTransfer对象</code>已经被销毁，数据也丢失了。</p><p>在拖动<strong>文本框</strong>中的文本时，浏览器会调用<code>event.dataTransfer.setData()</code>方法，将拖动的文本以”text”格式保存在dataTransfer对象中。类似地，在拖放<strong>链接</strong>或<strong>图像</strong>时，会调用<code>event.dataTransfer.setData()</code>方法并保存URL。然后，在这些元素被拖放到放置目标时，就可以通过<code>event.dataTransfer.getData()</code>读到这些数据。当然，作为开发人员，你也可以在<code>dragstart</code>事件处理程序中调用<code>event.dataTransfer.setData()</code>，手工保存自己要传输的数据</p><h3 id="dropEffect与effectAllowed"><a href="#dropEffect与effectAllowed" class="headerlink" title="dropEffect与effectAllowed"></a>dropEffect与effectAllowed</h3><p>dataTransfer 对象的两个属性：<code>event.dataTransfer.dropEffect</code> 和 <code>event.dataTransfer.effectAllowed</code></p><p><code>event.dataTransfer.dropEffect</code> 是针对放置目标<code>target</code>的事件处理程序<code>dragenter</code>设置的.可以知道被拖动的元素能够执行哪种放置行为,可能有4个值:</p><ul><li><code>&quot;none&quot;</code>：不能把拖动的元素放在这里。这是除文本框之外所有元素的默认值。</li><li><code>&quot;move&quot;</code>：应该把拖动的元素移动到放置目标。</li><li><code>&quot;copy&quot;</code>：应该把拖动的元素复制到放置目标。</li><li><code>&quot;link&quot;</code>：表示放置目标会打开拖动的元素（但拖动的元素必须是一个链接，有URL）。</li></ul><blockquote><p><code>dropEffect</code> 属性只有搭配 <code>effectAllowed</code> 属性才有用。</p></blockquote><p><code>event.dataTransfer.effectAllowed</code>属性表示允许拖动元素的哪种<code>dropEffect</code>，是针对被拖动目标<code>element</code>的<code>dragstart</code>事件设置的, <code>effectAllowed</code>属性可能的值如下</p><ul><li><code>&quot;uninitialized&quot;</code>：没有给被拖动的元素设置任何放置行为。</li><li><code>&quot;none&quot;</code>：被拖动的元素不能有任何行为。</li><li><code>&quot;copy&quot;</code>：只允许值为”copy”的dropEffect。</li><li><code>&quot;link&quot;</code>：只允许值为”link”的dropEffect。</li><li><code>&quot;move&quot;</code>：只允许值为”move”的dropEffect。</li><li><code>&quot;copyLink&quot;</code>：允许值为”copy”和”link”的dropEffect。</li><li><code>&quot;copyMove&quot;</code>：允许值为”copy”和”move”的dropEffect。</li><li><code>&quot;linkMove&quot;</code>：允许值为”link”和”move”的dropEffect。</li><li><code>&quot;all&quot;</code>：允许任意dropEffect。</li></ul><blockquote><p>假设你想允许用户把文本框中的文本拖放到一个<code>&lt;div&gt;</code>元素中。首先，必须将<strong>div元素的dragenter事件</strong>中<code>dropEffect</code>和<strong>文本框的dragstart事件</strong>中<code>effectAllowed</code>设置为”move”。但是，由于<code>&lt;div&gt;</code>元素的放置事件的默认行为是什么也不做，所以文本不可能自动移动。重写这个默认行为，就能从文本框中移走文本。然后你就可以自己编写代码将文本插入到<code>&lt;div&gt;</code>中，这样整个拖放操作就完成了。如果你将<code>dropEffect</code>和<code>effectAllowed</code>的值设置为”copy”，那就不会自动移走文本框中的文本。</p></blockquote><h3 id="可拖动"><a href="#可拖动" class="headerlink" title="可拖动"></a>可拖动</h3><p>默认情况下，图像、链接和文本是可以拖动的，也就是说，不用额外编写代码，用户就可以拖动它们。文本只有在被选中的情况下才能拖动，而图像和链接在任何时候都可以拖动。让其他元素可以拖动也是可能的。</p><p>HTML5为所有HTML元素规定了一个<code>draggable</code>属性，表示元素是否可以拖动。图像和链接的<code>draggable</code>属性自动被设置成了true，而其他元素这个属性的默认值都是false。要想让其他元素可拖动，或者让图像或链接不能拖动，都可以设置这个属性。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 让这个图像不可以拖动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"smile.gif"</span> <span class="attr">draggable</span>=<span class="string">"false"</span> <span class="attr">alt</span>=<span class="string">"Smiley face"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 让这个元素可以拖动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="其他成员"><a href="#其他成员" class="headerlink" title="其他成员"></a>其他成员</h3><blockquote><p>HTML5 规范规定 <code>dataTransfer对象</code>还应该包含下列方法和属性。</p></blockquote><ul><li><code>addElement(element)</code>：为拖动操作添加一个元素。添加这个元素只影响数据（即增加作为拖动源而响应回调的对象），不会影响拖动操作时页面元素的外观。在写作本书时，只有Firefox3.5+实现了这个方法。</li><li><code>clearData(format)</code>：清除以特定格式保存的数据。实现这个方法的浏览器有IE、Fireforx3.5+、Chrome和Safari4+。</li><li><code>setDragImage(element,x,y)</code>：指定一幅图像，当拖动发生时，显示在光标下方。这个方法接收的三个参数分别是要显示的HTML元素和光标在图像中的x、y坐标。其中，HTML元素可以是一幅图像，也可以是其他元素。是图像则显示图像，是其他元素则显示渲染后的元素。实现这个方法的浏览器有Firefox3.5+、Safari4+和Chrome。</li><li><code>types</code>：当前保存的数据类型。这是一个类似数组的集合，以”text”这样的字符串形式保存着数据类型。实现这个属性的浏览器有IE10+、Firefox3.5+和Chrome。</li></ul><h2 id="媒体元素"><a href="#媒体元素" class="headerlink" title="媒体元素"></a>媒体元素</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 嵌入视频 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"conference.mpg"</span> <span class="attr">id</span>=<span class="string">"myVideo"</span>&gt;</span>Video player not available.<span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 嵌入音频 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"song.mp3"</span> <span class="attr">id</span>=<span class="string">"myAudio"</span>&gt;</span>Audio player not available.<span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用这两个元素时，至少要在标签中包含<code>src</code>属性，指向要加载的媒体文件。还可以设置<code>width</code>和<code>height</code>属性以指定视频播放器的大小，</p><p>如果标签中有<code>controls</code>特性，则意味着浏览器应该显示UI控件，以便用户直接操作媒体。位于开始和结束标签之间的任何内容都将作为后备内容，在浏览器不支持这两个媒体元素的情况下显示。</p><p>因为并非所有浏览器都支持所有媒体格式，所以可以指定多个不同的媒体来源, 使用一或多个<code>&lt;source&gt;</code>元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 嵌入视频 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"myVideo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"conference.webm"</span> <span class="attr">type</span>=<span class="string">"video/webm; codecs='vp8, vorbis'"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"conference.ogv"</span> <span class="attr">type</span>=<span class="string">"video/ogg; codecs='theora, vorbis'"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"conference.mpg"</span>&gt;</span> Video player not available.</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 嵌入音频 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">id</span>=<span class="string">"myAudio"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"song.ogg"</span> <span class="attr">type</span>=<span class="string">"audio/ogg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"song.mp3"</span> <span class="attr">type</span>=<span class="string">"audio/mpeg"</span>&gt;</span> Audio player not available.</span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p><code>&lt;video&gt;</code>和<code>&lt;audio&gt;</code>元素都提供了完善的 JavaScript 接口。下表列出了这两个元素共有的属性，</p><p><img src="https://i.loli.net/2017/12/31/5a48b37a19ab3.jpg" alt=""></p><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p><img src="https://i.loli.net/2017/12/31/5a48b37a3ab84.jpg" alt=""></p><h3 id="自定义媒体"><a href="#自定义媒体" class="headerlink" title="自定义媒体"></a>自定义媒体</h3><p>使用<code>&lt;audio&gt;</code>和<code>&lt;video&gt;</code>元素的<code>element.play()</code>和<code>element.pause()</code>方法，可以手工控制媒体文件的播放。组合使用属性、事件和这两个方法，很容易创建一个自定义的媒体播放器，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mediaplayer"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"video"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"player"</span> <span class="attr">src</span>=<span class="string">"movie.mov"</span> <span class="attr">poster</span>=<span class="string">"mymovie.jpg"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"200"</span>&gt;</span> Video player not available.</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"controls"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Play"</span> <span class="attr">id</span>=<span class="string">"video-btn"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"curtime"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span>/</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"duration"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">video.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//get references to the elements</span></span><br><span class="line">  <span class="keyword">var</span> player = <span class="built_in">document</span>.getElementById(<span class="string">"player"</span>);</span><br><span class="line">  <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"video-btn"</span>);</span><br><span class="line">  <span class="keyword">var</span> curtime = <span class="built_in">document</span>.getElementById(<span class="string">"curtime"</span>);</span><br><span class="line">  <span class="keyword">var</span> duration = <span class="built_in">document</span>.getElementById(<span class="string">"duration"</span>);</span><br><span class="line">  duration.innerHTML = player.duration;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//attach event handler to button</span></span><br><span class="line">  EventUtil.addHandler(btn, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (player.paused) &#123;</span><br><span class="line">      player.play();</span><br><span class="line">      btn.value = <span class="string">"Pause"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      player.pause();</span><br><span class="line">      btn.value = <span class="string">"Play"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//update the current time periodically</span></span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    curtime.innerHTML = player.currentTime;</span><br><span class="line">  &#125;, <span class="number">250</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="检测编解码器支持情况"><a href="#检测编解码器支持情况" class="headerlink" title="检测编解码器支持情况"></a>检测编解码器支持情况</h3><p>有一个JavaScriptAPI能够检测浏览器是否支持某种格式和编解码器</p><p>这两个媒体元素都有一个<code>element.canPlayType()</code>方法，该方法接收一种格式/编解码器字符串，返回”probably”、”maybe”或””（空字符串）。空字符串是假值，因此可以像下面这样在if语句中使用<code>element.canPlayType()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (audio.canPlayType(<span class="string">"audio/mpeg"</span>)) &#123;</span><br><span class="line">  <span class="comment">//进一步处理 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>“probably”和”maybe”都是真值，因此在 if 语句的条件测试中可以转换成 true。<br>在同时传入MIME类型和编解码器的情况下，可能性就会增加，返回的字符串会变成”probably”。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> audio = <span class="built_in">document</span>.getElementById(<span class="string">"audio-player"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//很可能"maybe" </span></span><br><span class="line"><span class="keyword">if</span> (audio.canPlayType(<span class="string">"audio/mpeg"</span>)) &#123;</span><br><span class="line">  <span class="comment">//进一步处理 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可能是"probably" </span></span><br><span class="line"><span class="keyword">if</span> (audio.canPlayType(<span class="string">"audio/ogg; codecs=\"vorbis\""</span>)) &#123;</span><br><span class="line">  <span class="comment">//进一步处理 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>编解码器必须用引号引起来才行。下表列出了已知的已得到支持的音频格式和编解码器。</p></blockquote><p><img src="https://i.loli.net/2017/12/31/5a48b37a1b202.jpg" alt=""></p><h2 id="历史状态管理"><a href="#历史状态管理" class="headerlink" title="历史状态管理"></a>历史状态管理</h2><h3 id="history-pushState"><a href="#history-pushState" class="headerlink" title="history.pushState()"></a>history.pushState()</h3><p><code>history.pushState(state,title,url)</code>方法，该方法可以接收三个参数：状态对象、新状态的标题,可选的相对 URL,能够在不加载新页面的情况下改变浏览器的URL</p><p>执行<code>history.pushState()</code>方法后，新的状态信息就会被加入历史状态栈，而浏览器地址栏也会变成新的相对URL。但是，浏览器并不会真的向服务器发送请求，即使状态改变之后查询<code>location.href</code>也会返回与地址栏中相同的地址。</p><p>因为pushState()会创建新的历史状态，所以你会发现“后退”按钮也能使用了。按下“后退”按钮，会触发window对象的<code>window.onpopstate</code>事件。事件的事件对象有一个<code>event.state</code>属性，这个属性就包含着当初以第一个参数传递给<code>history.pushState()</code>的状态对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">history.pushState(&#123;<span class="attr">name</span>:<span class="string">"Nicholas"</span>&#125;, <span class="string">"Nicholas page"</span>, <span class="string">"nicholas.html"</span>);</span><br></pre></td></tr></table></figure><h3 id="history-replaceState"><a href="#history-replaceState" class="headerlink" title="history.replaceState()"></a>history.replaceState()</h3><p><code>history.replaceState(state,title,url)</code> 和<code>history.pushState</code>的区别是不是往历史记录里添加一条记录,而是更新当前记录</p><h3 id="window-onpopstate"><a href="#window-onpopstate" class="headerlink" title="window.onpopstate()"></a>window.onpopstate()</h3><p><code>window.onpopstate</code>是<code>popstate</code>事件在<code>window</code>对象上的事件处理程序.</p><p>每当处于激活状态的历史记录条目发生变化时,<code>popstate</code>事件就会在对应<code>window</code>对象上触发. 如果当前处于激活状态的历史记录条目是由<code>history.pushState()</code>方法创建,或者由<code>history.replaceState()</code>方法修改过的, 则<code>popstate</code>事件对象的<code>event.state</code>属性包含了这个历史记录条目的state对象的一个拷贝.</p><p>调用<code>history.pushState()</code>或者<code>history.replaceState()</code>不会触发<code>popstate</code>事件. <code>popstate</code>事件只会在浏览器某些行为下触发, 比如点击后退、前进按钮(或者在JavaScript中调用<code>history.back()</code>、<code>history.forward()</code>、<code>history.go()</code>方法).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onpopstate = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"location: "</span> + <span class="built_in">document</span>.location + <span class="string">", state: "</span> + <span class="built_in">JSON</span>.stringify(event.state));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//绑定事件处理函数. </span></span><br><span class="line">history.pushState(&#123;<span class="attr">page</span>: <span class="number">1</span>&#125;, <span class="string">"title 1"</span>, <span class="string">"?page=1"</span>);    <span class="comment">//添加并激活一个历史记录条目 http://example.com/example.html?page=1,条目索引为1</span></span><br><span class="line">history.pushState(&#123;<span class="attr">page</span>: <span class="number">2</span>&#125;, <span class="string">"title 2"</span>, <span class="string">"?page=2"</span>);    <span class="comment">//添加并激活一个历史记录条目 http://example.com/example.html?page=2,条目索引为2</span></span><br><span class="line">history.replaceState(&#123;<span class="attr">page</span>: <span class="number">3</span>&#125;, <span class="string">"title 3"</span>, <span class="string">"?page=3"</span>); <span class="comment">//修改当前激活的历史记录条目 http://ex..?page=2 变为 http://ex..?page=3,条目索引为3</span></span><br><span class="line">        history.back(); <span class="comment">// 弹出 "location: http://example.com/example.html?page=1, state: &#123;"page":1&#125;"</span></span><br><span class="line">history.back(); <span class="comment">// 弹出 "location: http://example.com/example.html, state: null</span></span><br><span class="line">history.go(<span class="number">2</span>);  <span class="comment">// 弹出 "location: http://example.com/example.html?page=3, state: &#123;"page":3&#125;</span></span><br></pre></td></tr></table></figure><h1 id="错误处理-第17章"><a href="#错误处理-第17章" class="headerlink" title="错误处理 (第17章)"></a>错误处理 (第17章)</h1><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><h3 id="try-catch语句"><a href="#try-catch语句" class="headerlink" title="try-catch语句"></a>try-catch语句</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// 可能会导致错误的代码 </span></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="comment">// 在错误发生时怎么处理 </span></span><br><span class="line">  <span class="built_in">console</span>.log(error.message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果<code>try</code>块中的任何代码发生了错误，就会立即退出代码执行过程，然后接着执行<code>catch</code>块。此时，<code>catch</code>块会接收到一个包含错误信息的对象。与在其他语言中不同的是，即使你不想使用这个错误对象，也要给它起个名字。这个对象中包含的实际信息会因浏览器而异，但共同的是有一个保存着错误消息的<code>error.message</code>属性,一个保存错误类型的<code>error.name</code>属性；</p><h3 id="finally子句"><a href="#finally子句" class="headerlink" title="finally子句"></a>finally子句</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFinally</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>; <span class="comment">// 不会执行</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 不会执行</span></span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 只会return 0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然在<code>try-catch</code>语句中是可选的，但<code>finally</code>子句一经使用，其代码无论如何都会执行。换句话说，<code>try</code>语句块中的代码全部正常执行，<code>finally</code>子句会执行；如果因为出错而执行了<code>catch</code>语句块，<code>finally</code>子句照样还会执行。只要代码中包含<code>finally</code>子句，则无论try或catch语句块中包含什么代码——甚至<code>return</code>语句，都不会阻止<code>finally</code>子句的执行。来看下面这个函数。</p><blockquote><p>如果提供finally子句，则catch子句就成了可选的（catch或finally有一个即可）。<br>请读者务必要记住，只要代码中包含finally子句，那么无论try还是catch语句块中的return语句都将被忽略。</p></blockquote><h3 id="错误类型"><a href="#错误类型" class="headerlink" title="错误类型"></a>错误类型</h3><p>7种错误类型:</p><ul><li><code>Error</code></li><li><code>EvalError</code></li><li><code>RangeError</code></li><li><code>ReferenceError</code></li><li><code>SyntaxError</code></li><li><code>TypeError</code></li><li><code>URIError</code></li></ul><blockquote><p>针对错误类型的编程处理</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  someFunction();</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="keyword">if</span> (error <span class="keyword">instanceof</span> <span class="built_in">TypeError</span>) &#123;</span><br><span class="line">    <span class="comment">//处理类型错误 </span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error <span class="keyword">instanceof</span> <span class="built_in">ReferenceError</span>) &#123;</span><br><span class="line">    <span class="comment">//处理引用错误 </span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//处理其他类型的错误 </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用<code>try-catch</code>最适合处理那些我们无法控制的错误。假设你在使用一个大型<code>JavaScript库</code>中的函数，该函数可能会有意无意地抛出一些错误。由于我们不能修改这个库的源代码，所以大可将对该函数的调用放在<code>try-catch</code>语句当中，万一有什么错误发生，也好恰当地处理它们。<br>在明明白白地知道自己的代码会发生错误时，再使用<code>try-catch</code>语句就不太合适了。例如，如果传递给函数的参数是字符串而非数值，就会造成函数出错，那么就应该先检查参数的类型，然后再决定如何去做。在这种情况下，不应用使用<code>try-catch</code>语句。</p></blockquote><h3 id="抛出错误-throw"><a href="#抛出错误-throw" class="headerlink" title="抛出错误 throw"></a>抛出错误 throw</h3><p>与<code>try-catch</code>语句相配的还有一个<code>throw</code>操作符，用于随时抛出自定义错误。抛出错误时，必须要给<code>throw</code>操作符指定一个值，这个值是什么类型，没有要求。下列代码都是有效的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="number">12345</span>;</span><br><span class="line"><span class="keyword">throw</span> <span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="keyword">throw</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">throw</span> &#123;</span><br><span class="line">  name: <span class="string">"JavaScript"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在遇到<code>throw</code>操作符时，代码会立即停止执行。仅当有<code>try-catch</code>语句捕获到被抛出的值时，代码才会继续执行。通过使用某种内置错误类型，可以更真实地模拟浏览器错误。每种错误类型的构造函数接收一个参数，即实际的错误消息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Something bad happened."</span>);</span><br></pre></td></tr></table></figure><p>这行代码抛出了一个通用错误，带有一条自定义错误消息。浏览器会像处理自己生成的错误一样，来处理这行代码抛出的错误。换句话说，浏览器会以常规方式报告这一错误，并且会显示这里的自定义错误消息。像下面使用其他错误类型，也可以模拟出类似的浏览器错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">SyntaxError</span>(<span class="string">"I don’t like your syntax."</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"What type of variable do you take me for?"</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RangeError</span>(<span class="string">"Sorry, you just don’t have the range."</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">EvalError</span>(<span class="string">"That doesn’t evaluate."</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">URIError</span>(<span class="string">"Uri, is that you?"</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">ReferenceError</span>(<span class="string">"You didn’t cite your references properly."</span>);</span><br></pre></td></tr></table></figure><p>另外，利用原型链还可以通过继承Error来创建自定义错误类型（原型链在第6章中介绍）。此时，需要为新创建的错误类型指定name和message属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CustomError</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">"CustomError"</span>;</span><br><span class="line">  <span class="keyword">this</span>.message = message;</span><br><span class="line">&#125;</span><br><span class="line">CustomError.prototype = <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> CustomError(<span class="string">"My message"</span>);</span><br></pre></td></tr></table></figure><h3 id="错误事件-error"><a href="#错误事件-error" class="headerlink" title="错误事件 error"></a>错误事件 error</h3><p>任何没有通过try-catch处理的错误都会触发<code>window</code>对象的<code>window.onerror(message,url,line)</code>事件。在任何Web浏览器中，<code>onerror</code>事件处理程序都不会创建<code>event</code>事件参数对象，但它可以接收三个参数：错误消息<code>message</code>、错误所在的URL<code>url</code>, 行号<code>line</code>。多数情况下，只有错误消息有用，因为URL只是给出了文档的位置，而行号所指的代码行既可能出自嵌入的JavaScript代码，也可能出自外部的文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">message, url, line</span>) </span>&#123;</span><br><span class="line">  alert(message);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>只要发生错误，无论是不是浏览器生成的，都会触发<code>error</code>事件，并执行这个事件处理程序。然后，浏览器默认的机制发挥作用，像往常一样显示出错误消息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">message, url, line</span>) </span>&#123;</span><br><span class="line">  alert(message);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过return false，这个函数实际上就充当了整个文档中的<code>try-catch</code>语句，可以捕获所有无代码处理的运行时错误。这个事件处理程序是避免浏览器报告错误的最后一道防线，理想情况下，只要可能就不应该使用它。只要能够适当地使用<code>try-catch</code>语句，就不会有错误交给浏览器，也就不会触发<code>error</code>事件。</p><p>图像也支持<code>error</code>事件。只要图像的<code>src</code>特性中的URL不能返回可以被识别的图像格式，就会触发<code>error</code>事件。此时的<code>error</code>事件遵循DOM格式，会返回一个以图像为目标的<code>event</code>对象。下面是一个例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">EventUtil.addHandler(image, <span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Image loaded!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">EventUtil.addHandler(image, <span class="string">"error"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Image not loaded!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">image.src = <span class="string">"smilex.gif"</span>; <span class="comment">//指定不存在的文件</span></span><br></pre></td></tr></table></figure><h3 id="添加查询字符串工具函数"><a href="#添加查询字符串工具函数" class="headerlink" title="添加查询字符串工具函数"></a>添加查询字符串工具函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addQueryStringArg</span>(<span class="params">url, name, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (url.indexOf(<span class="string">"?"</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">    url += <span class="string">"?"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    url += <span class="string">"&amp;"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  url += <span class="built_in">encodeURIComponent</span>(name) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(value);</span><br><span class="line">  <span class="keyword">return</span> url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="把错误记录到服务器"><a href="#把错误记录到服务器" class="headerlink" title="把错误记录到服务器"></a>把错误记录到服务器</h3><p>要建立这样一种JavaScript错误记录系统，首先需要在服务器上创建一个页面（或者一个服务器入口点），用于处理错误数据。这个页面的作用无非就是从查询字符串中取得数据，然后再将数据写入错误日志中。这个页面可能会使用如下所示的函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logError</span>(<span class="params">sev, msg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">  img.src = <span class="string">"log.php?sev="</span> + <span class="built_in">encodeURIComponent</span>(sev) + <span class="string">"&amp;msg="</span> + <span class="built_in">encodeURIComponent</span>(msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个<code>logError()</code>函数接收两个参数：表示严重程度的数值或字符串（视所用系统而异）及错误消息。其中，使用了Image对象来发送请求，这样做非常灵活，主要表现如下几方面。</p><ul><li>所有浏览器都支持Image对象，包括那些不支持XMLHttpRequest对象的浏览器。</li><li>可以避免跨域限制。通常都是一台服务器要负责处理多台服务器的错误，而这种情况下使用XMLHttpRequest是不行的。</li><li>在记录错误的过程中出问题的概率比较低。大多数Ajax通信都是由JavaScript库提供的包装函数来处理的，如果库代码本身有问题，而你还在依赖该库记录错误，可想而知，错误消息是不可能得到记录的。</li></ul><p>只要是使用try-catch语句，就应该把相应错误记录到日志中。来看下面的例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = mods.length; i &lt; len; i++) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    mods[i].init();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">    logError(<span class="string">"nonfatal"</span>, <span class="string">"Module init failed: "</span> + ex.message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调试技术"><a href="#调试技术" class="headerlink" title="调试技术"></a>调试技术</h2><h3 id="console"><a href="#console" class="headerlink" title="console"></a>console</h3><ul><li><code>error(message)</code>：将错误消息记录到控制台</li><li><code>info(message)</code>：将信息性消息记录到控制台</li><li><code>log(message)</code>：将一般消息记录到控制台</li><li><code>warn(message)</code>：将警告消息记录到控制台</li></ul><h3 id="抛出错误-assert"><a href="#抛出错误-assert" class="headerlink" title="抛出错误 assert()"></a>抛出错误 assert()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> num1 != <span class="string">"number"</span> || <span class="keyword">typeof</span> num2 != <span class="string">"number"</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"divide(): Both arguments must be numbers."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> num1 / num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于大型应用程序来说，自定义的错误通常都使用<code>assert(condition,errMessage)</code>函数抛出。这个函数接受两个参数，一个是求值结果应该为true的条件，另一个是条件为false时要抛出的错误信息。以下就是一个非常基本的<code>assert()</code>函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assert</span>(<span class="params">condition, message</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!condition) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以用这个<code>assert()</code>函数代替某些函数中需要调试的if语句，以便输出错误消息。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  assert(<span class="keyword">typeof</span> num1 == <span class="string">"number"</span> &amp;&amp; <span class="keyword">typeof</span> num2 == <span class="string">"number"</span>, <span class="string">"divide(): Both arguments must be numbers."</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> num1 / num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTML5-脚本编程-第16章&quot;&gt;&lt;a href=&quot;#HTML5-脚本编程-第16章&quot; class=&quot;headerlink&quot; title=&quot;HTML5 脚本编程 (第16章)&quot;&gt;&lt;/a&gt;HTML5 脚本编程 (第16章)&lt;/h1&gt;&lt;h2 id=&quot;原生拖放&quot;&gt;&lt;a 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正反馈系列:《JavaScript高级程序设计》表单脚本</title>
    <link href="http://yoursite.com/2017/12/30/%E9%AB%98%E7%A8%8Bvol9-%E8%A1%A8%E5%8D%95%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2017/12/30/高程vol9-表单脚本/</id>
    <published>2017-12-30T02:43:01.000Z</published>
    <updated>2017-12-30T02:43:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="表单的基础知识"><a href="#表单的基础知识" class="headerlink" title="表单的基础知识"></a>表单的基础知识</h2><p>在HTML中，表单是由<code>&lt;form&gt;</code>元素来表示的，而在JavaScript中，表单对应的则是<code>HTMLFormElement</code>类型。<code>HTMLFormElement</code>继承了<code>HTMLElement</code>，因而与其他HTML元素具有相同的默认属性。不过，<code>HTMLFormElement</code>也有它自己下列独有的属性和方法。</p><ul><li><code>acceptCharset</code>：服务器能够处理的字符集；等价于HTML中的<code>accept-charset</code>特性。</li><li><code>action</code>：接受请求的URL；等价于HTML中的<code>action</code>特性。</li><li><code>elements</code>：表单中所有控件的集合（<code>HTMLCollection</code>）。</li><li><code>enctype</code>：请求的编码类型；等价于HTML中的<code>enctype</code>特性。</li><li><code>length</code>：表单中控件的数量。</li><li><code>method</code>：要发送的HTTP请求类型，通常是”get”或”post”；等价于HTML的<code>method</code>特性。</li><li><code>name</code>：表单的名称；等价于HTML的<code>name</code>特性。</li><li><code>reset()</code>：将所有表单域重置为默认值。</li><li><code>submit()</code>：提交表单。</li><li><code>target</code>：用于发送请求和接收响应的窗口名称；等价于HTML的<code>target</code>特性。</li></ul><blockquote><p>取得<code>&lt;form&gt;</code>元素引用的方式有好几种。其中最常见的方式就是将它看成与其他元素一样，并为其添加<code>id</code>特性，然后再像下面这样使用<code>getElementById()</code>方法找到它。其次，通过<code>document.forms</code>可以取得页面中所有的表单。在这个集合中，可以通过<code>数值索引</code>或<code>name</code>值来取得特定的表单</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过id得到form对象</span></span><br><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"form1"</span>);</span><br><span class="line"><span class="comment">//取得页面中的第一个表单 </span></span><br><span class="line"><span class="keyword">var</span> firstForm = <span class="built_in">document</span>.forms[<span class="number">0</span>]; </span><br><span class="line"><span class="comment">//取得页面中名称为"form2"的表单</span></span><br><span class="line"><span class="keyword">var</span> myForm = <span class="built_in">document</span>.forms[<span class="string">"form2"</span>];</span><br></pre></td></tr></table></figure><blockquote><p>另外，在较早的浏览器或者那些支持向后兼容的浏览器中，也会把每个设置了<code>name</code>特性的表单作为属性保存在<code>document</code>对象中。例如，通过<code>document.form2</code>可以访问到名为<code>form2</code>的表单。不过，我们不推荐使用这种方式：一是容易出错，二是将来的浏览器可能会不支持。<br>可以同时为表单指定id和name属性，但它们的值不一定相同。</p></blockquote><h3 id="提交表单"><a href="#提交表单" class="headerlink" title="提交表单"></a>提交表单</h3><p>只要我们单击以下代码生成的按钮，就可以提交表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通用提交按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit Form"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 自定义提交按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Submit Form<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 图像按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"image"</span> <span class="attr">src</span>=<span class="string">"graphic.gif"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只要表单中存在上面列出的任何一种按钮，按回车键就可以提交该表单。（<code>textarea</code>是一个例外，在文本区中回车会换行。）</p><p>以这种方式提交表单时，浏览器会在将请求发送给服务器之前触发<code>submit</code>事件(必须有上述按钮才能触发<code>submit</code>事件,js方法触发<code>form.submit()</code>也可以提交,但并没有触发<code>submit</code>事件,要区别)。这样，我们就有机会验证表单数据，并据以决定是否允许表单提交。阻止这个事件的默认行为就可以取消表单提交。例如，下列代码会阻止表单提交。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"myForm"</span>);</span><br><span class="line">EventUtil.addHandler(form, <span class="string">"submit"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//取得事件对象 </span></span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//阻止默认事件 </span></span><br><span class="line">  EventUtil.preventDefault(event);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以编程方式调用<code>form.submit()</code>方法也可以提交表单。而且，这种方式无需表单包含提交按钮，任何时候都可以正常提交表单。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"myForm"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//提交表单</span></span><br><span class="line">form.submit();</span><br></pre></td></tr></table></figure><blockquote><p>在以调用 <code>form.submit()</code>方法的形式提交表单时，不会触发 <code>submit</code> 事件，因此要记得在调用此方法之前先验证表单数据。</p><p>提交表单时可能出现的最大问题，就是重复提交表单。解决这一问题的办法有两个：在第一次提交表单后就禁用提交按钮，或者利用<code>onsubmit</code>事件处理程序取消后续的表单提交操作。</p></blockquote><h3 id="重置表单"><a href="#重置表单" class="headerlink" title="重置表单"></a>重置表单</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通用重置按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"Reset Form"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 自定义重置按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"reset"</span>&gt;</span>Reset Form<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"myForm"</span>);</span><br><span class="line">EventUtil.addHandler(form, <span class="string">"reset"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//取得事件对象 </span></span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//阻止表单重置 </span></span><br><span class="line">  EventUtil.preventDefault(event);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>与提交表单一样，也可以通过JavaScript来重置表单</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"myForm"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//重置表单 </span></span><br><span class="line">form.reset();</span><br></pre></td></tr></table></figure><blockquote><p>与调用<code>form.submit()</code>方法不同，调用<code>form.reset()</code>方法会像单击重置按钮一样触发<code>reset</code>事件。</p></blockquote><h3 id="表单字段"><a href="#表单字段" class="headerlink" title="表单字段"></a>表单字段</h3><p>每个表单都有<code>form.elements</code>属性，该属性是表单中所有表单元素（字段）的集合。这个<code>form.elements</code>集合是一个有序列表，其中包含着表单中的所有字段，</p><p>每个表单字段在<code>form.elements</code>集合中的顺序，与它们出现在标记中的顺序相同，可以按照位置和<code>name</code>特性来访问它们。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"form1"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取得表单中的第一个字段 </span></span><br><span class="line"><span class="keyword">var</span> field1 = form.elements[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//取得名为"textbox1"的字段 </span></span><br><span class="line"><span class="keyword">var</span> field2 = form.elements[<span class="string">"textbox1"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//取得表单中包含的字段的数量 </span></span><br><span class="line"><span class="keyword">var</span> fieldCount = form.elements.length;</span><br></pre></td></tr></table></figure><blockquote><p>如果有多个表单控件都在使用一个<code>name</code>（如单选按钮），那么就会返回以该<code>name</code>命名的一个<code>NodeList</code>。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">id</span>=<span class="string">"myForm"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">value</span>=<span class="string">"red"</span>&gt;</span>Red<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">value</span>=<span class="string">"green"</span>&gt;</span>Green<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">value</span>=<span class="string">"blue"</span>&gt;</span>Blue<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在这个HTML表单中，有3个单选按钮，它们的<code>name</code>都是”color”，意味着这3个字段是一起的。在访问<code>elements[&quot;color&quot;]</code>时，就会返回一个<code>NodeList</code>，其中包含这3个元素；不过，如果访问<code>elements[0]</code>，则只会返回第一个元素</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"myForm"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> colorFields = form.elements[<span class="string">"color"</span>];</span><br><span class="line">alert(colorFields.length); <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> firstColorField = colorFields[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> firstFormField = form.elements[<span class="number">0</span>];</span><br><span class="line">alert(firstColorField === firstFormField);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><blockquote><p>也可以通过访问表单的属性来访问元素，例如<code>form[0]</code>可以取得第一个表单字段，而<code>form[&quot;color&quot;]</code>则可以取得第一个命名字段。这些属性与通过<code>form.elements</code>集合访问到的元素是相同的。但是，我们应该尽可能使用<code>form.elements</code>，通过表单属性访问元素只是为了与旧浏览器向后兼容而保留的一种过渡方式。</p></blockquote><h4 id="共有的表单字段属性"><a href="#共有的表单字段属性" class="headerlink" title="共有的表单字段属性"></a>共有的表单字段属性</h4><p>除了<code>&lt;fieldset&gt;</code>元素之外，所有表单字段都拥有相同的一组属性。由于<code>&lt;input&gt;</code>类型可以表示多种表单字段，因此有些属性只适用于某些字段，但还有一些属性是所有字段所共有的。表单字段共有的属性如下:</p><ul><li><code>disabled</code>：布尔值，表示当前字段是否被禁用。</li><li><code>form</code>：指向当前字段所属表单的指针；只读。</li><li><code>name</code>：当前字段的名称。</li><li><code>readOnly</code>：布尔值，表示当前字段是否只读。</li><li><code>tabIndex</code>：表示当前字段的切换（tab）序号。</li><li><code>type</code>：当前字段的类型，如”checkbox”、”radio”，等等。</li><li><code>value</code>：当前字段将被提交给服务器的值。对文件字段来说，这个属性是只读的，包含着文件在计算机中的路径。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"myForm"</span>);</span><br><span class="line"><span class="keyword">var</span> field = form.elements[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改 value 属性 </span></span><br><span class="line">field.value = <span class="string">"Another value"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查 form 属性的值 </span></span><br><span class="line">alert(field.form === form); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//把焦点设置到当前字段 </span></span><br><span class="line">field.focus();</span><br><span class="line"></span><br><span class="line"><span class="comment">//禁用当前字段 </span></span><br><span class="line">field.disabled = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改 type 属性（不推荐，但对&lt;input&gt;来说是可行的） </span></span><br><span class="line">field.type = <span class="string">"checkbox"</span>;</span><br></pre></td></tr></table></figure><p>能够动态修改表单字段属性，意味着我们可以在任何时候，以任何方式来动态操作表单。重复单击表单的提交按钮, 最常见的解决方案，就是在第一次单击后就禁用提交按钮。只要侦听<code>submit</code>事件，并在该事件发生时禁用提交按钮即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//避免多次提交表单 </span></span><br><span class="line">EventUtil.addHandler(form, <span class="string">"submit"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//取得提交按钮 </span></span><br><span class="line">  <span class="keyword">var</span> btn = target.elements[<span class="string">"submit-btn"</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">//禁用它 </span></span><br><span class="line">  btn.disabled = <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>以上代码为表单的submit事件添加了一个事件处理程序。事件触发后，代码取得了提交按钮并将其disabled属性设置为true。注意，不能通过onclick事件处理程序来实现这个功能. 因为有的浏览器会在触发表单的submit事件之前触发click事件，而有的浏览器则相反。</p><p>因此，最好是通过submit事件来禁用提交按钮。不过，这种方式不适合表单中不包含提交按钮的情况；如前所述，只有在包含提交按钮的情况下，才有可能触发表单的submit事件。</p></blockquote><p>除了<code>&lt;fieldset&gt;</code>之外，所有表单字段都有<code>element.type</code>属性。对于<code>&lt;input&gt;</code>元素，这个值等于HTML特性<code>type</code>的值。对于其他元素，这个<code>type</code>属性的值如下表所列。</p><p><img src="https://i.loli.net/2017/12/30/5a46fd0916ad1.jpg" alt=""></p><blockquote><p><code>&lt;input&gt;</code>和<code>&lt;button&gt;</code>元素的<code>type</code>属性是可以动态修改的，而<code>&lt;select&gt;</code>元素的type属性则是只读的。</p></blockquote><h4 id="共有的表单字段方法"><a href="#共有的表单字段方法" class="headerlink" title="共有的表单字段方法"></a>共有的表单字段方法</h4><p>每个表单字段都有两个方法：<code>element.focus()</code>和<code>element.blur()</code></p><p>使用<code>element.focus()</code>方法，可以将用户的注意力吸引到页面中的某个部位。例如，在页面加载完毕后，将焦点转移到表单中的第一个字段。为此，可以侦听页面的load事件，并在该事件发生时在表单的第一个字段上调用<code>element.focus()</code>方法.</p><blockquote><p>要注意的是，如果第一个表单字段是一个<code>&lt;input&gt;</code>元素，且其type特性的值为”hidden”，那么以上代码会导致错误。另外，如果使用CSS的display和visibility属性隐藏了该字段，同样也会导致错误。</p></blockquote><p>HTML5为表单字段新增了一个<code>autofocus</code>属性。在支持这个属性的浏览器中，只要设置这个属性，不用JavaScript就能自动把焦点移动到相应字段。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">autofocus</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为了保证前面的代码在设置autofocus的浏览器中正常运行，必须先检测是否设置了该属性，如果设置了，就不用再调用focus()了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> element = <span class="built_in">document</span>.forms[<span class="number">0</span>].elements[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> (element.autofocus !== <span class="literal">true</span>) &#123;</span><br><span class="line">    element.focus();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"JS focus"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>因为<code>autofocus</code>是一个布尔值属性，所以在支持的浏览器中它的值应该是true。（在不支持的浏览器中，它的值将是空字符串。<br>在默认情况下，只有表单字段可以获得焦点。对于其他元素而言，如果先将其<code>element.tabIndex</code>属性设置为-1，然后再调用focus()方法，也可以让这些元素获得焦点。</p></blockquote><h4 id="共有的表单字段事件"><a href="#共有的表单字段事件" class="headerlink" title="共有的表单字段事件"></a>共有的表单字段事件</h4><p>除了支持鼠标、键盘、更改和HTML事件之外，所有表单字段都支持下列3个事件。</p><ul><li><code>blur</code>：当前字段失去焦点时触发。</li><li><code>change</code>：对于<code>&lt;input&gt;</code>和<code>&lt;textarea&gt;</code>元素，在它们失去焦点且<code>value</code>值改变时触发；对于<code>&lt;select&gt;</code>元素，在其选项改变时触发。</li><li><code>focus</code>：当前字段获得焦点时触发。</li></ul><p><code>change</code>事件在不同表单控件中触发的次数会有所不同。对于<code>&lt;input&gt;</code>和<code>&lt;textarea&gt;</code>元素，当它们从获得焦点到失去焦点且<code>value</code>值改变时，才会触发<code>change</code>事件。对于<code>&lt;select&gt;</code>元素，只要用户选择了不同的选项，就会触发change事件；换句话说，<strong>不失去焦点也会触发<code>change</code>事件</strong>。</p><p>可以使用<code>focus</code>和<code>blur</code>事件来以某种方式改变用户界面，要么是向用户给出视觉提示，要么是向界面中添加额外的功能（例如，为文本框显示一个下拉选项菜单）。为确保无论文本框的值如何变化，验证规则始终如一，<code>onblur</code>和<code>onchange</code>事件处理程序中使用了相同的正则表达式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> textbox = <span class="built_in">document</span>.forms[<span class="number">0</span>].elements[<span class="number">0</span>];</span><br><span class="line">EventUtil.addHandler(textbox, <span class="string">"focus"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line">  <span class="keyword">if</span> (target.style.backgroundColor != <span class="string">"red"</span>) &#123;</span><br><span class="line">    target.style.backgroundColor = <span class="string">"yellow"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">EventUtil.addHandler(textbox, <span class="string">"blur"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/[^\d]/</span>.test(target.value)) &#123;</span><br><span class="line">    target.style.backgroundColor = <span class="string">"red"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    target.style.backgroundColor = <span class="string">""</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">EventUtil.addHandler(textbox, <span class="string">"change"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/[^\d]/</span>.test(target.value)) &#123;</span><br><span class="line">    target.style.backgroundColor = <span class="string">"red"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    target.style.backgroundColor = <span class="string">""</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="文本框脚本-input-textarea"><a href="#文本框脚本-input-textarea" class="headerlink" title="文本框脚本 input,textarea"></a>文本框脚本 input,textarea</h2><p>两种方式来表现文本框：<code>&lt;input&gt;</code>，<code>&lt;textarea&gt;</code></p><p>必须将<code>&lt;input&gt;</code>元素的type特性设置为”text”。而通过设置<code>size</code>特性，可以指定文本框中能够显示的字符数。通过<code>value</code>特性，可以设置文本框的初始值，而<code>maxlength</code>特性则用于指定文本框可以接受的最大字符数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">size</span>=<span class="string">"25"</span> <span class="attr">maxlength</span>=<span class="string">"50"</span> <span class="attr">value</span>=<span class="string">"initial value"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;textarea&gt;</code>要指定大小，可以使用<code>rows</code>和<code>cols</code>特性。其中，<code>rows</code>特性指定的是文本框的字符行数，而<code>cols</code>特性指定的是文本框的字符列数,与<code>&lt;input&gt;</code>元素不同，<code>&lt;textarea&gt;</code>的初始值必须要放在<code>&lt;textarea&gt;</code>和<code>&lt;/textarea&gt;</code>之间，如下面的例子所示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">"25"</span> <span class="attr">cols</span>=<span class="string">"5"</span>&gt;</span>initial value<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><p>无论这两种文本框在标记中有什么区别，但它们都会将用户输入的内容保存在<code>value</code>属性中。可以通过这个属性读取和设置文本框的值，如下面的例子所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> textbox = <span class="built_in">document</span>.forms[<span class="number">0</span>].elements[<span class="string">"textbox1"</span>];</span><br><span class="line">alert(textbox.value);</span><br><span class="line">textbox.value = <span class="string">"Some new value"</span>;</span><br></pre></td></tr></table></figure><p>建议像上面这样使用 <code>value</code> 属性读取或设置文本框的值，不要使用 <code>element.setAttribute()</code>设置<code>&lt;input&gt;</code>元素的 <code>value</code> 特性，也不要去修改<code>&lt;textarea&gt;</code> 元素的文本节点。原因很简单：对 <code>value</code> 属性所作的修改，不一定会反映在 <code>DOM</code> 中</p><h3 id="选择脚本"><a href="#选择脚本" class="headerlink" title="选择脚本"></a>选择脚本</h3><p>两种文本框都支持<code>element.select()</code>方法，这个方法用于选择文本框中的所有文本。在调用select()方法时，大多数浏览器（Opera除外）都会将焦点设置到文本框中。</p><p>在文本框获得焦点时选择其所有文本，这是一种非常常见的做法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(textbox, <span class="string">"focus"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line">  target.select();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="select事件"><a href="#select事件" class="headerlink" title="select事件"></a>select事件</h4><p>与<code>element.select()</code>方法对应的，是一个<code>select</code>事件。在选择了文本框中的文本时，就会触发<code>select</code>事件。在调用<code>element.select()</code>方法时也会触发<code>select</code>事件。</p><h4 id="取得选择的文本"><a href="#取得选择的文本" class="headerlink" title="取得选择的文本"></a>取得选择的文本</h4><p>HTML5添加两个属性：<code>element.selectionStart</code>和<code>element.selectionEnd</code>。这两个属性中保存的是基于0的数值，表示所选择文本的范围（即文本选区开头和结尾的偏移量）</p><p>IE8及更早的版本中有一个<code>document.selection</code>对象，其中保存着用户在整个文档范围内选择的文本信息；无法确定用户选择的是页面中哪个部位的文本。不过，在与<code>select</code>事件一起使用的时候，可以假定是用户选择了文本框中的文本，因为触发了<code>select</code>事件。</p><p>要取得选择的文本，首先必须创建一个范围<code>range</code>，然后再将文本从其中提取出来，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSelectedText</span>(<span class="params">textbox</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> textbox.selectionStart == <span class="string">"number"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> textbox.value.substring(textbox.selectionStart, textbox.selectionEnd);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.selection) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.selection.createRange().text;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="选择部分文本"><a href="#选择部分文本" class="headerlink" title="选择部分文本"></a>选择部分文本</h4><p>所有文本框都有一个<code>element.setSelectionRange(start,end)</code>方法。</p><p>要看到选择的文本，必须在调用<code>element.setSelectionRange()</code>之前或之后立即将焦点设置到文本框。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">textbox.value = <span class="string">"Hello world!"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//选择所有文本 </span></span><br><span class="line">textbox.setSelectionRange(<span class="number">0</span>, textbox.value.length); <span class="comment">//"Hello world"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//选择前 3 个字符 </span></span><br><span class="line">textbox.setSelectionRange(<span class="number">0</span>, <span class="number">3</span>); <span class="comment">//"Hel"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//选择第 4 到第 6 个字符 </span></span><br><span class="line">textbox.setSelectionRange(<span class="number">4</span>, <span class="number">7</span>); <span class="comment">//"o w"</span></span><br></pre></td></tr></table></figure><p>关于IE8如何选择部分文本的js程序由于涉及IE8及之前版本的<code>range</code>内容,固不在重点范围,详情先查阅高程范围部分p340, 再查阅此部分p422</p><h3 id="过滤输入"><a href="#过滤输入" class="headerlink" title="过滤输入"></a>过滤输入</h3><h4 id="屏蔽字符"><a href="#屏蔽字符" class="headerlink" title="屏蔽字符"></a>屏蔽字符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(textbox, <span class="string">"keypress"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  EventUtil.preventDefault(event);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行以上代码后，由于所有按键操作都将被屏蔽，结果会导致文本框变成只读的。如果只想屏蔽特定的字符，则需要检测<code>keypress</code>事件对应的字符编码，然后再决定如何响应。例如，需求是只允许用户输入数值。</p><blockquote><p>理论上只应该在用户按下字符键时才触发keypress事件，但有些浏览器也会对其他键触发此事件。这意味着，仅考虑到屏蔽不是数值的字符还不够，还要避免屏蔽这些极为常用和必要的键。所幸的是，要检测这些键并不困难。在Firefox中，所有由非字符键触发的keypress事件对应的字符编码为0，而在Safari3以前的版本中，对应的字符编码全部为8。为了让代码更通用，只要不屏蔽那些字符编码小于10的键即可。</p><p>还有一个问题需要处理：复制、粘贴及其他操作还要用到<code>Ctrl</code>键。在除IE之外的所有浏览器中，前面的代码也会屏蔽<code>Ctrl+C</code>、<code>Ctrl+V</code>，以及其他使用<code>Ctrl</code>的组合键。因此，最后还要添加一个检测条件，以确保用户没有按下<code>Ctrl</code>键，如下面的例子所示。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(textbox, <span class="string">"keypress"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line">  <span class="keyword">var</span> charCode = EventUtil.getCharCode(event);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="regexp">/\d/</span>.test(<span class="built_in">String</span>.fromCharCode(charCode)) &amp;&amp; charCode &gt; <span class="number">9</span> &amp;&amp; !event.ctrlKey) &#123;</span><br><span class="line">    EventUtil.preventDefault(event);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>在这个例子的基础上加以修改和调整，就可以将同样的技术运用于放过和屏蔽任何输入文本框的字符。</p></blockquote><h4 id="操作剪贴板"><a href="#操作剪贴板" class="headerlink" title="操作剪贴板"></a>操作剪贴板</h4><p>HTML5把剪贴板事件纳入了规范。下列就是6个剪贴板事件。</p><ul><li><code>beforecopy</code>：在发生复制操作前触发。</li><li><code>copy</code>：在发生复制操作时触发。</li><li><code>beforecut</code>：在发生剪切操作前触发。</li><li><code>cut</code>：在发生剪切操作时触发。</li><li><code>beforepaste</code>：在发生粘贴操作前触发。</li><li><code>paste</code>：在发生粘贴操作时触发。</li></ul><blockquote><p>。在Safari、Chrome和Firefox中，beforecopy、beforecut和beforepaste事件只会在显示针对文本框的上下文菜单（预期将发生剪贴板事件）的情况下触发。但是，IE则会在触发copy、cut和paste事件之前先行触发这些事件。至于copy、cut和paste事件，只要是在上下文菜单中选择了相应选项，或者使用了相应的键盘组合键，所有浏览器都会触发它们。</p></blockquote><p>要访问剪贴板中的数据，可以使用<code>clipboardData</code>对象, 为了确保跨浏览器兼容性，最好只在发生剪贴板事件期间使用这个对象。</p><blockquote><p>在 IE 中，<code>clipboardData</code>对象是 <code>window</code> 对象的属性；而在 Firefox 4+、Safari 和 Chrome 中，这个对象是相应 event 对象的属性。</p></blockquote><p>这个<code>clipboardData</code>对象有三个方法：<code>clipboardData.getData(string)</code>、<code>clipboardData.setData(string,content)</code>和<code>clipboardData.clearData()</code>。<br><code>clipboardData.getData(string)</code>用于从剪贴板中取得数据，它接受一个参数<code>string</code>，即要取得的数据的格式。在IE中，有两种数据格式：<code>text</code>和<code>URL</code>。在Firefox、Safari和Chrome中，这个参数是一种<code>MIME类型</code>；不过，可以用<code>text</code>代表<code>text/plain</code>。</p><p><code>clipboardData.setData(string,content) return boolean</code>方法,第一个参数也是数据类型，第二个参数是要放在剪贴板中的文本。对于第一个参数，IE照样支持<code>text</code>和<code>URL</code>，而Safari和Chrome仍然只支持<code>MIME类型</code>。但是，与<code>clipboardData.getData()</code>方法不同的是，Safari和Chrome的<code>clipboardData.setData()</code>方法不能识别<code>text</code>类型。这两个浏览器在成功将文本放到剪贴板中后，都会返回true；否则，返回false。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = &#123;</span><br><span class="line">  <span class="comment">//省略的代码</span></span><br><span class="line">  getClipboardText: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> clipboardData = (event.clipboardData || <span class="built_in">window</span>.clipboardData);</span><br><span class="line">    <span class="keyword">return</span> clipboardData.getData(<span class="string">"text"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  setClipboardText: <span class="function"><span class="keyword">function</span> (<span class="params">event, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.clipboardData) &#123;</span><br><span class="line">      <span class="keyword">return</span> event.clipboardData.setData(<span class="string">"text/plain"</span>, value);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.clipboardData) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">window</span>.clipboardData.setData(<span class="string">"text"</span>, value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//省略的代码</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在需要确保粘贴到文本框中的文本中包含某些字符，或者符合某种格式要求时，能够访问剪贴板是非常有用的。例如，如果一个文本框只接受数值，那么就必须检测粘贴过来的值，以确保有效。在<code>paste</code>事件中，可以确定剪贴板中的值是否有效，如果无效，取消默认的行为。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(textbox, <span class="string">"paste"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  <span class="keyword">var</span> text = EventUtil.getClipboardText(event);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="regexp">/^\d*$/</span>.test(text)) &#123;</span><br><span class="line">    EventUtil.preventDefault(event);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="自动切换焦点"><a href="#自动切换焦点" class="headerlink" title="自动切换焦点"></a>自动切换焦点</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"tel1"</span> <span class="attr">id</span>=<span class="string">"txtTel1"</span> <span class="attr">maxlength</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"tel2"</span> <span class="attr">id</span>=<span class="string">"txtTel2"</span> <span class="attr">maxlength</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"tel3"</span> <span class="attr">id</span>=<span class="string">"txtTel3"</span> <span class="attr">maxlength</span>=<span class="string">"4"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">tabForward</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event = EventUtil.getEvent(event);</span><br><span class="line">    <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (target.value.length == target.maxLength) &#123;</span><br><span class="line">      <span class="keyword">var</span> form = target.form;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = form.elements.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (form.elements[i] == target) &#123;</span><br><span class="line">          <span class="keyword">if</span> (form.elements[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            form.elements[i + <span class="number">1</span>].focus();</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> textbox1 = <span class="built_in">document</span>.getElementById(<span class="string">"txtTel1"</span>);</span><br><span class="line">  <span class="keyword">var</span> textbox2 = <span class="built_in">document</span>.getElementById(<span class="string">"txtTel2"</span>);</span><br><span class="line">  <span class="keyword">var</span> textbox3 = <span class="built_in">document</span>.getElementById(<span class="string">"txtTel3"</span>);</span><br><span class="line"></span><br><span class="line">  EventUtil.addHandler(textbox1, <span class="string">"keyup"</span>, tabForward);</span><br><span class="line">  EventUtil.addHandler(textbox2, <span class="string">"keyup"</span>, tabForward);</span><br><span class="line">  EventUtil.addHandler(textbox3, <span class="string">"keyup"</span>, tabForward);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="HTML5约束验证API"><a href="#HTML5约束验证API" class="headerlink" title="HTML5约束验证API"></a>HTML5约束验证API</h3><blockquote><p>为了在将表单提交到服务器之前验证数据，HTML5新增了一些功能。有了这些功能，即便JavaScript被禁用或者由于种种原因未能加载，也可以确保基本的验证。换句话说，浏览器自己会根据标记中的规则执行验证，然后自己显示适当的错误消息（完全不用JavaScript插手）。当然，这个功能只有在支持HTML5这部分内容的浏览器中才有效(IE不支持)</p></blockquote><h4 id="required"><a href="#required" class="headerlink" title="required"></a>required</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">required</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>通过对应的<code>element.required</code>属性，可以检查某个表单字段是否为必填字段。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isUsernameRequired = <span class="built_in">document</span>.forms[<span class="number">0</span>].elements[<span class="string">"username"</span>].required;</span><br></pre></td></tr></table></figure><blockquote><p>使用下面这行代码可以测试浏览器是否支持 required 属性。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isRequiredSupported = <span class="string">"required"</span> <span class="keyword">in</span> <span class="built_in">document</span>.createElement(<span class="string">"input"</span>);</span><br></pre></td></tr></table></figure><h4 id="其他输入类型"><a href="#其他输入类型" class="headerlink" title="其他输入类型"></a>其他输入类型</h4><p>HTML5为<code>&lt;input&gt;</code>元素的<code>type</code>属性又增加了几个值。这些新的类型不仅能反映数据类型的信息，而且还能提供一些默认的验证功能。<code>email</code>和<code>url</code>是两个得到支持最多的类型，各浏览器也都为它们增加了定制的验证机制。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span> =<span class="string">"email"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"url"</span> <span class="attr">name</span>=<span class="string">"homepage"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要检测浏览器是否支持这些新类型，可以在JavaScript创建一个<code>&lt;input&gt;</code>元素，然后将<code>type</code>属性设置为<code>email</code>或<code>url</code>，最后再检测这个属性的值。不支持它们的旧版本浏览器会自动将未知的值设置为”text”，而支持的浏览器则会返回正确的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> input = <span class="built_in">document</span>.createElement(<span class="string">"input"</span>);</span><br><span class="line">input.type = <span class="string">"email"</span>;</span><br><span class="line"><span class="keyword">var</span> isEmailSupported = (input.type == <span class="string">"email"</span>);</span><br></pre></td></tr></table></figure><h4 id="数值范围"><a href="#数值范围" class="headerlink" title="数值范围"></a>数值范围</h4><p>HTML5还给<code>&lt;input&gt;</code>标签的<code>type</code>还有几种取值: <code>number</code>、<code>range</code>、<code>datetime</code>、<code>datetime-local</code>、<code>date</code>、<code>month</code>、<code>week</code>，还有<code>time</code>。</p><blockquote><p>对所有这些数值类型的输入元素，可以指定<code>min</code>属性（最小的可能值）、<code>max</code>属性（最大的可能值）和<code>step</code>属性（从<code>min</code>到<code>max</code>的两个刻度间的差值）。例如，想让用户只能输入0到100的值，而且这个值必须是5的倍数，可以这样写代码：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">min</span>=<span class="string">"0"</span> <span class="attr">max</span>=<span class="string">"100"</span> <span class="attr">step</span>=<span class="string">"5"</span> <span class="attr">name</span>=<span class="string">"count"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这些属性在JavaScript中都能通过对应的元素访问（或修改）。此外，还有两个方法：<code>element.stepUp()</code>和<code>element.stepDown()</code>，都接收一个可选的参数：要在当前值基础上加上或减去的数值。（默认是加或减1。）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">input.stepUp(); <span class="comment">//加 1 </span></span><br><span class="line">input.stepUp(<span class="number">5</span>); <span class="comment">//加 5 </span></span><br><span class="line">input.stepDown(); <span class="comment">//减 1 </span></span><br><span class="line">input.stepDown(<span class="number">10</span>); <span class="comment">//减 10</span></span><br></pre></td></tr></table></figure><h4 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h4><p>HTML5为文本字段新增了<code>pattern</code>属性。这个属性的值是一个正则表达式，用于匹配文本框中的值。例如，如果只想允许在文本字段中输入数值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">pattern</span>=<span class="string">"\d+"</span> <span class="attr">name</span>=<span class="string">"count"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>模式的开头和末尾不用加^和$符号（假定已经有了）。</p><p>与其他输入类型相似，指定<code>pattern</code>也不能阻止用户输入无效的文本。这个模式应用给值，浏览器来判断值是有效，还是无效。在 JavaScript 中可以通过 <code>element.pattern</code> 属性访问模式。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pattern = <span class="built_in">document</span>.forms[<span class="number">0</span>].elements[<span class="string">"count"</span>].pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测浏览器是否支持pattern属性</span></span><br><span class="line"><span class="keyword">var</span> isPatternSupported = <span class="string">"pattern"</span> <span class="keyword">in</span> <span class="built_in">document</span>.createElement(<span class="string">"input"</span>);</span><br></pre></td></tr></table></figure><h4 id="检测有效性"><a href="#检测有效性" class="headerlink" title="检测有效性"></a>检测有效性</h4><ul><li><code>element(form).checkValidity() return boolean</code>方法可以检测表单中的某个字段是否有效。所有表单字段都有个方法，如果字段的值有效，这个方法返回true，否则返回false。字段的值是否有效的判断依据是本节前面介绍过的那些约束。</li></ul><p>要检测整个表单是否有效，可以在表单自身调用<code>form.checkValidity()</code>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 验证字段</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.forms[<span class="number">0</span>].elements[<span class="number">0</span>].checkValidity()) &#123;</span><br><span class="line">  <span class="comment">//字段有效，继续</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//字段无效 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证表单</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.forms[<span class="number">0</span>].checkValidity()) &#123;</span><br><span class="line">  <span class="comment">//表单有效，继续 </span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//表单无效 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>element.validity</code>属性,是一个对象包含一系列属性，每个属性会返回一个布尔值</p><ul><li><code>customError</code>：如果设置了setCustomValidity()，则为true，否则返回false。</li><li><code>patternMismatch</code>：如果值与指定的pattern属性不匹配，返回true。</li><li><code>rangeOverflow</code>：如果值比max值大，返回true。</li><li><code>rangeUnderflow</code>：如果值比min值小，返回true。</li><li><code>stepMisMatch</code>：如果min和max之间的步长值不合理，返回true。</li><li><code>tooLong</code>：如果值的长度超过了maxlength属性指定的长度，返回true。有的浏览器（如Firefox4）会自动约束字符数量，因此这个值可能永远都返回false。</li><li><code>typeMismatch</code>：如果值不是”mail”或”url”要求的格式，返回true。</li><li><code>valid</code>：如果这里的其他属性都是false，返回true。checkValidity()也要求相同的值。</li><li><code>valueMissing</code>：如果标注为required的字段中没有值，返回true。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (input.validity &amp;&amp; !input.validity.valid) &#123;</span><br><span class="line">  <span class="keyword">if</span> (input.validity.valueMissing) &#123;</span><br><span class="line">    alert(<span class="string">"Please specify a value."</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (input.validity.typeMismatch) &#123;</span><br><span class="line">    alert(<span class="string">"Please enter an email address."</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">"Value is invalid."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="禁用验证"><a href="#禁用验证" class="headerlink" title="禁用验证"></a>禁用验证</h4><ul><li><code>novalidate</code>属性,可以告诉表单不进行验证</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"signup.php"</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--这里插入表单元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在JavaScript中使用noValidate属性可以取得或设置这个值，如果这个属性存在，值为true，如果不存在，值为false。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.forms[<span class="number">0</span>].noValidate = <span class="literal">true</span>; <span class="comment">//禁用验证</span></span><br></pre></td></tr></table></figure><ul><li><code>formnovalidate</code> 属性, 如果一个表单中有多个提交按钮，为了指定点击某个提交按钮不必验证表单，可以在相应的按钮上添加<code>formnovalidate</code>属性</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"foo.php"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--这里插入表单元素--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Regular Submit"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">formnovalidate</span> <span class="attr">name</span>=<span class="string">"btnNoValidate"</span> <span class="attr">value</span>=<span class="string">"Non-validating Submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用 JavaScript 也可以设置这个属性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//禁用验证 </span></span><br><span class="line"><span class="built_in">document</span>.forms[<span class="number">0</span>].elements[<span class="string">"btnNoValidate"</span>].formNoValidate = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h2 id="选择框脚本"><a href="#选择框脚本" class="headerlink" title="选择框脚本"></a>选择框脚本</h2><p>选择框是通过<code>&lt;select&gt;</code>和<code>&lt;option&gt;</code>元素创建的。为了方便与这个控件交互，除了所有表单字段共有的属性和方法外，<code>HTMLSelectElement</code>类型还提供了下列属性和方法。</p><ul><li><code>add(newOption,relOption)</code>：向控件中插入新<code>&lt;option&gt;</code>元素，其位置在相关项（relOption）之前。</li><li><code>multiple</code>：布尔值，表示是否允许多项选择；等价于HTML中的<code>multiple</code>特性。</li><li><code>options</code>：控件中所有<code>&lt;option&gt;</code>元素的HTMLCollection。</li><li><code>remove(index)</code>：移除给定位置的选项。</li><li><code>selectedIndex</code>：基于0的选中项的索引，如果没有选中项，则值为-1。对于支持多选的控件，只保存选中项中第一项的索引。</li><li><code>size</code>：选择框中可见的行数；等价于HTML中的<code>size</code>特性。</li></ul><p>选择框的<code>element.type</code>属性不是”select-one”，就是”select-multiple”，这取决于HTML代码中有没有<code>multiple</code>特性。选择框的<code>element.value</code>属性由当前选中项决定</p><ul><li>如果没有选中的项，则选择框的<code>value</code>属性保存<code>空字符串</code>。</li><li>如果有一个选中项，而且该项的<code>value特性</code>已经在HTML中指定，则选择框的<code>value属性</code>等于选中项的<code>value特性</code>。即使value特性的值是空字符串，也同样遵循此条规则。</li><li>如果有一个选中项，但该项的<code>value特性</code>在HTML中未指定，则选择框的value属性等于该项的文本。</li><li>如果有多个选中项，则选择框的<code>value属性</code>将依据前两条规则取得第一个选中项的值</li></ul><p>每个<code>&lt;option&gt;</code>元素都有一个<code>HTMLOptionElement</code>对象表示。为便于访问数据，<code>HTMLOptionElement</code>对象添加了下列属性：</p><ul><li><code>index</code>：当前选项在options集合中的索引。</li><li><code>label</code>：当前选项的标签；等价于HTML中的label特性。</li><li><code>selected</code>：布尔值，表示当前选项是否被选中。将这个属性设置为true可以选中当前选项。</li><li><code>text</code>：选项的文本。</li><li><code>value</code>：选项的值（等价于HTML中的value特性）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> selectbox = <span class="built_in">document</span>.forms[<span class="number">0</span>].elements[<span class="string">"location"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//推荐 </span></span><br><span class="line"><span class="keyword">var</span> text = selectbox.options[<span class="number">0</span>].text; <span class="comment">//选项的文本</span></span><br><span class="line"><span class="keyword">var</span> value = selectbox.options[<span class="number">0</span>].value;  <span class="comment">//选项的值</span></span><br></pre></td></tr></table></figure><blockquote><p>选择框的<code>change</code>事件与其他表单字段的<code>change</code>事件触发的条件不一样。其他表单字段的<code>change</code>事件是在值被修改且焦点离开当前字段时触发，而选择框的<code>change</code>事件只要选中了选项就会触发。<br>在未指定<code>value</code>特性的情况下，IE8会返回空字符串，而IE9+、Safari、Firefox、Chrome和Opera则会返回与text特性相同的值。</p></blockquote><h3 id="选择选项"><a href="#选择选项" class="headerlink" title="选择选项"></a>选择选项</h3><p>对于只允许选择一项的选择框，访问选中项的最简单方式，就是使用选择框的 <code>element.selectedIndex</code> 属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> selectedOption = selectbox.options[selectbox.selectedIndex];</span><br></pre></td></tr></table></figure><p>另一种选择选项的方式，就是取得对某一项的引用，然后将其<code>element.selected</code>属性设置为true。例如，下面的代码会选中选择框中的第一项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selectbox.options[<span class="number">0</span>].selected=<span class="literal">true</span>;</span><br></pre></td></tr></table></figure><blockquote><p>与<code>element.selectedIndex</code>不同，在允许多选的选择框中设置选项的<code>element.selected</code>属性，不会取消对其他选中项的选择，因而可以动态选中任意多个项。但是，如果是在单选选择框中，修改某个选项的<code>element.selected</code>属性则会取消对其他选项的选择。需要注意的是，将<code>element.selected</code>属性设置为false对单选选择框没有影响。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSelectedOptions</span>(<span class="params">selectbox</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">  <span class="keyword">var</span> option = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = selectbox.options.length; i &lt; len; i++) &#123;</span><br><span class="line">    option = selectbox.options[i];</span><br><span class="line">    <span class="keyword">if</span> (option.selected) &#123;</span><br><span class="line">      result.push(option);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加选项"><a href="#添加选项" class="headerlink" title="添加选项"></a>添加选项</h3><p>可以使用JavaScript动态创建选项，并将它们添加到选择框中。第一种方式就是使用如下所示的DOM方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newOption = <span class="built_in">document</span>.createElement(<span class="string">"option"</span>);</span><br><span class="line">newOption.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">"Option text"</span>));</span><br><span class="line">newOption.setAttribute(<span class="string">"value"</span>, <span class="string">"Option value"</span>);</span><br><span class="line"></span><br><span class="line">selectbox.appendChild(newOption);</span><br></pre></td></tr></table></figure><p>第二种方式是使用<code>Option构造函数</code>来创建新选项，这个构造函数是DOM出现之前就有的，一直遗留到现在。<code>Option构造函数</code>接受两个参数：<code>文本（text）</code>和<code>值（value）</code>；第二个参数可选。虽然这个构造函数会创建一个<code>Object</code>的实例，但兼容DOM的浏览器会返回一个<code>&lt;option&gt;</code>元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newOption = <span class="keyword">new</span> Option(<span class="string">"Option text"</span>, <span class="string">"Option value"</span>);</span><br><span class="line">selectbox.appendChild(newOption); <span class="comment">//在 IE8 及之前版本中有问题</span></span><br></pre></td></tr></table></figure><p>使用选择框的<code>select.add()</code>方法。DOM规定这个方法接受两个参数：要添加的新选项和将位于新选项之后的选项。如果想在列表的最后添加一个选项，应该将第二个参数设置为null。在IE对<code>select.add()</code>方法的实现中，第二个参数是可选的，而且如果指定，该参数必须是新选项之后选项的索引。兼容DOM的浏览器要求必须指定第二个参数，因此要想编写跨浏览器的代码，就不能只传入一个参数。这时候，为第二个参数传入undefined，就可以在所有浏览器中都将新选项插入到列表最后了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newOption = <span class="keyword">new</span> Option(<span class="string">"Option text"</span>, <span class="string">"Option value"</span>);</span><br><span class="line">selectbox.add(newOption, <span class="literal">undefined</span>); <span class="comment">//最佳方案</span></span><br></pre></td></tr></table></figure><blockquote><p> 如果想将新选项添加到其他位置（不是最后一个），就应该使用标准的DOM技术和<code>select.insertBefore()</code>方法。</p></blockquote><h3 id="移除选项"><a href="#移除选项" class="headerlink" title="移除选项"></a>移除选项</h3><p>可以使用 DOM 的 <code>element.removeChild()</code>方法， 为其传入要移除的选项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selectbox.removeChild(selectbox.options[<span class="number">0</span>]); <span class="comment">//移除第一个选项</span></span><br></pre></td></tr></table></figure><p>可以使用选择框的 <code>select.remove(index)</code>方法。这个方法接受一个参数，即要移除选项的索引</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selectbox.remove(<span class="number">0</span>); <span class="comment">//移除第一个选项</span></span><br></pre></td></tr></table></figure><p>最后一种方式，就是将相应选项设置为 null。这种方式也是 DOM 出现之前浏览器的遗留机制。 例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selectbox.options[<span class="number">0</span>] = <span class="literal">null</span>; <span class="comment">//移除第一个选项</span></span><br></pre></td></tr></table></figure><h3 id="移动和重排选项"><a href="#移动和重排选项" class="headerlink" title="移动和重排选项"></a>移动和重排选项</h3><ul><li>移动</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> selectbox1 = <span class="built_in">document</span>.getElementById(<span class="string">"selLocations1"</span>);</span><br><span class="line"><span class="keyword">var</span> selectbox2 = <span class="built_in">document</span>.getElementById(<span class="string">"selLocations2"</span>);</span><br><span class="line"></span><br><span class="line">selectbox2.appendChild(selectbox1.options[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><ul><li>重排</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> optionToMove = selectbox.options[<span class="number">1</span>];</span><br><span class="line">selectbox.insertBefore(optionToMove, selectbox.options[optionToMove.index - <span class="number">1</span>]);</span><br></pre></td></tr></table></figure><h2 id="表单序列化"><a href="#表单序列化" class="headerlink" title="表单序列化"></a>表单序列化</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">serialize</span>(<span class="params">form</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> parts = [],</span><br><span class="line">    field = <span class="literal">null</span>,</span><br><span class="line">    i,</span><br><span class="line">    len,</span><br><span class="line">    j,</span><br><span class="line">    optLen,</span><br><span class="line">    option,</span><br><span class="line">    optValue;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>, len = form.elements.length; i &lt; len; i++) &#123;</span><br><span class="line">    field = form.elements[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (field.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"select-one"</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"select-multiple"</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (field.name.length) &#123;</span><br><span class="line">          <span class="keyword">for</span> (j = <span class="number">0</span>, optLen = field.options.length; j &lt; optLen; j++) &#123;</span><br><span class="line">            option = field.options[j];</span><br><span class="line">            <span class="keyword">if</span> (option.selected) &#123;</span><br><span class="line">              optValue = <span class="string">""</span>;</span><br><span class="line">              <span class="keyword">if</span> (option.hasAttribute) &#123;</span><br><span class="line">                optValue = (option.hasAttribute(<span class="string">"value"</span>) ? option.value : option.text);</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                optValue = (option.attributes[<span class="string">"value"</span>].specified ? option.value : option.text);</span><br><span class="line">              &#125;</span><br><span class="line">              parts.push(<span class="built_in">encodeURIComponent</span>(field.name) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(optValue));</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="literal">undefined</span>: <span class="comment">//fieldset</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"file"</span>: <span class="comment">//file input</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"submit"</span>: <span class="comment">//submit button</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"reset"</span>: <span class="comment">//reset button</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"button"</span>: <span class="comment">//custom button</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"radio"</span>: <span class="comment">//radio button</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"checkbox"</span>: <span class="comment">//checkbox</span></span><br><span class="line">        <span class="keyword">if</span> (!field.checked) &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* falls through */</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">//don't include form fields without names</span></span><br><span class="line">        <span class="keyword">if</span> (field.name.length) &#123;</span><br><span class="line">          parts.push(<span class="built_in">encodeURIComponent</span>(field.name) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(field.value));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> parts.join(<span class="string">"&amp;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面这个serialize()函数首先定义了一个名为parts的数组，用于保存将要创建的字符串的各个部分。然后，通过for循环迭代每个表单字段，并将其保存在field变量中。在获得了一个字段的引用之后，使用switch语句检测其type属性。序列化过程中最麻烦的就是<code>&lt;select&gt;</code>元素，它可能是单选框也可能是多选框。为此，需要遍历控件中的每一个选项，并在相应选项被选中的情况下向数组中添加一个值。对于单选框，只可能有一个选中项，而多选框则可能有零或多个选中项。这里的代码适用于这两种选择框，至于可选项的数量则是由浏览器控制的。在找到一个选中项之后，需要确定使用什么值。如果不存在value特性，或者虽然存在该特性，但值为空字符串，都要使用选项的文本来代替。为检查这个特性，在DOM兼容的浏览器中需要使用hasAttribute()方法，而在IE中需要使用特性的specified属性。<br>如果表单中包含<code>&lt;fieldset&gt;</code>元素，则该元素会出现在元素集合中，但没有type属性。因此，如果type属性未定义，则不需要对其进行序列化。同样，对于各种按钮以及文件输入字段也是如此（文件输入字段在表单提交过程中包含文件的内容；但是，这个字段是无法模仿的，序列化时一般都要忽略）。对于单选按钮和复选框，要检查其checked属性是否被设置为false，如果是则退出switch语句。如果checked属性为true，则继续执行default语句，即将当前字段的名称和值进行编码，然后添加到parts数组中。函数的最后一步，就是使用join()格式化整个字符串，也就是用和号来分隔每一个表单字段。</p></blockquote><h2 id="富文本编辑"><a href="#富文本编辑" class="headerlink" title="富文本编辑"></a>富文本编辑</h2><blockquote><p>就是在页面中嵌入一个包含空HTML页面的<code>iframe</code>。通过设置<code>document.designMode</code>属性，这个空白的HTML页面可以被编辑，而编辑对象则是该页面<code>&lt;body&gt;</code>元素的HTML代码。<code>document.designMode属性</code>有两个可能的值：<code>off</code>（默认值）和<code>on</code>。在设置为<code>on</code>时，整个文档都会变得可以编辑（显示插入符号）</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Blank Page for Rich Text Editing<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//<span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">"richedit"</span> <span class="attr">style</span>=<span class="string">"height:100px;width:100px;"</span> <span class="attr">src</span>=<span class="string">"blank.htm"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line">EventUtil.addHandler(window, "load", function () &#123;</span><br><span class="line">  frames["richedit"].document.designMode = "on";</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="使用element-contenteditable属性"><a href="#使用element-contenteditable属性" class="headerlink" title="使用element.contenteditable属性"></a>使用element.contenteditable属性</h3><blockquote><p>另一种编辑富文本内容的方式是使用名为<code>element.contenteditable</code>的特殊属性，这个属性也是由IE最早实现的。可以把<code>element.contenteditable</code>属性应用给页面中的任何元素，然后用户立即就可以编辑该元素。这种方法之所以受到欢迎,只要为元素设置 <code>element.contenteditable</code> 属性即可。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"editable"</span> <span class="attr">id</span>=<span class="string">"richedit"</span> <span class="attr">contenteditable</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样，元素中包含的任何文本内容就都可以编辑了，就好像这个元素变成了<code>&lt;textarea&gt;</code>元素一样。通过在这个元素上设置<code>element.contenteditable</code>属性，也能打开或关闭编辑模式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"richedit"</span>);</span><br><span class="line">div.contentEditable = <span class="string">"true"</span>;</span><br></pre></td></tr></table></figure><h3 id="document-execCommand-操作富文本"><a href="#document-execCommand-操作富文本" class="headerlink" title="document.execCommand() 操作富文本"></a>document.execCommand() 操作富文本</h3><p><code>document.execCommand()</code>方法, 这个方法可以对文档执行预定义的命令，而且可以应用大多数格式。是与富文本编辑器交互的主要方式. 可以为<code>document.execCommand(command,false,value/null)</code>方法传递3个参数：要执行的命令名称、表示浏览器是否应该为当前命令提供用户界面的一个布尔值, 执行命令必须的一个值（如果不需要值，则传递null）。为了确保跨浏览器的兼容性，第二个参数应该始终设置为false</p><p><img src="https://i.loli.net/2017/12/30/5a46fd0957c78.jpg" alt=""><br><img src="https://i.loli.net/2017/12/30/5a46fd092e3da.jpg" alt=""></p><blockquote><p>与剪贴板有关的命令在不同浏览器中的差异极大, 不过，即使不能通过<code>document.execCommand()</code>来执行这些命令，但却可以通过相应的快捷键来实现同样的操作。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转换粗体文本 </span></span><br><span class="line">frames[<span class="string">"richedit"</span>].document.execCommand(<span class="string">"bold"</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//转换斜体文本 </span></span><br><span class="line">frames[<span class="string">"richedit"</span>].document.execCommand(<span class="string">"italic"</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建指向 www.wrox.com 的链接 </span></span><br><span class="line">frames[<span class="string">"richedit"</span>].document.execCommand(<span class="string">"createlink"</span>, <span class="literal">false</span>, <span class="string">"http://www.wrox.com"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//格式化为 1 级标题 </span></span><br><span class="line">frames[<span class="string">"richedit"</span>].document.execCommand(<span class="string">"formatblock"</span>, <span class="literal">false</span>, <span class="string">"&lt;h1&gt;"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>同样的方法也适用于页面中<code>element.contenteditable</code>属性为”true”的区块，只要把对框架的引用替换成当前窗口的<code>document</code>对象即可。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转换粗体文本 </span></span><br><span class="line"><span class="built_in">document</span>.execCommand(<span class="string">"bold"</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//转换斜体文本 </span></span><br><span class="line"><span class="built_in">document</span>.execCommand(<span class="string">"italic"</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建指向 www.wrox.com 的链接 </span></span><br><span class="line"><span class="built_in">document</span>.execCommand(<span class="string">"createlink"</span>, <span class="literal">false</span>, <span class="string">"http://www.wrox.com"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//格式化为 1 级标题 </span></span><br><span class="line"><span class="built_in">document</span>.execCommand(<span class="string">"formatblock"</span>, <span class="literal">false</span>, <span class="string">"&lt;h1&gt;"</span>);</span><br></pre></td></tr></table></figure><h4 id="document-queryCommandEnabled"><a href="#document-queryCommandEnabled" class="headerlink" title="document.queryCommandEnabled()"></a>document.queryCommandEnabled()</h4><p><code>document.queryCommandEnabled(command) return boolean</code>，可以用它来检测是否可以针对当前选择的文本，或者当前插入字符所在位置执行某个命令。这个方法接收一个参数，即要检测的命令。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = frames[<span class="string">"richedit"</span>].document.queryCommandEnabled(<span class="string">"bold"</span>);</span><br></pre></td></tr></table></figure><h4 id="document-queryCommandState"><a href="#document-queryCommandState" class="headerlink" title="document.queryCommandState()"></a>document.queryCommandState()</h4><p><code>document.queryCommandState(command) return boolean</code>方法用于确定是否已将指定命令应用到了选择的文本。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isBold = frames[<span class="string">"richedit"</span>].document.queryCommandState(<span class="string">"bold"</span>);</span><br></pre></td></tr></table></figure><h4 id="document-queryCommandValue"><a href="#document-queryCommandValue" class="headerlink" title="document.queryCommandValue()"></a>document.queryCommandValue()</h4><p><code>document.queryCommandValue()</code>，用于取得执行命令时传入的值（即前面例子中传给<code>document.execCommand()</code>的第三个参数）。例如，在对一段文本应用”fontsize”命令时如果传入了7，那么下面的代码就会返回”7”：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fontSize = frames[<span class="string">"richedit"</span>].document.queryCommandValue(<span class="string">"fontsize"</span>);</span><br></pre></td></tr></table></figure><h3 id="富文本选区"><a href="#富文本选区" class="headerlink" title="富文本选区"></a>富文本选区</h3><p><code>document/frameElement.getSelection()</code>方法，可以确定实际选择的文本。HTML5 将 <code>getSelection()</code>方法纳入了标准, 这个方法是<code>window</code>对象和<code>document</code>对象的属性，调用它会返回一个表示当前选择文本的<code>Selection</code>对象, <code>Selection</code>对象有如下属性和方法:</p><blockquote><p>属性</p></blockquote><ul><li><code>selection.anchorNode</code>：选区起点所在的节点。</li><li><code>selection.anchorOffset</code>：在到达选区起点位置之前跳过的<code>selection.anchorNode</code>中的字符数量。</li><li><code>selection.focusNode</code>：选区终点所在的节点。</li><li><code>selection.focusOffset</code>：<code>selection.focusNode</code>中包含在选区之内的字符数量。</li><li><code>selection.isCollapsed</code>：布尔值，表示选区的起点和终点是否重合。</li><li><code>selection.rangeCount</code>：选区中包含的DOM范围的数量。</li></ul><blockquote><p>方法</p></blockquote><ul><li><code>selection.addRange(range)</code>：将指定的DOM范围添加到选区中。</li><li><code>selection.collapse(node,offset)</code>：将选区折叠到指定节点中的相应的文本偏移位置。</li><li><code>selection.collapseToEnd()</code>：将选区折叠到终点位置。</li><li><code>selection.collapseToStart()</code>：将选区折叠到起点位置。</li><li><code>selection.containsNode(node)</code>：确定指定的节点是否包含在选区中。</li><li><code>selection.deleteFromDocument()</code>：从文档中删除选区中的文本，与<code>document.execCommand(&quot;delete&quot;,false,null)</code>命令的结果相同。</li><li><code>selection.extend(node,offset)</code>：通过将<code>selection.focusNode</code>和<code>selection.focusOffset</code>移动到指定的值来扩展选区。</li><li><code>selection.getRangeAt(index)</code>：返回索引对应的选区中的DOM范围。</li><li><code>selection.removeAllRanges()</code>：从选区中移除所有DOM范围。实际上，这样会移除选区，因为选区中至少要有一个范围。</li><li><code>selection.reomveRange(range)</code>：从选区中移除指定的DOM范围。</li><li><code>selection.selectAllChildren(node)</code>：清除选区并选择指定节点的所有子节点。</li><li><code>selection.toString()</code>：返回选区所包含的文本内容。</li></ul><p><code>Selection</code>对象的这些方法都极为实用，它们利用了（第12章讨论过的）DOM范围来管理选区。由于可以直接操作选择文本的DOM表现，因此访问DOM范围与使用<code>document.execCommand(command,false,content/null)</code>相比，能够对富文本编辑器进行更加细化的控制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> selection = frames[<span class="string">"richedit"</span>].getSelection();</span><br><span class="line"></span><br><span class="line"><span class="comment">//取得选择的文本 </span></span><br><span class="line"><span class="keyword">var</span> selectedText = selection.toString();</span><br><span class="line"></span><br><span class="line"><span class="comment">//取得代表选区的范围 </span></span><br><span class="line"><span class="keyword">var</span> range = selection.getRangeAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//突出显示选择的文本 </span></span><br><span class="line"><span class="keyword">var</span> span = frames[<span class="string">"richedit"</span>].document.createElement(<span class="string">"span"</span>);</span><br><span class="line">span.style.backgroundColor = <span class="string">"yellow"</span>;</span><br><span class="line">range.surroundContents(span);</span><br></pre></td></tr></table></figure><blockquote><p>IE8 及 更早版本不支持DOM范围, 但可以通过它支持的<code>selection</code>对象操纵选择的文本, 详情先查阅高程p340,IE范围部分, 再查阅P442页关于IE富文本选区部分</p></blockquote><h3 id="表单与富文本"><a href="#表单与富文本" class="headerlink" title="表单与富文本"></a>表单与富文本</h3><p>由于富文本编辑是使用<code>iframe</code>而非表单控件实现的，因此从技术上说，富文本编辑器并不属于表单。换句话说，富文本编辑器中的HTML不会被自动提交给服务器，而需要我们手工来提取并提交HTML。为此，通常可以添加一个隐藏的表单字段，让它的值等于从iframe中提取出的HTML。具体来说，就是在提交表单之前，从iframe中提取出HTML，并将其插入到隐藏的字段中。下面就是通过表单的onsubmit事件处理程序实现上述操作的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(form, <span class="string">"submit"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line"></span><br><span class="line">  target.elements[<span class="string">"comments"</span>].value = frames[<span class="string">"richedit"</span>].document.body.innerHTML;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>对于使用 <code>contenteditable</code> 属性的元素，也可以执行类似操作。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(form, <span class="string">"submit"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line"></span><br><span class="line">  target.elements[<span class="string">"comments"</span>].value = <span class="built_in">document</span>.getElementById(<span class="string">"richedit"</span>).innerHTML;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;表单的基础知识&quot;&gt;&lt;a href=&quot;#表单的基础知识&quot; class=&quot;headerlink&quot; title=&quot;表单的基础知识&quot;&gt;&lt;/a&gt;表单的基础知识&lt;/h2&gt;&lt;p&gt;在HTML中，表单是由&lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;元素来表示的，而在JavaS
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正反馈系列:《JavaScript高级程序设计》事件</title>
    <link href="http://yoursite.com/2017/12/28/%E9%AB%98%E7%A8%8Bvol8-%E4%BA%8B%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/12/28/高程vol8-事件/</id>
    <published>2017-12-28T02:54:04.000Z</published>
    <updated>2017-12-28T03:03:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p>JavaScript 与 HTML 之间的交互是通过<code>事件</code>实现的。<code>事件</code>，就是文档或浏览器窗口中发生的一些特定的交互瞬间。可以使用侦听器（或处理程序）来预订事件，以便事件发生时执行相应的代码。这种在传统软件工程中被称为<code>观察员模式</code>的模型, 关于<code>观察者模式</code>的代码实现,可以看我的另一边blog: <a href="https://choteewang.github.io/2017/12/23/javascript-%E4%B8%8E-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" target="_blank" rel="external">《javascript 与 “发布/订阅(观察者)模式》</a></p><h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2><p>想象画在一张纸上的一组同心圆。如果你把手指放在圆心上，那么你的手指指向的不是一个圆，而是纸上的所有圆。两家公司的浏览器开发团队在看待浏览器事件方面还是一致的。如果你单击了某个按钮，他们都认为单击事件不仅仅发生在按钮上。换句话说，在单击按钮的同时，你也单击了按钮的容器元素，甚至也单击了整个页面</p><blockquote><p><code>事件流</code>描述的上述过程中,从页面接收事件的顺序.<br>IE 的事件流是<code>事件冒泡流</code>，而 Netscape Communicator 的事件流是<code>事件捕获流</code></p></blockquote><h3 id="事件冒泡-event-bubbling"><a href="#事件冒泡-event-bubbling" class="headerlink" title="事件冒泡 event bubbling"></a>事件冒泡 event bubbling</h3><blockquote><p>事件触发顺序从触发对象沿DOM树向外传播,直至<code>document</code>对象,IE9、Firefox、Chrome 和 Safari 则将事件一直冒泡到 <code>window</code> 对象。</p></blockquote><p><img src="https://i.loli.net/2017/12/28/5a445c95c45a1.jpg" alt=""></p><h3 id="事件捕获-event-capturing"><a href="#事件捕获-event-capturing" class="headerlink" title="事件捕获 event capturing"></a>事件捕获 event capturing</h3><blockquote><p>事件触发顺序从<code>window</code>开始触发,沿DOM树逐级往下按顺序触发,触发对象最后触发</p></blockquote><p><img src="https://i.loli.net/2017/12/28/5a445c95ddf87.jpg" alt=""></p><blockquote><p>由于老版本的浏览器不支持，因此很少有人使用事件捕获。<strong>建议使用事件冒泡</strong>，在有特殊需要时再使用事件捕获。</p></blockquote><h3 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h3><p>“DOM2级事件”规定的事件流包括三个阶段：</p><ol><li><code>事件捕获阶段</code></li><li><code>处于目标阶段</code></li><li><code>事件冒泡阶段</code></li></ol><p><img src="https://i.loli.net/2017/12/28/5a445c95e67fe.jpg" alt=""></p><blockquote><p>在DOM事件流中，实际的目标（<code>&lt;div&gt;</code>元素）在捕获阶段不会接收到事件。这意味着在捕获阶段，事件从document到<code>&lt;html&gt;</code>再到<code>&lt;body&gt;</code>后就停止了。下一个阶段是“处于目标”阶段，于是事件在<code>&lt;div&gt;</code>上发生，并在事件处理（后面将会讨论这个概念）中被看成冒泡阶段的一部分。然后，冒泡阶段发生，事件又传播回文档。<br>实际上,当代浏览器在事件捕获阶段都可以触发事件,结果,就有两个机会在目标对象上面操作事件.</p></blockquote><h2 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h2><blockquote><p>事件处理程序的名字以”on”开头，因此 click 事件的事件处理程序就是 onclick</p></blockquote><h3 id="HTML-事件处理程序"><a href="#HTML-事件处理程序" class="headerlink" title="HTML 事件处理程序"></a>HTML 事件处理程序</h3><blockquote><p>在HTML元素中,事件可以用与相应处理程序同名的特性指定, 特性的值应该是<strong>能够执行的javascript代码</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Click Me"</span> <span class="attr">onclick</span>=<span class="string">"alert('Clicked')"</span> /&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>事件处理程序中的代码在执行时，有权访问全局作用域中的任何代码。但前提是代码已被浏览器解析完成</p><p>这样指定时间处理程序,会创建一个封装着元素属性值的函数(this.attr可以访问HTML DOM结构对应的attr特性值)。这个函数中有一个局部变量 event，也就是事件对象,通过 event 变量，可以直接访问事件对象，你不用自己定义它，也不用从函数的参数列表中读取。在这个函数内部，<strong>this 值等于事件的目标元素</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 输出 "click" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Click Me"</span> <span class="attr">onclick</span>=<span class="string">"alert(event.type)"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 输出 "Click Me" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Click Me"</span> <span class="attr">onclick</span>=<span class="string">"alert(this.value)"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这个函数内部，可以像访问局部变量一样访问 <code>document</code> 及<strong>该元素本身的成员</strong>。这个函数使用 <code>with</code> 像下面这样扩展作用域</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">with</span>(<span class="built_in">document</span>) &#123;</span><br><span class="line">    <span class="keyword">with</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">      <span class="comment">//元素属性值 </span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 输出 "Click Me" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Click Me"</span> <span class="attr">onclick</span>=<span class="string">"alert(value)"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果当前元素是一个表单输入元素，则作用域中还会包含访问表单元素（父元素）的入口，事件处理程序无需引用表单元素就能访问其他表单字段,这个函数就变成了如下所示,</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">with</span>(<span class="built_in">document</span>) &#123;</span><br><span class="line">    <span class="keyword">with</span>(<span class="keyword">this</span>.form) &#123;</span><br><span class="line">      <span class="keyword">with</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">//元素属性值 </span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Echo Username"</span> <span class="attr">onclick</span>=<span class="string">"alert(username.value)"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="DOM-0级-事件处理程序"><a href="#DOM-0级-事件处理程序" class="headerlink" title="DOM 0级 事件处理程序"></a>DOM 0级 事件处理程序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.id); <span class="comment">//"myBtn" </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>程序中<code>this</code>引用当前调用元素,可以在事件处理程序中通过 <code>this</code> 访问元素节点的任何属性和方法<br>事件处理程序会在事件流的冒泡阶段被处理。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除事件处理程序</span></span><br><span class="line"><span class="comment">// 也可以删除HTML指定的时间处理程序</span></span><br><span class="line">btn.onclick = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h3 id="DOM-2级-事件处理程序"><a href="#DOM-2级-事件处理程序" class="headerlink" title="DOM 2级 事件处理程序"></a>DOM 2级 事件处理程序</h3><h3 id="element-addEventListener-element-removeEventListener"><a href="#element-addEventListener-element-removeEventListener" class="headerlink" title="element.addEventListener(),element.removeEventListener()"></a>element.addEventListener(),element.removeEventListener()</h3><p><code>element.addEventListener(eventName,function,boolean)</code>,<code>boolean</code>为true,捕获阶段调用,<code>boolean</code>为false,冒泡阶段调用</p><blockquote><p>与 DOM0 级方法一样，这里添加的事件处理程序也是在其依附的元素的作用域中运行。<code>this</code>指向<code>element</code><br>可以添加多个事件处理程序,按顺序执行</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.id);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Hello world!"</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 先alert id,再alert 'Hello world'</span></span><br></pre></td></tr></table></figure><blockquote><p>只能使用 <code>element.removeEventListener()</code>来移除；移除时传入的参数与添加处理程序时使用的参数相同。这也意味着通过 addEventListener()添加的匿名函数将无法移除</p><p>都是将事件处理程序添加到事件流的冒泡阶段，这样可以最大限度地兼容各种浏览器。最好只在需要在事件到达目标之前截获它的时候将事件处理程序添加到捕获阶段。如果不是特别需要，我们不建议在事件捕获阶段注册事件处理程序。</p></blockquote><h3 id="IE事件处理程序"><a href="#IE事件处理程序" class="headerlink" title="IE事件处理程序"></a>IE事件处理程序</h3><h3 id="element-attachEvent-element-detachEvent"><a href="#element-attachEvent-element-detachEvent" class="headerlink" title="element.attachEvent() element.detachEvent()"></a>element.attachEvent() element.detachEvent()</h3><p><code>element.attachEvent(eventName,function)</code>,<code>element.detachEvent(event,function)</code></p><blockquote><p><code>element.attachEvent</code>与<code>element.detachEvent()</code>第一个参数的事件名是<code>onclick</code>,而不是DOM 2级中的<code>click</code><br>事件会在全局作用域中执行,<code>this</code>等于<code>window</code><br>可以添加多个事件处理程序,但执行顺序是倒序<br>用<code>element.attachEvent()</code>添加的事件可用<code>element.detachEvent()</code>移除,也要提供相同的参数才行,匿名函数不能被移除</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.attachEvent(<span class="string">"onclick"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">// true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.attachEvent(<span class="string">"onclick"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Clicked"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">btn.attachEvent(<span class="string">"onclick"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Hello world!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Hello world</span></span><br><span class="line"><span class="comment">// Clicked</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解除事件绑定</span></span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line"><span class="keyword">var</span> handler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Clicked"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">btn.attachEvent(<span class="string">"onclick"</span>, handler);</span><br><span class="line">btn.detachEvent(<span class="string">"onclick"</span>, handler);</span><br></pre></td></tr></table></figure><h3 id="跨浏览器事件处理程序"><a href="#跨浏览器事件处理程序" class="headerlink" title="跨浏览器事件处理程序"></a>跨浏览器事件处理程序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = &#123;</span><br><span class="line">  <span class="comment">// 事件绑定与事件解绑</span></span><br><span class="line">  addHandler: <span class="function"><span class="keyword">function</span> (<span class="params">element, type, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.addEventListener) &#123;</span><br><span class="line">      element.addEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) &#123;</span><br><span class="line"></span><br><span class="line">      element.attachEvent(<span class="string">"on"</span> + type, handler);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      element[<span class="string">"on"</span> + type] = handler;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  removeHandler: <span class="function"><span class="keyword">function</span> (<span class="params">element, type, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.removeEventListener) &#123;</span><br><span class="line">      element.removeEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.detachEvent) &#123;</span><br><span class="line">      element.detachEvent(<span class="string">"on"</span> + type, handler);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      element[<span class="string">"on"</span> + type] = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><blockquote><p>在触发DOM上的某个事件时，会产生一个事件对象<code>event</code>，这个对象中包含着所有与事件有关的信息。包括导致事件的元素、事件的类型以及其他与特定事件相关的信息。例如，鼠标操作导致的事件对象中，会包含鼠标位置的信息，而键盘操作导致的事件对象中，会包含与按下的键有关的信息。所有浏览器都支持event对象</p></blockquote><h3 id="DOM中的事件对象"><a href="#DOM中的事件对象" class="headerlink" title="DOM中的事件对象"></a>DOM中的事件对象</h3><blockquote><p>兼容 DOM 的浏览器会将一个 <code>event</code> 对象传入到事件处理程序中, 无论指定事件处理程序时使用什么方法（HTML特性指定事件处理程序, DOM0 级或 DOM2 级），都会传入 <code>event</code> 对象</p><p>event 对象包含与创建它的特定事件有关的属性和方法。触发的事件类型不一样，可用的属性和方法也不一样。不过，所有事件都会有下表列出的成员。</p></blockquote><table><thead><tr><th>属性/方法</th><th style="text-align:center">类型</th><th style="text-align:center">读/写</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td><code>bubbles</code></td><td style="text-align:center">Boolean</td><td style="text-align:center">只读</td><td style="text-align:center">表明事件是否冒泡</td></tr><tr><td><code>cancelable</code></td><td style="text-align:center">Boolean</td><td style="text-align:center">只读</td><td style="text-align:center">表明是否可以取消事件的默认行为</td></tr><tr><td><code>currentTarget</code></td><td style="text-align:center">Element</td><td style="text-align:center">只读</td><td style="text-align:center">事件处理程序当前正在处理事件的那个元素,与<code>this</code>的值恒等,事件处理函数的调用对象,注册对象</td></tr><tr><td><code>defaultPrevented</code></td><td style="text-align:center">Boolean</td><td style="text-align:center">只读</td><td style="text-align:center">为true表示已调用<code>event.preventDefault()</code></td></tr><tr><td><code>detail</code></td><td style="text-align:center">Integer</td><td style="text-align:center">只读</td><td style="text-align:center">与事件相关的细节信息</td></tr><tr><td><code>eventPhase</code></td><td style="text-align:center">Integer</td><td style="text-align:center">只读</td><td style="text-align:center">调用事件处理程序的阶段,1捕获2目标3冒泡</td></tr><tr><td><code>preventDefault()</code></td><td style="text-align:center">Function</td><td style="text-align:center">只读</td><td style="text-align:center">取消事件的默认行为,如果<code>event.cancelable</code>是true,可以使用此方法</td></tr><tr><td><code>stopImmediatePropagation()</code></td><td style="text-align:center">Function</td><td style="text-align:center">只读</td><td style="text-align:center">取消事件的进一步捕获或冒泡,同时阻止任何事件处理程序被调用</td></tr><tr><td><code>stopPropagation()</code></td><td style="text-align:center">Function</td><td style="text-align:center">只读</td><td style="text-align:center">取消事件的进一步捕获或冒泡,如果<code>event.bubbles</code>为true,可以使用此方法</td></tr><tr><td><code>target</code></td><td style="text-align:center">Element</td><td style="text-align:center">只读</td><td style="text-align:center">事件的目标对象,实际触发目标</td></tr><tr><td><code>trusted</code></td><td style="text-align:center">Boolean</td><td style="text-align:center">只读</td><td style="text-align:center">为true表示是浏览器生成的,为false表示是工程师用js创建的</td></tr><tr><td><code>type</code></td><td style="text-align:center">String</td><td style="text-align:center">只读</td><td style="text-align:center">被触发的事件的类型,没有on的格式</td></tr><tr><td><code>view</code></td><td style="text-align:center">AbstractView</td><td style="text-align:center">只读</td><td style="text-align:center">与事件关联的抽象视图,等同于发生事件的<code>window</code>对象</td></tr></tbody></table><blockquote><p>在事件处理程序内部,<code>this</code>的值始终等于<code>currentTarget</code>的值,也就是注册事件的元素(谁<code>.</code>出的,谁就是<code>this</code>,谁就是<code>currentTarget</code>),而<code>target</code>是事件的<code>实际触发目标</code><br>如果将事件处理程序制定给了目标元素,则<code>this</code>,<code>currentTarget</code>,<code>target</code>包含相同的值,指向同一对象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(event.currentTarget === <span class="keyword">this</span>); <span class="comment">//true </span></span><br><span class="line">  alert(event.target === <span class="keyword">this</span>); <span class="comment">//true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一个例子</span></span><br><span class="line"><span class="built_in">document</span>.body.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(event.currentTarget === <span class="built_in">document</span>.body); <span class="comment">//true </span></span><br><span class="line">  alert(<span class="keyword">this</span> === <span class="built_in">document</span>.body); <span class="comment">//true </span></span><br><span class="line">  alert(event.target === <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>)); <span class="comment">//true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>第二个例子中,当单机<code>id</code>是<code>myBtn</code>的按钮时,<code>this</code>和<code>currentTarget</code>都等于<code>document.body</code>，因为事件处理程序是注册到这个元素上的。然而，<code>target</code>元素却等于按钮元素，因为它是<code>click</code>事件真正的目标。由于按钮上并没有注册事件处理程序，结果click事件就冒泡到了<code>document.body</code>，在那里事件才得到了处理。</p></blockquote><p>在需要通过一个函数处理多个事件时,可以使用<code>event.type</code>属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line"><span class="keyword">var</span> handler = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (event.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"click"</span>:</span><br><span class="line">      alert(<span class="string">"Clicked"</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"mouseover"</span>:</span><br><span class="line">      event.target.style.backgroundColor = <span class="string">"red"</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"mouseout"</span>:</span><br><span class="line">      event.target.style.backgroundColor = <span class="string">""</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">btn.onclick = handler;</span><br><span class="line">btn.onmouseover = handler;</span><br><span class="line">btn.onmouseout = handler;</span><br></pre></td></tr></table></figure><p><code>event.cancelable</code> 属性设置为 true 的事件，可以使用 <code>event.preventDefault()</code>来取消其默认行为。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> link = <span class="built_in">document</span>.getElementById(<span class="string">"myLink"</span>);</span><br><span class="line">link.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event.preventDefault();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>event.stopPropagation()</code>方法用于立即停止事件在DOM层次中的传播，即取消进一步的事件捕获或冒泡。例如，直接添加到一个按钮的事件处理程序可以调用<code>event.stopPropagation()</code>，从而避免触发注册在<code>document.body</code>上面的事件处理程序，如下面的例子所示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Clicked"</span>);</span><br><span class="line">  event.stopPropagation();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Body clicked"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>对于这个例子而言，如果不调用<code>event.stopPropagation()</code>，就会在单击按钮时出现两个警告框。可是，由于click事件根本不会传播到<code>document.body</code>，因此就不会触发注册在这个元素上的onclick事件处理程序。</p></blockquote><p><code>event.eventPhase</code>属性，可以用来确定事件当前正位于事件流的哪个阶段。如果是在捕获阶段调用的事件处理程序，那么<code>event.eventPhase</code>等于1；如果事件处理程序处于目标对象上，则<code>event.eventPhase</code>等于2；如果是在冒泡阶段调用的事件处理程序，<code>event.eventPhase</code>等于3。这里要注意的是，尽管“处于目标”发生在冒泡阶段，但<code>event.eventPhase</code>仍然一直等于2。来看下面的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(event.eventPhase); <span class="comment">//2 </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(event.eventPhase); <span class="comment">//1 </span></span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(event.eventPhase); <span class="comment">//3 </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>当单击这个例子中的按钮时，首先执行的事件处理程序是在捕获阶段触发的添加到<code>document.body</code>中的那一个，结果会弹出一个警告框显示表示<code>event.eventPhase</code>的1。接着，会触发在按钮上注册的事件处理程序，此时的<code>event.eventPhase</code>值为2。最后一个被触发的事件处理程序，是在冒泡阶段执行的添加到<code>document.body</code>上的那一个，显示<code>event.eventPhase</code>的值为3。而当<code>event.eventPhase</code>等于2时，this、target和currentTarget始终都是相等的。<br>有在事件处理程序执行期间，<code>event</code> 对象才会存在；一旦事件处理程序执行完成，<code>event</code> 对象就会被销毁</p></blockquote><h3 id="IE-中的事件对象"><a href="#IE-中的事件对象" class="headerlink" title="IE 中的事件对象"></a>IE 中的事件对象</h3><p>与DOM中的<code>event</code>对象不同,要访问IE中的<code>event</code>对象,有几种不同的方式,取决于事件处理程序的绑定方法</p><p>在使用DOM 0级方法,添加事件处理程序时，<code>event</code> 对象作为 <code>window</code> 对象的一个属性<code>window.event</code>存在</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> event = <span class="built_in">window</span>.event;</span><br><span class="line">  alert(event.type); <span class="comment">//"click" </span></span><br><span class="line">  <span class="comment">// DOM 0级中的this指向调用元素btn,无论IE还是DOM</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果事件处理程序是使用 <code>element.attachEvent()</code>添加的，那么就会有一个 <code>event</code> 对象作为参数被传入事件处理程序函数中,但仍然可以使用<code>window.event</code>访问事件<code>event</code>对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.attachEvent(<span class="string">"onclick"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(event.type); <span class="comment">//"click" </span></span><br><span class="line">  <span class="comment">// attachEvent绑定的事件处理程序,this指向window</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>通过 HTML特性指定的事件处理程序，那么还可以通过一个名叫 <code>event</code> 的变量来访问 event 对象（与 DOM 中的事件模型相同）。再看一个例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Click Me"</span> <span class="attr">onclick</span>=<span class="string">"alert(event.type)"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>IE中的所有事件对象都会包含下表所列属性和方法</p></blockquote><table><thead><tr><th>属性/方法</th><th style="text-align:center">类型</th><th style="text-align:center">读/写</th><th>说明</th></tr></thead><tbody><tr><td>cancelBubble</td><td style="text-align:center">Boolean</td><td style="text-align:center">读/写</td><td>默认值为false，但将其设置为true就可以取消事件冒泡（与DOM中的stopPropagation()方法的作用相同）</td></tr><tr><td>returnValue</td><td style="text-align:center">Boolean</td><td style="text-align:center">读/写</td><td>默认值为true，但将其设置为false就可以取消事件的默认行为（与DOM中的preventDefault()方法的作用相同）</td></tr><tr><td>srcElement</td><td style="text-align:center">Element</td><td style="text-align:center">只读</td><td>事件的目标（与DOM中的target属性相同）</td></tr><tr><td>type</td><td style="text-align:center">String</td><td style="text-align:center">只读</td><td>被触发的事件的类型</td></tr></tbody></table><blockquote><p>因为事件处理程序的作用域是根据指定它的方式来确定的，所以不能认为 this 会始终等于事件目标。故而，最好还是使用 <code>event.srcElement</code> 比较保险。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="built_in">window</span>.event.srcElement === <span class="keyword">this</span>); <span class="comment">//true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">btn.attachEvent(<span class="string">"onclick"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(event.srcElement === <span class="keyword">this</span>); <span class="comment">//false</span></span><br><span class="line">  <span class="comment">// attachEvent()方法注册的事件处理程序this指向window</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>在第一个事件处理程序中（使用 DOM0 级方法指定的），<code>event.srcElement</code> 属性等于 <code>this</code>，但在第二个事件处理程序中，这两者的值不相同</p></blockquote><p><code>returnValue</code> 属性相当于 DOM 中的 <code>preventDefault()</code>方法，它们的作用都是取消给定事件的默认行为。只要将 <code>returnValue</code> 设置为 false，就可以阻止默认行为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> link = <span class="built_in">document</span>.getElementById(<span class="string">"myLink"</span>);</span><br><span class="line">link.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.event.returnValue = <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p><code>cancelBubble</code> 属性与 DOM 中的 <code>stopPropagation()</code>方法作用相同，都是用来停止事件冒泡的。由于 IE 不支持事件捕获，因而只能取消事件冒泡；但 <code>stopPropagatioin()</code>可以同时取消事件捕获和冒泡。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Clicked"</span>);</span><br><span class="line">  <span class="built_in">window</span>.event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Body clicked"</span>); <span class="comment">//由于取消了冒泡,不显示</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="跨浏览器的事件对象"><a href="#跨浏览器的事件对象" class="headerlink" title="跨浏览器的事件对象"></a>跨浏览器的事件对象</h3><blockquote><p>向我们的工具对象<code>EventUtil</code>中添加代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventUtil = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="comment">// 获得事件对象</span></span><br><span class="line">  getEvent: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> event ? event : <span class="built_in">window</span>.event;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  getTarget: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> event.target || event.srcElement;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 阻止浏览器默认事件</span></span><br><span class="line">  preventDefault: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.preventDefault) &#123;</span><br><span class="line">      event.preventDefault();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      event.returnValue = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 取消事件流</span></span><br><span class="line">  stopPropagation: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.stopPropagation) &#123;</span><br><span class="line">      event.stopPropagation();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>调用方式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获得事件对象</span></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取事件触发对象</span></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 阻止默认行为</span></span><br><span class="line"><span class="keyword">var</span> link = <span class="built_in">document</span>.getElementById(<span class="string">"myLink"</span>);</span><br><span class="line">link.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  EventUtil.preventDefault(event);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 阻止事件流</span></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Clicked"</span>);</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  EventUtil.stopPropagation(event);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h2><p><code>DOM 3级事件</code>规定了以下几类事件。</p><ul><li>UI（UserInterface，用户界面）事件，当用户与页面上的元素交互时触发；</li><li>焦点事件，当元素获得或失去焦点时触发；</li><li>鼠标事件，当用户通过鼠标在页面上执行操作时触发；</li><li>滚轮事件，当使用鼠标滚轮（或类似设备）时触发；</li><li>文本事件，当在文档中输入文本时触发；</li><li>键盘事件，当用户通过键盘在页面上执行操作时触发；</li><li>合成事件，当为IME（InputMethodEditor，输入法编辑器）输入字符时触发；</li><li>变动（mutation）事件，当底层DOM结构发生变化时触发。</li></ul><blockquote><p>除了这几类事件之外，HTML5 也定义了一组事件，而有些浏览器还会在 DOM 和 BOM 中实现其他专有事件。这些专有的事件一般都是根据开发人员需求定制的，没有什么规范，因此不同浏览器的实现有可能不一致。</p></blockquote><h3 id="UI事件"><a href="#UI事件" class="headerlink" title="UI事件"></a>UI事件</h3><blockquote><p>UI 事件指的是那些不一定与用户操作有关的事件</p></blockquote><ul><li><code>load</code>事件：当页面完全加载后在<code>window</code>上面触发，当所有框架都加载完毕时在<code>框架集</code>上面触发，当图像加载完毕时在<code>&lt;img&gt;</code>元素上面触发，或者当嵌入的内容加载完毕时在<code>&lt;object&gt;</code>元素上面触发。</li><li><code>unload</code>事件：当页面完全卸载后在<code>window</code>上面触发，当所有框架都卸载后在<code>框架集</code>上面触发，或者当嵌入的内容卸载完毕后在<code>&lt;object&gt;</code>元素上面触发。</li><li><code>abort</code>事件：在用户停止下载过程时，如果嵌入的内容没有加载完，则在<code>&lt;object&gt;</code>元素上面触发。</li><li><code>error</code>事件：当发生JavaScript错误时在<code>window</code>上面触发，当无法加载图像时在<code>&lt;img&gt;</code>元素上面触发，当无法加载嵌入内容时在<code>&lt;object&gt;</code>元素上面触发，或者当有一或多个框架无法加载时在框架集上面触发。</li><li><code>select</code>事件：当用户选择文本框（<code>&lt;input&gt;</code>或<code>&lt;texterea&gt;</code>）中的一或多个字符时触发。第14章将继续讨论这个事件。</li><li><code>resize</code>事件：当窗口或框架的大小变化时在<code>window</code>或<code>框架</code>上面触发。</li><li><code>scroll</code>事件：当用户滚动带滚动条的元素中的内容时，在<strong><code>该元素</code></strong>上面触发。<strong><code>&lt;body&gt;</code>元素中包含所加载页面的滚动条</strong></li></ul><h4 id="load事件"><a href="#load事件" class="headerlink" title="load事件"></a>load事件</h4><p>当页面完全加载后（包括所有图像、JavaScript 文件、CSS 文件等外部资源），就会触发 <code>window</code> 上面的 <code>load</code> 事件,两种定义 <code>onload</code> 事件处理程序的方式,第一钟是用js给window对象绑定onload事件.第二种是是为<code>&lt;body&gt;</code>元素添加一个 <code>onload</code> 特性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Loaded!"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>这里也给事件处理程序传入了一个 <code>event</code> 对象。这个 <code>event</code> 对象中不包含有关这个事件的任何附加信息，但在兼容 DOM 的浏览器中，<code>event.target</code> 属性的值会被设置为 <code>document</code>，而 IE 并不会为这个事件设置 <code>srcElement</code> 属性</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"alert('Loaded!')"</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>一般来说，在<code>window</code>上面发生的任何事件都可以在<code>&lt;body&gt;</code>元素中通过相应的特性来指定，因为在HTML中无法访问<code>window</code>元素。<strong>建议尽可能使用JavaScript方式</strong></p></blockquote><p>图像上面也可以触发 <code>load</code> 事件，无论是在 DOM 中的图像元素还是 HTML 中的图像元素。因此，可以在 HTML 中为任何图像指定 <code>onload</code> 事件处理程序</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"smile.gif"</span> <span class="attr">onload</span>=<span class="string">"alert('Image loaded.')"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在创建新的<code>&lt;img&gt;</code>元素时，可以为其指定一个事件处理程序，以便图像加载完毕后给出提示。此时，最重要的是<strong>要在指定 src 属性之前先指定事件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> image = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">  EventUtil.addHandler(image, <span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event = EventUtil.getEvent(event);</span><br><span class="line">    alert(EventUtil.getTarget(event).src);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(image);</span><br><span class="line">  image.src = <span class="string">"smile.gif"</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>首先为 <code>window</code> 指定了 <code>onload</code> 事件处理程序。原因在于，我们是想向 DOM 中添加一个新元素，所以必须确定页面已经加载完毕——如果在页面加载前操作 <code>document.body</code> 会导致错误,新图像元素不一定要从添加到文档后才开始下载，只要设置了 src 属性就会开始下载。</p></blockquote><p><code>&lt;script&gt;</code>元素也会触发 <code>load</code> 事件，以便开发人员确定动态加载的 JavaScript 文件是否加载完毕。与图像不同，只有在设置了<code>&lt;script&gt;</code>元素的 src 属性并将该元素添加到文档后，才会开始下载 JavaScript 文件。换句话说，对于<code>&lt;script&gt;</code>元素而言，指定 src 属性和指定事件处理程序的先后顺序就不重要了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">  EventUtil.addHandler(script, <span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"Loaded"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  script.src = <span class="string">"example.js"</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="unload事件"><a href="#unload事件" class="headerlink" title="unload事件"></a>unload事件</h4><p>这个事件在文档被完全卸载后触发,与 load 事件类似，也有两种指定 <code>onunload</code> 事件处理程序的方式。第一种方式是使用 JavaScript,第二种方式，也是为<code>&lt;body&gt;</code>元素添加一个特性（与 load 事件相似）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"unload"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Unloaded"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>此时生成的 <code>event</code> 对象在兼容 DOM 的浏览器中只包含 <code>target</code> 属性（值为 <code>document</code>）。IE8 及之 前版本则为这个事件对象提供了 <code>srcElement</code> 属性。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;body onunload=<span class="string">"alert('Unloaded!')"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><h4 id="resize事件"><a href="#resize事件" class="headerlink" title="resize事件"></a>resize事件</h4><p>浏览器窗口被调整到一个新的高度或宽度时，就会触发<code>resize</code>事件。这个事件在<code>window</code>上面触发，因此可以通过JavaScript或<code>&lt;body&gt;</code>元素中的<code>onresize</code>特性来指定事件处理程序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"resize"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Resized"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>与其他发生在 <code>window</code> 上的事件类似，在兼容 DOM 的浏览器中，传入事件处理程序中的 <code>event</code> 对象有一个 <code>target</code> 属性，值为 <code>document</code>；而 IE8 及之前版本则未提供任何属性。<br>浏览器窗口最小化或最大化时也会触发 <code>resize</code> 事件</p></blockquote><h4 id="scroll事件"><a href="#scroll事件" class="headerlink" title="scroll事件"></a>scroll事件</h4><blockquote><p>虽然<code>scroll</code>事件在<code>window</code>对象上触发, 但它实际表示的则是页面中元素的变化,混杂模式和旧版本浏览器可以通过<code>document.body</code>的<code>scrollLeft</code>,<code>scrollTop</code>监控这一变化,<strong>在标准模式下,所有浏览器</strong>(除safari3.1是靠document.body.scrollLeft)<strong>都会通过<code>&lt;html&gt;(document.documentElement)</code>的<code>scrollLeft</code>与<code>scrollTop</code>来反应这一变化</strong></p></blockquote><p>得到兼容代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"scroll"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.compatMode == <span class="string">"CSS1Compat"</span>) &#123; <span class="comment">//标准模式</span></span><br><span class="line">    alert(<span class="built_in">document</span>.documentElement.scrollTop);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">//混杂模式或旧浏览器</span></span><br><span class="line">    alert(<span class="built_in">document</span>.body.scrollTop);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="焦点事件"><a href="#焦点事件" class="headerlink" title="焦点事件"></a>焦点事件</h4><p>焦点事件会在页面元素获得或失去焦点时触发。利用这些事件并与 <code>document.hasFocus()</code>方法及 <code>document.activeElement</code> 属性配合,可以知晓用户在页面上的行踪,有以下几个事件</p><ul><li><code>blur</code>事件：在元素失去焦点时触发。这个事件不会冒泡；所有浏览器都支持它。</li><li><code>focus</code>事件：在元素获得焦点时触发。这个事件不会冒泡；所有浏览器都支持它。</li><li><code>focusin</code>事件：在元素获得焦点时触发。这个事件与HTML事件focus等价，但它冒泡。</li><li><code>focusout</code>事件：在元素失去焦点时触发。这个事件是HTML事件blur的通用版本。</li></ul><p>当焦点从页面中的一个元素移动到另一个元素，会依次触发下列事件：</p><ol><li><code>focusout</code>事件 在失去焦点的元素上触发；</li><li><code>focusin</code>事件 在获得焦点的元素上触发；</li><li><code>blur</code>事件 在失去焦点的元素上触发；</li><li><code>focus</code>事件 在获得焦点的元素上触发；</li></ol><blockquote><p>即使 <code>focus</code> 和 <code>blur</code> 不冒泡，也可以在捕获阶段侦听到它们。</p></blockquote><h3 id="鼠标与滚轮事件"><a href="#鼠标与滚轮事件" class="headerlink" title="鼠标与滚轮事件"></a>鼠标与滚轮事件</h3><ul><li><code>click</code>事件：在用户单击主鼠标按钮（一般是左边的按钮）或者按下回车键时触发。意味着<code>onclick</code>事件处理程序既可以通过键盘也可以通过鼠标执行。</li><li><code>dblclick</code>事件：在用户双击主鼠标按钮（一般是左边的按钮）时触发。</li><li><code>mousedown</code>事件：在用户按下了任意鼠标按钮时触发。不能通过键盘触发这个事件。</li><li><code>mouseenter</code>事件：在鼠标光标从元素外部首次移动到元素范围之内时触发。这个事件不冒泡，而且在光标移动到后代元素上不会触发。</li><li><code>mouseleave</code>事件：在位于元素上方的鼠标光标移动到元素范围之外时触发。这个事件不冒泡，而且在光标移动到后代元素上不会触发。</li><li><code>mousemove</code>事件：当鼠标指针在元素内部移动时重复地触发。不能通过键盘触发这个事件。</li><li><code>mouseout</code>事件：在鼠标指针位于一个元素上方，然后用户将其移入另一个元素时触发。又移入的另一个元素可能位于前一个元素的外部，也可能是这个元素的子元素。不能通过键盘触发这个事件。</li><li><code>mouseover</code>事件：在鼠标指针位于一个元素外部，然后用户将其首次移入另一个元素边界之内时触发。不能通过键盘触发这个事件。</li><li><code>mouseup</code>事件：在用户释放鼠标按钮时触发。不能通过键盘触发这个事件。</li></ul><blockquote><p>页面上的所有元素都支持鼠标事件。除了 <code>mouseenter</code> 和 <code>mouseleave</code>，所有鼠标事件都会<code>冒泡</code>，也可以被取消，而取消鼠标事件将会影响浏览器的默认行为。取消鼠标事件的默认行为还会影响其他事件<br><code>click</code> 和 <code>dblclick</code> 事件都会依赖于其他先行事件的触发<br>只有在同一个元素上相继触发 <code>mousedown</code> 和 <code>mouseup</code> 事件， 才会触发 <code>click</code> 事件<br>只有触发两次 <code>click</code> 事 件，才会触发一次 <code>dblclick</code> 事件</p></blockquote><p><code>mousedown</code>,<code>mouseup</code>,<code>click</code>,<code>dblclick</code>触发顺序</p><ol><li><code>mousedown</code></li><li><code>mouseup</code></li><li><code>click</code></li><li><code>mousedown</code></li><li><code>mouseup</code></li><li><code>click</code></li><li><code>dblclick</code></li></ol><h4 id="光标客户区坐标位置-event-clientX-event-clientY"><a href="#光标客户区坐标位置-event-clientX-event-clientY" class="headerlink" title="光标客户区坐标位置,event.clientX,event.clientY"></a>光标客户区坐标位置,event.clientX,event.clientY</h4><p><img src="https://i.loli.net/2017/12/28/5a445c9618b4d.jpg" alt=""></p><blockquote><p>鼠标事件都是在浏览器视口中的特定位置上发生的。这个位置信息保存在事件对象<code>event.clientX</code>和<code>event.clientY</code>属性中。它们的值表示事件发生时鼠标指针在视口中的水平和垂直坐标。</p></blockquote><h4 id="光标页面坐标位置-event-pageX-event-pageY"><a href="#光标页面坐标位置-event-pageX-event-pageY" class="headerlink" title="光标页面坐标位置 event.pageX,event.pageY"></a>光标页面坐标位置 event.pageX,event.pageY</h4><blockquote><p>页面坐标通过事件对象 <code>event.pageX</code> 和 <code>event.pageY</code> 属性，能告诉你事件是在页面中的什么位置发生的<br>在页面没有滚动的情况下，<code>pageX</code> 和 <code>pageY</code> 的值与 <code>clientX</code> 和 <code>clientY</code> 的值相等。<br>IE8 及更早版本不支持事件对象上的页面坐标, 需要兼容代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line">EventUtil.addHandler(div, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  <span class="keyword">var</span> pageX = event.pageX,</span><br><span class="line">    pageY = event.pageY;</span><br><span class="line">  <span class="keyword">if</span> (pageX === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    pageX = event.clientX + (<span class="built_in">document</span>.body.scrollLeft || <span class="built_in">document</span>.documentElement.scrollLeft);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (pageY === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    pageY = event.clientY + (<span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop);</span><br><span class="line">  &#125;</span><br><span class="line">  alert(<span class="string">"Page coordinates: "</span> + pageX + <span class="string">","</span> + pageY);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="光标屏幕坐标位置-event-screenX-event-screenY"><a href="#光标屏幕坐标位置-event-screenX-event-screenY" class="headerlink" title="光标屏幕坐标位置 event.screenX,event.screenY"></a>光标屏幕坐标位置 event.screenX,event.screenY</h4><p><img src="https://i.loli.net/2017/12/28/5a445c9619b46.jpg" alt=""></p><blockquote><p>相对于整个电脑屏幕的位置。而通过 <code>event.screenX</code> 和 <code>event.screenY</code> 属性就可以确定鼠标事件发生时鼠标指针相对于整个屏幕的坐标信息</p></blockquote><h4 id="modifier-key"><a href="#modifier-key" class="headerlink" title="modifier key"></a>modifier key</h4><blockquote><p>以下4个键都的值都是布尔值,都描述在鼠标或键盘行为中这些键是否按下了,按下返回true,否则返回false</p></blockquote><ul><li><code>event.shiftKey</code></li><li><code>event.ctrlKery</code></li><li><code>event.altKey</code></li><li><code>event.metaKey</code>,IE不支持</li></ul><h4 id="相关元素-event-relatedTarget"><a href="#相关元素-event-relatedTarget" class="headerlink" title="相关元素,event.relatedTarget"></a>相关元素,event.relatedTarget</h4><blockquote><p>下面的属性只涉及<code>mouseover</code>事件,<code>mouseout</code>事件,对于其他事件,属性是<code>null</code></p></blockquote><p><code>event.relatedTarget</code>属性,在<code>mouseover</code>事件中,<code>event.relatedTarget</code>是<strong>失去光标的元素</strong>,在<code>mouseout</code>事件中,<code>event.relatedTarget</code>是<strong>获得光标的元素</strong></p><p>IE8之前的版本不支持<code>event.relatedTarget</code>,用下面的属性代替<br><code>event.fromElement</code>代表了<code>mouseover</code>事件触发时,<strong>失去光标的元素</strong><br><code>event.toElement</code>代表了<code>mouseout</code>事件触发时,<strong>获得光标的元素</strong></p><p>针对相关元素得到兼容代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = &#123;</span><br><span class="line">  <span class="comment">//省略了其他代码</span></span><br><span class="line">  getRelatedTarget: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.relatedTarget) &#123;</span><br><span class="line">      <span class="keyword">return</span> event.relatedTarget;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.toElement) &#123;</span><br><span class="line">      <span class="keyword">return</span> event.toElement;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.fromElement) &#123;</span><br><span class="line">      <span class="keyword">return</span> event.fromElement;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//省略了其他代码</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="鼠标按钮-event-button"><a href="#鼠标按钮-event-button" class="headerlink" title="鼠标按钮 event.button"></a>鼠标按钮 event.button</h4><p><code>event.button</code>属性,只对<code>mousedown</code>事件,<code>mouseup</code>事件有效</p><blockquote><p>对于 <code>mousedown</code> 和 <code>mouseup</code> 事件来说，则在其 <code>event</code> 对象存在一个 <code>button</code> 属性，表示按下或释放的按钮。DOM 的 <code>button</code> 属性可能有如下 3 个值：<code>0</code> 表示主鼠标按钮，<code>1</code> 表示中间的鼠标按钮（鼠标滚轮按钮），<code>2</code> 表示次鼠标按钮</p><p>IE8及之前版本也提供<code>event.button</code>属性,但与<code>DOM</code>提供的值有很大差异</p></blockquote><ul><li><code>0</code>：表示没有按下按钮。</li><li><code>1</code>：表示按下了主鼠标按钮。</li><li><code>2</code>：表示按下了次鼠标按钮。</li><li><code>3</code>：表示同时按下了主、次鼠标按钮。</li><li><code>4</code>：表示按下了中间的鼠标按钮。</li><li><code>5</code>：表示同时按下了主鼠标按钮和中间的鼠标按钮。</li><li><code>6</code>：表示同时按下了次鼠标按钮和中间的鼠标按钮。</li><li><code>7</code>：表示同时按下了三个鼠标按钮。</li></ul><blockquote><p>将IE的规范转化为DOM规范,得到兼容函数,并加入<code>EventUtil</code>中</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = &#123;</span><br><span class="line">  <span class="comment">// 获取鼠标键值</span></span><br><span class="line">  getButton: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.implementation.hasFeature(<span class="string">"MouseEvents"</span>, <span class="string">"2.0"</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> event.button;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">switch</span> (event.button) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用方法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line">EventUtil.addHandler(div, <span class="string">"mousedown"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  alert(EventUtil.getButton(event));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>在使用 <code>onmouseup</code> 事件处理程序时，<code>event.button</code> 的值表示释放的是哪个按钮</p></blockquote><h4 id="更多事件信息-event-detail"><a href="#更多事件信息-event-detail" class="headerlink" title="更多事件信息,event.detail"></a>更多事件信息,event.detail</h4><blockquote><p>“DOM2 级事件”规范在 event 对象中还提供了 <code>event.detail</code> 属性，用于给出有关事件的更多信息</p></blockquote><p><code>event.detail</code>属性, 对于鼠标事件来说,表示给定位置上发生了多少次单机(一次<code>mousedown</code>与<code>mouseup</code>),<code>event.detail</code>从1开始计数,每次都会++,如果鼠标移动了位置,会置0</p><blockquote><p>这个属性不光表现元素某点上的点击数, 也会在鼠标滚轮滚动时以<code>+3</code>,<code>-3</code>两个值表示鼠标滚轮的滚动方向, 具体往后看一节</p><p>IE通过下列属性为鼠标提供了更多信息 </p></blockquote><ul><li><code>offsetX</code>：光标相对于目标元素边界的x坐标。</li><li><code>offsetY</code>：光标相对于目标元素边界的y坐标。</li><li><code>altLeft</code>：布尔值，表示是否按下了Alt键。如果altLeft的值为true，则altKey的值也为true。</li><li><code>ctrlLeft</code>：布尔值，表示是否按下了Ctrl键。如果ctrlLeft的值为true，则ctrlKey的值也为true。</li><li><code>shiftLeft</code>：布尔值，表示是否按下了Shift键。如果shiftLeft的值为true，则shiftKey的值也为true。</li></ul><h4 id="鼠标滚轮事件"><a href="#鼠标滚轮事件" class="headerlink" title="鼠标滚轮事件"></a>鼠标滚轮事件</h4><p><code>mousewheel</code> 事件。这个事件可以在任何元素上面触发，最终会冒泡到 <code>document</code>（IE8）或 <code>window</code>（IE9、Opera、 Chrome 及 Safari）</p><p><code>mousewheel</code> 事件的 <code>event</code> 对象, 除包含鼠标事件的所有标准信息外, 包含一个特殊的 <code>wheelDelta</code> 属性。当用户向前滚动鼠标滚轮时，<code>wheelDelta</code> 是 <code>120</code> 的倍数；当用 户向后滚动鼠标滚轮时，wheelDelta 是 <code>-120</code>的倍数</p><p><img src="https://i.loli.net/2017/12/28/5a445c95cea89.jpg" alt=""></p><blockquote><p>将 mousewheel 事件处理程序指定给页面中的任何元素或 <code>document</code> 对象，即可处理鼠标滚轮的交互操作</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"mousewheel"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  alert(event.wheelDelta);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>这个例子会在发生 <code>mousewheel</code> 事件时显示 <code>wheelDelta</code> 的值。多数情况下，只要知道鼠标滚轮滚动的方向就够了，而这通过检测 <code>wheelDelta</code> 的正负号就可以确定<br>在 Opera 9.5 之前的版本中，<code>wheelDelta</code> 值的正负号是颠倒的</p></blockquote><p><code>Firefox</code>支持一个名为<code>DomouseScroll</code>的类似事件,也实在鼠标滚轮滚动时触发.<code>DOMMouseScroll</code> 也被视为鼠标事件，因而包含与鼠标事件有关的所有属性,有关鼠标滚轮的信息则保存在 <code>event.detail</code> 属性中，当向前滚动鼠标滚轮时，这个属性的值是<code>-3</code> 的倍数，当向后滚动 鼠标滚轮时，这个属性的值是 <code>3</code> 的倍数</p><p>可以将 <code>DOMMouseScroll</code> 事件添加到页面中的任何元素，而且该事件会冒泡到 <code>window</code> 对象。因此，可以像下面这样针对这个事件来添加事件处理程序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"DOMMouseScroll"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  alert(event.detail);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/12/28/5a445c95e17df.jpg" alt=""></p><blockquote><p>综合两种滚动事件的特性,得到兼容代码,并放入<code>EventUtil</code>中</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventUtil = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="comment">// 得到鼠标滚动事件的event.wheelData的兼容代码</span></span><br><span class="line">  getWheelDelta: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.wheelDelta) &#123;</span><br><span class="line">      <span class="keyword">return</span> (client.engine.opera &amp;&amp; client.engine.opera &lt; <span class="number">9.5</span> ? -event.wheelDelta : event.wheelDelta);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> -event.detail * <span class="number">40</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>调用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleMouseWheel</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event = EventUtil.getEvent(event);</span><br><span class="line">    <span class="keyword">var</span> delta = EventUtil.getWheelDelta(event);</span><br><span class="line">    alert(delta);</span><br><span class="line">  &#125;</span><br><span class="line">  EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"mousewheel"</span>, handleMouseWheel);</span><br><span class="line">  EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"DOMMouseScroll"</span>, handleMouseWheel);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h4 id="触摸设备"><a href="#触摸设备" class="headerlink" title="触摸设备"></a>触摸设备</h4><blockquote><p>iOS和Android设备没有鼠标,在面向iPhone,iPod中的safari开发时,有以下几点注意</p></blockquote><ul><li>不支持dblclick事件。双击浏览器窗口会放大画面，而且没有办法改变该行为。</li><li>轻击可单击元素会触发mousemove事件。如果此操作会导致内容变化，将不再有其他事件发生；如果屏幕没有因此变化，那么会依次发生mousedown、mouseup和click事件。轻击不可单击的元素不会触发任何事件。可单击的元素是指那些单击可产生默认操作的元素（如链接），或者那些已经被指定了onclick事件处理程序的元素。</li><li>mousemove事件也会触发mouseover和mouseout事件。</li><li>两个手指放在屏幕上且页面随手指移动而滚动时会触发mousewheel和scroll事件</li></ul><h3 id="键盘与文本事件"><a href="#键盘与文本事件" class="headerlink" title="键盘与文本事件"></a>键盘与文本事件</h3><h4 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h4><ul><li><code>keydown</code>事件：当用户按下键盘上的任意键时触发，而且如果按住不放的话，会重复触发此事件。</li><li><code>keypress</code>事件：当用户按下键盘上的字符键时触发，而且如果按住不放的话，会重复触发此事件。按下Esc键也会触发这个事件。Safari3.1之前的版本也会在用户按下非字符键时触发keypress事件。</li><li><code>keyup</code>事件：当用户释放键盘上的键时触发。</li></ul><blockquote><p>所有元素都支持以上 3 个事件，但只有在文本框中才常用到。<br>只有一个文本事件 <code>textInput</code>。这个事件是对 keypress 的补充，用意是在将文本显示给用户之 前更容易拦截文本。在文本插入文本框之前会触发 textInput 事件</p></blockquote><p>用户按下字符键, 事件触发顺序, 非字符键从中忽略<code>keypress</code></p><ol><li><code>keydown</code></li><li><code>keypress</code></li><li>文本框内容发生变化</li><li>(若此时按住了键没放,将重复触发<code>keydown</code>,<code>keypress</code>)</li><li><code>keyup</code></li></ol><blockquote><p>键盘事件与鼠标事件一样,都支持<code>event</code>对象中的<code>modifier key</code>特性. 它们分别是<code>event.shiftKey</code>,<code>event.ctrlKey</code>,<code>event.altKey</code>,<code>event.metaKey</code>(IE不支持metaKey)</p></blockquote><h4 id="键码-event-keyCode"><a href="#键码-event-keyCode" class="headerlink" title="键码 event.keyCode"></a>键码 event.keyCode</h4><p><code>event.keyCode</code>属性,发生 <code>keydown</code> 和 <code>keyup</code> 事件时，<code>event</code> 对象的 <code>keyCode</code> 属性中会包含一个代码，与键盘上一个特定的键对应。对数字字母字符键，<code>keyCode</code> 属性的值与 ASCII 码中对应小写字母或数字的编码相同, 与<code>shift</code>键状态无关</p><p><img src="https://i.loli.net/2017/12/28/5a445c964a1dd.jpg" alt=""><br><img src="https://i.loli.net/2017/12/28/5a445c9613f5d.jpg" alt=""></p><blockquote><p>。在 Firefox 和 Opera 中，按分号键时 keyCode 值为 59，也就是 ASCII 中分号的编码；但 IE 和 Safari 返回 186，即键盘中按键的键码。</p></blockquote><h4 id="字符编码-event-charCode"><a href="#字符编码-event-charCode" class="headerlink" title="字符编码 event.charCode"></a>字符编码 event.charCode</h4><p>发生 <code>keypress</code> 事件意味着按下的键会影响到屏幕中文本的显示。在所有浏览器中，按下能够插入或删除字符的键都会触发 keypress 事件；IE9、Firefox、Chrome 和 Safari 的 event 对象都支持一个 <code>event.charCode</code> 属性，这个属性只有在发生 <code>keypress</code> 事件时才包含值，而且这个值是按下的那个键所代表字符的 ASCII 编码。此时的 <code>event.keyCode</code> 通常等于 0 或者也可能等于所按键的键码。IE8及之前版本和 Opera则是在 <code>event.keyCode</code> 中保存字符的 ASCII 编码。</p><p>综上,得到兼容代码,放入<code>EventUtil</code>中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = &#123;</span><br><span class="line">  <span class="comment">//省略的代码</span></span><br><span class="line">  getCharCode: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> event.charCode == <span class="string">"number"</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> event.charCode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> event.keyCode;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//省略的代码</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>在取得了字符编码之后，就可以使用 <code>String.fromCharCode()</code>将其转换成实际的字符</p></blockquote><h4 id="DOM-3级的变化"><a href="#DOM-3级的变化" class="headerlink" title="DOM 3级的变化"></a>DOM 3级的变化</h4><blockquote><p>先说结论,本章介绍的属性和防范都不建议使用</p></blockquote><p><code>event.key</code>,<code>event.char</code>属性, DOM3 级事件中的键盘事件，不再包含 <code>event.charCode</code> 属性，而是包含两个新属性：<code>event.key</code> 和 <code>event.char</code>。其中，<code>event.key</code> 属性是为了取代 <code>event.keyCode</code> 而新增的，它的值是一个字符串。在按下某个字符键时，<code>event.key</code> 的值就是相应的文本字符（如“k”或“M”）；在按下非字符键时， <code>event.key</code> 的值是相应键的名（如“Shift” 或“Down”）。而 <code>event.char</code> 属性在按下字符键时的行为与 <code>event.key</code> 相同，但在按下非字符键时值为 null。</p><p>IE9 支持 <code>event.key</code> 属性，但不支持 <code>event.char</code> 属性。Safari 5 和 Chrome 支持名为 <code>event.keyIdentifier</code> 的类似属性， 在按下非字符键（例如 <code>Shift</code>）的情况下与 <code>event.key</code> 的值相同。对于字符键，<code>event.keyIdentifier</code> 返回一个格式 类似“U+0000”的字符串，表示 Unicode 值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> textbox = <span class="built_in">document</span>.getElementById(<span class="string">"myText"</span>);</span><br><span class="line">EventUtil.addHandler(textbox, <span class="string">"keypress"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  <span class="keyword">var</span> identifier = event.key || event.keyIdentifier;</span><br><span class="line">  <span class="keyword">if</span> (identifier) &#123;</span><br><span class="line">    alert(identifier);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>由于存在跨浏览器问题，因此本书不推荐使用 <code>event.key</code>、<code>event.keyIdentifier</code> 或 <code>event.char</code>。</p></blockquote><p><code>event.location</code> 属性，这是一个数值，表示按下了什么位置上的键, IE9 支持这个属性</p><ul><li><code>0</code> 表示默认键盘</li><li><code>1</code> 表示左侧位置（例如左位的 Alt 键）</li><li><code>2</code> 表示右侧位置（例如右侧的 Shift 键）</li><li><code>3</code> 表示数字小键盘</li><li><code>4</code> 表示移动设备键盘（也就是虚拟键盘）</li><li><code>5</code> 表示手柄（如任天堂 Wii 控制器）</li></ul><p>Safari 和 Chrome 支持名为 <code>event.keyLocation</code> 的等价属性，但即有 bug——值始终是 0，除非按下了数字键盘（此时，值 为 3）；否则，不会是 1、2、4、5。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> textbox = <span class="built_in">document</span>.getElementById(<span class="string">"myText"</span>);</span><br><span class="line">EventUtil.addHandler(textbox, <span class="string">"keypress"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  <span class="keyword">var</span> loc = event.location || event.keyLocation;</span><br><span class="line">  <span class="keyword">if</span> (loc) &#123;</span><br><span class="line">    alert(loc);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>与 key 属性一样，支持 <code>event.location</code> 的浏览器也不多，所以在跨浏览器开发中不推荐使用。</p></blockquote><p><code>event.getModifierState(&#39;Shift&#39;/&#39;Control&#39;/&#39;AltGraph&#39;/&#39;Meta&#39;) return boolean</code>,如果被检测的键按下了,返回true,否则返回false</p><blockquote><p>不推荐使用, 因为<code>modifier key</code>系列可以取得类似属性,且IE9是唯一支持该方法的浏览器</p></blockquote><h4 id="textInput事件"><a href="#textInput事件" class="headerlink" title="textInput事件"></a>textInput事件</h4><p><code>textInput</code>事件, 根据规范，当用户在可编辑区域中输入字符时，就会触发这个事件。</p><blockquote><p>与<code>keypress</code>事件的不同: </p></blockquote><ol><li>任何可以获得焦点的元素都可以触发<code>keypress</code>事件，但只有可编辑区域才能触发<code>textInput</code>事件。</li><li><code>textInput``事件只会在用户按下能够输入实际字符的键时才会被触发，而</code>keypress`事件则在按下那些能够影响文本显示的键时也会触发（例如退格键）</li></ol><p><code>event.data</code>属性, 值是用户输入的字符（而非字符编码）。换句话说，用户在没有按上档键的情况下按下了 S 键，<code>event.data</code> 的值就是”s”，而如果在按住上档键时按下该键，<code>event.data</code> 的值就是”S”。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> textbox = <span class="built_in">document</span>.getElementById(<span class="string">"myText"</span>);</span><br><span class="line">EventUtil.addHandler(textbox, <span class="string">"textInput"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  alert(event.data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>event.inputMethod</code>属性，表示把文本输入到文本框中的方式,只有IE支持</p><ul><li>0，表示浏览器不确定是怎么输入的。</li><li>1，表示是使用键盘输入的。</li><li>2，表示文本是粘贴进来的。</li><li>3，表示文本是拖放进来的。</li><li>4，表示文本是使用IME输入的。</li><li>5，表示文本是通过在表单中选择某一项输入的。</li><li>6，表示文本是通过手写输入的（比如使用手写笔）。</li><li>7，表示文本是通过语音输入的。</li><li>8，表示文本是通过几种方法组合输入的。</li><li>9，表示文本是通过脚本输入的。</li></ul><h3 id="复合事件"><a href="#复合事件" class="headerlink" title="复合事件"></a>复合事件</h3><blockquote><p>复合事件（compositionevent）是DOM3级事件中新添加的一类事件，用于处理IME的输入序列。IME（InputMethodEditor，输入法编辑器）可以让用户输入在物理键盘上找不到的字符。例如，使用拉丁文键盘的用户通过IME照样能输入日文字符<br>IE9+是唯一支持的浏览器,开发中用处不大,若需要深入查阅高程p384</p></blockquote><h3 id="变动事件"><a href="#变动事件" class="headerlink" title="变动事件"></a>变动事件</h3><blockquote><p> DOM2级的变动（mutation）事件能在DOM中的某一部分发生变化时给出提示。变动事件是为XML或HTMLDOM设计的，并不特定于某种语言。DOM2级定义了如下变动事件。</p></blockquote><ul><li><code>DOMSubtreeModified</code>：在DOM结构中发生任何变化时触发。这个事件在其他任何事件触发后都会触发。</li><li><code>DOMNodeInserted</code>：在一个节点作为子节点被插入到另一个节点中时触发。</li><li><code>DOMNodeRemoved</code>：在节点从其父节点中被移除时触发。</li><li><code>DOMNodeInsertedIntoDocument</code>：在一个节点被直接插入文档或通过子树间接插入文档之后触发。这个事件在DOMNodeInserted之后触发。</li><li><code>DOMNodeRemovedFromDocument</code>：在一个节点被直接从文档中移除或通过子树间接从文档中移除之前触发。这个事件在DOMNodeRemoved之后触发。</li><li><code>DOMAttrModified</code>：在特性被修改之后触发。</li><li><code>DOMCharacterDataModified</code>：在文本节点的值发生变化时触发。</li></ul><blockquote><p>浏览器中很少使用变动事件和 HTML 事件，因为使用它们会受到一些限制, 详情查阅p385-13.4.6</p></blockquote><h3 id="HTML5-事件"><a href="#HTML5-事件" class="headerlink" title="HTML5 事件"></a>HTML5 事件</h3><h4 id="contextmenu-事件"><a href="#contextmenu-事件" class="headerlink" title="contextmenu 事件"></a>contextmenu 事件</h4><blockquote><p>此事件表示何时应该显示右键菜单, 以便取消默认的右键菜单提供自定义菜单<br><code>contextmenu</code> 事件是冒泡的，因此可以为 <code>document</code> 指定一个事件处理程序，用以处理页面中发生的所有此类事件。这个事件的目标是发生用户操作的元素<br>在所有浏览器中都可以取消这个事件： 在兼容 DOM 的浏览器中，使用 <code>event.preventDefalut()</code>；在 IE 中，将 <code>event.returnValue</code> 的值 设置为 false。<br>因为 <code>contextmenu</code> 事件属于鼠标事件，所以其事件对象中包含与光标位置有关的所有属性。通常使用 <code>contextmenu</code> 事件来显示自定义的上下文菜单，而使用 <code>onclick</code> 事件处理程序来隐藏该菜单。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDiv"</span>&gt;</span>Right click or Ctrl+click me to get a custom context menu. Click anywhere else to get the default context menu.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"myMenu"</span> <span class="attr">style</span>=<span class="string">"position:absolute;visibility:hidden;background-color:silver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.nczonline.net"</span>&gt;</span>Nicholas' site<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.wrox.com"</span>&gt;</span>Wrox site<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.yahoo.com"</span>&gt;</span>Yahoo!<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"load"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line">                </span><br><span class="line">    EventUtil.addHandler(div, <span class="string">"contextmenu"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">        event = EventUtil.getEvent(event);</span><br><span class="line">        EventUtil.preventDefault(event);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> menu = <span class="built_in">document</span>.getElementById(<span class="string">"myMenu"</span>);</span><br><span class="line">        menu.style.left = event.clientX + <span class="string">"px"</span>;</span><br><span class="line">        menu.style.top = event.clientY + <span class="string">"px"</span>;</span><br><span class="line">        menu.style.visibility = <span class="string">"visible"</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"myMenu"</span>).style.visibility = <span class="string">"hidden"</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="beforeunload-事件"><a href="#beforeunload-事件" class="headerlink" title="beforeunload 事件"></a>beforeunload 事件</h4><blockquote><p>页面关闭前弹出个对话框确认关闭,请按下面固定套路组织代码</p><p>为了显示这个弹出对话框，必须将 <code>event.returnValue</code> 的值设置为要显示给用户的字符串（对 IE 及 Fiefox 而言），同时作为函数的值返回（对 Safari 和 Chrome 而言）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"beforeunload"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  <span class="keyword">var</span> message = <span class="string">"I'm really going to miss you if you go."</span>;</span><br><span class="line">  event.returnValue = message;</span><br><span class="line">  <span class="keyword">return</span> message;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="DOMContentLoaded-事件"><a href="#DOMContentLoaded-事件" class="headerlink" title="DOMContentLoaded 事件"></a>DOMContentLoaded 事件</h4><blockquote><p><code>DOMContentLoaded</code> 事件在形成完整的 DOM 树之后就会触发， 不理会图像、JavaScript 文件、CSS 文件或其他资源是否已经下载完毕, 与<code>onload</code>事件区分<br>要处理 <code>DOMContentLoaded</code> 事件，可以为 <code>document</code> 或 <code>window</code> 添加相应的事件处理程序（尽管这个事件会冒泡到 <code>window</code>，但它的目标实际上是 <code>document</code>）。<br><code>DOMContentLoaded</code> 事件对象不会提供任何额外的信息（其 <code>target</code> 属性是 <code>document</code>）。<br>这个事件既可以添加事件处理程序，也可以执行其他 DOM 操作。这个事件始终都会在 <code>load</code> 事件之前触发。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"DOMContentLoaded"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Content loaded"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>对于不支持此事件的polyfill,无法保证在所有环境中该超时调用一定会早于 <code>load</code> 事件被触发。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//..</span></span><br><span class="line">&#125;,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h4 id="readystatechange-事件"><a href="#readystatechange-事件" class="headerlink" title="readystatechange 事件"></a>readystatechange 事件</h4><p>DOM文档中的某些部分提供了<code>readystatechange</code>事件。这个事件的目的是提供与文档或元素的加载状态有关的信息，但这个事件的行为有时候也很难预料。支持<code>readystatechange</code>事件的每个对象都有一个<code>readyState</code>属性</p><ul><li><code>uninitialized（未初始化）</code>：对象存在但尚未初始化。</li><li><code>loading（正在加载）</code>：对象正在加载数据。</li><li><code>loaded（加载完毕）</code>：对象加载数据完成。</li><li><code>interactive（交互）</code>：可以操作对象了，但还没有完全加载。</li><li><code>complete（完成）</code>：对象已经加载完毕。</li></ul><blockquote><p>并非所有对象都会经历<code>readyState</code>的这几个阶段。换句话说，如果某个阶段不适用某个对象，则该对象完全可能跳过该阶段；并没有规定哪个阶段适用于哪个对象。显然，这意味着<code>readystatechange</code>事件经常会少于4次，而<code>readyState</code>属性的值也不总是连续的。</p></blockquote><p>对于 <code>document</code> 而言，值为<code>interactive</code>的 <code>readyState</code> 会在与 <code>DOMContentLoaded</code> 大致相同的时刻触发 <code>readystatechange</code> 事件。此时，DOM 树已经加载完毕，可以安全地操作它了，因此就会进入交互<code>interactive</code>阶段。 但与此同时，图像及其他外部文件不一定可用</p><ul><li><code>uninitialized（未初始化）</code>：对象存在但尚未初始化。</li><li><code>loading（正在加载）</code>：对象正在加载数据。</li><li><code>loaded（加载完毕）</code>：对象加载数据完成。</li><li><code>interactive（交互）</code>：可以操作对象了，但还没有完全加载。</li><li><code>complete（完成）</code>：对象已经加载完毕。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"readystatechange"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.readyState == <span class="string">"interactive"</span>) &#123;</span><br><span class="line">    alert(<span class="string">"Content loaded"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>这个事件的<code>event</code>对象不会提供任何信息，也没有目标对象。在与<code>load</code>事件一起使用时，无法预测两个事件触发的先后顺序。让问题变得更复杂的是，交互阶段可能会早于也可能会晚于完成阶段出现，无法确保顺序。<br>因此，为了尽可能抢到先机，有必要<strong>同时检测交互和完成阶段</strong>，如下面的例子所示。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"readystatechange"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.readyState == <span class="string">"interactive"</span> || <span class="built_in">document</span>.readyState == <span class="string">"complete"</span>) &#123;</span><br><span class="line">    EventUtil.removeHandler(<span class="built_in">document</span>, <span class="string">"readystatechange"</span>, <span class="built_in">arguments</span>.callee);</span><br><span class="line">    alert(<span class="string">"Content loaded"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>虽然使用<code>readystatechange</code>可以十分近似地模拟<code>DOMContentLoaded</code>事件，但它们本质上还是不同的。在不同页面中，<code>load</code>事件与<code>readystatechange</code>事件并不能保证以相同的顺序触发。</p></blockquote><p><code>&lt;script&gt;</code>（在IE和Opera中）和<code>&lt;link&gt;</code>（仅IE中）元素也会触发<code>readystatechange</code>事件，可以用来确定外部的JavaScript和CSS文件是否已经加载完成。与在其他浏览器中一样，除非把动态创建的元素添加到页面中，否则浏览器不会开始下载外部资源。基于元素触发的<code>readystatechange</code>事件也存在同样的问题，即<code>readyState</code>属性无论等于<code>loaded</code>还是<code>complete</code>都可以表示资源已经可用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// script标签添加readystatechange事件</span></span><br><span class="line">  <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">  EventUtil.addHandler(script, <span class="string">"readystatechange"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event = EventUtil.getEvent(event);</span><br><span class="line">    <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line">    <span class="keyword">if</span> (target.readyState == <span class="string">"loaded"</span> || target.readyState == <span class="string">"complete"</span>) &#123;</span><br><span class="line">      EventUtil.removeHandler(target, <span class="string">"readystatechange"</span>, <span class="built_in">arguments</span>.callee);</span><br><span class="line">      alert(<span class="string">"Script Loaded"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  script.src = <span class="string">"example.js"</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// link标签添加readystatechange事件</span></span><br><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">"link"</span>);</span><br><span class="line">  link.type = <span class="string">"text/css"</span>;</span><br><span class="line">  link.rel = <span class="string">"stylesheet"</span>;</span><br><span class="line"></span><br><span class="line">  EventUtil.addHandler(link, <span class="string">"readystatechange"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event = EventUtil.getEvent(event);</span><br><span class="line">    <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (target.readyState == <span class="string">"loaded"</span> || target.readyState == <span class="string">"complete"</span>) &#123;</span><br><span class="line">      EventUtil.removeHandler(target, <span class="string">"readystatechange"</span>, <span class="built_in">arguments</span>.callee);</span><br><span class="line">      alert(<span class="string">"CSS Loaded"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  link.href = <span class="string">"example.css"</span>;</span><br><span class="line">  <span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(link);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>这个例子为新创建的<code>&lt;script&gt;</code>节点指定了一个事件处理程序。事件的目标是该节点本身，因此当触发<code>readystatechange</code>事件时，要检测目标的<code>readyState</code>属性是不是等于<code>loaded</code>或<code>complete</code>。如果进入了其中任何一个阶段，则移除事件处理程序（以防止被执行两次），并显示一个警告框。与此同时，就可以执行已经加载完毕的外部文件中的函数了。同样的编码方式也适用于通过<code>&lt;link&gt;</code>元素加载CSS文件的情况</p><p>支持readystatechange事件的浏览器有IE、Firfox4+和Opera。</p></blockquote><h4 id="pageshow-和-pagehide-事件"><a href="#pageshow-和-pagehide-事件" class="headerlink" title="pageshow 和 pagehide 事件"></a>pageshow 和 pagehide 事件</h4><p>Firefox和Opera有一个特性，名叫<code>往返缓存</code>（back-forwardcache，或bfcache），可以在用户使用浏览器的“后退”和“前进”按钮时加快页面的转换速度。这个缓存保存了DOM和JavaScript的状态实际上是将整个页面都保存在了内存里。如果页面位于bfcache中，那么再次打开该页面时就不会触发<code>load</code>事件。</p><blockquote><p>尽管由于内存中保存了整个页面的状态，不触发load事件也不应该会导致什么问题，但为了更形象地说明<code>bfcache</code>的行为，Firefox还是提供了一些新事件。<br>第一个事件就是<code>pageshow</code>事件，在页面显示时触发，无论该页面是否来自<code>bfcache</code>。在重新加载的页面中，<code>pageshow</code>会在<code>load</code>事件触发后触发；而对于<code>bfcache</code>中的页面，<code>pageshow</code>会在页面状态完全恢复的那一刻触发。另外要注意的是，虽然这个事件的目标是<code>document</code>，但必须将其事件处理程序添加到<code>window</code>。<br><code>pageshow</code> 事件的 <code>event</code> 对象还包含一个名为 <code>event.persisted</code> 的布尔值属性。 如果页面被保存在了 <code>bfcache</code> 中，则这个属性的值为 true；否则，这个属性的值为 false。通过检测 <code>event.persisted</code> 属性，就可以根据页面在 bfcache 中的状态来确定是否需要采取其他操作。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> showCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"Load fired"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"pageshow"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    showCount++;</span><br><span class="line">    alert(<span class="string">"Show has been fired "</span> + showCount + <span class="string">" times. Persisted? "</span> + event.persisted);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><blockquote><p>每当触发<code>pageshow</code>事件，showCount的值就会递增并通过警告框显示出来。如果你在离开包含以上代码的页面之后，又单击“后退”按钮返回该页面，就会看到showCount每次递增的值。这是因为该变量的状态，乃至整个页面的状态，都被保存在了内存中，当你返回这个页面时，它们的状态得到了恢复。如果你单击了浏览器的“刷新”按钮，那么showCount的值就会被重置为0，因为页面已经完全重新加载了。</p></blockquote><p>同时又<code>pagehide</code> 事件，会在浏览器卸载页面的时候触发，而且是在 <code>unload</code> 事件之前触发。与 <code>pageshow</code> 事件一样，<code>pagehide</code> 在 <code>document</code> 上面触发，但其事件处理程序必须要添加到 <code>window</code> 对象。这个事件的 <code>event</code> 对象也包含 <code>event.persisted</code> 属性.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"pagehide"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Hiding. Persisted? "</span> + event.persisted);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>可能需要在<code>pagehide</code>事件触发时根据<code>event.persisted</code>的值采取不同的操作。对于<code>pageshow</code>事件，如果页面是从<code>bfcache</code>中加载的，那么<code>event.persisted</code>的值就是true；对于<code>pagehide</code>事件，如果页面在卸载之后会被保存在<code>bfcache</code>中，那么<code>event.persisted</code>的值也会被设置为true。因此，当第一次触发<code>pageshow</code>时，<code>event.persisted</code>的值一定是false，而在第一次触发<code>pagehide</code>时，<code>event.persisted</code>就会变成true（除非页面不会被保存在<code>bfcache</code>中）。<br>指定了 <code>onunload</code> 事件处理程序的页面会被自动排除在 <code>bfcache</code> 之外，即使事件处理程序是空的。<br>IE9及之前版本不支持这两个事件。指定了onunload事件处理程序的页面会被自动排除在bfcache之外，即使事件处理程序是空的。</p></blockquote><h4 id="hashchange-事件"><a href="#hashchange-事件" class="headerlink" title="hashchange()事件"></a>hashchange()事件</h4><blockquote><p><code>URL</code>的<code>hash</code>值变化时触发<br><code>hashchange</code>应该添加给<code>window</code>对象, <code>event</code>对象包含两个属性<code>event.oldURL</code>与<code>event.newURL</code>,分别表示变化前后完整的URL，因为<code>event.oldURL</code>与<code>event.newURL</code>有兼容问题, 所以最好使用<code>location.hash</code>来确定当前的<code>hash</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(location.hash)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设备事件"><a href="#设备事件" class="headerlink" title="设备事件"></a>设备事件</h3><p>都是一些特定移动设备的事件,用处较少,详情查阅p395-13.4.8</p><h3 id="触摸与手势事件"><a href="#触摸与手势事件" class="headerlink" title="触摸与手势事件"></a>触摸与手势事件</h3><h4 id="触摸事件"><a href="#触摸事件" class="headerlink" title="触摸事件"></a>触摸事件</h4><ul><li><code>touchstart</code>：当手指触摸屏幕时触发；即使已经有一个手指放在了屏幕上也会触发。</li><li><code>touchmove</code>：当手指在屏幕上滑动时连续地触发。在这个事件发生期间，**调用<code>event.preventDefault()</code>可以阻止滚动。</li><li><code>touchend</code>：当手指从屏幕上移开时触发。</li><li><code>touchcancel</code>：当系统停止跟踪触摸时触发。关于此事件的确切触发时间，文档中没有明确说明。</li></ul><blockquote><p>上面这几个事件都会冒泡，也都可以取消。虽然这些触摸事件没有在DOM规范中定义，但它们却是以兼容DOM的方式实现的。因此，每个触摸事件的<code>event</code>对象都提供了在鼠标事件中常见的属性：<code>event.bubbles</code>、<code>event.cancelable</code>、<code>event.view</code>、<code>event.clientX</code>、<code>event.clientY</code>、<code>event.screenX</code>、<code>event.screenY</code>、<code>event.detail</code>、<code>event.altKey</code>、<code>event.shiftKey</code>、<code>event.ctrlKey</code>和<code>event.metaKey</code></p></blockquote><p>触摸事件的<code>event</code>对象除常见的DOM属性外, 触摸事件还包含下列三个用于跟踪触摸的属性:</p><ul><li><code>touches</code>：表示当前跟踪的触摸操作的<code>Touch对象</code>的数组。</li><li><code>targetTouchs</code>：特定于事件目标的<code>Touch对象</code>的数组。</li><li><code>changeTouches</code>：表示自上次触摸以来发生了什么改变的<code>Touch对象</code>的数组。</li></ul><p>每个<code>Touch对象</code>包含下列属性:</p><ul><li><code>clientX</code>：触摸目标在视口中的x坐标。</li><li><code>clientY</code>：触摸目标在视口中的y坐标。</li><li><code>identifier</code>：标识触摸的唯一ID。</li><li><code>pageX</code>：触摸目标在页面中的x坐标。</li><li><code>pageY</code>：触摸目标在页面中的y坐标。</li><li><code>screenX</code>：触摸目标在屏幕中的x坐标。</li><li><code>screenY</code>：触摸目标在屏幕中的y坐标。</li><li><code>target</code>：触摸的DOM节点目标。</li></ul><blockquote><p>使用这些属性可以跟踪用户对屏幕的触摸操作。来看下面的例子。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleTouchEvent</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//只跟踪一次触摸 </span></span><br><span class="line">  <span class="keyword">if</span> (event.touches.length == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> output = <span class="built_in">document</span>.getElementById(<span class="string">"output"</span>);</span><br><span class="line">    <span class="keyword">switch</span> (event.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"touchstart"</span>:</span><br><span class="line">        output.innerHTML = <span class="string">"Touch started ("</span> + event.touches[<span class="number">0</span>].clientX + <span class="string">","</span> + event.touches[<span class="number">0</span>].clientY + <span class="string">")"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"touchend"</span>:</span><br><span class="line">        output.innerHTML += <span class="string">"&lt;br&gt;Touch ended ("</span> + event.changedTouches[<span class="number">0</span>].clientX + <span class="string">","</span> + event.changedTouches[<span class="number">0</span>].clientY + <span class="string">")"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"touchmove"</span>:</span><br><span class="line">        event.preventDefault(); <span class="comment">//阻止滚动</span></span><br><span class="line">        output.innerHTML += <span class="string">"&lt;br&gt;Touch moved ("</span> + event.changedTouches[<span class="number">0</span>].clientX + <span class="string">","</span> + event.changedTouches[<span class="number">0</span>].clientY + <span class="string">")"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"touchstart"</span>, handleTouchEvent);</span><br><span class="line">EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"touchend"</span>, handleTouchEvent);</span><br><span class="line">EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"touchmove"</span>, handleTouchEvent);</span><br></pre></td></tr></table></figure><blockquote><p>以上代码会跟踪屏幕上发生的一次触摸操作。为简单起见，只会在有一次活动触摸操作的情况下输出信息。当<code>touchstart</code>事件发生时，会将触摸的位置信息输出到<code>&lt;div&gt;</code>元素中。当<code>touchmove</code>事件发生时，会取消其默认行为，阻止滚动（触摸移动的默认行为是滚动页面），然后输出触摸操作的变化信息。而<code>touchend</code>事件则会输出有关触摸操作的最终信息。注意，在<code>touchend</code>事件发生时，<code>touches</code>集合中就没有任何<code>Touch对象</code>了，因为不存在活动的触摸操作；此时，就必须转而使用<code>changeTouchs</code>集合。</p><p>这些事件会在文档的所有元素上面触发，因而可以分别操作页面的不同部分。在触摸屏幕上的元素时，这些事件（包括鼠标事件）发生的顺序如下：</p></blockquote><ol><li>touchstart</li><li>mouseover</li><li>mousemove（一次）</li><li>mousedown</li><li>mouseup</li><li>click</li><li>touchend</li></ol><h4 id="手势事件"><a href="#手势事件" class="headerlink" title="手势事件"></a>手势事件</h4><p>Safari还引入了一组手势事件。当两个手指触摸屏幕时就会产生手势，手势通常会改变显示项的大小，或者旋转显示项。有三个手势事件:</p><ul><li><code>gesturestart</code>：当一个手指已经按在屏幕上而另一个手指又触摸屏幕时触发。</li><li><code>gesturechange</code>：当触摸屏幕的任何一个手指的位置发生变化时触发。</li><li><code>gestureend</code>：当任何一个手指从屏幕上面移开时触发。</li></ul><blockquote><p>只有两个手指都触摸到事件的接收容器时才会触发这些事件。由于这些事件冒泡，所以将事件处理程序放在文档上也可以处理所有手势事件。此时，事件的目标就是两个手指都位于其范围内的那个元素。</p></blockquote><p>触摸事件和手势事件之间存在某种关系。当一个手指放在屏幕上时，会触发touchstart事件。如果另一个手指又放在了屏幕上，则会先触发gesturestart事件，随后触发基于该手指的touchstart事件。如果一个或两个手指在屏幕上滑动，将会触发gesturechange事件。但只要有一个手指移开，就会触发gestureend事件，紧接着又会触发基于该手指的touchend事件。</p><p>与触摸事件一样，每个手势事件的<code>event</code>对象都包含着标准的鼠标事件属性：<code>event.bubbles</code>、<code>event.cancelable</code>、<code>event.view</code>、<code>event.clientX</code>、<code>event.clientY</code>、<code>event.screenX</code>、<code>event.screenY</code>、<code>event.detail</code>、<code>event.altKey</code>、<code>event.shiftKey</code>、<code>event.ctrlKey</code>和<code>event.metaKey</code>。</p><p>此外，还包含两个额外的属性：</p><ul><li><code>event.rotation</code>属性，表示手指变化引起的旋转角度，负值表示逆时针旋转，正值表示顺时针旋转（该值从0开始）。</li><li><code>event.scale</code>属性,而<code>event.scale</code>属性表示两个手指间距离的变化情况（例如向内收缩会缩短距离）；这个值从1开始，并随距离拉大而增长，随距离缩短而减小。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleGestureEvent</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> output = <span class="built_in">document</span>.getElementById(<span class="string">"output"</span>);</span><br><span class="line">  <span class="keyword">switch</span> (event.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"gesturestart"</span>:</span><br><span class="line">      output.innerHTML = <span class="string">"Gesture started (rotation="</span> + event.rotation + <span class="string">",scale="</span> + event.scale + <span class="string">")"</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"gestureend"</span>:</span><br><span class="line">      output.innerHTML += <span class="string">"&lt;br&gt;Gesture ended (rotation="</span> + event.rotation + <span class="string">",scale="</span> + event.scale + <span class="string">")"</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"gesturechange"</span>:</span><br><span class="line">      output.innerHTML += <span class="string">"&lt;br&gt;Gesture changed (rotation="</span> + event.rotation + <span class="string">",scale="</span> + event.scale + <span class="string">")"</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"gesturestart"</span>, handleGestureEvent, <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"gestureend"</span>, handleGestureEvent, <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"gesturechange"</span>, handleGestureEvent, <span class="literal">false</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>触摸事件也会返回 <code>event.rotation</code> 和 <code>event.scale</code> 属性，但这两个属性只会在两个手指与 屏幕保持接触时才会发生变化。</p></blockquote><h2 id="内存和性能"><a href="#内存和性能" class="headerlink" title="内存和性能"></a>内存和性能</h2><h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><p>直接看代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;ul id="myLinks"&gt;</span></span><br><span class="line"><span class="comment">//   &lt;li id="goSomewhere"&gt;Go somewhere&lt;/li&gt;</span></span><br><span class="line"><span class="comment">//   &lt;li id="doSomething"&gt;Do something&lt;/li&gt;</span></span><br><span class="line"><span class="comment">//   &lt;li id="sayHi"&gt;Say hi&lt;/li&gt;</span></span><br><span class="line"><span class="comment">// &lt;/ul&gt;</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">"myLinks"</span>);</span><br><span class="line">  EventUtil.addHandler(list, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event = EventUtil.getEvent(event);</span><br><span class="line">    <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (target.id) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"doSomething"</span>:</span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">"I changed the document's title"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"goSomewhere"</span>:</span><br><span class="line">        location.href = <span class="string">"http://www.wrox.com"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"sayHi"</span>:</span><br><span class="line">        alert(<span class="string">"hi"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><blockquote><p>上述代码性能更好, 适合事件维脱的事件包括<code>click</code>,<code>mousedown</code>,<code>mouseup</code>,<code>keyup</code>,<code>keydown</code>,<code>keypress</code>, 虽然<code>mouseover</code>和<code>mouseout</code>不适合委托</p></blockquote><h3 id="移除事件处理程序"><a href="#移除事件处理程序" class="headerlink" title="移除事件处理程序"></a>移除事件处理程序</h3><p>内存中留有那些过时不用的“空事件处理程序”（danglingeventhandler），也是造成Web应用程序内存与性能问题的主要原因。</p><p>在两种情况下，可能会造成上述问题。第一种情况就是从文档中移除带有事件处理程序的元素时。这可能是通过纯粹的DOM操作，例如使用<code>element.removeChild()</code>和<code>element.replaceChild()</code>方法，但更多地是发生在使用innerHTML替换页面中某一部分的时候。如果带有事件处理程序的元素被<code>innerHTML</code>删除了，那么原来添加到元素中的事件处理程序极有可能无法被当作垃圾回收。</p><blockquote><p>在事件处理程序中删除按钮也能阻止事件冒泡。目标元素在文档中是事件冒泡的前提。</p><p>采用<code>事件委托</code>也有助于解决这个问题。如果事先知道将来有可能使用<code>innerHTML</code>替换掉页面中的某一部分，那么就可以不直接把事件处理程序添加到该部分的元素中。而通过把事件处理程序指定给较高层次的元素，同样能够处理该区域中的事件。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment">/* &lt;div id="myDiv"&gt;</span></span><br><span class="line"><span class="comment">  &lt;input type="button" value="Click Me" id="myBtn"&gt;</span></span><br><span class="line"><span class="comment">&lt;/div&gt;   */</span>&#125;</span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//先执行某些操作 </span></span><br><span class="line">  btn.onclick = <span class="literal">null</span>; <span class="comment">//移除事件处理程序 </span></span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML = <span class="string">"Processing..."</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="模拟事件"><a href="#模拟事件" class="headerlink" title="模拟事件"></a>模拟事件</h2><blockquote><p>可以使用JavaScript在任意时刻来触发特定的事件，而此时的事件就如同浏览器创建的事件一样。也就是说，这些事件该冒泡还会冒泡，而且照样能够导致浏览器执行已经指定的处理它们的事件处理程序。在测试Web应用程序，模拟触发事件是一种极其有用的技术。</p></blockquote><h3 id="DOM中的事件模拟"><a href="#DOM中的事件模拟" class="headerlink" title="DOM中的事件模拟"></a>DOM中的事件模拟</h3><ul><li><code>document.createEvent(string) return event</code> 返回的<code>event</code>是模拟事件的事件对象, 参数<code>string</code>是固定的字符串,可取值如下<ul><li><code>UIEvents</code>：一般化的UI事件。鼠标事件和键盘事件都继承自UI事件。DOM3级中是UIEvent。</li><li><code>MouseEvents</code>：一般化的鼠标事件。DOM3级中是MouseEvent。</li><li><code>MutationEvents</code>：一般化的DOM变动事件。DOM3级中是MutationEvent。</li><li><code>HTMLEvents</code>：一般化的HTML事件。没有对应的DOM3级事件（HTML事件被分散到其他类别中）。</li><li><code>KeyboardEvent</code>: 键盘事件</li><li><code>Event</code>: 通用事件</li></ul></li></ul><blockquote><p>IE9是目前唯一支持DOM3级键盘事件的浏览器。不过，在其他浏览器中，在现有方法的基础上，可以通过几种方式来模拟键盘事件。</p></blockquote><ul><li><p><code>event.initMouseEvent(...args)</code> 在创建了event对象之后，还需要使用与事件有关的信息对其进行初始化。每种类型的event对象都有一个特殊的方法，为它传入适当的数据就可以初始化该<code>event</code>对象。不同类型的这个方法的名字也不相同，具体要取决于<code>document.createEvent()</code>中使用的参数。</p></li><li><p><code>element.dispatchEvent(event)</code> 所有支持事件的DOM节点都支持这个方法。调用<code>element.dispatchEvent()</code>方法时，需要传入一个参数，即表示要触发事件的event对象。触发事件之后，该事件就跻身“官方事件”之列了，因而能够照样冒泡并引发相应事件处理程序的执行。</p></li></ul><h4 id="模拟鼠标事件"><a href="#模拟鼠标事件" class="headerlink" title="模拟鼠标事件"></a>模拟鼠标事件</h4><p>创建鼠标事件对象的方法是 为 <code>document.createEvent()</code>传入字符串<code>MouseEvents</code>。返回的<code>event</code>对象有一个名为 <code>event.initMouseEvent()</code>方法， 用于指定与该鼠标事件有关的信息。这个方法接收 15 个参数，</p><ul><li><code>type（字符串）</code>：表示要触发的事件类型，例如<code>click</code>。</li><li><code>bubbles（布尔值）</code>：表示事件是否应该冒泡。为精确地模拟鼠标事件，应该把这个参数设置为true。</li><li><code>cancelable（布尔值）</code>：表示事件是否可以取消。为精确地模拟鼠标事件，应该把这个参数设置为true。</li><li><code>view（AbstractView）</code>：与事件关联的视图。这个参数几乎总是要设置为<code>document.defaultView</code>。</li><li><code>detail（整数）</code>：与事件有关的详细信息。这个值一般只有事件处理程序使用，但通常都设置为0。</li><li><code>screenX（整数）</code>：事件相对于屏幕的X坐标。</li><li><code>screenY（整数）</code>：事件相对于屏幕的Y坐标。</li><li><code>clientX（整数）</code>：事件相对于视口的X坐标。</li><li><code>clientY（整数）</code>：事件想对于视口的Y坐标。</li><li><code>ctrlKey（布尔值）</code>：表示是否按下了Ctrl键。默认值为false。</li><li><code>altKey（布尔值）</code>：表示是否按下了Alt键。默认值为false。</li><li><code>shiftKey（布尔值）</code>：表示是否按下了Shift键。默认值为false。</li><li><code>metaKey（布尔值）</code>：表示是否按下了Meta键。默认值为false。</li><li><code>button（整数）</code>：表示按下了哪一个鼠标键。默认值为0。</li><li><code>relatedTarget（对象）</code>：表示与事件相关的对象。这个参数只在模拟<code>mouseover</code>事件或<code>mouseout</code>事件时使用。</li></ul><blockquote><p><code>event.initMouseEvent()</code>方法的这些参数是与鼠标事件的<code>event</code>对象所包含的属性一一对应的。其中，前4个参数对正确地激发事件至关重要，因为浏览器要用到这些参数；而剩下的所有参数只有在事件处理程序中才会用到。当把<code>event</code>对象传给<code>element.dispatchEvent(event)</code>方法时，这个对象的<code>event.target</code>属性会自动设置。下面，我们就通过一个例子来了解如何模拟对按钮的单击事件。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建事件对象 </span></span><br><span class="line"><span class="keyword">var</span> event = <span class="built_in">document</span>.createEvent(<span class="string">"MouseEvents"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化事件对象 </span></span><br><span class="line">event.initMouseEvent(<span class="string">"click"</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="built_in">document</span>.defaultView, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="number">0</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//触发事件 </span></span><br><span class="line">btn.dispatchEvent(event);</span><br></pre></td></tr></table></figure><h4 id="模拟键盘事件"><a href="#模拟键盘事件" class="headerlink" title="模拟键盘事件"></a>模拟键盘事件</h4><p>DOM3级规定，调用<code>document.createEvent()</code>并传入<code>KeyboardEvent</code>就可以创建一个键盘事件。返回的<code>event</code>事件对象会包含一个<code>event.initKeyEvent()</code>方法，这个方法接收下列参数。</p><ul><li><code>type（字符串）</code>：表示要触发的事件类型，如”keydown”。</li><li><code>bubbles（布尔值）</code>：表示事件是否应该冒泡。为精确模拟鼠标事件，应该设置为true。</li><li><code>cancelable（布尔值）</code>：表示事件是否可以取消。为精确模拟鼠标事件，应该设置为true。</li><li><code>view（AbstractView）</code>：与事件关联的视图。这个参数几乎总是要设置为<code>document.defaultView</code>。</li><li><code>key</code>：表示按下的键的键码。</li><li><code>location（整数）</code>：表示按下了哪里的键。0表示默认的主键盘，1表示左，2表示右，3表示数字键盘，4表示移动设备（即虚拟键盘），5表示手柄。</li><li><code>modifiers（字符串）</code>：空格分隔的修改键列表，如”Shift”。</li><li><code>repeat（整数）</code>：在一行中按了这个键多少次。由于DOM3级不提倡使用<code>keypress</code>事件，因此只能利用这种技术来模拟<code>keydown</code>和<code>keyup</code>事件。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> textbox = <span class="built_in">document</span>.getElementById(<span class="string">"myTextbox"</span>),event;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以 DOM3 级方式创建事件对象 </span></span><br><span class="line"><span class="comment">//先检测浏览器是否支持 DOM3 级事件；其他浏览器返回一个非标准的 KeyboardEvent 对象。</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.implementation.hasFeature(<span class="string">"KeyboardEvents"</span>, <span class="string">"3.0"</span>)) &#123;</span><br><span class="line">  event = <span class="built_in">document</span>.createEvent(<span class="string">"KeyboardEvent"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//初始化事件对象 </span></span><br><span class="line">  event.initKeyboardEvent(<span class="string">"keydown"</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="built_in">document</span>.defaultView, <span class="string">"a"</span>, <span class="number">0</span>, <span class="string">"Shift"</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//触发事件 </span></span><br><span class="line">textbox.dispatchEvent(event);</span><br></pre></td></tr></table></figure><h4 id="在Firefox模拟键盘事件"><a href="#在Firefox模拟键盘事件" class="headerlink" title="在Firefox模拟键盘事件"></a>在Firefox模拟键盘事件</h4><p>在Firefox中，调用<code>document.createEvent()</code>并传入<code>KeyEvents</code>就可以创建一个键盘事件。返回的<code>event</code>事件对象会包含一个<code>event.initKeyEvent()</code>方法，这个方法接受下列10个参数。</p><ul><li><code>type（字符串）</code>：表示要触发的事件类型，如”keydown”。</li><li><code>bubbles（布尔值）</code>：表示事件是否应该冒泡。为精确模拟鼠标事件，应该设置为true。</li><li><code>cancelable（布尔值）</code>：表示事件是否可以取消。为精确模拟鼠标事件，应该设置为true。</li><li><code>view（AbstractView）</code>：与事件关联的视图。这个参数几乎总是要设置为document.defaultView。</li><li><code>ctrlKey（布尔值）</code>：表示是否按下了Ctrl键。默认值为false。</li><li><code>altKey（布尔值）</code>：表示是否按下了Alt键。默认值为false。</li><li><code>shiftKey（布尔值）</code>：表示是否按下了Shift键。默认值为false。</li><li><code>metaKey（布尔值）</code>：表示是否按下了Meta键。默认值为false。</li><li><code>keyCode（整数）</code>：被按下或释放的键的键码。这个参数对keydown和keyup事件有用，默认值为0。</li><li><code>charCode（整数）</code>：通过按键生成的字符的ASCII编码。这个参数对keypress事件有用，默认值为0。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只适用于 Firefox </span></span><br><span class="line"><span class="keyword">var</span> textbox = <span class="built_in">document</span>.getElementById(<span class="string">"myTextbox"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建事件对象 </span></span><br><span class="line"><span class="keyword">var</span> event = <span class="built_in">document</span>.createEvent(<span class="string">"KeyEvents"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化事件对象 </span></span><br><span class="line">event.initKeyEvent(<span class="string">"keypress"</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="built_in">document</span>.defaultView, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="number">65</span>, <span class="number">65</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//触发事件 </span></span><br><span class="line">textbox.dispatchEvent(event);</span><br></pre></td></tr></table></figure><h4 id="在其他浏览器中模拟键盘事件"><a href="#在其他浏览器中模拟键盘事件" class="headerlink" title="在其他浏览器中模拟键盘事件"></a>在其他浏览器中模拟键盘事件</h4><p>在其他浏览器中，则需要创建一个通用的事件，然后再向事件对象中添加键盘事件特有的信息。在此必须要使用通用事件，而不能使用UI事件，因为UI事件不允许向event对象中再添加新属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在不支持DOM3的浏览器中模拟键盘事件</span></span><br><span class="line"><span class="keyword">var</span> textbox = <span class="built_in">document</span>.getElementById(<span class="string">"myTextbox"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建事件对象 </span></span><br><span class="line"><span class="keyword">var</span> event = <span class="built_in">document</span>.createEvent(<span class="string">"Events"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化事件对象 </span></span><br><span class="line">event.initEvent(type, bubbles, cancelable);</span><br><span class="line">event.view = <span class="built_in">document</span>.defaultView;</span><br><span class="line">event.altKey = <span class="literal">false</span>;</span><br><span class="line">event.ctrlKey = <span class="literal">false</span>;</span><br><span class="line">event.shiftKey = <span class="literal">false</span>;</span><br><span class="line">event.metaKey = <span class="literal">false</span>;</span><br><span class="line">event.keyCode = <span class="number">65</span>;</span><br><span class="line">event.charCode = <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//触发事件 </span></span><br><span class="line">textbox.dispatchEvent(event);</span><br></pre></td></tr></table></figure><h4 id="模拟其他事件"><a href="#模拟其他事件" class="headerlink" title="模拟其他事件"></a>模拟其他事件</h4><ul><li>模拟HTML事件</li></ul><blockquote><p>要模拟HTML事件，同样需要先创建一个<code>event</code>对象——通过<code>document.createEvent(&quot;HTMLEvents&quot;)</code>，然后再使用这个对象的<code>event.initEvent()</code>方法来初始化它即可</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> event = <span class="built_in">document</span>.createEvent(<span class="string">"HTMLEvents"</span>);</span><br><span class="line">event.initEvent(<span class="string">"focus"</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">target.dispatchEvent(event);</span><br></pre></td></tr></table></figure><ul><li>模拟变动事件: 变动事件应用太少,详情查阅高程p409</li></ul><blockquote><p>浏览器中很少使用变动事件和 HTML 事件，因为使用它们会受到一些限制。</p></blockquote><h4 id="自定义DOM事件"><a href="#自定义DOM事件" class="headerlink" title="自定义DOM事件"></a>自定义DOM事件</h4><p>DOM3级还定义了“自定义事件”。自定义事件不是由DOM原生触发的，它的目的是让开发人员创建自己的事件。要创建新的自定义事件，可以调用<code>document.createEvent(&quot;CustomEvent&quot;)</code>。返回的<code>event</code>对象有一个名为<code>event.initCustomEvent()</code>的方法，接收如下4个参数。</p><ul><li><code>type（字符串）</code>：触发的事件类型，例如”keydown”。</li><li><code>bubbles（布尔值）</code>：表示事件是否应该冒泡。</li><li><code>cancelable（布尔值）</code>：表示事件是否可以取消。</li><li><code>detail（对象）</code>：任意值，保存在event对象的detail属性中。</li></ul><blockquote><p>可以像分派其他事件一样在 DOM 中分派创建的自定义事件对象。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>),</span><br><span class="line">  event;</span><br><span class="line"></span><br><span class="line">EventUtil.addHandler(div, <span class="string">"myevent"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"DIV: "</span> + event.detail);</span><br><span class="line">&#125;);</span><br><span class="line">EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"myevent"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  alert(<span class="string">"DOCUMENT: "</span> + event.detail);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.implementation.hasFeature(<span class="string">"CustomEvents"</span>, <span class="string">"3.0"</span>)) &#123;</span><br><span class="line">  event = <span class="built_in">document</span>.createEvent(<span class="string">"CustomEvent"</span>);</span><br><span class="line">  event.initCustomEvent(<span class="string">"myevent"</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="string">"Hello world!"</span>);</span><br><span class="line">  div.dispatchEvent(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个例子创建了一个冒泡事件<code>myevent</code>。而<code>event.detail</code>的值被设置成了一个简单的字符串，然后在<code>&lt;div&gt;</code>元素和<code>document</code>上侦听这个事件。因为<code>event.initCustomEvent()</code>方法已经指定这个事件应该冒泡，所以浏览器会负责将事件向上冒泡到<code>document</code>。<br>支持自定义DOM事件的浏览器有IE9+和Firefox6+。</p></blockquote><h3 id="IE中的事件模拟"><a href="#IE中的事件模拟" class="headerlink" title="IE中的事件模拟"></a>IE中的事件模拟</h3><p>在IE8及之前版本中模拟事件有类似但不一样的方式,这部分内容应用较少,详情查看高程p410</p><h2 id="EventUtil代码"><a href="#EventUtil代码" class="headerlink" title="EventUtil代码"></a>EventUtil代码</h2><blockquote><p>附上本章总结的EventUtil代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = &#123;</span><br><span class="line">  <span class="comment">// 事件绑定</span></span><br><span class="line">  addHandler: <span class="function"><span class="keyword">function</span> (<span class="params">element, type, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.addEventListener) &#123;</span><br><span class="line">      element.addEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) &#123;</span><br><span class="line">      element.attachEvent(<span class="string">"on"</span> + type, handler);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      element[<span class="string">"on"</span> + type] = handler;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 事件解绑</span></span><br><span class="line">  removeHandler: <span class="function"><span class="keyword">function</span> (<span class="params">element, type, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.removeEventListener) &#123;</span><br><span class="line">      element.removeEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.detachEvent) &#123;</span><br><span class="line">      element.detachEvent(<span class="string">"on"</span> + type, handler);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      element[<span class="string">"on"</span> + type] = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获得事件对象</span></span><br><span class="line">  getEvent: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> event ? event : <span class="built_in">window</span>.event;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取事件触发对象</span></span><br><span class="line">  getTarget: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> event.target || event.srcElement;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 阻止浏览器默认事件</span></span><br><span class="line">  preventDefault: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.preventDefault) &#123;</span><br><span class="line">      event.preventDefault();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      event.returnValue = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 取消事件流</span></span><br><span class="line">  stopPropagation: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.stopPropagation) &#123;</span><br><span class="line">      event.stopPropagation();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取鼠标键值</span></span><br><span class="line">  getButton: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.implementation.hasFeature(<span class="string">"MouseEvents"</span>, <span class="string">"2.0"</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> event.button;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">switch</span> (event.button) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 获得mouseover,mouseout的相关元素</span></span><br><span class="line">  getRelatedTarget: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.relatedTarget) &#123;</span><br><span class="line">      <span class="keyword">return</span> event.relatedTarget;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.toElement) &#123;</span><br><span class="line">      <span class="keyword">return</span> event.toElement;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.fromElement) &#123;</span><br><span class="line">      <span class="keyword">return</span> event.fromElement;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 得到鼠标滚动事件的event.wheelData的兼容代码</span></span><br><span class="line">  getWheelDelta: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.wheelDelta) &#123;</span><br><span class="line">      <span class="keyword">return</span> (client.engine.opera &amp;&amp; client.engine.opera &lt; <span class="number">9.5</span> ? -event.wheelDelta : event.wheelDelta);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> -event.detail * <span class="number">40</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 获得按键字符编码</span></span><br><span class="line">  getCharCode: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> event.charCode == <span class="string">"number"</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> event.charCode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> event.keyCode;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 剪贴板内容获取和赋值</span></span><br><span class="line">  getClipboardText: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> clipboardData = (event.clipboardData || <span class="built_in">window</span>.clipboardData);</span><br><span class="line">    <span class="keyword">return</span> clipboardData.getData(<span class="string">"text"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  setClipboardText: <span class="function"><span class="keyword">function</span> (<span class="params">event, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.clipboardData) &#123;</span><br><span class="line">      event.clipboardData.setData(<span class="string">"text/plain"</span>, value);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.clipboardData) &#123;</span><br><span class="line">      <span class="built_in">window</span>.clipboardData.setData(<span class="string">"text"</span>, value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;事件&quot;&gt;&lt;a href=&quot;#事件&quot; class=&quot;headerlink&quot; title=&quot;事件&quot;&gt;&lt;/a&gt;事件&lt;/h1&gt;&lt;p&gt;JavaScript 与 HTML 之间的交互是通过&lt;code&gt;事件&lt;/code&gt;实现的。&lt;code&gt;事件&lt;/code&gt;，就是文档或浏览器窗
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正反馈系列:《JavaScript高级程序设计》DOM2 &amp; DOM3</title>
    <link href="http://yoursite.com/2017/12/24/%E9%AB%98%E7%A8%8Bvol7-dom2-dom3/"/>
    <id>http://yoursite.com/2017/12/24/高程vol7-dom2-dom3/</id>
    <published>2017-12-24T01:13:42.000Z</published>
    <updated>2017-12-24T01:15:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DOM变化"><a href="#DOM变化" class="headerlink" title="DOM变化"></a>DOM变化</h2><h3 id="node-isSameNode-node-isEqualNode"><a href="#node-isSameNode-node-isEqualNode" class="headerlink" title="node.isSameNode,node.isEqualNode"></a>node.isSameNode,node.isEqualNode</h3><ul><li><code>node.isSameNode(node1) return boolean</code> node与node1引用的是同一个对象,返回true</li><li><code>node.isEqualNode(node1) return boolean</code> node与node1两个节点是相同的类型,具有相等的属性(nodeName,nodeValue灯灯),且它们的attribute与childNodes属性也相等(相同位置包含相同的值),返回true</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div1 = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>); </span><br><span class="line">div1.setAttribute(<span class="string">"class"</span>, <span class="string">"box"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> div2 = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>); </span><br><span class="line">div2.setAttribute(<span class="string">"class"</span>, <span class="string">"box"</span>);</span><br><span class="line"></span><br><span class="line">alert(div1.isSameNode(div1)); <span class="comment">//true </span></span><br><span class="line">alert(div1.isEqualNode(div2)); <span class="comment">//true </span></span><br><span class="line">alert(div1.isSameNode(div2)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="element-setUserData-element-getUserData"><a href="#element-setUserData-element-getUserData" class="headerlink" title="element.setUserData(),element.getUserData()"></a>element.setUserData(),element.getUserData()</h3><ul><li><p><code>element.setUserData(key,value,callback(operation,key,value,src,dest))</code></p><ul><li><code>operation</code> 表示操作类型的数值(1复制,2导入,3删除,4重命名)</li><li><code>key</code> 数据键</li><li><code>value</code> 数据值</li><li><code>src</code> 源节点,删除节点时,src == null</li><li><code>dest</code> 目标节点, 除复制节点时, dest == null</li></ul></li></ul><blockquote><p>此方法针对DOM节点添加额外数据引入了新方法. <code>setUserData()</code>会将数据指定给节点<br><code>callback</code>将在带有数据的节点被复制,删除,重命名,或引入一个文档时被调用,用callback事先决定在上述操作发生时如何处理用户数据</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">div.setUserData(<span class="string">"name"</span>, <span class="string">"Nicholas"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">operation, key, value, src, dest</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (operation == <span class="number">1</span>) &#123;</span><br><span class="line">    dest.setUserData(key, value, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newDiv = div.cloneNode(<span class="literal">true</span>);</span><br><span class="line">alert(newDiv.getUserData(<span class="string">"name"</span>)); <span class="comment">//"Nicholas"</span></span><br></pre></td></tr></table></figure><blockquote><p>这里，先创建了一个<code>&lt;div&gt;</code>元素，然后又为它添加了一些数据（用户数据）。在使用 cloneNode() 复制这个元素时，就会调用处理函数，从而将数据自动复制到了副本节点。结果在通过副本节点调用 getUserData()时，就会返回与原始节点中包含的相同的值。</p></blockquote><ul><li><code>element.getUserData(key)</code> 取得<code>setUserData</code>输入的对应<code>value</code>值</li></ul><h3 id="frame-contentDocument-frame-contentWindow-document"><a href="#frame-contentDocument-frame-contentWindow-document" class="headerlink" title="frame.contentDocument,frame.contentWindow.document"></a>frame.contentDocument,frame.contentWindow.document</h3><p>框架和内嵌框架分别用 <code>HTMLFrameElement</code> 和 <code>HTMLIFrameElement</code> 表示，它们在 DOM2 级中都有 了一个新属性，名叫 <code>contentDocument</code>。这个属性包含一个指针，指向表示框架内容的文档对象。</p><p>由于 <code>contentDocument</code> 属性是 Document 类型的实例，因此可以像使用<code>document对象</code>一样使用它，包括所有属性和方法</p><p>IE8之前不支持<code>contentDocument</code>,用<code>contentWindow.document</code>代替(所有浏览器都支持contentWindow属性)</p><blockquote><p>兼容代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">"myIframe"</span>); </span><br><span class="line"><span class="keyword">var</span> iframeDoc = iframe.contentDocument || iframe.contentWindow.document;</span><br></pre></td></tr></table></figure><h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><h3 id="element-style特性"><a href="#element-style特性" class="headerlink" title="element.style特性"></a>element.style特性</h3><p>既可以按照css名访问css特性,也可以调用下面的属性和方法</p><ul><li><code>cssText</code>：通过它能够访问到 style 特性中的 CSS 代码,重新赋值将重写元素行内css </li><li><code>length</code>：应用给元素的 CSS 属性的数量。 </li><li><code>parentRule</code>：表示 CSS 信息的 CSSRule 对象。本节后面将讨论 CSSRule 类型。 </li><li><code>getPropertyCSSValue(propertyName)</code>：返回包含给定属性值的 CSSValue 对象。此对象两个属性分别为<code>cssText</code>,该属性与<code>getPropertyValue()</code>方法返回值相同,<code>cssValueType</code>是一个数值常量,表示值类型:0表示继承的值,1表示基本的值,2表示值列表,3表示自定义的值, </li><li><code>getPropertyPriority(propertyName)</code>：如果给定的属性使用了!important 设置，则返回 “important”；否则，返回空字符串。 </li><li><code>getPropertyValue(propertyName)</code>：返回给定属性的字符串值。 </li><li><code>item(index)</code>：返回给定位置的 CSS 属性的名称,也可以用方括号语法<code>style[i]</code>。 </li><li><code>removeProperty(propertyName)</code>：从样式中删除给定属性。 </li><li><code>setProperty(propertyName,value,priority)</code>：将给定属性设置为相应的值，并加上优先 权标志（”important”或者一个空字符串）。</li></ul><blockquote><p>CSSStyleDeclaration实例,只包含行内style定义的信息,短划线转驼峰,<code>float</code>转<code>cssFloat</code>,键值对,值是css对应的字符串,可读可写</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myDiv = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置背景颜色 </span></span><br><span class="line">myDiv.style.backgroundColor = <span class="string">"red"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//改变大小 </span></span><br><span class="line">myDiv.style.width = <span class="string">"100px"</span>; </span><br><span class="line">myDiv.style.height = <span class="string">"200px"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定边框 </span></span><br><span class="line">myDiv.style.border = <span class="string">"1px solid black"</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可读</span></span><br><span class="line">alert(myDiv.style.backgroundColor); </span><br><span class="line">alert(myDiv.style.width); </span><br><span class="line">alert(myDiv.style.height);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> prop, value, i, len;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, len = myDiv.style.length; i &lt; len; i++) &#123;</span><br><span class="line">  prop = myDiv.style[i]; <span class="comment">//或者 myDiv.style.item(i)</span></span><br><span class="line">  value = myDiv.style.getPropertyValue(prop);</span><br><span class="line">  alert(prop + <span class="string">" : "</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> prop, value, i, len;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, len = myDiv.style.length; i &lt; len; i++) &#123;</span><br><span class="line">  prop = myDiv.style[i]; <span class="comment">//或者 myDiv.style.item(i)</span></span><br><span class="line">  value = myDiv.style.getPropertyCSSValue(prop);</span><br><span class="line">  alert(prop + <span class="string">" : "</span> + value.cssText + <span class="string">" ("</span> + value.cssValueType + <span class="string">")"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实际开发中,<code>getPropertyCSSValue()</code>使用得比 <code>getPropertyValue()</code>少得多</p></blockquote><h3 id="document-defaultView-getComputedStyle"><a href="#document-defaultView-getComputedStyle" class="headerlink" title="document.defaultView.getComputedStyle()"></a>document.defaultView.getComputedStyle()</h3><p><code>document.defaultView.getComputedStyle(element,null/:after/:before) return CSSStyleDeclaration</code></p><blockquote><p>该方法将各种引入的css经一并计算,返回一个element元素的css属性键值对.只读,若要设置应通过<code>element.style</code>属性设置.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myDiv = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line"><span class="keyword">var</span> computedStyle = <span class="built_in">document</span>.defaultView.getComputedStyle(myDiv, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">alert(computedStyle.backgroundColor); <span class="comment">// "red"</span></span><br><span class="line">alert(computedStyle.width); <span class="comment">// "100px"</span></span><br><span class="line">alert(computedStyle.height); <span class="comment">// "200px"</span></span><br><span class="line">alert(computedStyle.border); <span class="comment">//"1px solid black"</span></span><br></pre></td></tr></table></figure><blockquote><p>IE不支持<code>getComputedStyle</code>方法,有一个类似概念,每个具有<code>style</code>属性的元素还有一个<code>currentStyle</code>属性</p></blockquote><p><code>element.currentStyle</code>属性,是一个与<code>getComputedStyle</code>返回值一个套路的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myDiv = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line"><span class="keyword">var</span> computedStyle = myDiv.currentStyle;</span><br><span class="line">alert(computedStyle.backgroundColor); <span class="comment">//"red"</span></span><br><span class="line">alert(computedStyle.width); <span class="comment">//"100px"</span></span><br><span class="line">alert(computedStyle.height); <span class="comment">//"200px"</span></span><br><span class="line">alert(computedStyle.border); <span class="comment">//undefined</span></span><br><span class="line">alert(computedStyle.borderLeftWidth); <span class="comment">//"1px"</span></span><br></pre></td></tr></table></figure><h3 id="操作样式表"><a href="#操作样式表" class="headerlink" title="操作样式表"></a>操作样式表</h3><blockquote><p>js除了提供了上述元素的css读写api,还提供了api可以直接操作样式表<br>这部分知识简单而又凌乱,且在开发过程中应用不广泛, 这里只做结构性介绍, 详情查阅高程p317</p></blockquote><p><code>CssStyleSheet</code>类型表示样式表,继承自<code>StyleSheet</code>,应用于文档的样式表示通过<code>document.styleSheets</code>集合表示,这是一个伪数组,有<code>length</code>属性,可以使用<code>方括号</code>语法或<code>.item(index)</code>方法来访问每一项,每一项的值都是一个<code>CssStyleSheet</code>.</p><p><code>CssRule</code>对象表示样式表中的每条规则,最常见的<code>CssRule</code>类型就是<code>CssStyleRule</code>类型(其他规则还有@import,@font-face,@page,@charset等),代表<code>css样式语句</code>,<code>CssRule</code>中的<code>style</code>属性像<code>element.style</code>属性一样存放着css键值对.</p><p><code>sheet.insertRule()</code>方法可以创建<code>css规则</code>(css语句),<code>sheet.deleteRule()</code>方法可以删除<code>css规则</code>(css语句), <strong>上述说的都不推荐在开发中使用</strong>,请替换为第10章中的<code>动态加载样式表</code>技术.</p><h3 id="元素大小"><a href="#元素大小" class="headerlink" title="元素大小"></a>元素大小</h3><h3 id="offset-dimension"><a href="#offset-dimension" class="headerlink" title="offset dimension"></a>offset dimension</h3><ul><li><code>element.offsetParent</code>属性,是一个<strong>只读</strong>属性.<ol><li>返回一个指向最近的（closest，指包含层级上的最近）包含该元素的<code>定位元素</code>。</li><li>如果没有定位的元素，则 offsetParent 为最近的 <code>table</code>, <code>table cell</code> 或<code>根元素</code>（标准模式下为 <code>html</code>；quirks 模式下为 <code>body</code>）。当元素的 style.display 设置为 <code>none</code> 时，offsetParent 返回 <code>null</code></li></ol></li><li><p><code>element.offsetWidth</code>,<code>element.offsetHeight</code>,元素水平或垂直方向上占用空间的大笑,以像素计,包括元素的高度,(可见的)水平滚动条的高度,上下边框的高度</p></li><li><p><code>element.offsetLeft</code>,<code>element.offsetTop</code>, 元素边框外部至<code>offsetParent</code>属性指向的元素<code>内边框</code>间的距离</p></li></ul><p><img src="https://i.loli.net/2017/12/24/5a3eff151e43d.jpg" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 得到元素在页面上的左偏移量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElementLeft</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> actualLeft = element.offsetLeft;</span><br><span class="line">  <span class="keyword">var</span> current = element.offsetParent;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (current !== <span class="literal">null</span>) &#123;</span><br><span class="line">    actualLeft += current.offsetLeft;</span><br><span class="line">    current = current.offsetParent;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> actualLeft;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 得到元素在页面上的上偏移量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElementTop</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> actualTop = element.offsetTop;</span><br><span class="line">  <span class="keyword">var</span> current = element.offsetParent;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (current !== <span class="literal">null</span>) &#123;</span><br><span class="line">    actualTop += current.offsetTop;</span><br><span class="line">    current = current.offsetParent;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> actualTop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>些偏移量属性都是只读的，而且每次访问它们都需要重新计算。因此，应该尽量避免重复访问这些属性；如果需要重复使用其中某些属性的值，可以将它们保存在局部变量中，以提高性能。</p></blockquote><h3 id="client-dimension"><a href="#client-dimension" class="headerlink" title="client dimension"></a>client dimension</h3><ul><li><code>element.clientWidth</code>,<code>element.clientHeight</code>: 元素的内边距+内容所占尺寸(不带边框,不带滚动条的大小)</li></ul><p><img src="https://i.loli.net/2017/12/24/5a3eff15ac240.jpg" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回浏览器视口大小(Viewport:html或body的大小)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getViewport</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.compatMode == <span class="string">"BackCompat"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      width: <span class="built_in">document</span>.body.clientWidth,</span><br><span class="line">      height: <span class="built_in">document</span>.body.clientHeight</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      width: <span class="built_in">document</span>.documentElement.clientWidth,</span><br><span class="line">      height: <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>客户区大小只读,每次访问要重新计算</p></blockquote><h3 id="scroll-dimention"><a href="#scroll-dimention" class="headerlink" title="scroll dimention"></a>scroll dimention</h3><blockquote><p>有些元素(例如html元素)即使没有执行任何代码,也嫩自动的添加滚动条,但另外一些元素,则需要通过css overflow属性进行设置才能滚动</p></blockquote><ul><li><code>element.scrollHeight</code>, 在没有滚动条的情况下,元素内容的实际高度</li><li><code>element.scrollWidth</code>, 在没有滚动条的情况下,元素内容的实际宽度</li><li><code>element.scrollLeft</code>, 被隐藏在内容区域左侧的像素数,通过设置此属性可改变滚动位置</li><li><code>element.scrollTop</code>, 被隐藏在内容区域上方的像素数,通过设置此属性可改变滚动位置</li></ul><p><img src="https://i.loli.net/2017/12/24/5a3eff1601793.jpg" alt=""><br><img src="media/15139250934130/15139549207969.jpg" alt=""></p><blockquote><p><code>&lt;html&gt;</code>元素是在Web浏览器的视口中滚动的元素(IE6之前运行在混杂模式下是<code>&lt;body&gt;</code>元素),因此,带有垂直滚动条的页面总高度是<code>document.documentElement.scrollHeight</code><br>对于不包含滚动条的视口或页面而言,<code>scrollWidth,scrollHeight</code>与<code>clientWidth,clientHeight</code>之间的关系十分不清晰,基于document.documentElement查看这些属性会发生不同浏览器的不一致性</p></blockquote><ul><li>Firefox 中这两组属性始终都是相等的，但大小代表的是文档内容区域的实际尺寸，而非视口的尺寸。 </li><li>Opera、Safari 3.1 及更高版本、Chrome 中的这两组属性是有差别的，其中 scrollWidth 和 scrollHeight 等于视口大小，而 clientWidth 和 clientHeight 等于文档内容区域的大小。</li><li>IE（在标准模式）中的这两组属性不相等，其中 scrollWidth 和 scrollHeight 等于文档内容区域的大小，而 clientWidth 和 clientHeight 等于视口大小。</li></ul><blockquote><p>所以,在确定文档的总高度时（包括基于视口的最小高度时），必须取得 scrollWidth/clientWidth 和scrollHeight/clientHeight 中的最大值，才能保证在跨浏览器的环境下得到精确的结果。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文档总高度</span></span><br><span class="line"><span class="keyword">var</span> docHeight = <span class="built_in">Math</span>.max(<span class="built_in">document</span>.documentElement.scrollHeight, <span class="built_in">document</span>.documentElement.clientHeight);</span><br><span class="line"><span class="comment">// 文档总宽度</span></span><br><span class="line"><span class="keyword">var</span> docWidth = <span class="built_in">Math</span>.max(<span class="built_in">document</span>.documentElement.scrollWidth, <span class="built_in">document</span>.documentElement.clientWidth);</span><br><span class="line"><span class="comment">// 如果是ie,上面代码需要用document.body代替document.documentElement</span></span><br></pre></td></tr></table></figure><h3 id="element-getBoundingClientRect"><a href="#element-getBoundingClientRect" class="headerlink" title="element.getBoundingClientRect()"></a>element.getBoundingClientRect()</h3><p><code>element.getBoundingClientRect() return rectObj</code></p><blockquote><p>rectObj包含4个属性, <code>left</code>,<code>top</code>,<code>right</code>,<code>bottom</code>,分别表示了下图的距离</p></blockquote><p><img src="https://i.loli.net/2017/12/24/5a3eff15e39d5.png" alt="rect"></p><blockquote><p>IE8以及更早版本中,位于(0,0)处元素的位置会返回(2,2),需要做浏览器兼容,当浏览器是IE时,要从测量值里<code>-2</code>,再减去视口(html标签)的<code>scrollTop</code>,防止调用这个函数时窗口被滚动了.</p><p>完整兼容代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElementLeft</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> actualLeft = element.offsetLeft;</span><br><span class="line">  <span class="keyword">var</span> current = element.offsetParent;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (current !== <span class="literal">null</span>) &#123;</span><br><span class="line">    actualLeft += current.offsetLeft;</span><br><span class="line">    current = current.offsetParent;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> actualLeft;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElementTop</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> actualTop = element.offsetTop;</span><br><span class="line">  <span class="keyword">var</span> current = element.offsetParent;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (current !== <span class="literal">null</span>) &#123;</span><br><span class="line">    actualTop += current.offsetTop;</span><br><span class="line">    current = current.offsetParent;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> actualTop;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getBoundingClientRect兼容代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBoundingClientRect</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line">  <span class="keyword">var</span> scrollLeft = <span class="built_in">document</span>.documentElement.scrollLeft;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (element.getBoundingClientRect) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">arguments</span>.callee.offset != <span class="string">"number"</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> temp = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">      temp.style.cssText = <span class="string">"position:absolute;left:0;top:0;"</span>;</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(temp);</span><br><span class="line">      <span class="built_in">arguments</span>.callee.offset = -temp.getBoundingClientRect().top - scrollTop;</span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(temp);</span><br><span class="line">      temp = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> rect = element.getBoundingClientRect();</span><br><span class="line">    <span class="keyword">var</span> offset = <span class="built_in">arguments</span>.callee.offset;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      left: rect.left + offset,</span><br><span class="line">      right: rect.right + offset,</span><br><span class="line">      top: rect.top + offset,</span><br><span class="line">      bottom: rect.bottom + offset</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> actualLeft = getElementLeft(element);</span><br><span class="line">    <span class="keyword">var</span> actualTop = getElementTop(element);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      left: actualLeft - scrollLeft,</span><br><span class="line">      right: actualLeft + element.offsetWidth - scrollLeft,</span><br><span class="line">      top: actualTop - scrollTop,</span><br><span class="line">      bottom: actualTop + element.offsetHeight - scrollTop</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><blockquote><p>下面两个遍历方法不用深入,因为ES6的Iterator方法已经很成熟了,若要深入详情查询高程p328</p></blockquote><h3 id="NodeIterator类型"><a href="#NodeIterator类型" class="headerlink" title="NodeIterator类型"></a>NodeIterator类型</h3><p><code>document.createNodeIterator(root,whatToshow,filter,entityReferenceExpansion) return nodeIterator</code></p><ul><li><code>root</code>,搜索起始节点</li><li><code>whatToShow</code> 可以用按位或操作符来组合多个选项,比如<code>NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_TEXT</code><ul><li><code>NodeFilter.SHOW_ALL</code>：显示所有类型的节点。</li><li><code>NodeFilter.SHOW_ELEMENT</code>：显示元素节点。</li><li><code>NodeFilter.SHOW_TEXT</code>：显示文本节点。</li><li><code>NodeFilter.SHOW_COMMENT</code>：显示注释节点。</li><li><code>NodeFilter.SHOW_DOCUMENT_TYPE</code>：显示文档类型节点。</li></ul></li><li><code>filter</code> 是一个只有一个方法<code>acceptNode()</code>的对象,或一个类似<code>acceptNode()</code>的匿名函数,或 <code>null</code><ul><li><code>acceptNode(node)</code>,若返回需要的节点,该方法返回<code>NodeFilter.FILTER_ACCEPT</code>,否则返回<code>NodeFilter.FILTER_SKIP</code></li></ul></li><li><code>entityReferExpansion</code>, false即可,这个参数在html页面中没有用</li><li><code>nodeIterator</code>,主要有两个方法,用于前进一步或后退一步<ul><li><code>nodeIterator.nextNode()</code> 前进一步,前进到方向上最后一个节点返回<code>null</code></li><li><code>nodeIterator.previousNode()</code> 后退一步,后退到方向上最后一个节点返回<code>null</code></li></ul></li></ul><blockquote><p>两个例子</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历div中所有元素</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span><br><span class="line"><span class="keyword">var</span> iterator = <span class="built_in">document</span>.createNodeIterator(div, NodeFilter.SHOW_ELEMENT, <span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">var</span> node = iterator.nextNode();</span><br><span class="line"><span class="keyword">while</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">  alert(node.tagName); <span class="comment">//输出标签名</span></span><br><span class="line">  node = iterator.nextNode();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span><br><span class="line"><span class="keyword">var</span> filter = <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> node.tagName.toLowerCase() == <span class="string">"li"</span> ?</span><br><span class="line">    NodeFilter.FILTER_ACCEPT :</span><br><span class="line">    NodeFilter.FILTER_SKIP;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iterator = <span class="built_in">document</span>.createNodeIterator(div, NodeFilter.SHOW_ELEMENT, filter, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">var</span> node = iterator.nextNode();</span><br><span class="line"><span class="keyword">while</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">  alert(node.tagName);<span class="comment">//输出标签名</span></span><br><span class="line">  node = iterator.nextNode();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TreeWalker类型"><a href="#TreeWalker类型" class="headerlink" title="TreeWalker类型"></a>TreeWalker类型</h3><blockquote><p><code>NodeIterator</code>更高级的版本,返回的实例除了<code>nextNode()</code>和<code>previousNode()</code>外,还提供了不同方向上遍历DOM结构的方法</p></blockquote><p><code>document.createTreeWalker(root,whatToshow,filter,entityReferenceExpansion) return treeWalker</code>,四个参数与<code>NodeIterator</code>中相同,返回值<code>treeWalker</code>还扩展下面的方法</p><ul><li><code>parentNode()</code>：遍历到当前节点的父节点； </li><li><code>firstChild()</code>：遍历到当前节点的第一个子节点； </li><li><code>lastChild()</code>：遍历到当前节点的最后一个子节点； </li><li><code>nextSibling()</code>：遍历到当前节点的下一个同辈节点； </li><li><code>previousSibling()</code>：遍历到当前节点的上一个同辈节点。</li></ul><blockquote><p><code>filter</code>与<code>NodeIterator</code>有些小差异,增加了返回值<code>NodeFilter.FILTER_REJECT</code>,返回这个值代表跳过整个相应节点及该节点整个子树,而<code>NodeFilter.FILTER_SKIP</code>则只跳过相应节点<br>返回对象<code>treeWalker</code>还有一个属性<code>currentNode</code>,表示任何遍历方法在上一次便利中返回的节点,通过这个属性可以修改遍历继续进行的起点,如下例</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* &lt;div id="div1"&gt;</span></span><br><span class="line"><span class="comment">    &lt;p&gt;</span></span><br><span class="line"><span class="comment">      &lt;b&gt;Hello&lt;/b&gt; world!&lt;/p&gt;</span></span><br><span class="line"><span class="comment">    &lt;ul&gt;</span></span><br><span class="line"><span class="comment">      &lt;li&gt;List item 1&lt;/li&gt;</span></span><br><span class="line"><span class="comment">      &lt;li&gt;List item 2&lt;/li&gt;</span></span><br><span class="line"><span class="comment">      &lt;li&gt;List item 3&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">&lt;/div&gt; */</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span><br><span class="line"><span class="keyword">var</span> walker = <span class="built_in">document</span>.createTreeWalker(div, NodeFilter.SHOW_ELEMENT, <span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">walker.firstChild();<span class="comment">//转到&lt;p&gt;</span></span><br><span class="line">walker.nextSibling(); <span class="comment">//转到&lt;ul&gt;</span></span><br><span class="line"><span class="keyword">var</span> node = walker.firstChild();</span><br><span class="line"><span class="keyword">while</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="comment">//转到第一个&lt;li&gt;</span></span><br><span class="line">  alert(node.tagName);</span><br><span class="line">  node = walker.nextSibling();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> node = walker.nextNode();</span><br><span class="line">alert(node === walker.currentNode);<span class="comment">//true </span></span><br><span class="line">walker.currentNode = <span class="built_in">document</span>.body;<span class="comment">//修改起点</span></span><br></pre></td></tr></table></figure><blockquote><p>IE不支持<code>TreeWalker</code></p></blockquote><h2 id="范围-富文本编辑器基础"><a href="#范围-富文本编辑器基础" class="headerlink" title="范围(富文本编辑器基础)"></a>范围(富文本编辑器基础)</h2><h3 id="DOM中的范围"><a href="#DOM中的范围" class="headerlink" title="DOM中的范围"></a>DOM中的范围</h3><p>DOM2 级在 Document 类型中定义了 <code>createRange()</code>方法。在兼容 DOM 的浏览器中，这个方法属于 <code>document对象</code></p><h3 id="document-createRange"><a href="#document-createRange" class="headerlink" title="document.createRange()"></a>document.createRange()</h3><p><code>document.createRange() return range</code> ,返回的<code>range</code>对象代表一个DOM选中范围,有如下属性</p><ul><li><code>startContainer</code>：包含范围起点的节点（即选区中第一个节点的父节点）。 </li><li><code>startOffset</code>：范围在 startContainer 中起点的偏移量。如果 startContainer 是文本节点、注释节点或 CDATA 节点，那么 startOffset 就是范围起点之前跳过的字符数量。否则，startOffset 就是范围中第一个子节点的索引。 </li><li><code>endContainer</code>：包含范围终点的节点（即选区中最后一个节点的父节点）。 </li><li><code>endOffset</code>：范围在 endContainer 中终点的偏移量（与 startOffset 遵循相同的取值规则)。 </li><li><code>commonAncestorContainer</code>：startContainer 和 endContainer 共同的祖先节点在文档树 中位置最深的那个。</li></ul><h3 id="range对象-基础方法"><a href="#range对象-基础方法" class="headerlink" title="range对象,基础方法"></a>range对象,基础方法</h3><ul><li><code>range.selectNode(node)</code>,选择整个节点，包括其子节点；</li><li><code>range.selectNodeContents(node)</code>,只选择节点的子节点</li></ul><blockquote><p>下面几个方法用的比较少</p></blockquote><ul><li><code>setStartBefore(refNode)</code>：将范围的起点设置在refNode之前，因此refNode也就是范围选区中的第一个子节点。同时会将startContainer属性设置为refNode.parentNode，将startOffset属性设置为refNode在其父节点的childNodes集合中的索引。</li><li><code>setStartAfter(refNode)</code>：将范围的起点设置在refNode之后，因此refNode也就不在范围之内了，其下一个同辈节点才是范围选区中的第一个子节点。同时会将startContainer属性设置为refNode.parentNode，将startOffset属性设置为refNode在其父节点的childNodes集合中的索引加1。</li><li><code>setEndBefore(refNode)</code>：将范围的终点设置在refNode之前，因此refNode也就不在范围之内了，其上一个同辈节点才是范围选区中的最后一个子节点。同时会将endContainer属性设置为refNode.parentNode，将endOffset属性设置为refNode在其父节点的childNodes集合中的索引。</li><li><code>setEndAfter(refNode)</code>：将范围的终点设置在refNode之后，因此refNode也就是范围选区中的最后一个子节点。同时会将endContainer属性设置为refNode.parentNode，将endOffset属性设置为refNode在其父节点的childNodes集合中的索引加1。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 示例通用HTML代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">b</span>&gt;</span> world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> range1 = <span class="built_in">document</span>.createRange();</span><br><span class="line">range2 = <span class="built_in">document</span>.createRange();</span><br><span class="line">p1 = <span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>);</span><br><span class="line">range1.selectNode(p1);</span><br><span class="line">range2.selectNodeContents(p1);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/12/24/5a3eff15e74db.jpg" alt=""></p><blockquote><p>在调用selectNode()时，startContainer、endContainer和commonAncestorContainer都等于传入节点的父节点，也就是这个例子中的document.body。而startOffset属性等于给定节点在其父节点的childNodes集合中的索引（在这个例子中是1——因为兼容DOM的浏览器将空格算作一个文本节点），endOffset等于startOffset加1（因为只选择了一个节点）。<br>在调用selectNodeContents()时，startContainer、endContainer和commonAncestorContainer等于传入的节点，即这个例子中的</p><p>元素。而startOffset属性始终等于0，因为范围从给定节点的第一个子节点开始。最后，endOffset等于子节点的数量（node.childNodes.length），在这个例子中是2。</p></blockquote><h3 id="range-setStart-range-setEnd-实现DOM复杂选择"><a href="#range-setStart-range-setEnd-实现DOM复杂选择" class="headerlink" title="range.setStart(),range.setEnd()实现DOM复杂选择"></a>range.setStart(),range.setEnd()实现DOM复杂选择</h3><ul><li><code>range.setStart(node,offset)</code>,<code>range.setEnd(node,offset)</code></li></ul><blockquote><p>对<code>setStart()</code>来说，参照节点会变成<code>startContainer</code>，而偏移量值会变成<code>startOffset</code>。对于<code>setEnd()</code>来说，参照节点会变成<code>endContainer</code>，而偏移量值会变成<code>endOffset</code>。<br>使用这两个方法来模仿 <code>selectNode()</code>和 <code>selectNodeContents()</code>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> range1 = <span class="built_in">document</span>.createRange();</span><br><span class="line">range2 = <span class="built_in">document</span>.createRange();</span><br><span class="line">p1 = <span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>);</span><br><span class="line">p1Index = <span class="number">-1</span>;</span><br><span class="line">i, len;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, len = p1.parentNode.childNodes.length; i &lt; len; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (p1.parentNode.childNodes[i] == p1) &#123;</span><br><span class="line">    p1Index = i;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">range1.setStart(p1.parentNode, p1Index);</span><br><span class="line">range1.setEnd(p1.parentNode, p1Index + <span class="number">1</span>);</span><br><span class="line">range2.setStart(p1, <span class="number">0</span>);</span><br><span class="line">range2.setEnd(p1, p1.childNodes.length);</span><br></pre></td></tr></table></figure><blockquote><p>模仿 selectNode()和 selectNodeContents()并不是 setStart() 和 setEnd()的主要用途，它们更胜一筹的地方在于能够选择节点的一部分。<br>假设你只想选择前面 HTML 示例代码中从”Hello”的”llo”到”world!”的”o”</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>);</span><br><span class="line">helloNode = p1.firstChild.firstChild;</span><br><span class="line">worldNode = p1.lastChild;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> range = <span class="built_in">document</span>.createRange();</span><br><span class="line">range.setStart(helloNode, <span class="number">2</span>);</span><br><span class="line">range.setEnd(worldNode, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/12/24/5a3eff15d4607.jpg" alt=""></p><h3 id="操作DOM范围中的内容"><a href="#操作DOM范围中的内容" class="headerlink" title="操作DOM范围中的内容"></a>操作DOM范围中的内容</h3><blockquote><p>在创建范围时，内部会为这个范围创建一个文档片段，范围所属的全部节点都在这个文档片段中。文档片段中范围内容的格式必须正确有效。在前面的例子中，创建的选区分别开始和结束于两个文本节点的内部(标签不闭合)，因此不能算是格式良好的DOM结构，也就无法通过DOM来表示。范围知道自身缺少哪些开标签和闭标签，它能够重新构建有效的DOM结构</p><p>范围经过计算知道选区中缺少一个开始的<code>&lt;b&gt;</code>标签，因此就会在后台动态加 入一个该标签，同时还会在前面加入一个表示结束的<code>&lt;/b&gt;</code>标签以结束”He”,文本节点”world!”也被拆分为两个文本节点，一个包含”wo”，另一个包含”rld!”<br>创建了范围之后，就可以使用方法对范围的内容进行操作了（表示范围的内部文档片段中的所有节点，都只是指向文档中相应节点的指针）</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 修改后的dom如下所示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>He<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>llo<span class="tag">&lt;/<span class="name">b</span>&gt;</span> world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/12/24/5a3eff15be6c8.jpg" alt=""></p><h3 id="range-deleteContents"><a href="#range-deleteContents" class="headerlink" title="range.deleteContents()"></a>range.deleteContents()</h3><p><code>range.deleteContents()</code> 删除文档范围中包含的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>);</span><br><span class="line">helloNode = p1.firstChild.firstChild;</span><br><span class="line">worldNode = p1.lastChild;</span><br><span class="line">range = <span class="built_in">document</span>.createRange();</span><br><span class="line">range.setStart(helloNode, <span class="number">2</span>);</span><br><span class="line">range.setEnd(worldNode, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">range.deleteContents();</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- deleteContents()执行前 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>He<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>llo<span class="tag">&lt;/<span class="name">b</span>&gt;</span> world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- deleteContents()执行后 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>He<span class="tag">&lt;/<span class="name">b</span>&gt;</span>rld!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>范围选区在修改底层 DOM 结构时能够保证格式良好，因此即使内容被删除了，最终的 DOM 结构依旧是格式良好的</p></blockquote><h3 id="range-extractContents"><a href="#range-extractContents" class="headerlink" title="range.extractContents()"></a>range.extractContents()</h3><p><code>range.extractContents() return rangeFragment</code></p><blockquote><p>与<code>range.deleteContents()</code>的区别是<code>range.extractContents()</code>会返回范围的文档片段,利用这个返回值可以实现再插入</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>);</span><br><span class="line"></span><br><span class="line">helloNode = p1.firstChild.firstChild;</span><br><span class="line">worldNode = p1.lastChild;</span><br><span class="line">range = <span class="built_in">document</span>.createRange();</span><br><span class="line"></span><br><span class="line">range.setStart(helloNode, <span class="number">2</span>);</span><br><span class="line">range.setEnd(worldNode, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fragment = range.extractContents();</span><br><span class="line">p1.parentNode.appendChild(fragment);</span><br></pre></td></tr></table></figure><blockquote><p>我们将提取出来的文档片段添加到了文档<body>元素的末尾。（记住，在将文档片段传入 appendChild()方法中时，添加到文档中的只是片段的子节点，而非片段本身</body></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- p1.parentNode.appendChild(range.extarctContents())后 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>He<span class="tag">&lt;/<span class="name">b</span>&gt;</span>rld!<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;<span class="name">b</span>&gt;</span>llo<span class="tag">&lt;/<span class="name">b</span>&gt;</span> wo</span><br></pre></td></tr></table></figure><h3 id="range-cloneContents"><a href="#range-cloneContents" class="headerlink" title="range.cloneContents()"></a>range.cloneContents()</h3><p><code>range.cloneConents() return rangeFragment</code> </p><blockquote><p> <code>range.cloneContents()</code>创建范围对象的一个副本，然后在文档的其他地方插入该副本。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>),</span><br><span class="line">  helloNode = p1.firstChild.firstChild,</span><br><span class="line">  worldNode = p1.lastChild,</span><br><span class="line">  range = <span class="built_in">document</span>.createRange();</span><br><span class="line"></span><br><span class="line">range.setStart(helloNode, <span class="number">2</span>);</span><br><span class="line">range.setEnd(worldNode, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fragment = range.cloneContents();</span><br><span class="line">p1.parentNode.appendChild(fragment);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- p1.parentNode.appendChild(range.cloneContents())后 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">b</span>&gt;</span> world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;<span class="name">b</span>&gt;</span>llo<span class="tag">&lt;/<span class="name">b</span>&gt;</span> wo</span><br></pre></td></tr></table></figure><blockquote><p>在调用上面介绍的方法之前，拆分的节点并不会产生格式良好的文档片段(只创建<code>range</code>后,html结构不会改变,调用改变dom的这三个方法后才会变)。换句话说，原始的 HTML 在 DOM 被修改之前会始终保持不变</p></blockquote><h3 id="插入DOM范围中的内容"><a href="#插入DOM范围中的内容" class="headerlink" title="插入DOM范围中的内容"></a>插入DOM范围中的内容</h3><h3 id="range-insertNode"><a href="#range-insertNode" class="headerlink" title="range.insertNode()"></a>range.insertNode()</h3><p><code>range.insertNode(node)</code> 向范围选区的开始出插入一个节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要插入的html &lt;span style="color: red"&gt;Inserted text&lt;/span&gt;</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>),</span><br><span class="line">helloNode = p1.firstChild.firstChild,</span><br><span class="line">worldNode = p1.lastChild,</span><br><span class="line">range = <span class="built_in">document</span>.createRange();</span><br><span class="line"></span><br><span class="line">range.setStart(helloNode, <span class="number">2</span>);</span><br><span class="line">range.setEnd(worldNode, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> span = <span class="built_in">document</span>.createElement(<span class="string">"span"</span>);</span><br><span class="line">span.style.color = <span class="string">"red"</span>;</span><br><span class="line">span.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">"Inserted text"</span>));</span><br><span class="line">range.insertNode(span);</span><br><span class="line"><span class="comment">// &lt;p id="p1"&gt;&lt;b&gt;He&lt;span style="color: red"&gt;Inserted text&lt;/span&gt;llo&lt;/b&gt; world&lt;/p&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>&lt;span&gt;</code>正好被插入到了”Hello”中的”llo”前面，而该位置就是范围选区的开始位置。还要注意的是，由于这里没有使用上一节介绍的方法，结果原始的 HTML 并没有添加或删除<code>&lt;b&gt;</code>元素</p></blockquote><h3 id="range-surroundContents"><a href="#range-surroundContents" class="headerlink" title="range.surroundContents()"></a>range.surroundContents()</h3><p><code>range.surroundContents(node)</code> <code>node</code>即环绕范围内容的节点,在环绕范围插入内容时， 后台会执行下列步骤</p><ol><li>提取出范围中的内容（类似执行 <code>range.extractContent()</code>） </li><li>将给定节点插入到文档中原来范围所在的位置上</li><li>将文档片段的内容添加到给定节点中</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>);</span><br><span class="line"></span><br><span class="line">helloNode = p1.firstChild.firstChild;</span><br><span class="line">worldNode = p1.lastChild;</span><br><span class="line">range = <span class="built_in">document</span>.createRange();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为了插入&lt;span&gt;，范围必须包含整个 DOM 选区（不能仅仅包含选中的 DOM 节点）</span></span><br><span class="line">range.selectNode(helloNode);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> span = <span class="built_in">document</span>.createElement(<span class="string">"span"</span>);</span><br><span class="line">span.style.backgroundColor = <span class="string">"yellow"</span>;</span><br><span class="line">range.surroundContents(span);</span><br><span class="line"><span class="comment">// &lt;p&gt;&lt;b&gt;&lt;span style="background-color:yellow"&gt;Hello&lt;/span&gt;&lt;/b&gt; world!&lt;/p&gt;</span></span><br></pre></td></tr></table></figure><h3 id="折叠DOM范围"><a href="#折叠DOM范围" class="headerlink" title="折叠DOM范围"></a>折叠DOM范围</h3><p><code>折叠范围</code>，就是指范围中未选择文档的任何部分,其位置会落在文档中的两个部分之间，可能是范围选区的开始位置，也可能是结束位置</p><h3 id="range-collapse"><a href="#range-collapse" class="headerlink" title="range.collapse()"></a>range.collapse()</h3><p><code>range.collapse(boolean) return boolean</code>,<code>boolean</code>为ture时,折叠到起点,<code>boolean</code>为false时,折叠刀终点,并在操作后返回对应的boolean值.</p><p><img src="https://i.loli.net/2017/12/24/5a3eff16429ca.jpg" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">range.collapse(<span class="literal">true</span>); <span class="comment">//折叠到起点 </span></span><br><span class="line">alert(range.collapsed); <span class="comment">//输出 true</span></span><br></pre></td></tr></table></figure><blockquote><p>检测某个范围是否处于折叠状态，可以帮我们确定范围中的两个节点是否紧密相邻。例如，对于下面的 HTML 代码</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span>Paragraph 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p2"</span>&gt;</span>Paragraph 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>),</span><br><span class="line">  p2 = <span class="built_in">document</span>.getElementById(<span class="string">"p2"</span>),</span><br><span class="line">  range = <span class="built_in">document</span>.createRange();</span><br><span class="line">range.setStartAfter(p1);</span><br><span class="line">range.setEndBefore(p2);</span><br><span class="line">alert(range.collapsed); <span class="comment">//输出 true</span></span><br></pre></td></tr></table></figure><h3 id="range-compareBoundaryPoints-比较DOM范围"><a href="#range-compareBoundaryPoints-比较DOM范围" class="headerlink" title="range.compareBoundaryPoints() 比较DOM范围"></a>range.compareBoundaryPoints() 比较DOM范围</h3><p><code>range.compareBoundaryPoting(value,range1) return -1/0/1</code></p><blockquote><p>确定这些范围是否有公共的边界（起点或终点）。这个方法接受两个参数：表示比较方式的常量值<code>value</code>和要比较的范围,常量<code>value</code>可取值如下</p></blockquote><ul><li><code>Range.START_TO_START(0)</code>：比较第一个范围和第二个范围的起点；</li><li><code>Range.START_TO_END(1)</code>：比较第一个范围的起点和第二个范围的终点；</li><li><code>Range.END_TO_END(2)</code>：比较第一个范围和第二个范围的终点；</li><li><code>Range.END_TO_START(3)</code>：比较第一个范围的终点和第一个范围的起点。</li></ul><blockquote><p><code>compareBoundaryPoints()</code>方法可能的返回值如下：如果第一个范围中的点位于第二个范围中的点之前，返回<code>-1</code>；如果两个点相等，返回 <code>0</code>；如果第一个范围中的点位于第二个范围中的点之后，返回<code>1</code>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> range1 = <span class="built_in">document</span>.createRange();</span><br><span class="line"><span class="keyword">var</span> range2 = <span class="built_in">document</span>.createRange();</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>);</span><br><span class="line"></span><br><span class="line">range1.selectNodeContents(p1);</span><br><span class="line">range2.selectNodeContents(p1);</span><br><span class="line">range2.setEndBefore(p1.lastChild);</span><br><span class="line"></span><br><span class="line">alert(range1.compareBoundaryPoints(Range.START_TO_START, range2));<span class="comment">//0</span></span><br><span class="line">alert(range1.compareBoundaryPoints(Range.END_TO_END, range2));<span class="comment">//1</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/12/24/5a3eff1672113.jpg" alt=""></p><h3 id="range-cloneRange-复制DOM范围"><a href="#range-cloneRange-复制DOM范围" class="headerlink" title="range.cloneRange() 复制DOM范围"></a>range.cloneRange() 复制DOM范围</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">range.cloneRange() <span class="keyword">return</span> newRange;</span><br></pre></td></tr></table></figure><blockquote><p>新创建的范围与原来的范围包含相同的属性,而修改它的端点不会影响原来的范围</p></blockquote><h3 id="range-detach-清理DOM范围"><a href="#range-detach-清理DOM范围" class="headerlink" title="range.detach() 清理DOM范围"></a>range.detach() 清理DOM范围</h3><p><code>range.detach()</code> 接触对<code>range</code>的引用,从创建范围的文档中分离,进行回收.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">range.detach() <span class="comment">//从文档中分离</span></span><br><span class="line">range = <span class="literal">null</span> <span class="comment">//不主动调用,垃圾机制也会回收内存</span></span><br></pre></td></tr></table></figure><h3 id="IE8及更早版本中的范围"><a href="#IE8及更早版本中的范围" class="headerlink" title="IE8及更早版本中的范围"></a>IE8及更早版本中的范围</h3><blockquote><p>此部分内容由于IE8及之前更早版本的IE浏览器的逐步淘汰有些过时,毕竟IE9之后的版本都支持DOM范围,需要用到时再去翻阅高程p340</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;DOM变化&quot;&gt;&lt;a href=&quot;#DOM变化&quot; class=&quot;headerlink&quot; title=&quot;DOM变化&quot;&gt;&lt;/a&gt;DOM变化&lt;/h2&gt;&lt;h3 id=&quot;node-isSameNode-node-isEqualNode&quot;&gt;&lt;a href=&quot;#node-isSa
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>javascript 与 &quot;发布/订阅(观察者)模式&quot;</title>
    <link href="http://yoursite.com/2017/12/23/javascript-%E4%B8%8E-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/12/23/javascript-与-发布订阅设计模式/</id>
    <published>2017-12-23T13:05:44.000Z</published>
    <updated>2017-12-23T13:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="发布-订阅-观察者-模式"><a href="#发布-订阅-观察者-模式" class="headerlink" title="发布/订阅(观察者)模式"></a>发布/订阅(观察者)模式</h3><p><code>发布/订阅模式</code>又称<code>观察者模式</code>,是一种<code>设计模式</code>, 它定义了对象间的一种一对多的关系，让多个观察者对象同时监听某一个主题对象，当一个对象发生改变时，所有依赖于它的对象都将得到通知。</p><p>js中<code>事件</code>的实现方式是<code>发布/订阅</code>模式, <code>redux</code>的实现原理也依赖了<code>发布/订阅</code>模式. </p><p>其实伪代码看过不少次了, 决定自己动手写一下. 此篇blog作为学习的<code>正反馈</code>. </p><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><blockquote><p><code>sneakersMerchant</code>卖<code>篮球鞋</code>,<br><code>chotee</code>觉得可以,收藏了<code>sneakersMerchant</code>.<br><code>wang</code>觉得ok,也收藏了<code>sneakersMerchant</code>.<br><code>sneakersMerchant</code>一上新(<code>trigger</code>),就会通知所有收藏的用户们(<code>listener</code>)</p></blockquote><p>数据模型抽象如下</p><ul><li><code>发布者</code>: <code>商家</code>,Obj</li><li><code>listener</code>: <code>收藏的用户们</code>,Array</li></ul><h3 id="实现基本功能"><a href="#实现基本功能" class="headerlink" title="实现基本功能"></a>实现基本功能</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sneakersMerchant = &#123; <span class="comment">//publisher</span></span><br><span class="line">  listener: [], <span class="comment">//订阅者方法数组</span></span><br><span class="line">  addListener(listenerFuction) &#123; </span><br><span class="line">    <span class="keyword">this</span>.listener.push(listenerFuction)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//trigger发生时,将listener数组中的每个方法用publisher的上下文和trigger的参数调用</span></span><br><span class="line">  trigger(...args) &#123; </span><br><span class="line">    <span class="keyword">this</span>.listener.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">v,i</span>) </span>&#123;</span><br><span class="line">      v.apply(<span class="keyword">this</span>,args)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chotee = &#123; <span class="comment">//listener1</span></span><br><span class="line">  listen(model,size) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`chotee看到了颜色是<span class="subst">$&#123;model&#125;</span>`</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`chotee看到了尺寸是<span class="subst">$&#123;size&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wang = &#123; <span class="comment">//listener2</span></span><br><span class="line">  listen(model,size) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`wang看到了颜色是<span class="subst">$&#123;model&#125;</span>`</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`wang看到了尺寸是<span class="subst">$&#123;size&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sneakersMerchant.addListener(chotee.listen)</span><br><span class="line">sneakersMerchant.addListener(wang.listen)</span><br><span class="line">sneakersMerchant.trigger(<span class="string">'aj3'</span>,<span class="string">'42'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>输出结果:<br>chotee看到了颜色是aj3<br>chotee看到了尺寸是42<br>wang看到了颜色是aj3<br>wang看到了尺寸是42</p></blockquote><h3 id="实现按key名订阅"><a href="#实现按key名订阅" class="headerlink" title="实现按key名订阅"></a>实现按key名订阅</h3><blockquote><p>至此,我们已经实现了一个基本功能,当<code>sneakersMerchant</code>有鞋发布时,每个<code>listener</code>都会被推送<br>但是,比如<code>chotee</code>只喜欢<code>model</code>型号是”aj3”的球鞋,<code>wang</code>只喜欢<code>model</code>型号是”aj11”的球鞋,所以需要改进一个可以按<code>key</code>订阅的功能</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sneakersMerchant = &#123; <span class="comment">//publisher</span></span><br><span class="line">  listener: [], <span class="comment">//订阅者方法数组</span></span><br><span class="line">  addListener(key,listenerFuction) &#123;</span><br><span class="line">    <span class="comment">// 如果listener数组中不存在key项,设置key项为一个空数组</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.listener[key])&#123;</span><br><span class="line">      <span class="keyword">this</span>.listener[key] = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果有key项,给key项数组添加一个listener </span></span><br><span class="line">    <span class="keyword">this</span>.listener[key].push(listenerFuction)</span><br><span class="line">  &#125;,</span><br><span class="line">  trigger(key, ...args) &#123;</span><br><span class="line">    <span class="comment">//如果listener数组中不存在key项或key项的数组为空,返回</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.listener[key]||<span class="keyword">this</span>.listener[key].length===<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果有key项, 调用key项中的方法,这时可以传入key</span></span><br><span class="line">    <span class="keyword">this</span>.listener[key].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">v,i</span>) </span>&#123;</span><br><span class="line">      v.call(<span class="keyword">this</span>,key, ...args)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chotee = &#123; <span class="comment">//listener1</span></span><br><span class="line">  listen(model,size) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`chotee看到了颜色是<span class="subst">$&#123;model&#125;</span>`</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`chotee看到了尺寸是<span class="subst">$&#123;size&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wang = &#123; <span class="comment">//listener2</span></span><br><span class="line">  listen(model,size) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`wang看到了颜色是<span class="subst">$&#123;model&#125;</span>`</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`wang看到了尺寸是<span class="subst">$&#123;size&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sneakersMerchant.addListener(<span class="string">'aj3'</span>,chotee.listen)</span><br><span class="line">sneakersMerchant.addListener(<span class="string">'aj11'</span>,wang.listen)</span><br><span class="line">sneakersMerchant.trigger(<span class="string">'aj3'</span>,<span class="string">'42'</span>)</span><br><span class="line"><span class="comment">// chotee看到了颜色是aj3</span></span><br><span class="line"><span class="comment">// chotee看到了尺寸是42</span></span><br><span class="line">sneakersMerchant.trigger(<span class="string">'aj11'</span>,<span class="string">'44'</span>)</span><br><span class="line"><span class="comment">// wang看到了颜色是aj11</span></span><br><span class="line"><span class="comment">// wang看到了尺寸是44</span></span><br></pre></td></tr></table></figure><h3 id="封装-注入"><a href="#封装-注入" class="headerlink" title="封装,注入"></a>封装,注入</h3><blockquote><p>我们注意到其实sneakersMerchant中的逻辑与<code>卖球鞋</code>本身没有直接联系, 事实上它代表了所有的<code>发布/订阅</code>逻辑, 不仅可以<code>卖球鞋</code>,还可以<code>卖切糕</code>,可以扩展到任何对象上, 让被扩展的对象拥有<code>发布/订阅</code>逻辑和功能呢,实现<code>注入(injection)</code><br>所以,我们对代码进行改造和封装,将刚才的<code>sneakerMerchant</code>更名为<code>pub_sub_util</code>,并定义一个<code>pub_sub_injection</code>函数,用来对任何对象传入<code>pub_sub_util</code>的逻辑,进行功能注入</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pub_sub_util = &#123; </span><br><span class="line">  listener: [], </span><br><span class="line">  addListener(key,listenerFuction) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.listener[key])&#123;</span><br><span class="line">      <span class="keyword">this</span>.listener[key] = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.listener[key].push(listenerFuction)</span><br><span class="line">  &#125;,</span><br><span class="line">  trigger(key, ...args) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.listener[key]||<span class="keyword">this</span>.listener[key].length===<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.listener[key].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">v,i</span>) </span>&#123;</span><br><span class="line">      v.call(<span class="keyword">this</span>,key, ...args)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义工具函数,进行 发布/订阅 功能注入</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pub_sub_injection</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> pub_sub_util)&#123;</span><br><span class="line">    obj[key] = pub_sub_util[key]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj <span class="comment">// for 链式调用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给任意对象调用工具函数,注入发布/订阅功能</span></span><br><span class="line"><span class="keyword">let</span> sneakersMerchant = &#123;&#125;</span><br><span class="line">sneakersMerchant = pub_sub_injection(sneakersMerchant)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chotee = &#123; <span class="comment">//listener1</span></span><br><span class="line">  listen(model,size) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`chotee看到了颜色是<span class="subst">$&#123;model&#125;</span>`</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`chotee看到了尺寸是<span class="subst">$&#123;size&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wang = &#123; <span class="comment">//listener2</span></span><br><span class="line">  listen(model,size) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`wang看到了颜色是<span class="subst">$&#123;model&#125;</span>`</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`wang看到了尺寸是<span class="subst">$&#123;size&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sneakersMerchant.addListener(<span class="string">'aj3'</span>,chotee.listen)</span><br><span class="line">sneakersMerchant.addListener(<span class="string">'aj11'</span>,wang.listen)</span><br><span class="line">sneakersMerchant.trigger(<span class="string">'aj3'</span>,<span class="string">'42'</span>)</span><br><span class="line"><span class="comment">// chotee看到了颜色是aj3</span></span><br><span class="line"><span class="comment">// chotee看到了尺寸是42</span></span><br><span class="line">sneakersMerchant.trigger(<span class="string">'aj11'</span>,<span class="string">'44'</span>)</span><br><span class="line"><span class="comment">//wang看到了颜色是aj11</span></span><br><span class="line"><span class="comment">//wang看到了尺寸是44</span></span><br></pre></td></tr></table></figure><h3 id="如何退订"><a href="#如何退订" class="headerlink" title="如何退订?"></a>如何退订?</h3><blockquote><p><code>chotee</code>从<code>sneakersMerchant</code>那里买到了莆田货, 于是要退订订阅, 总会发生这样的事, 于是要给工具对象中加一个<code>removeListener</code>方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pub_sub_util = &#123;</span><br><span class="line">  listener: [],</span><br><span class="line">  addListener(key, listenerFuction) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.listener[key]) &#123;</span><br><span class="line">      <span class="keyword">this</span>.listener[key] = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.listener[key].push(listenerFuction)</span><br><span class="line">  &#125;,</span><br><span class="line">  trigger(key, ...args) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.listener[key] || <span class="keyword">this</span>.listener[key].length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.listener[key].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">v, i</span>) </span>&#123;</span><br><span class="line">      v.call(<span class="keyword">this</span>, key, ...args)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//增加退订功能</span></span><br><span class="line">  removeListener(key, fn) &#123;</span><br><span class="line">    <span class="keyword">let</span> listenerKey = <span class="keyword">this</span>.listener[key]</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果listener数组中还没有key项,返回</span></span><br><span class="line">    <span class="keyword">if</span> (!listenerKey) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果没传第二个参数,意思是要删除整个key项</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">      listenerKey = []</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 删除listener数组key项中对应的函数</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      listenerKey.some(<span class="function"><span class="keyword">function</span> (<span class="params">v, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(v===fn)&#123;</span><br><span class="line">          listenerKey.splice(i,<span class="number">1</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义工具函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pub_sub_injection</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> pub_sub_util) &#123;</span><br><span class="line">    obj[key] = pub_sub_util[key]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj <span class="comment">// for 链式调用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给任意对象调用工具函数,注入发布/订阅功能</span></span><br><span class="line"><span class="keyword">let</span> sneakersMerchant = &#123;&#125;</span><br><span class="line">sneakersMerchant = pub_sub_injection(sneakersMerchant)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chotee = &#123; <span class="comment">//listener1</span></span><br><span class="line">  listen(model, size) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`chotee看到了颜色是<span class="subst">$&#123;model&#125;</span>`</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`chotee看到了尺寸是<span class="subst">$&#123;size&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wang = &#123; <span class="comment">//listener2</span></span><br><span class="line">  listen(model, size) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`wang看到了颜色是<span class="subst">$&#123;model&#125;</span>`</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`wang看到了尺寸是<span class="subst">$&#123;size&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">sneakersMerchant.addListener(<span class="string">'aj3'</span>, chotee.listen)</span><br><span class="line">sneakersMerchant.addListener(<span class="string">'aj11'</span>, wang.listen)</span><br><span class="line">sneakersMerchant.trigger(<span class="string">'aj3'</span>, <span class="string">'42'</span>)</span><br><span class="line"><span class="comment">// chotee看到了颜色是aj3</span></span><br><span class="line"><span class="comment">// chotee看到了尺寸是42</span></span><br><span class="line">sneakersMerchant.trigger(<span class="string">'aj11'</span>, <span class="string">'44'</span>)</span><br><span class="line"><span class="comment">//wang看到了颜色是aj11</span></span><br><span class="line"><span class="comment">//wang看到了尺寸是44</span></span><br><span class="line">sneakersMerchant.removelistener(<span class="string">'aj3'</span>, chotee.listen)</span><br><span class="line">sneakersMerchant.trigger(<span class="string">'aj3'</span>, <span class="string">'42'</span>)</span><br><span class="line"><span class="comment">//什么都没发生</span></span><br></pre></td></tr></table></figure><h3 id="全局事件对象"><a href="#全局事件对象" class="headerlink" title="全局事件对象"></a>全局事件对象</h3><blockquote><p>至此,我们已经完成了大部分<code>发布/订阅</code>的功能,但为了让我们的代码更有<code>bigger</code>,我们应该向更优秀的代码组织方式靠拢</p><p>虽然现在经过我们<code>注入</code>的对象上,已经具备了自己的<code>发布/订阅</code>逻辑,但这还不够好.<br>更好的方式是用<code>闭包</code>来创建一个<code>全局事件对象</code>,这个对象,对外暴露<code>发布/订阅</code>逻辑的<code>接口</code>,这些<code>接口</code>用来操作<code>闭包</code>中的<code>listener</code>数据<br>改造后的代码如下:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pubEvent = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> listener = &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> addListener = <span class="function"><span class="keyword">function</span> (<span class="params">key, listenerFuction</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!listener[key]) &#123;</span><br><span class="line">      listener[key] = []</span><br><span class="line">    &#125;</span><br><span class="line">    listener[key].push(listenerFuction)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> trigger = <span class="function"><span class="keyword">function</span> (<span class="params">key, args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!listener[key] || listener[key].length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    listener[key].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">v, i</span>) </span>&#123;</span><br><span class="line">      v.call(<span class="literal">null</span>, &#123; key, ...args &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> removeListener = <span class="function"><span class="keyword">function</span> (<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> listenerKey = listener[key]</span><br><span class="line">    <span class="keyword">if</span> (!listenerKey) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">      listenerKey = []</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      listenerKey.some(<span class="function"><span class="keyword">function</span> (<span class="params">v, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (v === fn) &#123;</span><br><span class="line">          listenerKey.splice(i, <span class="number">1</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    addListener,</span><br><span class="line">    trigger,</span><br><span class="line">    removeListener</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chotee = &#123; <span class="comment">//listener1</span></span><br><span class="line">  listen(&#123; key, size &#125;) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`chotee看到了颜色是<span class="subst">$&#123;key&#125;</span>`</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`chotee看到了尺寸是<span class="subst">$&#123;size&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wang = &#123; <span class="comment">//listener2</span></span><br><span class="line">  listen(&#123; key, size &#125;) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`wang看到了颜色是<span class="subst">$&#123;key&#125;</span>`</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`wang看到了尺寸是<span class="subst">$&#123;size&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pubEvent.addListener(<span class="string">'aj3'</span>, chotee.listen)</span><br><span class="line">pubEvent.addListener(<span class="string">'aj11'</span>, wang.listen)</span><br><span class="line">pubEvent.trigger(<span class="string">'aj3'</span>, &#123;<span class="attr">size</span>:<span class="number">42</span>&#125;)</span><br><span class="line"><span class="comment">// chotee看到了颜色是aj3</span></span><br><span class="line"><span class="comment">// chotee看到了尺寸是42</span></span><br><span class="line">pubEvent.trigger(<span class="string">'aj11'</span>, &#123;<span class="attr">size</span>:<span class="number">44</span>&#125;)</span><br><span class="line"><span class="comment">//wang看到了颜色是aj11</span></span><br><span class="line"><span class="comment">//wang看到了尺寸是44</span></span><br><span class="line">pubEvent.removeListener(<span class="string">'aj3'</span>, chotee.listen)</span><br><span class="line">pubEvent.trigger(<span class="string">'aj3'</span>, <span class="string">'42'</span>)</span><br><span class="line"><span class="comment">//什么都没发生</span></span><br></pre></td></tr></table></figure><h3 id="模块通信"><a href="#模块通信" class="headerlink" title="模块通信"></a>模块通信</h3><blockquote><p>为了更深刻的理解,参数是如何从<code>publisher</code>传递给<code>listener</code>的, 我们来做一个小案例<br>比如页面上有一个按钮,每次点击此按钮后,div中显示此按钮被点击的次数</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>点我加1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"dv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- polyfill here --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- pubEvent.js中放入我们自己写的代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"pubEvent.js"</span>&gt;</span><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"click.js"</span>&gt;</span><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"show.js"</span>&gt;</span><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// click.js</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(count); <span class="comment">// </span></span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    count++</span><br><span class="line">    <span class="comment">// 触发"countAdd"自定义事件</span></span><br><span class="line">    pubEvent.trigger(<span class="string">'countAdd'</span>,&#123;count&#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// show.js</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 注册"countAdd"事件</span></span><br><span class="line">  pubEvent.addListener(<span class="string">'countAdd'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'dv'</span>).innerHTML = data.count</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/12/23/5a3e54dd0e967.jpg" alt=""></p><blockquote><p><code>count</code>本来是<code>click.js</code>闭包中的私有变量,通过<code>pubEvent.trigger(&#39;countAdd&#39;,{count})</code>传递入<code>trigger</code>的函数体内,<code>trigger</code>的函数体内又调用了<code>listener</code>中的回调函数,回调函数通过<code>data</code>对象接收<code>count</code>和<code>key</code>的值.再在回调函数中向页面进行输出</p><p>最后我们抽离出<code>pubEvent.js</code>,可以在平时的工作学习中作为全局<code>发布/订阅工具函数</code>使用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pubEvent = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> listener = &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> addListener = <span class="function"><span class="keyword">function</span> (<span class="params">key, listenerFuction</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!listener[key]) &#123;</span><br><span class="line">      listener[key] = []</span><br><span class="line">    &#125;</span><br><span class="line">    listener[key].push(listenerFuction)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> trigger = <span class="function"><span class="keyword">function</span> (<span class="params">key, args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!listener[key] || listener[key].length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    listener[key].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">v, i</span>) </span>&#123;</span><br><span class="line">      v.call(<span class="literal">null</span>, &#123; key, ...args &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> removeListener = <span class="function"><span class="keyword">function</span> (<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> listenerKey = listener[key]</span><br><span class="line">    <span class="keyword">if</span> (!listenerKey) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">      listenerKey = []</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      listenerKey.some(<span class="function"><span class="keyword">function</span> (<span class="params">v, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (v === fn) &#123;</span><br><span class="line">          listenerKey.splice(i, <span class="number">1</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    addListener,</span><br><span class="line">    trigger,</span><br><span class="line">    removeListener</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;发布-订阅-观察者-模式&quot;&gt;&lt;a href=&quot;#发布-订阅-观察者-模式&quot; class=&quot;headerlink&quot; title=&quot;发布/订阅(观察者)模式&quot;&gt;&lt;/a&gt;发布/订阅(观察者)模式&lt;/h3&gt;&lt;p&gt;&lt;code&gt;发布/订阅模式&lt;/code&gt;又称&lt;code&gt;观察
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正反馈系列:《JavaScript高级程序设计》DOM 扩展</title>
    <link href="http://yoursite.com/2017/12/22/%E9%AB%98%E7%A8%8Bvol6-11%E7%AB%A0-dom%E6%89%A9%E5%B1%95/"/>
    <id>http://yoursite.com/2017/12/22/高程vol6-11章-dom扩展/</id>
    <published>2017-12-22T06:20:00.000Z</published>
    <updated>2017-12-22T06:35:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="选择符API"><a href="#选择符API" class="headerlink" title="选择符API"></a>选择符API</h2><ul><li><code>document/element.querySelector() return node</code></li><li><code>document/element.querySelectorAll() return NodeListSnapShot</code></li></ul><blockquote><p>返回的NodeList可以调用.item(index)方法,或使用方括号法,访问伪数组中的元素<br>第一个方法在没找到匹配元素时会 return null,第二个会return一个空NodeList<br>返回的数据只是NodeList<code>快照</code>,不会动态更新,性能好,看下面例子</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;div&gt;1&lt;/div&gt;</span></span><br><span class="line"><span class="comment">//&lt;div&gt;2&lt;/div&gt;</span></span><br><span class="line"><span class="comment">//&lt;div&gt;3&lt;/div&gt;</span></span><br><span class="line">&lt;script id=<span class="string">"tag"</span>&gt;</span><br><span class="line">  <span class="keyword">var</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(divs); <span class="comment">//3个元素</span></span><br><span class="line">  <span class="keyword">var</span> tag = <span class="built_in">document</span>.getElementById(<span class="string">'tag'</span>)</span><br><span class="line">  <span class="keyword">var</span> insert = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">  insert.innerHTML = <span class="number">4</span></span><br><span class="line">  <span class="built_in">document</span>.body.insertBefore(insert,tag) </span><br><span class="line">  <span class="built_in">console</span>.log(divs); <span class="comment">//3个元素</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>element.matchesSelector(selector) return boolean</code> </li></ul><blockquote><p>测试某个元素是否会被<code>querySelector,querySelectorAll</code>选中,截止到2011年,大多数的浏览器中都没有支持中国方法,如果要使用,先能力检测</p></blockquote><h2 id="元素遍历"><a href="#元素遍历" class="headerlink" title="元素遍历"></a>元素遍历</h2><blockquote><p><code>element</code>增加了5个新属性</p></blockquote><ul><li><code>childElementCount</code>：返回子元素（不包括文本节点和注释）的个数。</li><li><code>firstElementChild</code>：指向第一个子元素；firstChild 的元素版。</li><li><code>lastElementChild</code>：指向最后一个子元素；lastChild 的元素版。</li><li><code>previousElementSibling</code>：指向前一个同辈元素；previousSibling 的元素版。</li><li><code>nextElementSibling</code>：指向后一个同辈元素；nextSibling 的元素版。</li></ul><blockquote><p>遍历子元素代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i, len, child = element.firstElementChild;</span><br><span class="line"><span class="keyword">while</span>(child != element.lastElementChild)&#123; </span><br><span class="line">    processChild(child); <span class="comment">//已知其是元素 </span></span><br><span class="line">    child = child.nextElementSibling; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h2><h3 id="element-getElementsByClassName"><a href="#element-getElementsByClassName" class="headerlink" title="element.getElementsByClassName()"></a>element.getElementsByClassName()</h3><p><code>document/element.getElementsByClassName(classString) return NodeList</code></p><blockquote><p><code>classString</code>可以是<code>&quot;username current&quot;</code>这种格式, 顺序无所谓</p></blockquote><h3 id="element-classList属性"><a href="#element-classList属性" class="headerlink" title="element.classList属性"></a>element.classList属性</h3><blockquote><p>演示传统的js操作element的class特性的方式:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> classNames = element.className.split(<span class="regexp">/\s+/</span>)</span><br><span class="line"></span><br><span class="line">classNames = classNames.some(<span class="function"><span class="keyword">function</span> (<span class="params">v,i,arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(v === <span class="string">'deleteValue'</span>)&#123;</span><br><span class="line">    arr.splice(i,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">element.className = classNames.join(<span class="string">' '</span>)</span><br></pre></td></tr></table></figure><blockquote><p>上述方法太麻烦,所以HTML5给每个元素新增了<code>classList</code>属性,该属性是新集合类型<code>DOMTokenList</code>实例,与其他DOM集合类似,<code>DOMTokenList</code>有<code>length</code>属性,可以使用<code>.item()</code>方法和方括号语法,还增加了下列方法</p></blockquote><ul><li><code>add(value)</code>：将给定的字符串值添加到列表中。如果值已经存在，就不添加了。 </li><li><code>contains(value) return boolean</code>：表示列表中是否存在给定的值，如果存在则返回 true，否则返回 false。 </li><li><code>remove(value)</code>：从列表中删除给定的字符串。 </li><li><code>toggle(value)</code>：如果列表中已经存在给定的值，删除它；如果列表中没有给定的值，添加它。</li></ul><p>至此,前面那些代码一行代码搞定<code>element.classList.remove(&quot;deleteValue&quot;)</code>    </p><h3 id="焦点管理"><a href="#焦点管理" class="headerlink" title="焦点管理"></a>焦点管理</h3><blockquote><p>一个元素若想获得焦点,有两种方式</p><ol><li>被用户tab键切中</li><li>调用<code>element.focus()</code>方法</li><li>页面加载后<code>document.body</code>默认获得焦点</li></ol></blockquote><ul><li><code>document.activeElement</code>属性,始终会引用DOM中获得了焦点的元素</li><li><code>document.hasFocus() return boolean</code> 这个方法用于确认文档是否获得了焦点(文档内的元素获得了焦点,文档也算获得了焦点)</li></ul><h3 id="HTMLDocument的变化"><a href="#HTMLDocument的变化" class="headerlink" title="HTMLDocument的变化"></a>HTMLDocument的变化</h3><ul><li><code>document.readyState</code>属性,两个可能的值<code>loading,complete</code>,分别表示正在加载,和加载完成</li><li><code>document.compatMode</code>属性,标准模式时值为<code>CSS1Compat</code>,混杂模式时值为<code>BackCompat</code></li><li><code>document.head</code>属性,引用<code>&lt;head&gt;</code>标签</li></ul><h3 id="字符集属性"><a href="#字符集属性" class="headerlink" title="字符集属性"></a>字符集属性</h3><ul><li><code>document.charset</code>属性, 表示文档中实际可使用字符集,可直接设置以修改</li><li><code>document.defaultCharset</code>属性, ，表示根据默认浏览器及操作系统的设置，当前文档默认的字符集应该是什么</li></ul><h3 id="自定义数据属性"><a href="#自定义数据属性" class="headerlink" title="自定义数据属性"></a>自定义数据属性</h3><blockquote><p>HTML5规定可以给元素添加自定义特性,格式是<code>data-attrName</code><br>同时元素上添加<code>element.dataset</code>属性,属性的值是<code>DOMStringMap</code> 的一个实例，也就是一个名值对儿的映射。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;div id="ctw" data-chotee="choteewang"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="keyword">var</span> ctw = <span class="built_in">document</span>.getElementById(<span class="string">'ctw'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(ctw.dataset.chotee); <span class="comment">// choteewang</span></span><br><span class="line">ctw.dataset.chotee = <span class="string">'another chotee'</span></span><br><span class="line"><span class="built_in">console</span>.log(ctw.dataset.chotee); <span class="comment">// another chotee</span></span><br></pre></td></tr></table></figure><h3 id="插入标记"><a href="#插入标记" class="headerlink" title="插入标记"></a>插入标记</h3><ul><li><code>element.innerHTML</code>属性. 关于用innerHTML在DOM结构中插入新的Script标签,可能达不到预期效果,详情见高程p298</li><li><code>element.outerHTML</code>属性. 连同调用元素(自己)的HTML代码一同返回或设置</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  &lt;div id="content"&gt;</span></span><br><span class="line"><span class="comment">    &lt;p&gt;This is a</span></span><br><span class="line"><span class="comment">      &lt;strong&gt;paragraph&lt;/strong&gt; with a list following it.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">    &lt;ul&gt;</span></span><br><span class="line"><span class="comment">      &lt;li&gt;Item 1&lt;/li&gt;</span></span><br><span class="line"><span class="comment">      &lt;li&gt;Item 2&lt;/li&gt;</span></span><br><span class="line"><span class="comment">      &lt;li&gt;Item 3&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">  &lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;input type="button" value="Get OuterHtml" onclick="getOuterHTML()"&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOuterHTML</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"content"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(div.outerHTML); <span class="comment">//works in IE, Safari, and Opera</span></span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">/* 返回结果</span></span><br><span class="line"><span class="comment">  &lt;div id="content"&gt;</span></span><br><span class="line"><span class="comment">    &lt;p&gt;This is a</span></span><br><span class="line"><span class="comment">      &lt;strong&gt;paragraph&lt;/strong&gt; with a list following it.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">    &lt;ul&gt;</span></span><br><span class="line"><span class="comment">      &lt;li&gt;Item 1&lt;/li&gt;</span></span><br><span class="line"><span class="comment">      &lt;li&gt;Item 2&lt;/li&gt;</span></span><br><span class="line"><span class="comment">      &lt;li&gt;Item 3&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">  &lt;/div&gt;</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><ul><li><code>element.insertAdjacentHTML(description,innerHTML)</code>方法,<code>description</code>有以下几种形式<ul><li><code>beforebegin</code>，作为前一个同辈元素插入； </li><li><code>afterbegin</code>，作为第一个子元素插入； </li><li><code>beforeend</code>，作为最后一个子元素插入； </li><li><code>afterend</code>，作为后一个同辈元素插入;</li></ul></li></ul><blockquote><p>调用本节的方法,有性能问题,原理是用<code>innerHTML</code>将元素移动出DOM结构并没有让该元素的js对象从内存中释放.<br>所以最好减少<code>innerHTML</code>的读写次数,比如先对一个字符串进行反复操作,最后一次性将字符串赋值给<code>innerHTML</code></p></blockquote><h3 id="element-scrollIntoView"><a href="#element-scrollIntoView" class="headerlink" title="element.scrollIntoView()"></a>element.scrollIntoView()</h3><p><code>element.scrollIntoView(true/false)</code></p><blockquote><p>scrollIntoView()可以在所有 HTML 元素上调用, 参数为<code>true</code>或<code>空</code>时,窗口滚动 之后会让调用元素的顶部与视口顶部尽可能平齐<br>参数为<code>false</code>时,调用元素会尽可能全部 出现在视口中，（可能的话，调用元素的底部会与视口顶部平齐。）不过顶部不一定平齐<br>为元素设置焦点也会导致浏览器滚动并显示出元素</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//让元素可见 </span></span><br><span class="line"><span class="built_in">document</span>.forms[<span class="number">0</span>].scrollIntoView();</span><br></pre></td></tr></table></figure><h2 id="专有扩展"><a href="#专有扩展" class="headerlink" title="专有扩展"></a>专有扩展</h2><h3 id="文档模式"><a href="#文档模式" class="headerlink" title="文档模式"></a>文档模式</h3><blockquote><p>IE8引入了”文档模式(document mode)”概念, 页面的文档模式决定了可以使用什么js api或css,或怎样对待文档类型doctype<br>要强制浏览器以某种模式渲染页面，可以使用 HTTP 头部信息 X-UA-Compatible，或通过等价的 <code>&lt;meta&gt;</code>标签来设置：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这里的IEVersion是被替换掉的不同的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=IEVersion"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>具体文档模式取值详情查阅高程p289</p><h3 id="element-children属性"><a href="#element-children属性" class="headerlink" title="element.children属性"></a>element.children属性</h3><blockquote><p>这个属性是<code>HTMLCollection</code>实例, 与<code>element.childNodes</code>的区别是只有元素节点.</p></blockquote><h3 id="element-contains"><a href="#element-contains" class="headerlink" title="element.contains()"></a>element.contains()</h3><p><code>element.contains(node) return boolean</code> </p><blockquote><p>如果node是element的后代节点,return true</p></blockquote><h3 id="element-compareDocumentPosition"><a href="#element-compareDocumentPosition" class="headerlink" title="element.compareDocumentPosition()"></a>element.compareDocumentPosition()</h3><p><code>element.compareDocumentPostion(node) return number</code></p><blockquote><p>number 如下定义,由于16的二进制形式是’10000’,与’1,2,4,8’任意一个数字进行<code>按位与</code>操作得到的数字都是0,但与自身<code>按位与</code>得到的数字不是0,所以用<code>!!(number &amp; 16)</code>可以获得与<code>element.contains()</code>方法一样的真值.</p></blockquote><table><thead><tr><th style="text-align:center">number</th><th style="text-align:center">node相对于element的节点关系</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">无关</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">居前</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">居后</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">包含</td></tr><tr><td style="text-align:center">16</td><td style="text-align:center">被包含</td></tr></tbody></table><blockquote><p>所以得到一个兼容函数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">contains</span>(<span class="params">refNode, otherNode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> refNode.contains == <span class="string">"function"</span> &amp;&amp;</span><br><span class="line">    (!client.engine.webkit || client.engine.webkit &gt;= <span class="number">522</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> refNode.contains(otherNode);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> refNode.compareDocumentPosition == <span class="string">"function"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> !!(refNode.compareDocumentPosition(otherNode) &amp; <span class="number">16</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> node = otherNode.parentNode;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (node === refNode) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        node = node.parentNode;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (node !== <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入文本"><a href="#插入文本" class="headerlink" title="插入文本"></a>插入文本</h3><ul><li><code>element.innerText</code>属性.</li></ul><blockquote><p>读取时由浅入深,将文档树的文本拼接,在写入时,删除所有子节点,插入包含相应文本值的文本节点,只会生成一个文本节点<br>设置<code>innerText</code>属性时会对HTML语法字符(小于号,大于号,引号,句号)进行编码</p></blockquote><ul><li><code>element.textContent</code>属性</li></ul><blockquote><p>与innerText的区别是,<code>textContent</code>会返回行内样式和脚本的代码,不过也不一定,浏览器不统一</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInnerText</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">typeof</span> element.textContent == <span class="string">"string"</span>) ? </span><br><span class="line">        element.textContent : element.innerText;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setInnerText</span>(<span class="params">element, text</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> element.textContent == <span class="string">"string"</span>)&#123;</span><br><span class="line">        element.textContent = text;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        element.innerText = text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>element.outerText</code>属性,不建议使用<blockquote><p>读取时与innerText返回值相同,写入时用文本节点替换掉调用它的元素节点(自己)</p></blockquote></li></ul><h3 id="滚动"><a href="#滚动" class="headerlink" title="滚动"></a>滚动</h3><ul><li><code>element.scrollIntoViewIfNeeded(boolean)</code>：只在当前元素在视口中不可见的情况下，才滚动浏览器窗口或容器元素，最终让它可见。如果当前元素在视口中可见，这个方法什么也不做。如果将可选的 <code>boolean</code> 参数设置为 true，则表示尽量将元素显示在视口中部（垂直方向）。Safari 和 Chrome 实现了这个方法。 </li><li><code>element.scrollByLines(lineCount)</code>：将元素的内容滚动指定的行高，lineCount 值可以是正值，也可以是负值。Safari 和 Chrome 实现了这个方法。 </li><li><code>element.scrollByPages(pageCount)</code>：将元素的内容滚动指定的页面高度，具体高度由元素的高度决定。Safari 和 Chrome 实现了这个方法。</li></ul><blockquote><p>希望大家要注意的是，<code>scrollIntoView()</code>和 <code>scrollIntoViewIfNeeded()</code>的作用对象是元素的 容器，而 <code>scrollByLines()</code>和 <code>scrollByPages()</code>影响的则是元素自身<br>由于 <code>element.scrollIntoView()</code>是唯一一个所有浏览器都支持的方法，因此还是这个方法最常用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在当前元素不可见的时候，让它进入浏览器的视口 </span></span><br><span class="line"><span class="built_in">document</span>.images[<span class="number">0</span>].scrollIntoViewIfNeeded();</span><br><span class="line"></span><br><span class="line"><span class="comment">//将页面主体往回滚动 1 页 </span></span><br><span class="line"><span class="built_in">document</span>.body.scrollByPages(<span class="number">-1</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;选择符API&quot;&gt;&lt;a href=&quot;#选择符API&quot; class=&quot;headerlink&quot; title=&quot;选择符API&quot;&gt;&lt;/a&gt;选择符API&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;document/element.querySelector() return no
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正反馈系列:《JavaScript高级程序设计》DOM 1级</title>
    <link href="http://yoursite.com/2017/12/22/%E9%AB%98%E7%A8%8Bvol5-10%E7%AB%A0-dom1/"/>
    <id>http://yoursite.com/2017/12/22/高程vol5-10章-dom1/</id>
    <published>2017-12-21T20:50:41.000Z</published>
    <updated>2017-12-22T06:29:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>本章主要讨论<code>DOM 1级规范</code></p><h2 id="节点层次"><a href="#节点层次" class="headerlink" title="节点层次"></a>节点层次</h2><h2 id="Node类型"><a href="#Node类型" class="headerlink" title="Node类型"></a>Node类型</h2><blockquote><p>javascript中所有的节点都继承自<code>Node</code>类型,因此所有节点类型都共享着相同的基本属性和方法</p><p>节点类型由在Node类型中定义的12个数值常量来表示,任何节点类型必居其一</p></blockquote><ul><li>Node.ELEMENT_NODE(1)； //元素节点,1</li><li>Node.ATTRIBUTE_NODE(2)； //特性节点,2</li><li>Node.TEXT_NODE(3)； //文本节点3</li><li>Node.CDATA_SECTION_NODE(4)；</li><li>Node.ENTITY_REFERENCE_NODE(5)； </li><li>Node.ENTITY_NODE(6)； </li><li>Node.PROCESSING_INSTRUCTION_NODE(7)； </li><li>Node.COMMENT_NODE(8)；</li><li>Node.DOCUMENT_NODE(9)； </li><li>Node.DOCUMENT_TYPE_NODE(10)； </li><li>Node.DOCUMENT_FRAGMENT_NODE(11)； </li><li>Node.NOTATION_NODE(12)。</li></ul><h3 id="node-nodeType-node-nodeName-node-nodeValue"><a href="#node-nodeType-node-nodeName-node-nodeValue" class="headerlink" title="node.nodeType,node.nodeName,node.nodeValue"></a>node.nodeType,node.nodeName,node.nodeValue</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IE的节点是COM实现的,所以在IE中无效</span></span><br><span class="line"><span class="keyword">if</span> (someNode.nodeType == Node.ELEMENT_NODE) &#123;</span><br><span class="line">  alert(<span class="string">"Node is an element."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (someNode.nodeType == <span class="number">1</span>) &#123; </span><br><span class="line">  <span class="comment">//适用于所有浏览器 alert("Node is an element."); </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">nodeType</th><th style="text-align:center">nodeName</th><th style="text-align:center">nodeValue</th></tr></thead><tbody><tr><td style="text-align:center">element</td><td style="text-align:center">1</td><td style="text-align:center">标签名</td><td style="text-align:center">null</td></tr><tr><td style="text-align:center">attribute</td><td style="text-align:center">2</td><td style="text-align:center">特性名</td><td style="text-align:center">特性值</td></tr><tr><td style="text-align:center">text</td><td style="text-align:center">3</td><td style="text-align:center">#text</td><td style="text-align:center">文本值</td></tr></tbody></table><h3 id="node-childNodes属性-NodeList对象"><a href="#node-childNodes属性-NodeList对象" class="headerlink" title="node.childNodes属性,NodeList对象"></a>node.childNodes属性,NodeList对象</h3><p><img src="https://i.loli.net/2017/12/22/5a3c1e6eacf0d.jpg" alt=""></p><blockquote><p>每个节点都有一个<code>childNodes</code>属性,其中保存着一个<code>NodeList</code>对象,对象里面装着node的子节点, <code>NodeList</code>是伪数组,用于保存一组有序节点,可以通过为止来访问这些节点,有<code>length</code>属性.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以通过方括号,或item()方法访问childNodes中保存的NodeList对象(伪数组)</span></span><br><span class="line"><span class="keyword">var</span> firstChild = someNode.childNodes[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> secondChild = someNode.childNodes.item(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> count = someNode.childNodes.length;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将NodeList转化为数组</span></span><br><span class="line"><span class="keyword">var</span> arrayOfNodes = <span class="built_in">Array</span>.prototype.slice.call(someNode.childNodes,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//IE浏览器将NodeList(IE中是一个COM对象)转化为数组</span></span><br><span class="line"><span class="comment">//导致错误后手动转化数组,怪癖检测</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertToArray</span>(<span class="params">nodes</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> array = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    array = <span class="built_in">Array</span>.prototype.slice.call(nodes, <span class="number">0</span>); <span class="comment">//针对非 IE 浏览器 </span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">    array = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = nodes.length; i &lt; len; i++) &#123;</span><br><span class="line">      array.push(nodes[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="node-parentNode属性"><a href="#node-parentNode属性" class="headerlink" title="node.parentNode属性"></a>node.parentNode属性</h3><blockquote><p>指向父节点,一个childNodes列表中的所有节点都有相同的父节点</p></blockquote><h3 id="node-previousSibling-node-nextSibling"><a href="#node-previousSibling-node-nextSibling" class="headerlink" title="node.previousSibling,node.nextSibling"></a>node.previousSibling,node.nextSibling</h3><blockquote><p>childNodes列表中的每个节点相互之间是同胞节点,列表第一个节点的previousSibling和列表最后一个节点的nextSibling的值是null</p></blockquote><h3 id="node-firstChild-node-lastChild"><a href="#node-firstChild-node-lastChild" class="headerlink" title="node.firstChild,node.lastChild"></a>node.firstChild,node.lastChild</h3><blockquote><p>分别指向childNodes列表的第一个子节点和最后一个子节点,没有则为null</p></blockquote><h3 id="node-hasChildNodes"><a href="#node-hasChildNodes" class="headerlink" title="node.hasChildNodes()"></a>node.hasChildNodes()</h3><p><code>node.hasChildNodes() return boolean</code></p><blockquote><p>此方法在node包含1到多个子节点的情况下返回true</p></blockquote><h3 id="node-ownerDocument属性"><a href="#node-ownerDocument属性" class="headerlink" title="node.ownerDocument属性"></a>node.ownerDocument属性</h3><blockquote><p>该属性指向node所在文档的文档节点<code>&lt;html&gt;</code></p></blockquote><h3 id="node-appendChild"><a href="#node-appendChild" class="headerlink" title="node.appendChild()"></a>node.appendChild()</h3><p><code>node.appendChild(node1),return node1</code></p><blockquote><p>在node节点的childNodes列表最后增加一个节点node1,并返回node1<br>若node1已经是文档的一部分了,则变为剪切</p></blockquote><h3 id="node-insertBefore"><a href="#node-insertBefore" class="headerlink" title="node.insertBefore()"></a>node.insertBefore()</h3><p><code>node.insertBefore(node1[,node2]) return node1</code></p><blockquote><p>将node1插入到node的childNodes子节点列表的node2之前,作为node2的previousSibiling,若node2为null,则和appendChild()执行同样操作,插入到childNodes尾部</p></blockquote><h3 id="node-replaceChild"><a href="#node-replaceChild" class="headerlink" title="node.replaceChild()"></a>node.replaceChild()</h3><p><code>node.replaceChild(node1,node2) return node2</code></p><blockquote><p>将node1放入到node的childNotes列表中的note2处替换掉node2,将node2返回</p></blockquote><h3 id="node-removeChild"><a href="#node-removeChild" class="headerlink" title="node.removeChild()"></a>node.removeChild()</h3><p><code>node.removeChild(node1) return node1</code></p><blockquote><p>将node1从node的childNotes列表中移除,并返回</p></blockquote><h3 id="node-cloneNode"><a href="#node-cloneNode" class="headerlink" title="node.cloneNode()"></a>node.cloneNode()</h3><p><code>node.cloneNode(boolean) return nodeCopy</code></p><blockquote><p>复制node节点,并返回复制的节点副本<br>boolean为true深复制(复制节点以及整个子节点树),为false浅复制(只复制节点本身),复制后返回的节点副本没有被插入文档,需手动将其插入文档某个位置<br>不复制事件,只复制特性</p></blockquote><h2 id="Document-类型"><a href="#Document-类型" class="headerlink" title="Document 类型"></a>Document 类型</h2><blockquote><p>JavaScript 通过 Document 类型表示文档.<br>document 对象是 HTMLDocument（继承 自 Document 类型）的一个实例，表示整个 HTML 页面。<br>document 对象是 window 对象的一个属性，因此可以将其作为全局对象来访问</p></blockquote><h3 id="document对象的基本属性"><a href="#document对象的基本属性" class="headerlink" title="document对象的基本属性"></a>document对象的基本属性</h3><ul><li><code>nodeType</code> : 9</li><li><code>nodeName</code> : #document</li><li><code>nodeValue</code> : null</li><li><code>parentNode</code> : null</li><li><code>ownerDocument</code> : null</li><li><code>documentElement</code> : <code>&lt;html&gt;</code></li><li><code>body</code> : <code>&lt;body&gt;</code></li><li><code>childNodes</code>列表 : 包含<html>的子节点列表</html></li><li><code>doctype</code>: DocumentType_NODE(10)类型,就是&lt;!DOCTYPE&gt;</li><li>（最多一个）、Element（最多一个）、ProcessingInstruction 或 Comment</li></ul><h3 id="document-documentElement属性"><a href="#document-documentElement属性" class="headerlink" title="document.documentElement属性"></a>document.documentElement属性</h3><blockquote><p>该属性指向<html>元素</html></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> html = <span class="built_in">document</span>.documentElement; <span class="comment">//取得对&lt;html&gt;的引用</span></span><br><span class="line">alert(html === <span class="built_in">document</span>.childNodes[<span class="number">0</span>]); <span class="comment">//true</span></span><br><span class="line">alert(html === <span class="built_in">document</span>.firstChild); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="document-body"><a href="#document-body" class="headerlink" title="document.body"></a>document.body</h3><blockquote><p>该属性指向<code>&lt;body&gt;</code>元素</p></blockquote><h3 id="document-doctype"><a href="#document-doctype" class="headerlink" title="document.doctype"></a>document.doctype</h3><blockquote><p>DocumentType_NODE(10)类型<br>该属性指向<code>&lt;!DOCTYPE&gt;</code></p></blockquote><h3 id="document-title"><a href="#document-title" class="headerlink" title="document.title"></a>document.title</h3><blockquote><p>当前页面标题,修改会反应在浏览器标题栏中</p></blockquote><h3 id="document-URL-document-domain-document-referrer"><a href="#document-URL-document-domain-document-referrer" class="headerlink" title="document.URL,document.domain,document.referrer"></a>document.URL,document.domain,document.referrer</h3><blockquote><p>URL属性包含页面完整URL ‘<a href="http://www.wrox.com/WileyCDA/" target="_blank" rel="external">http://www.wrox.com/WileyCDA/</a>‘<br>domain只包含页面的域名 ‘www.wrox.com’<br>referrer保存链接到当前页面的那个页面URL,若无来源,可能是空字符串<br>这三个信息都存在于HTTP请求的头部,只不过这些属性让我们可以用js访问它们</p></blockquote><h3 id="document-getElementsByTagName"><a href="#document-getElementsByTagName" class="headerlink" title="document.getElementsByTagName()"></a>document.getElementsByTagName()</h3><p><code>document.getElementsByTagName() return HTMLCollection</code></p><blockquote><p>HTMLCollection对象是一个动态集合,与NodeList非常类似,可以用<code>.item(index)</code>方法来访问其中的项, 有<code>length</code>属性<br>HTMLCollection有<code>.namedItem()</code>方法,使用这个方法可以通过元素<code>name</code>特性取得集合中的项<br>对有<code>name</code>特性的项,可以用方括号语法访问,与下例<code>.namedItem()</code>作用相同.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;img src="myimage.gif" name="myImage"&gt;</span></span><br><span class="line"><span class="keyword">var</span> images = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>);</span><br><span class="line">alert(images.length);</span><br><span class="line">alert(images[<span class="number">0</span>].src);</span><br><span class="line">alert(images.item(<span class="number">0</span>).src);</span><br><span class="line"><span class="keyword">var</span> myImage = images[<span class="string">"myImage"</span>]; <span class="comment">//返回与下一行一样的结果</span></span><br><span class="line"><span class="keyword">var</span> myImage = images.namedItem(<span class="string">"myImage"</span>); <span class="comment">// 返回与上一行一样的结果</span></span><br><span class="line"><span class="keyword">var</span> allElements = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"*"</span>);<span class="comment">//返回页面所有元素</span></span><br></pre></td></tr></table></figure><p>对 <code>HTMLCollection</code> 而言，我们可以向方括号中传入数值或字符串形式的索引值。在后台，对数值索引就会调用 <code>item()</code>，而对字符串索引就会调用 <code>namedItem()</code>。</p><h3 id="document-getElementsbyName"><a href="#document-getElementsbyName" class="headerlink" title="document.getElementsbyName()"></a>document.getElementsbyName()</h3><p><code>document.getElementsbyName() return HTMLCollection</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"red"</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">id</span>=<span class="string">"colorRed"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"colorRed"</span>&gt;</span>Red<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"green"</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">id</span>=<span class="string">"colorGreen"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"colorGreen"</span>&gt;</span>Green<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"blue"</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">id</span>=<span class="string">"colorBlue"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"colorBlue"</span>&gt;</span>Blue<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下述代码只能选中被选中的input单选框</span></span><br><span class="line"><span class="comment">// 因为返回的HTMLCollection调用了.namedItem('color'),只会选择第一项</span></span><br><span class="line"><span class="comment">// 因为每项name特性都相同</span></span><br><span class="line"><span class="built_in">document</span>.getElementsbyName(<span class="string">'color'</span>)</span><br></pre></td></tr></table></figure><h3 id="特殊集合"><a href="#特殊集合" class="headerlink" title="特殊集合"></a>特殊集合</h3><ul><li><code>document.anchors</code>，包含文档中所有带 name 特性的<code>&lt;a&gt;</code>元素； </li><li><code>document.forms</code>，包含文档中所有的<code>&lt;form&gt;</code>元素，与 document.getElementsByTagName(“form”) 得到的结果相同； </li><li><code>document.images</code>，包含文档中所有的<code>&lt;img&gt;</code>元素，与 document.getElementsByTagName (“img”)得到的结果相同； </li><li><code>document.links</code>，包含文档中所有带 href 特性的<code>&lt;a&gt;</code>元素。</li></ul><h3 id="其他简单方法"><a href="#其他简单方法" class="headerlink" title="其他简单方法"></a>其他简单方法</h3><ul><li><code>document.getElementbyId()</code></li><li><code>document.write()</code> 重写文档内容</li><li><code>document.writeln()</code> 重写文档内容,结尾加’\n’</li><li><code>document.open()</code> 打开文档输出流</li><li><code>document.close()</code> 关闭文档输出流</li></ul><h2 id="Element类型"><a href="#Element类型" class="headerlink" title="Element类型"></a>Element类型</h2><h3 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h3><ul><li><code>nodeType</code> : 1</li><li><code>nodeName</code> : 标签名</li><li><code>nodeValue</code> : null</li><li><code>nodeName</code> : <code>tagName</code></li><li><code>tagName</code> : <code>nodeName</code></li></ul><h3 id="HTML元素"><a href="#HTML元素" class="headerlink" title="HTML元素"></a>HTML元素</h3><blockquote><p>所有 HTML 元素都由 HTMLElement 类型表示，不是直接通过这个类型，也是通过它的子类型来表示。HTMLElement 类型直接继承自 Element 并添加了一些属性。添加的这些属性分别对应于每个 HTML 元素中都存在的下列标准特性。</p></blockquote><h3 id="HTML元素-基本属性"><a href="#HTML元素-基本属性" class="headerlink" title="HTML元素 基本属性"></a>HTML元素 基本属性</h3><ul><li><code>id</code></li><li><code>title</code> : 附加信息说明,工具条提示</li><li><code>lang</code> : 语言编码,很少使用</li><li><code>dir</code> : 语言方向,值为<code>ltr</code>,<code>rtl</code>(left to right, right to left)</li><li><code>className</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;div id="myDiv" class="bd" title="Body text" lang="en" dir="ltr"&gt;&lt;/div&gt; </span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line">alert(div.id); <span class="comment">//"myDiv"" </span></span><br><span class="line">alert(div.className); <span class="comment">//"bd" </span></span><br><span class="line">alert(div.title); <span class="comment">//"Body text" </span></span><br><span class="line">alert(div.lang); <span class="comment">//"en" </span></span><br><span class="line">alert(div.dir); <span class="comment">//"ltr"</span></span><br></pre></td></tr></table></figure><h3 id="取得特性"><a href="#取得特性" class="headerlink" title="取得特性"></a>取得特性</h3><blockquote><p>注意:若要获得class值,attr位置应该是<code>class</code>,而不是<code>className</code><br>根据HTML5规范,自定义特性应该加上<code>data</code>前缀,以便验证<br>两类用getAttribute获取达不到预期的特性:<code>style</code>* 和<code>onclick等事件</code><br>setAttribute设置的特姓名会转为小写</p></blockquote><ul><li><code>htmlElement.getAttribute(attr) return string</code> </li><li><code>htmlElement.setAttribute(attr,value)</code> </li><li><code>htmlElement.removeAttribute(attr)</code></li></ul><p>不过，像下面这样为 DOM 元素添加一个自定义的属性，该属性不会自动成为元素的特性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">div.mycolor = <span class="string">"red"</span>; </span><br><span class="line">alert(div.getAttribute(<span class="string">"mycolor"</span>)); <span class="comment">//null（IE 除外）</span></span><br></pre></td></tr></table></figure><h3 id="attributes属性"><a href="#attributes属性" class="headerlink" title="attributes属性"></a>attributes属性</h3><p>Element 类型是使用 <code>attributes</code> 属性的唯一一个 DOM 节点类型。<code>attributes</code> 属性中包含一个<code>NamedNodeMap</code>，与 <code>NodeList</code> 类似，也是一个“动态”的集合。元素的每一个特性都由一个 <code>Attr 节点</code>表示，每个节点都保存在 <code>NamedNodeMap</code> 对象中。<code>NamedNodeMap</code> 对象拥有下列方法。</p><ul><li><code>getNamedItem(name) return nodeName</code>：返回 <code>nodeName</code> 属性等于 <code>name</code> 的节点； </li><li><code>removeNamedItem(name)</code>：从列表中移除 <code>nodeName</code> 属性等于 <code>name</code> 的节点； </li><li><code>setNamedItem(node)</code>：向列表中添加节点，以节点的 <code>nodeName</code> 属性为索引； </li><li><code>item(pos)</code>：返回位于数字 pos 位置处的节点。</li></ul><blockquote><p>看一些例子</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等同于var id = element.id</span></span><br><span class="line"><span class="keyword">var</span> id = element.attributes.getNamedItem(<span class="string">"id"</span>).nodeValue;</span><br><span class="line"><span class="keyword">var</span> id = element.attributes[<span class="string">"id"</span>].nodeValue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于element.id = 'someOtherId'</span></span><br><span class="line">element.attributes[<span class="string">"id"</span>].nodeValue = <span class="string">"someOtherId"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> oldAttr = element.attributes.removeNamedItem(<span class="string">"id"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// setNamedItem极其没用</span></span><br><span class="line">element.attributes.setNamedItem(newAttrNode);</span><br></pre></td></tr></table></figure><h3 id="document-createElement"><a href="#document-createElement" class="headerlink" title="document.createElement()"></a>document.createElement()</h3><p><code>document.createElement(tagName) return HTMLElement</code></p><blockquote><p>创建元素的同时,也为元素设置了ownerDocument属性<br>返回的HTMLElenment未添加入文档树,需要手动添加</p></blockquote><h3 id="HTMLElement-getElementsByTagName"><a href="#HTMLElement-getElementsByTagName" class="headerlink" title="HTMLElement.getElementsByTagName()"></a>HTMLElement.getElementsByTagName()</h3><blockquote><p>像Document一样,HTMLElement同样支持此方法</p></blockquote><h2 id="Text类型"><a href="#Text类型" class="headerlink" title="Text类型"></a>Text类型</h2><h3 id="基本属性-1"><a href="#基本属性-1" class="headerlink" title="基本属性"></a>基本属性</h3><ul><li><code>nodeType</code> : 3</li><li><code>nodeName</code> : “#text”</li><li><code>nodeValue</code> : 节点所包含文本</li><li><code>parentNode</code> : 一个Element</li><li>没有子节点</li><li><code>data</code> : == <code>nodeValue</code></li><li><code>appendData(text)</code>：将 text 添加到节点的末尾。</li><li><code>deleteData(offset, count)</code>：从 offset 指定的位置开始删除 count 个字符。</li><li><code>insertData(offset, text)</code>：在 offset 指定的位置插入 text。</li><li><code>replaceData(offset, count, text)</code>：用 text 替换从 offset 指定的位置开始到 offset+ count 为止处的文本。</li><li><code>splitText(offset)</code>：从 offset 指定的位置将当前文本节点分成两个文本节点。</li><li><code>substringData(offset, count)</code>：提取从 offset 指定的位置开始到 offset+count 为止 处的字符串。</li><li><code>length</code>: nodeValue.length 或 data.length中也保存着同样的值</li></ul><blockquote><p>用js修改文本节点的值后,其会经过html或xml编码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出结果是"Some &amp;lt;strong&amp;gt;other&amp;lt;/strong&amp;gt; message" </span></span><br><span class="line">div.firstChild.nodeValue = <span class="string">"Some &lt;strong&gt;other&lt;/strong&gt; message"</span>;</span><br></pre></td></tr></table></figure><h3 id="document-createTextNode"><a href="#document-createTextNode" class="headerlink" title="document.createTextNode()"></a>document.createTextNode()</h3><p><code>document.createTextNode() return textNode</code> </p><blockquote><p>创建文本节点,要经过html编码,未插入文档,需要手动插入</p></blockquote><h3 id="node-normalize"><a href="#node-normalize" class="headerlink" title="node.normalize()"></a>node.normalize()</h3><blockquote><p>这个方法唯一的作用就是处理文档树中的文本节点。由于解析器的实现或 DOM 操作等原因，可能会出现文本节点不包含文本，或者接连出现两个文本节点的情况。当在某个节点上调用这个方法时，就会在该节点的后代节点中查找上述两种情况。如果找到了空文本节点，则删除它；如果找到相邻的文本节点，则将它们合并为一个文本节点<br>结果节点的 nodeValue 等于将合并前每个文本节点的 nodeValue 值拼接起来的值。</p></blockquote><h3 id="textNode-splitText"><a href="#textNode-splitText" class="headerlink" title="textNode.splitText()"></a>textNode.splitText()</h3><p><code>textNode.splitText(startPos) return nodeElement</code></p><blockquote><p>Text 类型提供了一个作用与 normalize()相反的方法：splitText()。这个方法会将一个文本节点分成两个文本节点，即按照指定的位置分割 nodeValue 值。原来的文本节点将包含从开始到指定位置之前的内容，新文本节点将包含剩下的文本。这个方法会返回一个新文本节点，该节点与原节点的 parentNode 相同。<br>经过splitText处理的文本节点, 分离后的两个文本节点都将留在html结构中.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">element.className = <span class="string">"message"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> textNode = <span class="built_in">document</span>.createTextNode(<span class="string">"Hello world!"</span>);</span><br><span class="line">element.appendChild(textNode);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(element);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newNode = element.firstChild.splitText(<span class="number">5</span>);</span><br><span class="line">alert(element.firstChild.nodeValue);  <span class="comment">//"Hello"</span></span><br><span class="line">alert(newNode.nodeValue);             <span class="comment">//"world!"</span></span><br><span class="line">alert(element.childNodes.length);     <span class="comment">//2</span></span><br></pre></td></tr></table></figure><h2 id="Comment类型"><a href="#Comment类型" class="headerlink" title="Comment类型"></a>Comment类型</h2><ul><li><code>nodeType</code> : 8</li><li><code>nodeName</code> : “#comment”</li><li><code>nodeValue</code> : 注释内容</li><li><code>parentNode</code> : 可能是Document或Element</li><li>没有子节点</li><li><code>data</code> : == <code>nodeValue</code></li><li><code>appendData(text)</code>：将 text 添加到节点的末尾。</li><li><code>deleteData(offset, count)</code>：从 offset 指定的位置开始删除 count 个字符。</li><li><code>insertData(offset, text)</code>：在 offset 指定的位置插入 text。</li><li><code>replaceData(offset, count, text)</code>：用 text 替换从 offset 指定的位置开始到 offset+ count 为止处的文本。</li><li><code>splitText(offset)</code>：从 offset 指定的位置将当前文本节点分成两个文本节点。</li><li><code>substringData(offset, count)</code>：提取从 offset 指定的位置开始到 offset+count 为止 处的字符串。</li><li><code>length</code>: nodeValue.length 或 data.length中也保存着同样的值</li></ul><blockquote><p>与Text类型继承自同样的基类,拥有除splitText()外所有字符换操作方法. 与Text类型类似, 也可以通过nodeValue或data属性来取得注释内容</p></blockquote><ul><li><code>document.createComment(commentContent) return commentNode</code> 创建注释节点</li></ul><h2 id="其他类型"><a href="#其他类型" class="headerlink" title="其他类型"></a>其他类型</h2><h3 id="CDATASection类型"><a href="#CDATASection类型" class="headerlink" title="CDATASection类型"></a>CDATASection类型</h3><p>只针对XML文档,详情见高程P274</p><h3 id="DocumentType类型"><a href="#DocumentType类型" class="headerlink" title="DocumentType类型"></a>DocumentType类型</h3><p>这个对象保存在document.doctype中,只有一个name属性保存文档类型的名称(‘html’),详情见高程p274</p><h3 id="DocumentFragment类型"><a href="#DocumentFragment类型" class="headerlink" title="DocumentFragment类型"></a>DocumentFragment类型</h3><p>相当于一个后备”仓库”,用来存放将来可能会用到的节点,避免浏览器反复渲染,用的不多,详情见高程p275</p><h3 id="Attr类型"><a href="#Attr类型" class="headerlink" title="Attr类型"></a>Attr类型</h3><p>特性节点,但不建议用里面的api,使用getAttribute,setAttribute,removeAttribute远比其方便,详情见高程p276</p><h2 id="DOM-操作技术"><a href="#DOM-操作技术" class="headerlink" title="DOM 操作技术"></a>DOM 操作技术</h2><h3 id="动态脚本"><a href="#动态脚本" class="headerlink" title="动态脚本"></a>动态脚本</h3><blockquote><p>指页面加载时不存在,需要时再加载入html结构的script</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// url外部引入方式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">  script.type = <span class="string">'text/javascript'</span></span><br><span class="line">  script.src = url</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(script)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传递代码字符串,行内执行方式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">  script.type = <span class="string">'text/javascript'</span></span><br><span class="line">  script.appendChild(<span class="built_in">document</span>.createTextNode(code))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>代码会在IE中报错,原因是IE不允许DOM访问script标签的子节点,<br>解决办法是使用<code>script</code>元素的<code>text</code>属性来指定代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">    script.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">    script.text = <span class="string">"function sayHi()&#123;alert('hi');&#125;"</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>综合上述,得到向下兼容IE7的代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScriptString</span>(<span class="params">code</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">    script.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        script.appendChild(<span class="built_in">document</span>.createTextNode(code));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ex)&#123;</span><br><span class="line">        script.text = code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addScript</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    loadScriptString(<span class="string">"function sayHi()&#123;alert('hi');&#125;"</span>);</span><br><span class="line">    sayHi();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态样式"><a href="#动态样式" class="headerlink" title="动态样式"></a>动态样式</h3><blockquote><p>link标签最佳实践是放在head标签内,让html结构没加载时就开始加载css.若放在body标签内,可能会出现本来没样式的结构突然又有了样式的”闪屏”</p><p>动态样式基本套路和动态脚本一样,直接上代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadStyles</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">'link'</span>)</span><br><span class="line">  link.rel=<span class="string">"stylesheet"</span></span><br><span class="line">  link.type=<span class="string">'css'</span></span><br><span class="line">  link.href=url</span><br><span class="line">  <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(link)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>解决IE的问题是访问元素的styleSheet属性的属性cssText,其接受css代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadStyleString</span>(<span class="params">css</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> style = <span class="built_in">document</span>.createElement(<span class="string">"style"</span>);</span><br><span class="line">    style.type = <span class="string">"text/css"</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        style.appendChild(<span class="built_in">document</span>.createTextNode(css));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ex)&#123;</span><br><span class="line">        style.styleSheet.cssText = css;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>];</span><br><span class="line">    head.appendChild(style);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addStyle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    loadStyleString(<span class="string">"body&#123;background-color:red&#125;"</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="操作表格"><a href="#操作表格" class="headerlink" title="操作表格"></a>操作表格</h3><blockquote><p>js为表格操作添加了一些api</p></blockquote><ul><li><code>&lt;table&gt;</code><ul><li>caption：保存着对<caption>元素（如果有）的指针。 </caption></li><li>tBodies：是一个<tbody>元素的 HTMLCollection。 </tbody></li><li>tFoot：保存着对<tfoot>元素（如果有）的指针。 </tfoot></li><li>tHead：保存着对<thead>元素（如果有）的指针。 </thead></li><li>rows：是一个表格中所有行的 HTMLCollection。 </li><li>createTHead()：创建<thead>元素，将其放到表格中，返回引用。 </thead></li><li>createTFoot()：创建<tfoot>元素，将其放到表格中，返回引用。 </tfoot></li><li>createCaption()：创建<caption>元素，将其放到表格中，返回引用。 </caption></li><li>deleteTHead()：删除<thead>元素。 </thead></li><li>deleteTFoot()：删除<tfoot>元素。 </tfoot></li><li>deleteCaption()：删除<caption>元素。 </caption></li><li>deleteRow(pos)：删除指定位置的行。 </li><li>insertRow(pos)：向 rows 集合中的指定位置插入一行。 </li></ul></li><li><code>&lt;tbody&gt;</code><ul><li>rows：保存着<tbody>元素中行的 HTMLCollection。 </tbody></li><li>deleteRow(pos)：删除指定位置的行。 </li><li>insertRow(pos)：向 rows 集合中的指定位置插入一行，返回对新插入行的引用。   </li></ul></li><li><code>&lt;tr&gt;</code><ul><li>cells：保存着<tr>元素中单元格的 HTMLCollection。 </tr></li><li>deleteCell(pos)：删除指定位置的单元格。</li><li>insertCell(pos)：向 cells 集合中的指定位置插入一个单元格，返回对新插入单元格的引用。</li></ul></li></ul><h3 id="使用NodeList"><a href="#使用NodeList" class="headerlink" title="使用NodeList"></a>使用NodeList</h3><blockquote><p>NodeList及其近亲NamedNodeMap和HTMLCollection都是动态的,每当文档结构发生变化,它们都会得到更新</p></blockquote><p>看一个无限循环的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> divs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>), i, div;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; divs.length; i++)&#123; </span><br><span class="line">    div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>); </span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决方法如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> divs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>), i, len, div;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>, len=divs.length; i &lt; len; i++)&#123; </span><br><span class="line">    div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>); </span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本章主要讨论&lt;code&gt;DOM 1级规范&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;节点层次&quot;&gt;&lt;a href=&quot;#节点层次&quot; class=&quot;headerlink&quot; title=&quot;节点层次&quot;&gt;&lt;/a&gt;节点层次&lt;/h2&gt;&lt;h2 id=&quot;Node类型&quot;&gt;&lt;a href=&quot;#Node
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正反馈系列:《JavaScript高级程序设计》BOM &amp; 客户端检测</title>
    <link href="http://yoursite.com/2017/12/21/%E9%AB%98%E7%A8%8Bvol4-89%E7%AB%A0-bom-ua/"/>
    <id>http://yoursite.com/2017/12/21/高程vol4-89章-bom-ua/</id>
    <published>2017-12-21T03:56:09.000Z</published>
    <updated>2017-12-21T03:57:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BOM-第八章"><a href="#BOM-第八章" class="headerlink" title="BOM(第八章)"></a>BOM(第八章)</h1><h2 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h2><p>全局变量不能通过<code>delete</code>操作符删除([[Configurable]]为false),而<code>window</code>对象上的属性可以</p><p><code>location</code>与<code>naviagator</code>是<code>window</code>的属性</p><h3 id="窗口关系与框架"><a href="#窗口关系与框架" class="headerlink" title="窗口关系与框架"></a>窗口关系与框架</h3><p>涉及<code>framset</code>,<code>frame</code>标签,和<code>window</code>对象中的<code>window.top</code>,<code>window.parent</code>等,用的不多,需要用时查阅p194</p><h3 id="窗口位置"><a href="#窗口位置" class="headerlink" title="窗口位置"></a>窗口位置</h3><blockquote><p>不同浏览器情况杂乱特殊,建议使用时查阅高程p197<br>表示窗口相对于屏幕左边和上边的位置,但下述值所表达的位置基点有小差异,具体参阅高程p197</p></blockquote><ul><li><code>window.screenLeft</code>,<code>window.screenTop</code> IE,Safari,Opera,Chrome</li><li><code>window.screenX</code>,<code>window.screenY</code>, FireFox,Safari,Chrome</li></ul><p>兼容代码:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> leftPos = (<span class="keyword">typeof</span> <span class="built_in">window</span>.screenLeft == <span class="string">"number"</span>) ? </span><br><span class="line">                  <span class="built_in">window</span>.screenLeft : <span class="built_in">window</span>.screenX;</span><br><span class="line"><span class="keyword">var</span> topPos = (<span class="keyword">typeof</span> <span class="built_in">window</span>.screenTop == <span class="string">"number"</span>) ? </span><br><span class="line">                  <span class="built_in">window</span>.screenTop : <span class="built_in">window</span>.screenY;</span><br><span class="line"></span><br><span class="line">alert(<span class="string">"Left: "</span> + leftPos);</span><br><span class="line">alert(<span class="string">"Top: "</span> + topPos);</span><br></pre></td></tr></table></figure></p><h4 id="window-moveTo-window-moveBy"><a href="#window-moveTo-window-moveBy" class="headerlink" title="window.moveTo(),window.moveBy()"></a>window.moveTo(),window.moveBy()</h4><blockquote><p>这两个方法不适用于框架,且只对最外层(frameset那节的概念)的window对象使用</p></blockquote><p><code>window.moveTo(newLeftPos,newTopPos),window.moveBy(leftMove,TopMove)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将窗口移动到屏幕左上角 </span></span><br><span class="line"><span class="built_in">window</span>.moveTo(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将窗向下移动 100 像素</span></span><br><span class="line"><span class="built_in">window</span>.moveBy(<span class="number">0</span>,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将窗口移动到(200,300) </span></span><br><span class="line"><span class="built_in">window</span>.moveTo(<span class="number">200</span>,<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将窗口向左移动 50 像素 </span></span><br><span class="line"><span class="built_in">window</span>.moveBy(<span class="number">-50</span>,<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="窗口大小"><a href="#窗口大小" class="headerlink" title="窗口大小"></a>窗口大小</h3><blockquote><p>不同浏览器情况杂乱特殊,建议使用时查阅高程p198</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取得可视区域大小</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getClient</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    width: <span class="built_in">window</span>.innerWidth || <span class="built_in">document</span>.documentElement.clientWidth || <span class="built_in">document</span>.body.clientWidth || <span class="number">0</span>,</span><br><span class="line">    height: <span class="built_in">window</span>.innerHeight || <span class="built_in">document</span>.documentElement.clientHeight || <span class="built_in">document</span>.body.clientHeight || <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 作者版本</span></span><br><span class="line"><span class="keyword">var</span> pageWidth = <span class="built_in">window</span>.innerWidth,</span><br><span class="line">    pageHeight = <span class="built_in">window</span>.innerHeight;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> pageWidth != <span class="string">"number"</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.compatMode == <span class="string">"CSS1Compat"</span>)&#123;</span><br><span class="line">        pageWidth = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line">        pageHeight = <span class="built_in">document</span>.documentElement.clientHeight;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        pageWidth = <span class="built_in">document</span>.body.clientWidth;</span><br><span class="line">        pageHeight = <span class="built_in">document</span>.body.clientHeight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(<span class="string">"Width: "</span> + pageWidth);</span><br><span class="line">alert(<span class="string">"Height: "</span> + pageHeight);</span><br></pre></td></tr></table></figure><h4 id="window-resizeTo-window-resizeBy"><a href="#window-resizeTo-window-resizeBy" class="headerlink" title="window.resizeTo(),window.resizeBy()"></a>window.resizeTo(),window.resizeBy()</h4><blockquote><p>这两个方法同样不适用于框架，而只能对最外层的 window 对象使用。</p></blockquote><p><code>window.resizeTo(newWidth,newHeight)</code>,<code>window.resizeBy(modifyWidth,modifyHeight)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调整到 100×100 </span></span><br><span class="line"><span class="built_in">window</span>.resizeTo(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调整到 200×150 </span></span><br><span class="line"><span class="built_in">window</span>.resizeBy(<span class="number">100</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调整到 300×300 </span></span><br><span class="line"><span class="built_in">window</span>.resizeTo(<span class="number">300</span>, <span class="number">300</span>);</span><br></pre></td></tr></table></figure><h3 id="导航和打开窗口"><a href="#导航和打开窗口" class="headerlink" title="导航和打开窗口"></a>导航和打开窗口</h3><h4 id="window-open"><a href="#window-open" class="headerlink" title="window.open()"></a>window.open()</h4><p><code>window.open(url[,windowTarget,propString,boolean]),return newWindowObj</code></p><ul><li><code>windowTarget</code> 已有窗口或框架的名称,或特殊窗口名称<code>_self,_parent,_top,_blank</code></li><li><code>propString</code> 若windowTarget不是一个已存在窗口或框架,会根据propString打开一个新窗口或标签页.若没有第三个参数,会打开默认设置(各种栏)的新浏览器窗口或标签页,不打开新窗口时会忽略第三个参数<br><img src="https://i.loli.net/2017/12/21/5a3b3061a28de.jpg" alt=""></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//等同于&lt; a href="http://www.wrox.com" target="topFrame"&gt;&lt;/a&gt; </span></span><br><span class="line"><span class="built_in">window</span>.open(<span class="string">"http://www.wrox.com/"</span>, <span class="string">"topFrame"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开一个新的可以调整大小的窗口，窗口初始大小为 400×400 像素，并且距屏幕上沿 和左边各 10 像素</span></span><br><span class="line"><span class="built_in">window</span>.open(<span class="string">"http://www.wrox.com/"</span>,<span class="string">"wroxWindow"</span>, <span class="string">"height=400,width=400,top=10,left=10,resizable=yes"</span>);</span><br></pre></td></tr></table></figure><p>window.open()返回一个指向新窗口的引用,可以调整大小或移动位置(主浏览器窗口不被允许),也可以像操作其他窗口一样操作新打开的窗口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wroxWin = <span class="built_in">window</span>.open(<span class="string">"http://www.wrox.com/"</span>,<span class="string">"wroxWindow"</span>, <span class="string">"height=400,width=400,top=10,left=10,resizable=yes"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调整大小 </span></span><br><span class="line">wroxWin.resizeTo(<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//移动位置 </span></span><br><span class="line">wroxWin.moveTo(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 close()方法关闭窗口。</span></span><br><span class="line">wroxWin.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭后,wroxWin的引用依然存在,可以检测其close属性</span></span><br><span class="line">alert(wroxWin.closed);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>新创建的 window 对象有一个 opener 属性，其中保存着打开它的原始窗口对象。这个属性只在弹出窗口中的最外层 window 对象（top）中有定义，而且指向调用 window.open()的窗口或框架。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wroxWin = <span class="built_in">window</span>.open(<span class="string">"http://www.wrox.com/"</span>,<span class="string">"wroxWindow"</span>, <span class="string">"height=400,width=400,top=10,left=10,resizable=yes"</span>);</span><br><span class="line"></span><br><span class="line">alert(wroxWin.opener == <span class="built_in">window</span>);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在chrome中,将opner属性设置为null,即表示单独进程中运行新标签页(无法与打开它的window对象进行通信)</span></span><br><span class="line"><span class="comment">// 标签页之间联系一旦被切断, 没有办法恢复</span></span><br><span class="line"><span class="comment">// wroxWin.opener = null;</span></span><br></pre></td></tr></table></figure><h3 id="setTimeout-与-setInterval"><a href="#setTimeout-与-setInterval" class="headerlink" title="setTimeout() 与 setInterval"></a>setTimeout() 与 setInterval</h3><blockquote><p>time参数代表的时隔多少秒后将要执行的string或function放入js任务队列<br>function内部的this在非严格模式下指向<code>window</code>,严格模式<code>undefined</code><br>在开发中尽量使用setTimeout模拟setInterval,这是最佳实践,原因是setInterval的后一个interval有可能先于前一个Interval完成</p></blockquote><p><code>setTimeout(string/function,time),return id</code><br><code>clearTimeout(id)</code></p><p><code>setInterval(string/function,time) return id</code><br><code>clearInterval(id)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// setTimeout 模拟 setInterval, 最佳实践</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> max = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">incrementNumber</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    num++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//if the max has not been reached, set another timeout</span></span><br><span class="line">    <span class="keyword">if</span> (num &lt; max) &#123;</span><br><span class="line">        setTimeout(incrementNumber, <span class="number">500</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">"Done"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setTimeout(incrementNumber, <span class="number">500</span>);</span><br></pre></td></tr></table></figure><h2 id="系统对话框"><a href="#系统对话框" class="headerlink" title="系统对话框"></a>系统对话框</h2><blockquote><p>系统对话框都是同步和模态的: 显示对话框时代码停止,关掉对话框时代码执行</p></blockquote><h4 id="alert"><a href="#alert" class="headerlink" title="alert()"></a>alert()</h4><h4 id="confirm"><a href="#confirm" class="headerlink" title="confirm()"></a>confirm()</h4><p><code>confirm(…) return boolean</code></p><h4 id="promopt"><a href="#promopt" class="headerlink" title="promopt()"></a>promopt()</h4><p><code>prompt(hint,placeholder) return inputValue</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = prompt(<span class="string">"What is your name? "</span>, <span class="string">""</span>); </span><br><span class="line"><span class="keyword">if</span> (result !== <span class="literal">null</span>) &#123; </span><br><span class="line">    alert(<span class="string">"Welcome, "</span> + result); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="window-print-window-find"><a href="#window-print-window-find" class="headerlink" title="window.print(),window.find()"></a>window.print(),window.find()</h4><p>显示打印对话框,显示查找对话框</p><h2 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h2><p>既是window的属性,又是document的属性,<code>window.loacation === document.location //true</code>,</p><h3 id="location属性"><a href="#location属性" class="headerlink" title="location属性"></a>location属性</h3><p><img src="https://i.loli.net/2017/12/21/5a3b3061f2634.jpg" alt=""></p><ul><li><code>location.hash</code> ‘#contents’</li><li><code>location.host</code> ‘www.wrox.com:80’</li><li><code>location.hostname</code> ‘www.wrox.com’</li><li><code>location.protocol</code> ‘http:’</li><li><code>location.port</code> ’80’</li><li><code>location.href</code> ‘<a href="http://www.wrox.com/?q=javascripts&amp;qq=qq&amp;qqq=qqq" target="_blank" rel="external">http://www.wrox.com/?q=javascripts&amp;qq=qq&amp;qqq=qqq</a>‘ == location.toString()</li><li><code>location.pathname</code> ‘/path’</li><li><code>location.search</code> ‘?q=javascripts&amp;qq=qq&amp;qqq=qqq’</li></ul><h3 id="查询字符串参数"><a href="#查询字符串参数" class="headerlink" title="查询字符串参数"></a>查询字符串参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getQueryStringArgs</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//get query string without the initial ?</span></span><br><span class="line">  <span class="keyword">var</span> qs = (location.search.length &gt; <span class="number">0</span> ? location.search.substring(<span class="number">1</span>) : <span class="string">""</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//object to hold data</span></span><br><span class="line">    args = &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get individual items</span></span><br><span class="line">    items = qs.length ? qs.split(<span class="string">"&amp;"</span>) : [],</span><br><span class="line">    item = <span class="literal">null</span>,</span><br><span class="line">    name = <span class="literal">null</span>,</span><br><span class="line">    value = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//used in for loop</span></span><br><span class="line">    i = <span class="number">0</span>,</span><br><span class="line">    len = items.length;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//assign each item onto the args object</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    item = items[i].split(<span class="string">"="</span>);</span><br><span class="line">    name = <span class="built_in">decodeURIComponent</span>(item[<span class="number">0</span>]);</span><br><span class="line">    value = <span class="built_in">decodeURIComponent</span>(item[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (name.length) &#123;</span><br><span class="line">      args[name] = value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="位置操作"><a href="#位置操作" class="headerlink" title="位置操作"></a>位置操作</h3><h4 id="location-assign-url"><a href="#location-assign-url" class="headerlink" title="location.assign(url)"></a>location.assign(url)</h4><blockquote><p>立刻打开url,并新增一条历史纪录<br>若给location.href或window.location赋值一个url值,也会立刻以该值为参数调用location.assign方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面三行代码效果相同</span></span><br><span class="line"><span class="built_in">window</span>.location = <span class="string">"http://www.wrox.com"</span>; </span><br><span class="line">location.href = <span class="string">"http://www.wrox.com"</span>; <span class="comment">//最常用</span></span><br><span class="line">location.assign(<span class="string">"http://www.wrox.com"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>修改location的其他属性也会立刻改变当前加载页面(<code>hash,search,port,hostname,pathname,port</code>)<br>每次修改location属性(<code>hash</code>除外),页面都会以新url重新加载,生成一个历史记录</p></blockquote><h4 id="location-replace-url"><a href="#location-replace-url" class="headerlink" title="location.replace(url)"></a>location.replace(url)</h4><p>按url加载页面,<strong>但不生成新的历史纪录</strong></p><h4 id="location-reload-boolean"><a href="#location-reload-boolean" class="headerlink" title="location.reload(boolean)"></a>location.reload(boolean)</h4><blockquote><p>纯刷新,boolean为false或不传boolean,允许从缓存中重载,boolean为true,从服务器重新加载</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">location.reload(); <span class="comment">//重新加载（有可能从缓存中加载）</span></span><br><span class="line">location.reload(<span class="literal">true</span>); <span class="comment">//重新加载（从服务器重新加载）</span></span><br></pre></td></tr></table></figure><h2 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h2><p><img src="https://i.loli.net/2017/12/21/5a3b3084465e3.jpg" alt=""><br><img src="https://i.loli.net/2017/12/21/5a3b3062108ee.jpg" alt=""></p><h3 id="检测插件"><a href="#检测插件" class="headerlink" title="检测插件"></a>检测插件</h3><p>非IE浏览器通过navigator.plugins数组实现,IE浏览器通过COM对象实现,简单而又有特定套路,详情查阅高程p211</p><h3 id="注册处理程序"><a href="#注册处理程序" class="headerlink" title="注册处理程序"></a>注册处理程序</h3><p>html5提供了registerContentHandler()和 registerProtocolHandler() 两个API,为指定mime类型或协议类型指定特定的网站应用程序(web application)作为处理特定资源的默认方式</p><p>简单而又套路,详情查阅高程p213</p><h2 id="screen对象"><a href="#screen对象" class="headerlink" title="screen对象"></a>screen对象</h2><blockquote><p>用处不大, 需要时查阅高程p214</p></blockquote><p>JavaScript 中有几个对象在编程中用处不大，而 screen 对象就是其中之一。screen 对象基本上只用来表明客户端的能力，其中包括浏览器窗口外部的显示器的信息，如像素宽度和高度等。每个浏览器中的 screen 对象都包含着各不相同的属性，下表列出了所有属性及支持相应属性的浏览器。</p><p><img src="https://i.loli.net/2017/12/21/5a3b30843dffe.jpg" alt=""><br><img src="https://i.loli.net/2017/12/21/5a3b306219bdd.jpg" alt=""></p><h2 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h2><blockquote><p>当页面的 URL 改变时，就会生成一条历史记录</p></blockquote><h4 id="history-go"><a href="#history-go" class="headerlink" title="history.go()"></a>history.go()</h4><p><code>history.go( num / string )</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后退一页 </span></span><br><span class="line">history.go(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//前进一页 </span></span><br><span class="line">history.go(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//前进两页 </span></span><br><span class="line">history.go(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>也可以给 go()方法传递一个字符串参数，此时浏览器会跳转到历史记录中包含该字符串的第一个位置.可能后退，也可能前进，具体要看哪个位置最近。如果历史记录中不包含该字符串，那么这个方法什么也不做</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跳转到最近的 wrox.com 页面 </span></span><br><span class="line">history.go(<span class="string">"wrox.com"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//跳转到最近的 nczonline.net 页面 </span></span><br><span class="line">history.go(<span class="string">"nczonline.net"</span>);</span><br></pre></td></tr></table></figure><h4 id="history-back-history-foward"><a href="#history-back-history-foward" class="headerlink" title="history.back(),history.foward()"></a>history.back(),history.foward()</h4><p>相当于history.go(-1)和history.go(1)</p><h4 id="history-length"><a href="#history-length" class="headerlink" title="history.length"></a>history.length</h4><blockquote><p>除了上述几个方法外，history 对象还有一个 length 属性，保存着历史记录的数量。这个数量包括所有历史记录即所有向后和向前的记录。对于加载到窗口、标签页或框架中的第一个页面而言，history.length 等于 0。通过像下面这样测试该属性的值，可以确定用户是否一开始就打开了你的页面。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (history.length == <span class="number">0</span>)&#123; </span><br><span class="line">    <span class="comment">//这应该是用户打开窗口后的第一个页面 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="客户端检测-第九章"><a href="#客户端检测-第九章" class="headerlink" title="客户端检测(第九章)"></a>客户端检测(第九章)</h1><h2 id="能力检测"><a href="#能力检测" class="headerlink" title="能力检测"></a>能力检测</h2><blockquote><p>基本模式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (object.propertyInQuestion)&#123; </span><br><span class="line">    <span class="comment">//使用 object.propertyInQuestion </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="尽量使用typeof进行能力检测"><a href="#尽量使用typeof进行能力检测" class="headerlink" title="尽量使用typeof进行能力检测"></a>尽量使用typeof进行能力检测</h3><blockquote><p>因为有些需要检测的东西是<code>object</code>而不是<code>function</code>,是前者时虽然能力检测返回true,但调用就会出错.<br>所以用<code>if(typeof xxxx === &quot;function&quot;)</code>,更严谨些<br>但IE会将有些存在的方法用typeof检测后返回字符串<code>unknown</code>,所以这里推荐一个更严谨的函数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用来检测object对象上的property特性是否存在</span></span><br><span class="line"><span class="comment">//作者：Peter Michaux </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isHostMethod</span>(<span class="params">object, property</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> t = <span class="keyword">typeof</span> object[property];</span><br><span class="line">  <span class="keyword">return</span> t==<span class="string">'function'</span> || (!!(t==<span class="string">'object'</span> &amp;&amp; object[property])) || t==<span class="string">'unknown'</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何使用能力检测"><a href="#如何使用能力检测" class="headerlink" title="如何使用能力检测"></a>如何使用能力检测</h3><blockquote><p>根据浏览器不同将能力组合起来是更可取的方式。如果你知道自己的应用程序需要使用某些特定的浏览器特性，那么最好是一次性检测所有相关特性，而不要分别检测。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//确定浏览器是否支持 Netscape 风格的插件 </span></span><br><span class="line"><span class="keyword">var</span> hasNSPlugins = !!(navigator.plugins &amp;&amp; navigator.plugins.length);</span><br><span class="line"></span><br><span class="line"><span class="comment">//确定浏览器是否具有 DOM1 级规定的能力 </span></span><br><span class="line"><span class="keyword">var</span> hasDOM1 = !!(<span class="built_in">document</span>.getElementById &amp;&amp; <span class="built_in">document</span>.createElement &amp;&amp; <span class="built_in">document</span>.getElementsByTagName);</span><br></pre></td></tr></table></figure><blockquote><p>在实际开发中，应该将能力检测作为确定下一步解决方案的依据，而不是用它来 判断用户使用的是什么浏览器。</p></blockquote><h2 id="怪癖检测"><a href="#怪癖检测" class="headerlink" title="怪癖检测"></a>怪癖检测</h2><p>与<code>能力检测</code>确认浏览器支持什么能力不同，<code>怪癖检测</code>是想要知道浏览器存在什么缺陷（“怪癖”也就是 bug）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检测内容:IE8或更早版本中存在一个bug:</span></span><br><span class="line"><span class="comment">//是否:与[[Enumerable]]标记为false的某个原型属性同名的属性,无法forin到</span></span><br><span class="line"><span class="keyword">var</span> hasDontEnumQuirk = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = &#123;</span><br><span class="line">    toString: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prop == <span class="string">"toString"</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//检测内容: safari 3之前版本的一个bug:</span></span><br><span class="line"><span class="comment">//是否会枚举[[Enumerable]]标记为false的属性</span></span><br><span class="line"><span class="keyword">var</span> hasEnumShadowsQuirk = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = &#123;</span><br><span class="line">    toString: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prop == <span class="string">"toString"</span>) &#123;</span><br><span class="line">      count++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (count &gt; <span class="number">1</span>);</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">alert(hasDontEnumQuirk);</span><br><span class="line">alert(hasEnumShadowsQuirk);</span><br></pre></td></tr></table></figure><h2 id="navigator-userAgent-用户代理检测"><a href="#navigator-userAgent-用户代理检测" class="headerlink" title="navigator.userAgent 用户代理检测"></a>navigator.userAgent 用户代理检测</h2><blockquote><p><code>用户代理检测</code>通过检测用户代理字符串来确定实际使用的浏览器,优先级应排在<code>能力检测</code>和<code>怪癖检测</code>之后. 因为<code>navigator.userAgent</code>字符串因为历史原因很混乱,而且还将会混乱下去.<br>。在每一次 HTTP 请求过程中，用户代理字符串是作为响应首部发送的，而且该字符串可以通过 JavaScript 的 <code>navigator.userAgent</code> 属性访问<br>确切知道浏览器的名字和版本号不如确切知道它使用的是什么呈现引擎,我们要编写的脚本将主要检测五大呈现引擎：IE、Gecko、WebKit、KHTML 和 Opera。<br>检测脚本模型伪代码如下所示:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义模式:</span></span><br><span class="line"><span class="keyword">var</span> client = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> engine = &#123;</span><br><span class="line">    <span class="comment">//每个引擎属性默认为0,</span></span><br><span class="line">    <span class="comment">//如果检测到了哪个呈现引擎,就以浮点数值形式将该引擎版本号写入相应属性</span></span><br><span class="line">    ie:<span class="number">0</span>,</span><br><span class="line">    gecko:<span class="number">0</span>,</span><br><span class="line">    webkit:<span class="number">0</span>,</span><br><span class="line">    khtml:<span class="number">0</span>,</span><br><span class="line">    opera:<span class="number">0</span>,</span><br><span class="line">    <span class="comment">//具体版本号</span></span><br><span class="line">    ver:<span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...检测代码,用来根据检测结果改变engine对象中的属性值</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    engine:engine</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用模式:</span></span><br><span class="line"><span class="keyword">if</span>(client.engine.ie)&#123;<span class="comment">//如果是IE,client.ie的值应大于0</span></span><br><span class="line">  <span class="comment">//...针对IE的代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(client.engine.gecko&gt;<span class="number">1.5</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(client.engine.ver === <span class="string">"1.8.1"</span>)&#123;</span><br><span class="line">    <span class="comment">//针对某个具体版本执行某些操作</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完善检测代码"><a href="#完善检测代码" class="headerlink" title="完善检测代码"></a>完善检测代码</h3><blockquote><p>检测代码的完善逻辑跟浏览器发展历史进程等有关,不必深入,详情见高程p230-&gt;章节结尾<br>作者给出了完整代码client.js,知道检测机制和调用方式(上述)后,应该直接拿来使用.</p></blockquote><h3 id="client-js"><a href="#client-js" class="headerlink" title="client.js"></a>client.js</h3><blockquote><p>《js高程》中用户代理检测,完整代码,使用方式见上述</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> client = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//rendering engines</span></span><br><span class="line">  <span class="keyword">var</span> engine = &#123;</span><br><span class="line">    ie: <span class="number">0</span>,</span><br><span class="line">    gecko: <span class="number">0</span>,</span><br><span class="line">    webkit: <span class="number">0</span>,</span><br><span class="line">    khtml: <span class="number">0</span>,</span><br><span class="line">    opera: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//complete version</span></span><br><span class="line">    ver: <span class="literal">null</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//browsers</span></span><br><span class="line">  <span class="keyword">var</span> browser = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//browsers</span></span><br><span class="line">    ie: <span class="number">0</span>,</span><br><span class="line">    firefox: <span class="number">0</span>,</span><br><span class="line">    safari: <span class="number">0</span>,</span><br><span class="line">    konq: <span class="number">0</span>,</span><br><span class="line">    opera: <span class="number">0</span>,</span><br><span class="line">    chrome: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//specific version</span></span><br><span class="line">    ver: <span class="literal">null</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//platform/device/OS</span></span><br><span class="line">  <span class="keyword">var</span> system = &#123;</span><br><span class="line">    win: <span class="literal">false</span>,</span><br><span class="line">    mac: <span class="literal">false</span>,</span><br><span class="line">    x11: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mobile devices</span></span><br><span class="line">    iphone: <span class="literal">false</span>,</span><br><span class="line">    ipod: <span class="literal">false</span>,</span><br><span class="line">    ipad: <span class="literal">false</span>,</span><br><span class="line">    ios: <span class="literal">false</span>,</span><br><span class="line">    android: <span class="literal">false</span>,</span><br><span class="line">    nokiaN: <span class="literal">false</span>,</span><br><span class="line">    winMobile: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//game systems</span></span><br><span class="line">    wii: <span class="literal">false</span>,</span><br><span class="line">    ps: <span class="literal">false</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//detect rendering engines/browsers</span></span><br><span class="line">  <span class="keyword">var</span> ua = navigator.userAgent;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.opera) &#123;</span><br><span class="line">    engine.ver = browser.ver = <span class="built_in">window</span>.opera.version();</span><br><span class="line">    engine.opera = browser.opera = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/AppleWebKit\/(\S+)/</span>.test(ua)) &#123;</span><br><span class="line">    engine.ver = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</span><br><span class="line">    engine.webkit = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//figure out if it's Chrome or Safari</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/Chrome\/(\S+)/</span>.test(ua)) &#123;</span><br><span class="line">      browser.ver = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</span><br><span class="line">      browser.chrome = <span class="built_in">parseFloat</span>(browser.ver);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/Version\/(\S+)/</span>.test(ua)) &#123;</span><br><span class="line">      browser.ver = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</span><br><span class="line">      browser.safari = <span class="built_in">parseFloat</span>(browser.ver);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//approximate version</span></span><br><span class="line">      <span class="keyword">var</span> safariVersion = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (engine.webkit &lt; <span class="number">100</span>) &#123;</span><br><span class="line">        safariVersion = <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (engine.webkit &lt; <span class="number">312</span>) &#123;</span><br><span class="line">        safariVersion = <span class="number">1.2</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (engine.webkit &lt; <span class="number">412</span>) &#123;</span><br><span class="line">        safariVersion = <span class="number">1.3</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        safariVersion = <span class="number">2</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      browser.safari = browser.ver = safariVersion;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/KHTML\/(\S+)/</span>.test(ua) || <span class="regexp">/Konqueror\/([^;]+)/</span>.test(ua)) &#123;</span><br><span class="line">    engine.ver = browser.ver = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</span><br><span class="line">    engine.khtml = browser.konq = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/rv:([^\)]+)\) Gecko\/\d&#123;8&#125;/</span>.test(ua)) &#123;</span><br><span class="line">    engine.ver = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</span><br><span class="line">    engine.gecko = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//determine if it's Firefox</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/Firefox\/(\S+)/</span>.test(ua)) &#123;</span><br><span class="line">      browser.ver = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</span><br><span class="line">      browser.firefox = <span class="built_in">parseFloat</span>(browser.ver);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/MSIE ([^;]+)/</span>.test(ua)) &#123;</span><br><span class="line">    engine.ver = browser.ver = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</span><br><span class="line">    engine.ie = browser.ie = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//detect browsers</span></span><br><span class="line">  browser.ie = engine.ie;</span><br><span class="line">  browser.opera = engine.opera;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//detect platform</span></span><br><span class="line">  <span class="keyword">var</span> p = navigator.platform;</span><br><span class="line">  system.win = p.indexOf(<span class="string">"Win"</span>) == <span class="number">0</span>;</span><br><span class="line">  system.mac = p.indexOf(<span class="string">"Mac"</span>) == <span class="number">0</span>;</span><br><span class="line">  system.x11 = (p == <span class="string">"X11"</span>) || (p.indexOf(<span class="string">"Linux"</span>) == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//detect windows operating systems</span></span><br><span class="line">  <span class="keyword">if</span> (system.win) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/Win(?:dows )?([^do]&#123;2&#125;)\s?(\d+\.\d+)?/</span>.test(ua)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">RegExp</span>[<span class="string">"$1"</span>] == <span class="string">"NT"</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="built_in">RegExp</span>[<span class="string">"$2"</span>]) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">"5.0"</span>:</span><br><span class="line">            system.win = <span class="string">"2000"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">"5.1"</span>:</span><br><span class="line">            system.win = <span class="string">"XP"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">"6.0"</span>:</span><br><span class="line">            system.win = <span class="string">"Vista"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">"6.1"</span>:</span><br><span class="line">            system.win = <span class="string">"7"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">            system.win = <span class="string">"NT"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">RegExp</span>[<span class="string">"$1"</span>] == <span class="string">"9x"</span>) &#123;</span><br><span class="line">        system.win = <span class="string">"ME"</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        system.win = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//mobile devices</span></span><br><span class="line">  system.iphone = ua.indexOf(<span class="string">"iPhone"</span>) &gt; <span class="number">-1</span>;</span><br><span class="line">  system.ipod = ua.indexOf(<span class="string">"iPod"</span>) &gt; <span class="number">-1</span>;</span><br><span class="line">  system.ipad = ua.indexOf(<span class="string">"iPad"</span>) &gt; <span class="number">-1</span>;</span><br><span class="line">  system.nokiaN = ua.indexOf(<span class="string">"NokiaN"</span>) &gt; <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//windows mobile</span></span><br><span class="line">  <span class="keyword">if</span> (system.win == <span class="string">"CE"</span>) &#123;</span><br><span class="line">    system.winMobile = system.win;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (system.win == <span class="string">"Ph"</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/Windows Phone OS (\d+.\d+)/</span>.test(ua)) &#123;;</span><br><span class="line">      system.win = <span class="string">"Phone"</span>;</span><br><span class="line">      system.winMobile = <span class="built_in">parseFloat</span>(<span class="built_in">RegExp</span>[<span class="string">"$1"</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//determine iOS version</span></span><br><span class="line">  <span class="keyword">if</span> (system.mac &amp;&amp; ua.indexOf(<span class="string">"Mobile"</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/CPU (?:iPhone )?OS (\d+_\d+)/</span>.test(ua)) &#123;</span><br><span class="line">      system.ios = <span class="built_in">parseFloat</span>(<span class="built_in">RegExp</span>.$<span class="number">1.</span>replace(<span class="string">"_"</span>, <span class="string">"."</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      system.ios = <span class="number">2</span>; <span class="comment">//can't really detect - so guess</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//determine Android version</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/Android (\d+\.\d+)/</span>.test(ua)) &#123;</span><br><span class="line">    system.android = <span class="built_in">parseFloat</span>(<span class="built_in">RegExp</span>.$<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//gaming systems</span></span><br><span class="line">  system.wii = ua.indexOf(<span class="string">"Wii"</span>) &gt; <span class="number">-1</span>;</span><br><span class="line">  system.ps = <span class="regexp">/playstation/i</span>.test(ua);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//return it</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    engine: engine,</span><br><span class="line">    browser: browser,</span><br><span class="line">    system: system</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;BOM-第八章&quot;&gt;&lt;a href=&quot;#BOM-第八章&quot; class=&quot;headerlink&quot; title=&quot;BOM(第八章)&quot;&gt;&lt;/a&gt;BOM(第八章)&lt;/h1&gt;&lt;h2 id=&quot;window对象&quot;&gt;&lt;a href=&quot;#window对象&quot; class=&quot;header
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正反馈系列:《ECMAScript 6 入门》- vol.1</title>
    <link href="http://yoursite.com/2017/12/21/es6-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-vol1/"/>
    <id>http://yoursite.com/2017/12/21/es6-读书笔记-vol1/</id>
    <published>2017-12-21T00:38:07.000Z</published>
    <updated>2017-12-22T06:24:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="let-amp-const-取消全局属性挂载"><a href="#let-amp-const-取消全局属性挂载" class="headerlink" title="let &amp; const 取消全局属性挂载"></a>let &amp; const 取消全局属性挂载</h3><p><code>let</code>,<code>const</code>,<code>class</code>都不会挂载在全局属性<code>global(window)</code>下.</p><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><h3 id="交换变量值"><a href="#交换变量值" class="headerlink" title="交换变量值"></a>交换变量值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">[x, y] = [y, x];</span><br></pre></td></tr></table></figure><h3 id="函数返回多个值"><a href="#函数返回多个值" class="headerlink" title="函数返回多个值"></a>函数返回多个值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回一个数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> [a, b, c] = example();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    foo: <span class="number">1</span>,</span><br><span class="line">    bar: <span class="number">2</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = example();</span><br></pre></td></tr></table></figure><h3 id="函数参数的定义"><a href="#函数参数的定义" class="headerlink" title="函数参数的定义"></a>函数参数的定义</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数是一组有次序的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">[x, y, z]</span>) </span>&#123; ... &#125;</span><br><span class="line">f([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数是一组无次序的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">&#123;x, y, z&#125;</span>) </span>&#123; ... &#125;</span><br><span class="line">f(&#123;<span class="attr">z</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">x</span>: <span class="number">1</span>&#125;);</span><br></pre></td></tr></table></figure><h3 id="提取json数据"><a href="#提取json数据" class="headerlink" title="提取json数据"></a>提取json数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jsonData = &#123;</span><br><span class="line">  id: <span class="number">42</span>,</span><br><span class="line">  status: <span class="string">"OK"</span>,</span><br><span class="line">  data: [<span class="number">867</span>, <span class="number">5309</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; id, status, <span class="attr">data</span>: number &#125; = jsonData;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(id, status, number);</span><br><span class="line"><span class="comment">// 42, "OK", [867, 5309]</span></span><br></pre></td></tr></table></figure><h3 id="函数参数默认值"><a href="#函数参数默认值" class="headerlink" title="函数参数默认值"></a>函数参数默认值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">jQuery.ajax = <span class="function"><span class="keyword">function</span> (<span class="params">url, &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">  async = true,</span></span></span><br><span class="line"><span class="function"><span class="params">  beforeSend = function (</span>) </span>&#123;&#125;,</span><br><span class="line">  cache = <span class="literal">true</span>,</span><br><span class="line">  complete = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  crossDomain = <span class="literal">false</span>,</span><br><span class="line">  global = <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// ... more config</span></span><br><span class="line">&#125;) &#123;</span><br><span class="line">  <span class="comment">// ... do stuff</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="遍历Map结构"><a href="#遍历Map结构" class="headerlink" title="遍历Map结构"></a>遍历Map结构</h3><p>任何部署了 Iterator 接口的对象，都可以用<code>for...of</code>循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">'first'</span>, <span class="string">'hello'</span>);</span><br><span class="line">map.set(<span class="string">'second'</span>, <span class="string">'world'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">" is "</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// first is hello</span></span><br><span class="line"><span class="comment">// second is world</span></span><br></pre></td></tr></table></figure><p>如果只想获取键名，或者只想获取键值，可以写成下面这样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取键名</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取键值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [,value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="string-includes-str-：返回布尔值，表示是否找到了参数字符串。"><a href="#string-includes-str-：返回布尔值，表示是否找到了参数字符串。" class="headerlink" title="string.includes(str)：返回布尔值，表示是否找到了参数字符串。"></a>string.includes(str)：返回布尔值，表示是否找到了参数字符串。</h3><h3 id="string-startsWith-str-：返回布尔值，表示参数字符串是否在原字符串的头部。"><a href="#string-startsWith-str-：返回布尔值，表示参数字符串是否在原字符串的头部。" class="headerlink" title="string.startsWith(str)：返回布尔值，表示参数字符串是否在原字符串的头部。"></a>string.startsWith(str)：返回布尔值，表示参数字符串是否在原字符串的头部。</h3><h3 id="string-endsWith-str-：返回布尔值，表示参数字符串是否在原字符串的尾部。"><a href="#string-endsWith-str-：返回布尔值，表示参数字符串是否在原字符串的尾部。" class="headerlink" title="string.endsWith(str)：返回布尔值，表示参数字符串是否在原字符串的尾部。"></a>string.endsWith(str)：返回布尔值，表示参数字符串是否在原字符串的尾部。</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">'Hello world!'</span>;</span><br><span class="line"></span><br><span class="line">s.startsWith(<span class="string">'Hello'</span>) <span class="comment">// true</span></span><br><span class="line">s.endsWith(<span class="string">'!'</span>) <span class="comment">// true</span></span><br><span class="line">s.includes(<span class="string">'o'</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="string-repeat-number-return-new-str"><a href="#string-repeat-number-return-new-str" class="headerlink" title="string.repeat(number) return new str"></a>string.repeat(number) return new str</h3><p>返回一个新字符串表示将原字符串重复n次</p><h3 id="string-padStart-num-str-padEnd-return-new-str"><a href="#string-padStart-num-str-padEnd-return-new-str" class="headerlink" title="string.padStart(num,str).padEnd return new str."></a>string.padStart(num,str).padEnd return new str.</h3><p>如果某个字符串不够指定长度，会在头部或尾部补全。<code>padStart()</code>用于头部补全，<code>padEnd()</code>用于尾部补全。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'x'</span>.padStart(<span class="number">5</span>, <span class="string">'ab'</span>) <span class="comment">// 'ababx'</span></span><br><span class="line"><span class="string">'x'</span>.padStart(<span class="number">4</span>, <span class="string">'ab'</span>) <span class="comment">// 'abax'</span></span><br><span class="line"></span><br><span class="line"><span class="string">'x'</span>.padEnd(<span class="number">5</span>, <span class="string">'ab'</span>) <span class="comment">// 'xabab'</span></span><br><span class="line"><span class="string">'x'</span>.padEnd(<span class="number">4</span>, <span class="string">'ab'</span>) <span class="comment">// 'xaba'</span></span><br></pre></td></tr></table></figure><p>如果原字符串的长度，等于或大于指定的最小长度，则返回原字符串。</p><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><p>模板字符串的大括号内部，就是执行 JavaScript 代码，如果大括号中的值不是字符串，将按照一般的规则转为字符串。比如，大括号中是一个对象，将默认调用对象的toString方法,模板字符串之中还能调用函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="string">`<span class="subst">$&#123;x&#125;</span> + <span class="subst">$&#123;y&#125;</span> = <span class="subst">$&#123;x + y&#125;</span>`</span></span><br><span class="line"><span class="comment">// "1 + 2 = 3"</span></span><br><span class="line"></span><br><span class="line"><span class="string">`<span class="subst">$&#123;x&#125;</span> + <span class="subst">$&#123;y * <span class="number">2</span>&#125;</span> = <span class="subst">$&#123;x + y * <span class="number">2</span>&#125;</span>`</span></span><br><span class="line"><span class="comment">// "1 + 4 = 5"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="string">`<span class="subst">$&#123;obj.x + obj.y&#125;</span>`</span></span><br><span class="line"><span class="comment">// "3"</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"Hello World"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">`foo <span class="subst">$&#123;fn()&#125;</span> bar`</span></span><br><span class="line"><span class="comment">// foo Hello World bar</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 可以嵌套</span></span><br><span class="line"><span class="keyword">const</span> tmpl = <span class="function"><span class="params">addrs</span> =&gt;</span> <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;table&gt;</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;addrs.map(addr =&gt; <span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    &lt;tr&gt;&lt;td&gt;<span class="subst">$&#123;addr.first&#125;</span>&lt;/td&gt;&lt;/tr&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    &lt;tr&gt;&lt;td&gt;<span class="subst">$&#123;addr.last&#125;</span>&lt;/td&gt;&lt;/tr&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  `</span>).join(<span class="string">''</span>)&#125;</span></span></span><br><span class="line"><span class="string">  &lt;/table&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h2><h3 id="构造函数创建正则实例的改变"><a href="#构造函数创建正则实例的改变" class="headerlink" title="构造函数创建正则实例的改变"></a>构造函数创建正则实例的改变</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 允许第一个参数是正则时,用第二个参数添加修饰符</span></span><br><span class="line"><span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/xyz/</span>, <span class="string">'i'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用这种方式会产生修饰符覆盖</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/abc/ig</span>, <span class="string">'i'</span>).flags <span class="comment">//i</span></span><br></pre></td></tr></table></figure><h3 id="字符串的正则方法"><a href="#字符串的正则方法" class="headerlink" title="字符串的正则方法"></a>字符串的正则方法</h3><p>字符串对象共有 4 个方法，可以使用正则表达式：<code>match()</code>、<code>replace()</code>、<code>search()</code>和<code>split()</code>。</p><p>ES6 将这 4 个方法，在语言内部全部调用<code>RegExp</code>的实例方法，从而做到所有与正则相关的方法，全都定义在<code>RegExp</code>对象上。</p><ul><li><code>String.prototype.match</code> 调用 <code>RegExp.prototype[Symbol.match]</code></li><li><code>String.prototype.replace</code> 调用 <code>RegExp.prototype[Symbol.replace]</code></li><li><code>String.prototype.search</code> 调用 <code>RegExp.prototype[Symbol.search]</code></li><li><code>String.prototype.split</code> 调用 <code>RegExp.prototype[Symbol.split]</code></li></ul><h3 id="u修饰符"><a href="#u修饰符" class="headerlink" title="u修饰符"></a>u修饰符</h3><p>ES6 对正则表达式添加了<code>u</code>修饰符，含义为“Unicode 模式”，用来正确处理大于<code>\uFFFF</code>的 Unicode 字符。也就是说，会正确处理四个字节的 UTF-16 编码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/^\uD83D/u.test(<span class="string">'\uD83D\uDC2A'</span>) <span class="comment">// false</span></span><br><span class="line">/^\uD83D/.test(<span class="string">'\uD83D\uDC2A'</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><hr><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数默认值"><a href="#函数默认值" class="headerlink" title="函数默认值"></a>函数默认值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">&#123;x, y = <span class="number">5</span>&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(&#123;&#125;) <span class="comment">// undefined 5</span></span><br><span class="line">foo(&#123;<span class="attr">x</span>: <span class="number">1</span>&#125;) <span class="comment">// 1 5</span></span><br><span class="line">foo(&#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;) <span class="comment">// 1 2</span></span><br><span class="line">foo() <span class="comment">// TypeError: Cannot read property 'x' of undefined</span></span><br></pre></td></tr></table></figure><p>上面代码只使用了对象的解构赋值默认值，没有使用函数参数的默认值。只有当函数<code>foo</code>的参数是一个对象时，变量<code>x</code>和<code>y</code>才会通过解构赋值生成。如果函数<code>foo</code>调用时没提供参数，变量<code>x</code>和<code>y</code>就不会生成，从而报错。通过提供函数参数的默认值，就可以避免这种情况。改进方法如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">&#123;x, y = <span class="number">5</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo() <span class="comment">// undefined 5</span></span><br></pre></td></tr></table></figure><p>作为练习，请问下面两种写法有什么差别？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">m1</span>(<span class="params">&#123;x = <span class="number">0</span>, y = <span class="number">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [x, y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">m2</span>(<span class="params">&#123;x, y&#125; = &#123; x: <span class="number">0</span>, y: <span class="number">0</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [x, y];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数没有参数的情况</span></span><br><span class="line">m1() <span class="comment">// [0, 0]</span></span><br><span class="line">m2() <span class="comment">// [0, 0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// x 和 y 都有值的情况</span></span><br><span class="line">m1(&#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span>&#125;) <span class="comment">// [3, 8]</span></span><br><span class="line">m2(&#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span>&#125;) <span class="comment">// [3, 8]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// x 有值，y 无值的情况</span></span><br><span class="line">m1(&#123;<span class="attr">x</span>: <span class="number">3</span>&#125;) <span class="comment">// [3, 0]</span></span><br><span class="line">m2(&#123;<span class="attr">x</span>: <span class="number">3</span>&#125;) <span class="comment">// [3, undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// x 和 y 都无值的情况</span></span><br><span class="line">m1(&#123;&#125;) <span class="comment">// [0, 0];</span></span><br><span class="line">m2(&#123;&#125;) <span class="comment">// [undefined, undefined]</span></span><br><span class="line"></span><br><span class="line">m1(&#123;<span class="attr">z</span>: <span class="number">3</span>&#125;) <span class="comment">// [0, 0]</span></span><br><span class="line">m2(&#123;<span class="attr">z</span>: <span class="number">3</span>&#125;) <span class="comment">// [undefined, undefined]</span></span><br></pre></td></tr></table></figure><h3 id="默认值作用域"><a href="#默认值作用域" class="headerlink" title="默认值作用域"></a>默认值作用域</h3><p>一旦设置了参数的默认值，函数进行声明初始化时，参数会形成一个单独的作用域（context）。等到初始化结束，这个作用域就会消失。这种语法行为，在不设置参数默认值时，是不会出现的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y = x</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="number">2</span>) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">y = x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f() <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>参数是函数时也遵守类似规则, 直接上例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="string">'outer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">func = (</span>) =&gt; <span class="title">foo</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> foo = <span class="string">'inner'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(func());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar(); <span class="comment">// outer</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">func = (</span>) =&gt; <span class="title">foo</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> foo = <span class="string">'inner'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(func());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar() <span class="comment">// ReferenceError: foo is not defined</span></span><br></pre></td></tr></table></figure><h3 id="name属性返回函数的函数名"><a href="#name属性返回函数的函数名" class="headerlink" title="name属性返回函数的函数名"></a>name属性返回函数的函数名</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">foo.name <span class="comment">// "foo"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">foo.name <span class="comment">// "foo(es6),空字符串(es5)"</span></span><br></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>箭头函数有几个使用注意点。</p><p>（1）函数体内的<code>this</code>对象，就是定义时所在的对象，而不是使用时所在的对象。由于箭头函数没有自己的this，所以当然也就不能用call()、apply()、bind()这些方法去改变this的指向。</p><p>（2）不可以当作构造函数，也就是说，不可以使用<code>new</code>命令，否则会抛出一个错误。</p><p>（3）不可以使用<code>arguments</code>对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</p><p>（4）不可以使用<code>yield</code>命令，因此箭头函数不能用作 Generator 函数。</p><h3 id="reduce函数-arr-reduce-callback-initialValue"><a href="#reduce函数-arr-reduce-callback-initialValue" class="headerlink" title="reduce函数 arr.reduce(callback[, initialValue])"></a>reduce函数 arr.reduce(callback[, initialValue])</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> total = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].reduce(<span class="function"><span class="keyword">function</span>(<span class="params">sum, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sum + value;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// total is 6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> flattened = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a.concat(b);</span><br><span class="line">&#125;, []);</span><br><span class="line"><span class="comment">// flattened is [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>下面是一个管道机制的例子,前一个函数的输出是最后一个函数的输入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pipeline = <span class="function">(<span class="params">...funcs</span>) =&gt;</span></span><br><span class="line">  val =&gt; funcs.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b(a), val);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> plus1 = <span class="function"><span class="params">a</span> =&gt;</span> a + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> mult2 = <span class="function"><span class="params">a</span> =&gt;</span> a * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> addThenMult = pipeline(plus1, mult2);</span><br><span class="line"></span><br><span class="line">addThenMult(<span class="number">5</span>)</span><br><span class="line"><span class="comment">// 12</span></span><br></pre></td></tr></table></figure><p>如果觉得上面的写法可读性比较差，也可以采用下面的写法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> plus1 = <span class="function"><span class="params">a</span> =&gt;</span> a + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> mult2 = <span class="function"><span class="params">a</span> =&gt;</span> a * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">mult2(plus1(<span class="number">5</span>))</span><br><span class="line"><span class="comment">// 12</span></span><br></pre></td></tr></table></figure><hr><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="…替代apply"><a href="#…替代apply" class="headerlink" title="…替代apply"></a>…替代apply</h3><p>下面是扩展运算符取代<code>apply</code>方法的一个实际的例子，应用<code>Math.max</code>方法，简化求出一个数组最大元素的写法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5 的写法</span></span><br><span class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, [<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 的写法</span></span><br><span class="line"><span class="built_in">Math</span>.max(...[<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">Math</span>.max(<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>);</span><br></pre></td></tr></table></figure><h3 id="深拷贝数组"><a href="#深拷贝数组" class="headerlink" title="深拷贝数组"></a>深拷贝数组</h3><p>扩展运算符提供了复制数组的简便写法, 不引用数组地址, 真实的复制一个数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">const</span> a2 = [...a1];</span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">const</span> [...a2] = a1;</span><br></pre></td></tr></table></figure><h3 id="字符串与数组"><a href="#字符串与数组" class="headerlink" title="字符串与数组"></a>字符串与数组</h3><p>返回字符串长度的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">length</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [...str].length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="伪数组或任何Iterator接口的对象转化为数组"><a href="#伪数组或任何Iterator接口的对象转化为数组" class="headerlink" title="伪数组或任何Iterator接口的对象转化为数组"></a>伪数组或任何Iterator接口的对象转化为数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nodeList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>);</span><br><span class="line"><span class="keyword">let</span> array = [...nodeList];</span><br></pre></td></tr></table></figure><h3 id="map-amp-set-generator函数转化为数组"><a href="#map-amp-set-generator函数转化为数组" class="headerlink" title="map&amp;set,generator函数转化为数组"></a>map&amp;set,generator函数转化为数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="number">1</span>, <span class="string">'one'</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="string">'two'</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="string">'three'</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [...map.keys()]; <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> go = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">[...go()] <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>上面代码中，变量<code>go</code>是一个 Generator 函数，执行后返回的是一个遍历器对象，对这个遍历器对象执行扩展运算符，就会将内部遍历得到的值，转为一个数组。</p><h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h3><p><code>Array.from</code>方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）(伪数组)和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">    <span class="string">'0'</span>: <span class="string">'a'</span>,</span><br><span class="line">    <span class="string">'1'</span>: <span class="string">'b'</span>,</span><br><span class="line">    <span class="string">'2'</span>: <span class="string">'c'</span>,</span><br><span class="line">    length: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5的写法</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [].slice.call(arrayLike); <span class="comment">// ['a', 'b', 'c']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6的写法</span></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="built_in">Array</span>.from(arrayLike); <span class="comment">// ['a', 'b', 'c']</span></span><br></pre></td></tr></table></figure><p>只要是部署了 Iterator 接口的数据结构，<code>Array.from</code>都能将其转为数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(<span class="string">'hello'</span>)</span><br><span class="line"><span class="comment">// ['h', 'e', 'l', 'l', 'o']</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> namesSet = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'a'</span>, <span class="string">'b'</span>])</span><br><span class="line"><span class="built_in">Array</span>.from(namesSet) <span class="comment">// ['a', 'b']</span></span><br></pre></td></tr></table></figure><p><code>Array.from</code>还可以接受第二个参数，作用类似于数组的<code>map</code>方法，用来对每个元素进行处理，将处理后的值放入返回的数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(arrayLike, x =&gt; x * x);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">Array</span>.from(arrayLike).map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], (x) =&gt; x * x)</span><br><span class="line"><span class="comment">// [1, 4, 9]</span></span><br></pre></td></tr></table></figure><h3 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>) <span class="comment">// [3,11,8]</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>) <span class="comment">// [3]</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>).length <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p><code>Array.of</code>基本上可以用来替代<code>Array()</code>或<code>new Array()</code>，并且不存在由于参数不同而导致的重载。它的行为非常统一。</p><p><code>Array.of</code>总是返回参数值组成的数组。如果没有参数，就返回一个空数组。</p><p><code>Array.of</code>方法可以用下面的代码模拟实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ArrayOf</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [].slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="arr-find-amp-findIndex"><a href="#arr-find-amp-findIndex" class="headerlink" title="arr.find() &amp; findIndex()"></a>arr.find() &amp; findIndex()</h3><p>用来代替indexOf</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>].find(<span class="function">(<span class="params">n</span>) =&gt;</span> n &lt; <span class="number">0</span>)</span><br><span class="line"><span class="comment">// -5</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="arr-fill-value-start-end"><a href="#arr-fill-value-start-end" class="headerlink" title="arr.fill(value[,start,end])"></a>arr.fill(value[,start,end])</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">7</span>)</span><br><span class="line"><span class="comment">// [7, 7, 7]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>).fill(<span class="number">7</span>)</span><br><span class="line"><span class="comment">// [7, 7, 7]</span></span><br><span class="line"></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// ['a', 7, 'c']</span></span><br></pre></td></tr></table></figure><h3 id="arr-entries-，keys-和values"><a href="#arr-entries-，keys-和values" class="headerlink" title="arr.entries()，keys()和values()"></a>arr.entries()，keys()和values()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> elem <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 'a'</span></span><br><span class="line"><span class="comment">// 'b'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, elem] <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index, elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 "a"</span></span><br><span class="line"><span class="comment">// 1 "b"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果不使用for...of循环，可以手动调用遍历器对象的next方法，进行遍历。</span></span><br><span class="line"><span class="keyword">let</span> letter = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">let</span> entries = letter.entries();</span><br><span class="line"><span class="built_in">console</span>.log(entries.next().value); <span class="comment">// [0, 'a']</span></span><br><span class="line"><span class="built_in">console</span>.log(entries.next().value); <span class="comment">// [1, 'b']</span></span><br><span class="line"><span class="built_in">console</span>.log(entries.next().value); <span class="comment">// [2, 'c']</span></span><br></pre></td></tr></table></figure><h3 id="arr-includes"><a href="#arr-includes" class="headerlink" title="arr.includes()"></a>arr.includes()</h3><p><code>Array.prototype.includes</code>方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的<code>includes</code>方法类似</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>)     <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">4</span>)     <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="literal">NaN</span>].includes(<span class="literal">NaN</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>该方法的第二个参数表示搜索的起始位置，默认为<code>0</code>。如果第二个参数为负数，则表示倒数的位置，如果这时它大于数组长度（比如第二个参数为<code>-4</code>，但数组长度为<code>3</code>），则会重置为从<code>0</code>开始。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">3</span>);  <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">-1</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>另外，Map 和 Set 数据结构有一个<code>has</code>方法，需要注意与<code>includes</code>区分。</p><ul><li>Map 结构的<code>has</code>方法，是用来查找键名的，比如<code>Map.prototype.has(key)</code>、<code>WeakMap.prototype.has(key)</code>、<code>Reflect.has(target, propertyKey)</code>。</li><li>Set 结构的<code>has</code>方法，是用来查找值的，比如<code>Set.prototype.has(value)</code>、<code>WeakSet.prototype.has(value)</code>。</li></ul><hr><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="getter与setter的简写表示"><a href="#getter与setter的简写表示" class="headerlink" title="getter与setter的简写表示"></a>getter与setter的简写表示</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">const</span> cart = &#123;</span><br><span class="line">  _wheels: <span class="number">4</span>,</span><br><span class="line"></span><br><span class="line">  get wheels () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._wheels;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  set wheels (value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value &lt; <span class="keyword">this</span>._wheels) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'数值太小了！'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>._wheels = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Object-is-var1-var2"><a href="#Object-is-var1-var2" class="headerlink" title="Object.is(var1,var2)"></a>Object.is(var1,var2)</h3><p><code>Object.is(var1,var2) return boolean</code></p><p><code>Object.is</code>用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致,不一致的地方见下面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">0</span> === <span class="number">-0</span> <span class="comment">//true</span></span><br><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.is(+<span class="number">0</span>, <span class="number">-0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source1 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> source2 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(target, source1, source2);</span><br><span class="line">target <span class="comment">// &#123;a:1, b:2, c:3&#125;</span></span><br></pre></td></tr></table></figure><p><code>Object.assign</code>方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。</p><p><code>Object.assign</code>方法的第一个参数是目标对象，后面的参数都是源对象。</p><p>注意，如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。</p><p><code>Object.assign</code>拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（<code>enumerable: false</code>）。</p><p>对于这种嵌套的对象，一旦遇到同名属性，<code>Object.assign</code>的处理方法是替换，而不是添加。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="string">'c'</span>, <span class="attr">d</span>: <span class="string">'e'</span> &#125; &#125;</span><br><span class="line"><span class="keyword">const</span> source = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="string">'hello'</span> &#125; &#125;</span><br><span class="line"><span class="built_in">Object</span>.assign(target, source)</span><br><span class="line"><span class="comment">// &#123; a: &#123; b: 'hello' &#125; &#125;</span></span><br></pre></td></tr></table></figure><ol><li>为对象添加属性</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.assign(<span class="keyword">this</span>, &#123;x, y&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>为对象添加方法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(SomeClass.prototype, &#123;</span><br><span class="line">  someMethod(arg1, arg2) &#123;</span><br><span class="line">    ···</span><br><span class="line">  &#125;,</span><br><span class="line">  anotherMethod() &#123;</span><br><span class="line">    ···</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于下面的写法</span></span><br><span class="line">SomeClass.prototype.someMethod = <span class="function"><span class="keyword">function</span> (<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">  ···</span><br><span class="line">&#125;;</span><br><span class="line">SomeClass.prototype.anotherMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  ···</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>克隆对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不保证继承链的拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">origin</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, origin);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保持继承链的拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">origin</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> originProto = <span class="built_in">Object</span>.getPrototypeOf(origin);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(<span class="built_in">Object</span>.create(originProto), origin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>合并多个对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> merge =</span><br><span class="line">  (target, ...sources) =&gt; <span class="built_in">Object</span>.assign(target, ...sources);</span><br></pre></td></tr></table></figure><ol><li>为属性指定默认值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> DEFAULTS = &#123;</span><br><span class="line">  logLevel: <span class="number">0</span>,</span><br><span class="line">  outputFormat: <span class="string">'html'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processContent</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  options = <span class="built_in">Object</span>.assign(&#123;&#125;, DEFAULTS, options);</span><br><span class="line">  <span class="built_in">console</span>.log(options);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="属性的可枚举和遍历"><a href="#属性的可枚举和遍历" class="headerlink" title="属性的可枚举和遍历"></a>属性的可枚举和遍历</h3><p>对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为。<code>Object.getOwnPropertyDescriptor</code>方法可以获取该属性的描述对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">foo</span>: <span class="number">123</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, <span class="string">'foo'</span>)</span><br><span class="line"><span class="comment">//  &#123;</span></span><br><span class="line"><span class="comment">//    value: 123,</span></span><br><span class="line"><span class="comment">//    writable: true,</span></span><br><span class="line"><span class="comment">//    enumerable: true,</span></span><br><span class="line"><span class="comment">//    configurable: true</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br></pre></td></tr></table></figure><p>描述对象的<code>enumerable</code>属性，称为”可枚举性“，如果该属性为<code>false</code>，就表示某些操作会忽略当前属性。</p><p>目前，有四个操作会忽略<code>enumerable</code>为<code>false</code>的属性。</p><ul><li><code>for...in</code>循环：只遍历对象自身的和继承的可枚举的属性。</li><li><code>Object.keys()</code>：返回对象自身的所有可枚举的属性的键名。</li><li><code>JSON.stringify()</code>：只串行化对象自身的可枚举的属性。</li><li><code>Object.assign()</code>： 忽略<code>enumerable</code>为<code>false</code>的属性，只拷贝对象自身的可枚举的属性。</li></ul><p>这四个操作之中，前三个是 ES5 就有的，最后一个<code>Object.assign()</code>是 ES6 新增的。其中，只有<code>for...in</code>会返回继承的属性，其他三个方法都会忽略继承的属性，只处理对象自身的属性。实际上，引入“可枚举”（<code>enumerable</code>）这个概念的最初目的，就是让某些属性可以规避掉<code>for...in</code>操作，不然所有内部属性和方法都会被遍历到。比如，对象原型的<code>toString</code>方法，以及数组的<code>length</code>属性，就通过“可枚举性”，从而避免被<code>for...in</code>遍历到。</p><p>总的来说，操作中引入继承的属性会让问题复杂化，大多数时候，我们只关心对象自身的属性。所以，尽量不要用<code>for...in</code>循环，而用<code>Object.keys()</code>代替。</p><p>ES6 一共有 5 种方法可以遍历对象的属性。</p><p><strong>（1）for…in</strong></p><p><code>for...in</code>循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。</p><p><strong>（2）Object.keys(obj)</strong></p><p><code>Object.keys</code>返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名。</p><p><strong>（3）Object.getOwnPropertyNames(obj)</strong></p><p><code>Object.getOwnPropertyNames</code>返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名。</p><p><strong>（4）Object.getOwnPropertySymbols(obj)</strong></p><p><code>Object.getOwnPropertySymbols</code>返回一个数组，包含对象自身的所有 Symbol 属性的键名。</p><p><strong>（5）Reflect.ownKeys(obj)</strong></p><p><code>Reflect.ownKeys</code>返回一个数组，包含对象自身的所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举。</p><p>以上的 5 种方法遍历对象的键名，都遵守同样的属性遍历的次序规则。</p><ul><li>首先遍历所有数值键，按照数值升序排列。</li><li>其次遍历所有字符串键，按照加入时间升序排列。</li><li>最后遍历所有 Symbol 键，按照加入时间升序排列。</li></ul><h3 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors()"></a>Object.getOwnPropertyDescriptors()</h3><p>前面说过，<code>Object.getOwnPropertyDescriptor</code>方法会返回某个对象属性的描述对象（descriptor）。ES2017 引入了<code>Object.getOwnPropertyDescriptors(多个s)</code>方法，返回指定对象所有自身属性（非继承属性）的描述对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  foo: <span class="number">123</span>,</span><br><span class="line">  get bar() &#123; <span class="keyword">return</span> <span class="string">'abc'</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptors(obj)</span><br><span class="line"><span class="comment">// &#123; foo:</span></span><br><span class="line"><span class="comment">//    &#123; value: 123,</span></span><br><span class="line"><span class="comment">//      writable: true,</span></span><br><span class="line"><span class="comment">//      enumerable: true,</span></span><br><span class="line"><span class="comment">//      configurable: true &#125;,</span></span><br><span class="line"><span class="comment">//   bar:</span></span><br><span class="line"><span class="comment">//    &#123; get: [Function: get bar],</span></span><br><span class="line"><span class="comment">//      set: undefined,</span></span><br><span class="line"><span class="comment">//      enumerable: true,</span></span><br><span class="line"><span class="comment">//      configurable: true &#125; &#125;</span></span><br></pre></td></tr></table></figure><p>该方法的引入目的，主要是为了解决<code>Object.assign()</code>无法正确拷贝<code>get</code>属性和<code>set</code>属性的问题。</p><h3 id="Object-setPrototypeOf-obj-prototype"><a href="#Object-setPrototypeOf-obj-prototype" class="headerlink" title="Object.setPrototypeOf(obj,prototype)"></a>Object.setPrototypeOf(obj,prototype)</h3><p>与obj.<strong>proto</strong>作用相同,用来设置一个对象的prototype对象(.<strong>proto</strong>,[[prototype]]),返回参数对象本身</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, prototype)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置空对象</span></span><br><span class="line"><span class="keyword">const</span> o = <span class="built_in">Object</span>.setPrototypeOf(&#123;&#125;, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h3 id="Object-getPrototypeOf-obj"><a href="#Object-getPrototypeOf-obj" class="headerlink" title="Object.getPrototypeOf(obj)"></a>Object.getPrototypeOf(obj)</h3><p><code>Object.getPrototypeOf(obj) return prototype</code></p><p>读取一个对象的原型对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getPrototypeOf(obj)</span><br></pre></td></tr></table></figure><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><p>指向当前对象的原型对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> proto = &#123;</span><br><span class="line">  foo: <span class="string">'hello'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  find() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.foo;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, proto);</span><br><span class="line">obj.find() <span class="comment">// "hello"</span></span><br></pre></td></tr></table></figure><p>super关键字表示原型对象时,只能用在es6简写法里,其他都会报错</p><p>JavaScript 引擎内部，<code>super.foo</code>等同于<code>Object.getPrototypeOf(this).foo</code>（属性）或<code>Object.getPrototypeOf(this).foo.call(this)</code>（方法）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> proto = &#123;</span><br><span class="line">  x: <span class="string">'hello'</span>,</span><br><span class="line">  foo() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  x: <span class="string">'world'</span>,</span><br><span class="line">  foo() &#123;</span><br><span class="line">    <span class="keyword">super</span>.foo();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, proto);</span><br><span class="line"></span><br><span class="line">obj.foo() <span class="comment">// "world"</span></span><br></pre></td></tr></table></figure><h3 id="Object-keys-obj-Object-values-obj-Object-entries-obj-return-arr"><a href="#Object-keys-obj-Object-values-obj-Object-entries-obj-return-arr" class="headerlink" title="Object.keys(obj),Object.values(obj),Object.entries(obj) return arr"></a>Object.keys(obj),Object.values(obj),Object.entries(obj) return arr</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 都只返回自身的,不返回继承的</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.keys(obj)</span><br><span class="line"><span class="comment">// ["foo", "baz"]</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.values(obj)</span><br><span class="line"><span class="comment">// ["bar", 42]</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.entries(obj)</span><br><span class="line"><span class="comment">// [ ["foo", "bar"], ["baz", 42] ]</span></span><br></pre></td></tr></table></figure><p><code>Object.entries</code>方法的另一个用处是，将对象转为真正的<code>Map</code>结构。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(<span class="built_in">Object</span>.entries(obj));</span><br><span class="line">map <span class="comment">// Map &#123; foo: "bar", baz: 42 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="对象的扩展运算符"><a href="#对象的扩展运算符" class="headerlink" title="对象的扩展运算符"></a>对象的扩展运算符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; x, y, ...z &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;;</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 2</span></span><br><span class="line">z <span class="comment">// &#123; a: 3, b: 4 &#125;</span></span><br></pre></td></tr></table></figure><p>下面代码中，变量<code>x</code>是单纯的解构赋值，所以可以读取对象<code>o</code>继承的属性；变量<code>y</code>和<code>z</code>是扩展运算符的解构赋值，只能读取对象<code>o</code>自身的属性，所以变量<code>z</code>可以赋值成功，变量<code>y</code>取不到值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = <span class="built_in">Object</span>.create(&#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;);</span><br><span class="line">o.z = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; x, ...&#123; y, z &#125; &#125; = o;</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// undefined</span></span><br><span class="line">z <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="es6克隆对象的三种写法"><a href="#es6克隆对象的三种写法" class="headerlink" title="es6克隆对象的三种写法"></a>es6克隆对象的三种写法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">const</span> clone1 = &#123;</span><br><span class="line">  __proto__: <span class="built_in">Object</span>.getPrototypeOf(obj),</span><br><span class="line">  ...obj</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">const</span> clone2 = <span class="built_in">Object</span>.assign(</span><br><span class="line">  <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.getPrototypeOf(obj)),</span><br><span class="line">  obj</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法三</span></span><br><span class="line"><span class="keyword">const</span> clone3 = <span class="built_in">Object</span>.create(</span><br><span class="line">  <span class="built_in">Object</span>.getPrototypeOf(obj),</span><br><span class="line">  <span class="built_in">Object</span>.getOwnPropertyDescriptors(obj)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>如果用户自定义的属性，放在扩展运算符后面，则扩展运算符内部的同名属性会被覆盖掉</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> aWithOverrides = &#123; ...a, <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> aWithOverrides = &#123; ...a, ...&#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125; &#125;;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>, y = <span class="number">2</span>, aWithOverrides = &#123; ...a, x, y &#125;;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> aWithOverrides = <span class="built_in">Object</span>.assign(&#123;&#125;, a, &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="Null传导运算符"><a href="#Null传导运算符" class="headerlink" title="Null传导运算符"></a>Null传导运算符</h3><p>为了防止null.a 或 undefined.a报错,还只是提案</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果 a 是 null 或 undefined, 返回 undefined</span></span><br><span class="line"><span class="comment">// 否则返回 a.b.c().d</span></span><br><span class="line">a?.b.c().d</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 a 是 null 或 undefined，下面的语句不产生任何效果</span></span><br><span class="line"><span class="comment">// 否则执行 a.b = 42</span></span><br><span class="line">a?.b = <span class="number">42</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 a 是 null 或 undefined，下面的语句不产生任何效果</span></span><br><span class="line"><span class="keyword">delete</span> a?.b</span><br></pre></td></tr></table></figure><hr><h2 id="Class-extends-类继承"><a href="#Class-extends-类继承" class="headerlink" title="Class extends 类继承"></a>Class extends 类继承</h2><h3 id="new-target属性"><a href="#new-target属性" class="headerlink" title="new.target属性"></a>new.target属性</h3><p><code>new</code>是从构造函数生成实例对象的命令。ES6 为<code>new</code>命令引入了一个<code>new.target</code>属性，该属性一般用在构造函数之中，返回<code>new</code>命令作用于的那个构造函数。如果构造函数不是通过<code>new</code>命令调用的，<code>new.target</code>会返回<code>undefined</code>，因此这个属性可以用来确定构造函数是怎么调用的。</p><p>Class 内部调用<code>new.target</code>，返回当前 Class。</p><p>需要注意的是，子类继承父类时，<code>new.target</code>会返回子类。</p><h3 id="super-1"><a href="#super-1" class="headerlink" title="super()"></a>super()</h3><p>super作为函数调用时,代表父类的构造函数. ES6要求, 子类的构造函数必须执行一次<code>super</code>函数</p><p>super只能用在子类的constructor中,相当于执行了<code>Father.prototype.constructor.call(this)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span>.target.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> A() <span class="comment">// A</span></span><br><span class="line"><span class="keyword">new</span> B() <span class="comment">// B</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>new.target</code>指向当前正在执行的函数。可以看到，在<code>super()</code>执行时，它指向的是子类<code>B</code>的构造函数，而不是父类<code>A</code>的构造函数。也就是说，<code>super()</code>内部的<code>this</code>指向的是<code>B</code>。</p><h3 id="super-2"><a href="#super-2" class="headerlink" title="super"></a>super</h3><p>第二种情况，<code>super</code>作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。</p><p>ES6 规定，通过<code>super</code>调用父类的方法时，方法内部的<code>this</code>指向子类。</p><p>由于<code>this</code>指向子类，所以如果通过<code>super</code>对某个属性赋值，这时<code>super</code>就是<code>this</code>，赋值的属性会变成子类实例的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.x = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">super</span>.x = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">super</span>.x); <span class="comment">// undefined</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x); <span class="comment">// 3</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> B();</span><br></pre></td></tr></table></figure><p>上面代码中，<code>super.x</code>赋值为<code>3</code>，这时等同于对<code>this.x</code>赋值为<code>3</code>。而当读取<code>super.x</code>的时候，读的是<code>A.prototype.x</code>，所以返回<code>undefined</code>。</p><p>如果<code>super</code>作为对象，用在静态方法之中，这时<code>super</code>将指向父类，而不是父类的原型对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> myMethod(msg) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'static'</span>, msg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  myMethod(msg) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'instance'</span>, msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> myMethod(msg) &#123;</span><br><span class="line">    <span class="keyword">super</span>.myMethod(msg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  myMethod(msg) &#123;</span><br><span class="line">    <span class="keyword">super</span>.myMethod(msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.myMethod(<span class="number">1</span>); <span class="comment">// static 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> Child();</span><br><span class="line">child.myMethod(<span class="number">2</span>); <span class="comment">// instance 2</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>super</code>在静态方法之中指向父类，在普通方法之中指向父类的原型对象。</p><h3 id="类的Prototype属性和proto属性"><a href="#类的Prototype属性和proto属性" class="headerlink" title="类的Prototype属性和proto属性"></a>类的Prototype属性和<strong>proto</strong>属性</h3><p>大多数浏览器的 ES5 实现之中，每一个对象都有<code>__proto__</code>属性，指向对应的构造函数的<code>prototype</code>属性。Class 作为构造函数的语法糖，同时有<code>prototype</code>属性和<code>__proto__</code>属性，因此同时存在两条继承链。</p><p>（1）子类的<code>__proto__</code>属性，表示构造函数的继承，总是指向父类。</p><p>（2）子类<code>prototype</code>属性的<code>__proto__</code>属性，表示方法的继承，总是指向父类的<code>prototype</code>属性。</p><p><img src="https://i.loli.net/2017/12/21/5a3b0244c9ed5.jpg" alt=""></p><p>上面的图代表class Son extends Father 的继承关系</p><h2 id="ES6严格模式"><a href="#ES6严格模式" class="headerlink" title="ES6严格模式"></a>ES6严格模式</h2><ul><li>变量必须声明后再使用</li><li>函数的参数不能有同名属性，否则报错</li><li>不能使用<code>with</code>语句</li><li>不能对只读属性赋值，否则报错</li><li>不能使用前缀 0 表示八进制数，否则报错</li><li>不能删除不可删除的属性，否则报错</li><li>不能删除变量<code>delete prop</code>，会报错，只能删除属性<code>delete global[prop]</code></li><li><code>eval</code>不会在它的外层作用域引入变量</li><li><code>eval</code>和<code>arguments</code>不能被重新赋值</li><li><code>arguments</code>不会自动反映函数参数的变化</li><li>不能使用<code>arguments.callee</code></li><li>不能使用<code>arguments.caller</code></li><li>禁止<code>this</code>指向全局对象</li><li>不能使用<code>fn.caller</code>和<code>fn.arguments</code>获取函数调用的堆栈</li><li>增加了保留字（比如<code>protected</code>、<code>static</code>和<code>interface</code>）</li><li>顶层<code>this</code>属于undefined,不应该在顶层使用this</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;let-amp-const-取消全局属性挂载&quot;&gt;&lt;a href=&quot;#let-amp-const-取消全局属性挂载&quot; class=&quot;headerlink&quot; title=&quot;let &amp;amp; const 取消全局属性挂载&quot;&gt;&lt;/a&gt;let &amp;amp; const 取消
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正反馈系列:《JavaScript高级程序设计》函数表达式</title>
    <link href="http://yoursite.com/2017/12/20/%E9%AB%98%E7%A8%8Bvol3-%E7%AC%AC%E4%B8%83%E7%AB%A0/"/>
    <id>http://yoursite.com/2017/12/20/高程vol3-第七章/</id>
    <published>2017-12-20T03:53:43.000Z</published>
    <updated>2017-12-21T03:57:35.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数表达式用于循环语句"><a href="#函数表达式用于循环语句" class="headerlink" title="函数表达式用于循环语句"></a>函数表达式用于循环语句</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不要这样做</span></span><br><span class="line"><span class="keyword">if</span>(condition)&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>)</span>&#123; ... &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>)</span>&#123; ...sth <span class="keyword">else</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换成函数表达式</span></span><br><span class="line"><span class="keyword">var</span> sayHi;</span><br><span class="line"><span class="keyword">if</span>(condition)&#123;</span><br><span class="line">    sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; ... &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; ...sth <span class="keyword">else</span> &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="递归中arguments-callee的替代"><a href="#递归中arguments-callee的替代" class="headerlink" title="递归中arguments.callee的替代"></a>递归中arguments.callee的替代</h3><p>严格模式下不能使用arguments.callee,可以使用命名函数表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> factorial = (<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num*f(num<span class="number">-1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h3 id="基础闭包"><a href="#基础闭包" class="headerlink" title="基础闭包"></a>基础闭包</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需求: 使用闭包,返回一个数组[0,1,2,3,4]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnNums</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">      arr[num] = i;</span><br><span class="line">    &#125;)(i)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(returnNums());</span><br></pre></td></tr></table></figure><h3 id="闭包中返回函数的this"><a href="#闭包中返回函数的this" class="headerlink" title="闭包中返回函数的this"></a>闭包中返回函数的this</h3><blockquote><p>匿名函数具有全局性,this一般指向global(浏览器为window)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> abc = <span class="string">'window'</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  abc : <span class="string">'obj'</span>,</span><br><span class="line">  fn: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.abc) </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.fn()() <span class="comment">//window</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> abc = <span class="string">'window'</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  abc : <span class="string">'obj'</span>,</span><br><span class="line">  fn: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(that.abc) </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.fn()() <span class="comment">//obj</span></span><br><span class="line"></span><br><span class="line">obj.abc(); <span class="comment">// obj</span></span><br><span class="line">(object.abc)(); <span class="comment">//obj,虽然加括号了,但没有形成表达式,等于没加</span></span><br><span class="line">(obj.abc = obj.abc)(); <span class="comment">//'window',形成表达式,表达式等于最右边的值:函数</span></span><br></pre></td></tr></table></figure><h3 id="闭包的内存回收"><a href="#闭包的内存回收" class="headerlink" title="闭包的内存回收"></a>闭包的内存回收</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assignHandler</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">"someElement"</span>); </span><br><span class="line">    element.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        alert(element.id); </span><br><span class="line">    &#125;; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 以上代码存在内存泄露问题</span></span><br><span class="line"><span class="comment">// element.onclick匿名函数永远存在着对element.id的引用,所以element对象永远释放不了</span></span><br><span class="line"><span class="comment">// 修改代码如下</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assignHandler</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">"someElement"</span>);</span><br><span class="line">    <span class="keyword">var</span> id = element.id;</span><br><span class="line"></span><br><span class="line">    element.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(id) &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 由于变量id被引用,整个闭包的所有变量(包括element),还是无法释放</span></span><br><span class="line">    <span class="comment">// 所以要将element=null,让闭包内只剩下必要的id变量</span></span><br><span class="line">    element = <span class="literal">null</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模拟块级作用域"><a href="#模拟块级作用域" class="headerlink" title="模拟块级作用域"></a>模拟块级作用域</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 块级作用域</span></span><br><span class="line">    <span class="comment">// 因为没有指向自调用函数的引用,所以函数执行后会立刻销毁内部变量所占内存</span></span><br><span class="line">    <span class="comment">// 所以可以减少内存使用</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h2 id="私有变量"><a href="#私有变量" class="headerlink" title="私有变量"></a>私有变量</h2><blockquote><p>私有变量包括<code>函数的参数</code>、<code>局部变量</code>和<code>在函数内部定义的其他函数</code></p></blockquote><h3 id="特权方法"><a href="#特权方法" class="headerlink" title="特权方法"></a>特权方法</h3><blockquote><p>把有权访问<code>私有变量</code>和<code>私有函数</code>的<code>公有方法</code>称为<code>特权方法（privileged method)</code><br>外部只能通过<code>特权方法</code>访问<code>私有变量</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// name是一个私有变量(不带this,不在实例属性内,只是构造函数内部的一个变量)</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 特权方法getName与setName</span></span><br><span class="line">  <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.setName = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    name = value;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">"Nicholas"</span>);</span><br><span class="line">alert(person.getName()); <span class="comment">//"Nicholas"</span></span><br><span class="line">person.setName(<span class="string">"Greg"</span>);</span><br><span class="line">alert(person.getName()); <span class="comment">//"Greg"</span></span><br></pre></td></tr></table></figure><h3 id="静态私有变量"><a href="#静态私有变量" class="headerlink" title="静态私有变量"></a>静态私有变量</h3><blockquote><p>静态私有变量: 静态的, 有所有实例共享的属性<br>静态私有变量可以增加代码复用,但每个实例不能做到拥有自己独自的私有变量<br>到底使用实例变量,还是静态私有变量,看你的需求</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">  Person = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    name = value;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  Person.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  Person.prototype.setName = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    name = value;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Nicholas"</span>);</span><br><span class="line">alert(person1.getName()); <span class="comment">//"Nicholas"</span></span><br><span class="line">person1.setName(<span class="string">"Greg"</span>);</span><br><span class="line">alert(person1.getName()); <span class="comment">//"Greg"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"Michael"</span>);</span><br><span class="line">alert(person1.getName()); <span class="comment">//"Michael"</span></span><br><span class="line">alert(person2.getName()); <span class="comment">//"Michael"</span></span><br></pre></td></tr></table></figure><h3 id="模块模式"><a href="#模块模式" class="headerlink" title="模块模式"></a>模块模式</h3><blockquote><p>为<code>单例</code>创建私有变量和特权方法<br>如果必须创建一个对象并以某些数据对其进行初始化，同时还要公开一些能够访问这些私有数据的方法，那么就可以使用模块模式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> moduleList = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 定义私有变量</span></span><br><span class="line">  <span class="keyword">var</span> jQuery = &#123;&#125;,</span><br><span class="line">    vue = &#123;&#125;,</span><br><span class="line">    react = &#123;&#125;</span><br><span class="line">  <span class="keyword">var</span> Component = [jQuery, vue, react]</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// return一个单例,里面的方法是特权方法</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getLenth: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> Component.length</span><br><span class="line">    &#125;,</span><br><span class="line">    addModlue: <span class="function"><span class="keyword">function</span> (<span class="params">comp</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> comp === <span class="string">'object'</span>) &#123;</span><br><span class="line">        Component.push(comp)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(moduleList.getLenth()) <span class="comment">//3</span></span><br><span class="line"><span class="keyword">var</span> angular = &#123;&#125;</span><br><span class="line">moduleList.addModlue(angular)</span><br><span class="line"><span class="built_in">console</span>.log(moduleList.getLenth()); <span class="comment">//4</span></span><br></pre></td></tr></table></figure><h3 id="增强的模块模式"><a href="#增强的模块模式" class="headerlink" title="增强的模块模式"></a>增强的模块模式</h3><blockquote><p>有人进一步改进了模块模式，即在返回对象之前加入对其增强的代码。这种增强的模块模式适合那些单例必须是某种类型的实例，同时还必须添加某些属性和（或）方法对其加以增强的情况</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BaseComponent</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">OtherComponent</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> application = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 私有变量或方法</span></span><br><span class="line">  <span class="keyword">var</span> components = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line">  components.push(<span class="keyword">new</span> BaseComponent());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 需求:application必须是BaseComponent()实例</span></span><br><span class="line">  <span class="comment">// 需求:且application必须是一个单例</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 这里匿名函数闭包内部的app实际上是application的一个局部拷贝</span></span><br><span class="line">  <span class="comment">// 且此app有权访问私有变量或方法</span></span><br><span class="line">  <span class="keyword">var</span> app = <span class="keyword">new</span> BaseComponent();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将特权方法放到app上</span></span><br><span class="line">  app.getComponentCount = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> components.length;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  app.registerComponent = <span class="function"><span class="keyword">function</span> (<span class="params">component</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> component == <span class="string">"object"</span>) &#123;</span><br><span class="line">      components.push(component);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">alert(application <span class="keyword">instanceof</span> BaseComponent); <span class="comment">//true</span></span><br><span class="line">application.registerComponent(<span class="keyword">new</span> OtherComponent());</span><br><span class="line">alert(application.getComponentCount()); <span class="comment">//2</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;函数表达式用于循环语句&quot;&gt;&lt;a href=&quot;#函数表达式用于循环语句&quot; class=&quot;headerlink&quot; title=&quot;函数表达式用于循环语句&quot;&gt;&lt;/a&gt;函数表达式用于循环语句&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>深入理解javaScript继承机制</title>
    <link href="http://yoursite.com/2017/12/20/17-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3javaScript%E7%BB%A7%E6%89%BF/"/>
    <id>http://yoursite.com/2017/12/20/17-深入理解javaScript继承/</id>
    <published>2017-12-19T23:14:55.000Z</published>
    <updated>2017-12-21T00:42:57.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="这是什么"><a href="#这是什么" class="headerlink" title="这是什么?"></a>这是什么?</h3><p>自己在学习《JavaScript高级程序设计》 和《ES6 标准教程》 中的一些体会. 主要关注<code>javascript</code>继承的组织模式, 自己的一些心得体会.</p><p>写博客的目的是为了学习的正反馈, 帮助自己理解.</p><blockquote><p>这篇博客会直接上最终结论, 后面再放上推导最终结论的过程.<br>这样做的理由是, 如果直接能理解最终结论, 就不太用看推导过程了</p></blockquote><h2 id="最佳实践-寄生组合式继承"><a href="#最佳实践-寄生组合式继承" class="headerlink" title="最佳实践, 寄生组合式继承"></a>最佳实践, 寄生组合式继承</h2><p>不啰嗦, 直接上结论, javaScript继承的最佳实践, 最终形态, 应该如图所示</p><p><img src="https://i.loli.net/2017/12/20/5a399d347382c.jpg" alt=""></p><blockquote><p>解释下上面的流程图.</p><ol><li><code>[[ prototype ]]</code> 的浏览器实现是 <code>.__proto__</code></li><li>首字母大写的是<code>构造函数</code> 或 <code>类</code>, 首字母小写的是 <code>构造函数实例</code> 或 <code>类实例</code></li><li>应用上图的继承方式,<code>son</code>实例继承了<code>Father</code>构造函数中的属性,且属性变为私有, 在<code>son1</code>上修改继承后的属性, 不会影响<code>son2</code>中的属性.</li><li>应用上图的继承方式, <code>son</code>实例继承了<code>Father.prototype</code>原型中的公用方法, 这些方法被<code>son1</code>,<code>son2</code>所共用, 修改<code>son1</code>上继承的方法会影响<code>son2</code>中的同名方法</li><li>所以应该这样组织我们的代码, 将需要私有的属性放入<code>构造函数</code>中用<code>Father.call(this,...args)</code>来继承, 将需要共用的属性放入<code>Father.prototype</code>中用原型链继承.</li><li>这种继承之所以是最佳实践, 因为既解决了<code>共用方法复用</code>,又解决了<code>属性私有化</code>,还解决了<code>instanceof,isPrototypeOf 指向问题</code></li></ol></blockquote><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// just 原型式继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  F.prototype = o;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 寄生式继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">Son, Father</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 使用原型式继承创建一个对象,此对象原型式继承自Father.prototype</span></span><br><span class="line">  <span class="keyword">var</span> prototype = object(Father.prototype);</span><br><span class="line">  <span class="comment">// 将此对象赋值为Son的原型对象指针Son.prototype</span></span><br><span class="line">  <span class="comment">// 相当于使Son.prototype原型式继承自Father.protottype</span></span><br><span class="line">  <span class="comment">// 从而使所有Son实例获得了Father.prototype上的公用属性和方法</span></span><br><span class="line">  prototype.constructor = Son;</span><br><span class="line">  Son.prototype = prototype;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 下述方法会因寄生式继承继承给Son.prototype</span></span><br><span class="line">Father.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 借用构造函数继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 使用借用构造函数式继承,继承了Father构造函数中的属性</span></span><br><span class="line">  <span class="comment">// 借用构造函数继承的属性不复用.每个Son实例中的属性都是独立的</span></span><br><span class="line">  <span class="comment">// 原理是this都不一样,所以当然是独立的</span></span><br><span class="line">  Father.call(<span class="keyword">this</span>, name);</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 修改Son.prototype指向</span></span><br><span class="line"><span class="comment">// 使其指向我们创建的继承自Father.prototype的对象</span></span><br><span class="line">inheritPrototype(Son, Father);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增强Son.prototype,增加的方法sayAge是father实例访问不到的.</span></span><br><span class="line">Son.prototype.sayAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.age);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> Son(<span class="string">"Jordan"</span>, <span class="number">23</span>);</span><br><span class="line">instance1.colors.push(<span class="string">"black"</span>);</span><br><span class="line">alert(instance1.colors); <span class="comment">//"red,blue,green,black"</span></span><br><span class="line">instance1.sayName(); <span class="comment">//"Jordan";</span></span><br><span class="line">instance1.sayAge(); <span class="comment">//23</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> Son(<span class="string">"Kobe"</span>, <span class="number">24</span>);</span><br><span class="line">alert(instance2.colors); <span class="comment">//"red,blue,green"</span></span><br><span class="line">instance2.sayName(); <span class="comment">//"Kobe";</span></span><br><span class="line">instance2.sayAge(); <span class="comment">//24</span></span><br></pre></td></tr></table></figure><h3 id="ES6中类的实现方式"><a href="#ES6中类的实现方式" class="headerlink" title="ES6中类的实现方式"></a>ES6中类的实现方式</h3><blockquote><p>ES6中,<code>类</code>的继承方式和<code>继承组合式</code>继承相吻合. 其中<code>Father.call(this,...args)</code>用<code>super(..args)</code>实现</p></blockquote><p><img src="https://i.loli.net/2017/12/20/5a399f0887a7a.jpg" alt=""></p><h2 id="推导过程"><a href="#推导过程" class="headerlink" title="推导过程"></a>推导过程</h2><blockquote><p>下面是最终结论的推导过程</p></blockquote><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><blockquote><p>原型链继承存在2个缺陷:<br>1.像下面代码一样,不能从<code>Father</code>构造函数中直接继承属性,还要再定义一个<code>sonName</code><br>2.像下面代码一样,steve向favorite中push了’kobe’,导致mike的favorite也发生了改变,没有做到<code>继承属性私有化</code><br>解决这个问题的方式是<code>借用构造函数</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'father'</span></span><br><span class="line">  <span class="keyword">this</span>.favorite = [<span class="string">'Johnson'</span>,<span class="string">'Bird'</span>]</span><br><span class="line">&#125;</span><br><span class="line">Father.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'hey,I\'m father'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.sonName = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Son.prototype = <span class="keyword">new</span> Father()</span><br><span class="line">Son.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hey,I\'m son'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mike = <span class="keyword">new</span> Son(<span class="string">'mike'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(mike.name) <span class="comment">//father</span></span><br><span class="line"><span class="built_in">console</span>.log(mike.sonName) <span class="comment">//mike</span></span><br><span class="line">mike.sayHi() <span class="comment">// hey I m son</span></span><br><span class="line"><span class="keyword">const</span> steve = <span class="keyword">new</span> Son(<span class="string">'steve'</span>)</span><br><span class="line">steve.favorite.push(<span class="string">'kobe'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(mike.favorite); <span class="comment">//["Johnson", "Bird", "kobe"]</span></span><br></pre></td></tr></table></figure><h3 id="混合继承"><a href="#混合继承" class="headerlink" title="混合继承"></a>混合继承</h3><blockquote><p><code>混合继承</code> 由 <code>原型链继承</code> 添加 <code>借用构造函数</code> 修改而来<br><code>借用构造函数</code> 实现了 让每个<code>son</code>实例都有自己的name与favorite属性,且都继承自Father构造函数</p><p>但这还不够完美, 比如, <code>Son.prototype</code>中,永远存放着一个<code>name</code>和<code>favorite</code>属性,<code>son</code>实例每次都通过重写来覆盖这两个属性,这是不必要的<br>解决方法是在此基础上增加<code>寄生式继承</code>,而<code>寄生式继承</code>依赖于<code>原型式继承</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name || <span class="string">'father'</span></span><br><span class="line">  <span class="keyword">this</span>.favorite = [<span class="string">'Johnson'</span>,<span class="string">'Bird'</span>]</span><br><span class="line">&#125;</span><br><span class="line">Father.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'hey,I\'m father'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 借用构造函数</span></span><br><span class="line">  <span class="comment">// 每个实例都有自己私有的name和favorite,且都继承自Father构造函数</span></span><br><span class="line">  Father.call(<span class="keyword">this</span>,name)</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Son.prototype = <span class="keyword">new</span> Father()</span><br><span class="line">Son.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hey,I\'m son'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mike = <span class="keyword">new</span> Son(<span class="string">'mike'</span>,<span class="number">23</span>)</span><br><span class="line"><span class="built_in">console</span>.log(mike.name) <span class="comment">//father</span></span><br><span class="line"><span class="built_in">console</span>.log(mike.sonName) <span class="comment">//mike</span></span><br><span class="line">mike.sayHi() <span class="comment">//"hey I m son"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> steve = <span class="keyword">new</span> Son(<span class="string">'steve'</span>,<span class="number">24</span>)</span><br><span class="line">steve.favorite.push(<span class="string">'kobe'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(steve.favorite); <span class="comment">//["Johnson", "Bird", "kobe"]</span></span><br><span class="line"><span class="built_in">console</span>.log(mike.favorite); <span class="comment">//["Johnson", "Bird"]</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/12/20/5a399d3498b67.jpg" alt=""></p><h3 id="原型式继承的原理"><a href="#原型式继承的原理" class="headerlink" title="原型式继承的原理"></a>原型式继承的原理</h3><blockquote><p>原型式继承就是让o1的原型对象是o,当然这其中有一些tricks</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  F.prototype = o</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用这种方法的目的是return的new F()是一个新对象</span></span><br><span class="line"><span class="comment">// 给new F()增加新的方法,并不会增加到o上.</span></span><br><span class="line"><span class="keyword">const</span> o1 = object(o)</span><br></pre></td></tr></table></figure><h3 id="ES5规范的原型式继承-Object-create"><a href="#ES5规范的原型式继承-Object-create" class="headerlink" title="ES5规范的原型式继承,Object.create()"></a>ES5规范的原型式继承,Object.create()</h3><p><code>Object.create(prototypeObj[,descriptorsObj]) return obj</code></p><blockquote><p>es5用<code>Object.create()</code>方法规范了原型式继承<br>创建一个obj对象,原型是prototypeObj(obj.<strong>proto</strong> === prototypeObj),同时用descriptorsObj(与Object.defineProperties()中的第二个参数相同)定义obj上自己的属性.<br>适用场景: 只是想让一个对象与另一个对象保持类似的情况下,用此方法简单粗暴</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> father = &#123;  <span class="attr">name</span>: <span class="string">'Father'</span>,&#125;;<span class="keyword">var</span> son = <span class="built_in">Object</span>.create(father, &#123;  <span class="attr">name</span>: &#123;    <span class="attr">value</span>: <span class="string">"son"</span>  &#125;&#125;);alert(son.name); <span class="comment">//"son"</span></span><br></pre></td></tr></table></figure><h3 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h3><blockquote><p>理解<code>寄生式继承</code>的目的是理解最终的<code>寄生组合式</code>继承. </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  F.prototype = o</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F() </span><br><span class="line">  <span class="comment">//这里返回的事一个新对象,不是obj的浅拷贝,而是obj的原型继承对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inHeritance</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这里创建出的o1,原型继承自o</span></span><br><span class="line">  <span class="keyword">var</span> o1 = object(o)</span><br><span class="line">  <span class="comment">//增强o1,添加sayHi()方法</span></span><br><span class="line">  <span class="comment">//且这个方法不会添加到o上</span></span><br><span class="line">  o1.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hey'</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'choteewang'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个newObj,寄生继承自obj,比obj多一个方法sayHi()</span></span><br><span class="line"><span class="keyword">var</span> newObj = inHeritance(obj)</span><br><span class="line">newObj.sayHi() <span class="comment">//hey</span></span><br><span class="line"><span class="built_in">console</span>.log(newObj.name) <span class="comment">//choteewang,继承自原型对象</span></span><br><span class="line">obj.sayHi() <span class="comment">//报错,obj没有这个属性</span></span><br></pre></td></tr></table></figure><blockquote><p>推导过程完毕, 请跳跃到顶部理解<code>最佳实践,寄生组合式继承</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;这是什么&quot;&gt;&lt;a href=&quot;#这是什么&quot; class=&quot;headerlink&quot; title=&quot;这是什么?&quot;&gt;&lt;/a&gt;这是什么?&lt;/h3&gt;&lt;p&gt;自己在学习《JavaScript高级程序设计》 和《ES6 标准教程》 中的一些体会. 主要关注&lt;code&gt;javasc
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正反馈系列:《JavaScript高级程序设计》OOP</title>
    <link href="http://yoursite.com/2017/12/19/16-%E9%AB%98%E7%A8%8Bvol2-%E7%AC%AC%E5%85%AD%E7%AB%A0/"/>
    <id>http://yoursite.com/2017/12/19/16-高程vol2-第六章/</id>
    <published>2017-12-19T13:04:41.000Z</published>
    <updated>2017-12-21T03:59:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="理解对象"><a href="#理解对象" class="headerlink" title="理解对象"></a>理解对象</h2><h3 id="对象的底层attribute"><a href="#对象的底层attribute" class="headerlink" title="对象的底层attribute"></a>对象的底层attribute</h3><p>放在了两对儿方括号中，例如<code>[[Enumerable]]</code>,JavaScript不能直接访问他们,是为了实现引擎而实现的.</p><h3 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h3><p>数据属性就是不用<code>get</code>和<code>set</code>描述的属性,包含一个数据值的位置, 可以读取或写入值, 值的位置是<code>[[value]]</code>,同时被下列属性限制着.</p><ul><li><code>[[Configurable]]</code> 表示能否通过 <code>delete</code> 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。默认值为true</li><li><code>[[Enumerable]]</code> 表示能否通过 for-in 循环返回属性,是否可枚举,对象上的属性默认true</li><li><code>[[Writable]]</code>：能否修改属性的值。</li><li><code>[[Value]]</code>：包含这个属性的数据值。读取属性值的时候，从这个位置读；写入属性值的时候， 把新值保存在这个位置。默认值undefined</li></ul><h3 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty()"></a>Object.defineProperty()</h3><p><code>Object.defineProperty(obj,propName,descriptorObj) return obj</code></p><p>在调用<code>obj.defineProperty()</code>方法时,如果不指定,<code>configurable, enumerable, writable</code>属性的默认值都变为false.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">"name"</span>, &#123;</span><br><span class="line">    writable: <span class="literal">false</span>,</span><br><span class="line">    value: <span class="string">"Nicholas"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">alert(person.name); <span class="comment">//'Nicholas'</span></span><br><span class="line">person.name = <span class="string">"Michael"</span>;</span><br><span class="line">alert(person.name); <span class="comment">//'Nicholas'</span></span><br></pre></td></tr></table></figure><h3 id="configurable属性"><a href="#configurable属性" class="headerlink" title="configurable属性"></a>configurable属性</h3><p>把<code>configurable</code>设置为false,表示不能用<code>delete</code>运算符从对象中删除属性. 且不能再将此属性变为’可配置’,且此时再调用<code>obj.defineProperty()</code>方法修改除<code>writable</code>之外的特性,都会导致错误.</p><p>也就是说,可以多次调用<code>obj.defineProperty()</code>方法修改同一个属性,但在把<code>configurable</code>设置为false之后,就会有了很大限制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">"name"</span>, &#123;</span><br><span class="line">    configurable: <span class="literal">false</span>,</span><br><span class="line">    value: <span class="string">"Nicholas"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">alert(person.name); <span class="comment">// 'Nicholas'</span></span><br><span class="line"><span class="keyword">delete</span> person.name;</span><br><span class="line">alert(person.name); <span class="comment">// 'Nicholas'</span></span><br></pre></td></tr></table></figure><h3 id="访问器属性-get-set"><a href="#访问器属性-get-set" class="headerlink" title="访问器属性 get,set"></a>访问器属性 get,set</h3><p><code>访问器属性</code>这个概念相对于<code>数据属性</code>,它们包含一对<code>getter</code>和<code>setter</code>函数(都不必须),读取属性时调用<code>getter</code>,赋值时调用<code>setter</code>, 它们被下列属性限制</p><ul><li><code>[[Configurable]]</code> 表示能否通过 <code>delete</code> 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。默认值为true</li><li><code>[[Enumerable]]</code> 表示能否通过 for-in 循环返回属性,是否可枚举,对象上的属性默认true</li><li><code>[[get]]</code> 默认undefined</li><li><code>[[set]]</code> 默认undefined</li></ul><blockquote><p>访问器属性不能直接定义,必须通过Object.defineProperty()定义.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;<span class="keyword">var</span> book = &#123;    <span class="attr">_year</span>: <span class="number">2004</span>,</span><br><span class="line">    edition: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">Object</span>.defineProperty(book, <span class="string">"year"</span>, &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._year;</span><br><span class="line">    &#125;,    &#125;,    <span class="attr">set</span>: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (newValue &gt; <span class="number">2004</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>._year = newValue;</span><br><span class="line">            <span class="keyword">this</span>.edition += newValue - <span class="number">2004</span>;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">book.year = <span class="number">2005</span>;</span><br><span class="line"><span class="comment">// 访问器属性的常见方式，即设置一个属性的值会导致其他属性发生变化</span></span><br><span class="line">alert(book.edition);   <span class="comment">//2</span></span><br></pre></td></tr></table></figure><blockquote><p>不一定非要同时指定 <code>getter</code> 和 <code>setter</code>。只指定 <code>getter</code> 意味着属性是不能写，尝试写入属性会被忽略。 在严格模式下，尝试写入只指定了 <code>getter</code> 函数的属性会抛出错误。<br>类似地，只指定 <code>setter</code> 函数的属性不能读<br>旧方法obj.<strong>defineGetter</strong>与__defineSetter已经被废弃</p></blockquote><h3 id="Object-defineProperties"><a href="#Object-defineProperties" class="headerlink" title="Object.defineProperties()"></a>Object.defineProperties()</h3><p><code>Object.defineProperties(obj,descriptorsObj) return obj</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperties(book, &#123;</span><br><span class="line">  _year: &#123;</span><br><span class="line">    value: <span class="number">2004</span></span><br><span class="line">  &#125;,</span><br><span class="line">  edition: &#123;</span><br><span class="line">    value: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  year: &#123;</span><br><span class="line">      get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>._year;</span><br><span class="line">    &#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span> (<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (newValue &gt; <span class="number">2004</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>._year = newValue;</span><br><span class="line">        <span class="keyword">this</span>.edition += newValue - <span class="number">2004</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">book.year = <span class="number">2005</span>;</span><br><span class="line">alert(book.edition); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><h3 id="Object-getOwnPropertyDescriptor"><a href="#Object-getOwnPropertyDescriptor" class="headerlink" title="Object.getOwnPropertyDescriptor()"></a>Object.getOwnPropertyDescriptor()</h3><p><code>Object.getOwnPropertyDescriptor(obj, propName) return DescriptorsObj</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperties(book, &#123;</span><br><span class="line">  _year: &#123;</span><br><span class="line">    value: <span class="number">2004</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  edition: &#123;</span><br><span class="line">    value: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  year: &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>._year;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    set: <span class="function"><span class="keyword">function</span> (<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (newValue &gt; <span class="number">2004</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>._year = newValue;</span><br><span class="line">        <span class="keyword">this</span>.edition += newValue - <span class="number">2004</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(book, <span class="string">"_year"</span>);</span><br><span class="line">alert(descriptor.value); <span class="comment">//2004</span></span><br><span class="line">alert(descriptor.configurable); <span class="comment">//false</span></span><br><span class="line">alert(<span class="keyword">typeof</span> descriptor.get); <span class="comment">//"undefined"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(book, <span class="string">"year"</span>);</span><br><span class="line">alert(descriptor.value); <span class="comment">//undefined</span></span><br><span class="line">alert(descriptor.enumerable); <span class="comment">//false</span></span><br><span class="line">alert(<span class="keyword">typeof</span> descriptor.get); <span class="comment">//"function"</span></span><br></pre></td></tr></table></figure><blockquote><p>在 JavaScript 中，可以针对任何对象——包括 DOM 和 BOM 对象，使用 <code>Object.getOwnPropertyDescriptor()</code>方法</p></blockquote><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><h3 id="Object-obj"><a href="#Object-obj" class="headerlink" title="Object(obj)"></a>Object(obj)</h3><p><code>Object(obj) return obj1</code></p><p><code>Object()</code>方法可以作为传入对象的包装器,生成一个obj1对象,obj1是obj的浅拷贝</p><pre><code class="js"><span class="keyword">var</span> obj = {  name:<span class="string">'choteewang'</span>,}<span class="keyword">var</span> obj1 = <span class="built_in">Object</span>(obj)<span class="built_in">console</span>.log(obj1); <span class="built_in">console</span>.log(obj1.name); <span class="comment">// choteewang</span>obj1.name=<span class="string">'jordan'</span><span class="built_in">console</span>.log(obj.name); <span class="comment">// jordan</span></code></pre><h3 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,job</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name=name;</span><br><span class="line">  <span class="keyword">this</span>.age=age;</span><br><span class="line">  <span class="keyword">this</span>.job=job;</span><br><span class="line">  <span class="keyword">this</span>.sayHi=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行了下面步骤:</p><ol><li>创建一个对象</li><li>将构造函数this指向此对象</li><li>执行构造函数中的代码</li><li>不用return,但返回新对象</li></ol></blockquote><h4 id="构造函数当做普通函数"><a href="#构造函数当做普通函数" class="headerlink" title="构造函数当做普通函数"></a>构造函数当做普通函数</h4><blockquote><p>不调用new运算符,构造函数与普通函数无异,this指向全局global对象,在浏览器中是window.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.job = job;</span><br><span class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      alert(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当做构造函数调用</span></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</span><br><span class="line">person.sayName();   <span class="comment">//"Nicholas"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 作为普通函数调用</span></span><br><span class="line">Person(<span class="string">"Greg"</span>, <span class="number">27</span>, <span class="string">"Doctor"</span>);  <span class="comment">//adds to window</span></span><br><span class="line"><span class="built_in">window</span>.sayName();   <span class="comment">//"Greg"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在另一个对象的作用域内被调用</span></span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">Person.call(o, <span class="string">"Kristen"</span>, <span class="number">25</span>, <span class="string">"Nurse"</span>);</span><br><span class="line">o.sayName();    <span class="comment">//"Kristen"</span></span><br></pre></td></tr></table></figure><h4 id="instanceof-操作符"><a href="#instanceof-操作符" class="headerlink" title="instanceof 操作符"></a>instanceof 操作符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj instanceOf <span class="built_in">Object</span> <span class="comment">// 判断Object.prototype是否在obj的原型链上</span></span><br></pre></td></tr></table></figure><blockquote><p>检测类型用 instanceof 好过typeof(可以检测构造函数名,类型更具体) 与 obj.constructor(原型指向后期可改,返回不了正确值)</p></blockquote><h4 id="构造函数的问题"><a href="#构造函数的问题" class="headerlink" title="构造函数的问题"></a>构造函数的问题</h4><p>为每个类似的实例都创建了相似的方法和属性,所以需要引进<code>原型模式</code>,将公用方法和属性放在原型上.</p><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p><img src="https://i.loli.net/2017/12/19/5a390f498339e.jpg" alt=""></p><blockquote><p><code>[[Prototype]]</code> 的实现就是浏览器里的 <code>__proto__</code></p></blockquote><h4 id="Prototype-isPrototypeOf-obj"><a href="#Prototype-isPrototypeOf-obj" class="headerlink" title="Prototype.isPrototypeOf(obj)"></a>Prototype.isPrototypeOf(obj)</h4><p><code>Prototype.isPrototypeOf(obj) return boolean</code></p><blockquote><p>类似instanceOf运算符的逆方法,只要<code>Prototype</code>在<code>obj</code>的原型链上,就返回true</p></blockquote><h4 id="Object-getPrototypeOf"><a href="#Object-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf()"></a>Object.getPrototypeOf()</h4><p><code>Object.getPrototypeOf(obj) return obj.__proto__</code></p><p>ECMAScript 5 增加了一个新方法，叫 <code>Object.getPrototypeOf()</code>，在所有支持的实现中，这个 方法返回<code>[[Prototype]]</code>的值</p><h4 id="obj-hasOwnProperty-propName"><a href="#obj-hasOwnProperty-propName" class="headerlink" title="obj.hasOwnProperty(propName)"></a>obj.hasOwnProperty(propName)</h4><p><code>obj.hasOwnProperty(propName) return boolean</code></p><blockquote><p>用来判断propName属性是处于obj中还是继承自obj的原型链.这个方法是从Object.prototype中继承来的</p></blockquote><p>列举下从Object.prototype继承来的方法</p><ul><li><code>obj.hasOwnProperty(propertyName)</code> 用于检测给定属性在当前实例中(不包含原型链中)是否存在</li><li><code>obj.isPrototypeOf(obj2)</code> 用于检查obj是否在obj2的原型链上</li><li><code>obj.propertyIsEnumerable(propertyName)</code> 用于检查给定属性是否可枚举</li><li><code>obj.toLocaleString()</code> </li><li><code>obj.toString()</code></li><li><code>obj.valueOf()</code> 返回对象的字符串,数值,或布尔值表示,通常与toString()返回值相同</li></ul><blockquote><p>ECMAScript 5 的 Object.getOwnPropertyDescriptor()方法只能用于实例属 性，要取得原型属性的描述符，必须直接在原型对象上调用 Object.getOwnPropertyDescriptor()方法。</p></blockquote><h4 id="in-操作符"><a href="#in-操作符" class="headerlink" title="in 操作符"></a>in 操作符</h4><ul><li>用于for-in循环</li><li><code>(&quot;propName&quot; in obj)</code> // true or false</li></ul><blockquote><p>只要obj可以访问到propName,就返回true,无论propName部署在对象实例上还是其原型链上</p><p>只要用in操作符返回true &amp;&amp; 调用hasOwnProperty()返回false, 就能确定属性部署在原型链上</p></blockquote><h4 id="for-in-循环的范围"><a href="#for-in-循环的范围" class="headerlink" title="for-in 循环的范围"></a>for-in 循环的范围</h4><blockquote><p>在使用 for-in 循环时，返回的是所有能够通过对象访问的、可枚举的（enumerated）属性，其中既包括存在于实例中的属性， 也包括存在于原型中的属性。 屏蔽了原型中不可枚举属性（即将[[Enumerable]]标记为 false 的属性）的实例属性也会在 for-in 循环中返回，因为根据规定，所有开发人员定义的属性都是可枚举的</p></blockquote><h4 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys()"></a>Object.keys()</h4><p><code>Object.keys(obj) return arr</code></p><blockquote><p>该方法可以取得参数对象上所有<code>可枚举</code>的属性,并将属性名组合为一个数组返回</p></blockquote><h4 id="Object-getOwnPropertyNames"><a href="#Object-getOwnPropertyNames" class="headerlink" title="Object.getOwnPropertyNames()"></a>Object.getOwnPropertyNames()</h4><p><code>Object.getOwnPropertyNames(obj) return arr</code></p><blockquote><p>该方法取得所有obj实例上的属性,枚举不枚举的都算,并将属性名组合为一个数组返回</p></blockquote><h4 id="修改原型的同时修改constructor属性"><a href="#修改原型的同时修改constructor属性" class="headerlink" title="修改原型的同时修改constructor属性"></a>修改原型的同时修改constructor属性</h4><blockquote><p>修改构造函数的prototype会让新设置的prototype对象的constructor指向不准确,如下例,新prototype对象的constructor指向Object.prototype.<br>所以需要手动给新prototype对象添加constructor属性<br>constructor属性默认不可枚举,所以要用<code>Object.defineProperty()</code>修改.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.protoype = &#123; <span class="attr">new</span>: <span class="string">"new"</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Person.prototype,<span class="string">'constructor'</span>,&#123;</span><br><span class="line">  enumerable:<span class="literal">false</span>;</span><br><span class="line">  value:Person;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><blockquote><p>下面的例子模拟了javaScript代码内部的原型链继承部署模式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.property = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.property</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.subproperty = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//inherit from SuperType</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType()</span><br><span class="line"></span><br><span class="line">SubType.prototype.getSubValue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.subproperty</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> SubType()</span><br><span class="line">alert(instance.getSuperValue()) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">alert(instance <span class="keyword">instanceof</span> <span class="built_in">Object</span>) <span class="comment">//true</span></span><br><span class="line">alert(instance <span class="keyword">instanceof</span> SuperType) <span class="comment">//true</span></span><br><span class="line">alert(instance <span class="keyword">instanceof</span> SubType) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">alert(<span class="built_in">Object</span>.prototype.isPrototypeOf(instance)) <span class="comment">//true</span></span><br><span class="line">alert(SuperType.prototype.isPrototypeOf(instance)) <span class="comment">//true</span></span><br><span class="line">alert(SubType.prototype.isPrototypeOf(instance)) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/12/19/5a390f4a02d8c.jpg" alt=""></p><h4 id="重写超类型的方法"><a href="#重写超类型的方法" class="headerlink" title="重写超类型的方法"></a>重写超类型的方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;    <span class="keyword">this</span>.property = <span class="literal">true</span>;&#125;SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    <span class="keyword">return</span> <span class="keyword">this</span>.property;&#125;;<span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;    <span class="keyword">this</span>.subproperty = <span class="literal">false</span>;&#125;<span class="comment">//inherit from SuperType</span>SubType.prototype = <span class="keyword">new</span> SuperType();<span class="comment">//new method</span>SubType.prototype.getSubValue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;    <span class="keyword">return</span> <span class="keyword">this</span>.subproperty;&#125;;<span class="comment">//override existing method</span>SubType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;    <span class="keyword">return</span> <span class="literal">false</span>;&#125;;<span class="keyword">var</span> instance = <span class="keyword">new</span> SubType();alert(instance.getSuperValue());   <span class="comment">//false</span></span><br></pre></td></tr></table></figure><blockquote><p>在以上代码中，加粗的部分是两个方法的定义。第一个方法 getSubValue()被添加到了 SubType 中。第二个方法 getSuperValue()是原型链中已经存在的一个方法，但重写这个方法将会屏蔽原来的那个方法。换句话说，当通过 SubType 的实例调用 getSuperValue()时，调用的就是这个重新定义的方法；但通过 SuperType 的实例调用 getSuperValue()时，还会继续调用原来的那个方法。这里要格外注意的是，必须在用 SuperType 的实例替换原型之后，再定义这两个方法。</p></blockquote><h4 id="原型链的问题"><a href="#原型链的问题" class="headerlink" title="原型链的问题"></a>原型链的问题</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;    <span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>];&#125;<span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;            &#125;<span class="comment">//inherit from SuperType</span>SubType.prototype = <span class="keyword">new</span> SuperType();<span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType();instance1.colors.push(<span class="string">"black"</span>);alert(instance1.colors);    <span class="comment">//"red,blue,green,black"</span><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType();alert(instance2.colors);    <span class="comment">//"red,blue,green,black"</span></span><br></pre></td></tr></table></figure><blockquote><p>这个例子中的 SuperType 构造函数定义了一个 colors 属性，该属性包含一个数组（引用类型值）。SuperType 的每个实例都会有各自包含自己数组的 colors 属性。当 SubType 通过原型链继承了 SuperType 之后, SubType.prototype 就变成了 SuperType 的一个实例，因此它也拥有了一个它自己的 colors 属性——就跟专门创建了一个 SubType.prototype.colors 属性一样。但结果是什么呢？结果是 SubType 的所有实例都会共享这一个 colors 属性。而我们对 instance1.colors 的修改 能够通过 instance2.colors 反映出来，就已经充分证实了这一点。</p></blockquote><h3 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h3><blockquote><p>在解决原型中包含引用类型值所带来问题的过程中，开发人员开始使用一种叫做借用构造函数（constructor stealing）的技术（有时候也叫做伪造对象或经典继承）。这种技术的基本思想相当简单，即在子类型构造函数的内部调用超类型构造函数。别忘了，函数只不过是在特定环境中执行代码的对象，因此通过使用 apply()和 call()方法也可以在（将来）新创建的对象上执行构造函数，如下所示：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;  <span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>];&#125;<span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;  <span class="comment">//inherit from SuperType</span>  SuperType.call(<span class="keyword">this</span>);&#125;<span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType();instance1.colors.push(<span class="string">"black"</span>);alert(instance1.colors); <span class="comment">//"red,blue,green,black"</span><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType();alert(instance2.colors); <span class="comment">//"red,blue,green"</span></span><br></pre></td></tr></table></figure><blockquote><p>代码中加粗的那一行代码“借调”了超类型的构造函数。通过使用 call()方法（或 apply()方法也可以），我们实际上是在（未来将要）新创建的 SubType 实例的环境下调用了 SuperType 构造函数。这样一来，就会在新 SubType 对象上执行 SuperType()函数中定义的所有对象初始化代码。结果，SubType 的每个实例就都会具有自己的 colors 属性的副本了。</p></blockquote><h4 id="借用构造函数-向超类型构造函数传递参数"><a href="#借用构造函数-向超类型构造函数传递参数" class="headerlink" title="借用构造函数 - 向超类型构造函数传递参数"></a>借用构造函数 - 向超类型构造函数传递参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;  <span class="keyword">this</span>.name = name;&#125;<span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;  <span class="comment">//inherit from SuperType passing in an argument</span>  SuperType.call(<span class="keyword">this</span>, <span class="string">"Nicholas"</span>);  <span class="comment">//instance property</span>  <span class="keyword">this</span>.age = <span class="number">29</span>;&#125;<span class="keyword">var</span> instance = <span class="keyword">new</span> SubType();alert(instance.name); <span class="comment">//"Nicholas";</span>alert(instance.age); <span class="comment">//29</span></span><br></pre></td></tr></table></figure><h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><blockquote><p>最简单高效的继承模式,用<code>原型链继承</code>原型属性和方法,用<code>借用构造函数</code>方式实现对原型属性和方法的集成.<br>既通过<code>原型链继承</code>实现了方法复用,又通过<code>借用构造函数</code>保证了每个实例都有自己的属性.</p><p>弊端: 调用两次SuperType()构造函数, 使得SubType.prototype里有两个无用变量name,colors.<br>每次new Subtype()时,subtype实例内部自带name与colors,自带的属性覆盖掉了SubType.prototype中的name与colors,所以SubType.prototype中的name与colors没用.<br>解决方法直接看本章最后一节寄生混合式继承的笔记</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;  <span class="keyword">this</span>.name = name;  <span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>];&#125;SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  alert(<span class="keyword">this</span>.name);&#125;;<span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>) </span>&#123;  SuperType.call(<span class="keyword">this</span>, name);  <span class="keyword">this</span>.age = age;&#125;SubType.prototype = <span class="keyword">new</span> SuperType();SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  alert(<span class="keyword">this</span>.age);&#125;;<span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType(<span class="string">"Nicholas"</span>, <span class="number">29</span>);instance1.colors.push(<span class="string">"black"</span>);alert(instance1.colors); <span class="comment">//"red,blue,green,black"</span>instance1.sayName(); <span class="comment">//"Nicholas";</span>instance1.sayAge(); <span class="comment">//29</span><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType(<span class="string">"Greg"</span>, <span class="number">27</span>);alert(instance2.colors); <span class="comment">//"red,blue,green"</span>instance2.sayName(); <span class="comment">//"Greg";</span>instance2.sayAge(); <span class="comment">//27</span></span><br></pre></td></tr></table></figure><h3 id="Object-create-原型式继承"><a href="#Object-create-原型式继承" class="headerlink" title="Object.create() - 原型式继承"></a>Object.create() - 原型式继承</h3><p><code>Object.create(prototypeObj[,descriptorsObj]) return obj</code></p><blockquote><p>创建一个obj对象,原型是prototypeObj(obj.<strong>proto</strong> === prototypeObj),同时用descriptorsObj(与Object.defineProperties()中的第二个参数相同)定义obj上自己的属性.<br>适用场景: 只是想让一个对象与另一个对象保持类似的情况下,用此方法简单粗暴</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;  <span class="attr">name</span>: <span class="string">"Nicholas"</span>,  <span class="attr">friends</span>: [<span class="string">"Shelby"</span>, <span class="string">"Court"</span>, <span class="string">"Van"</span>]&#125;;<span class="keyword">var</span> anotherPerson = <span class="built_in">Object</span>.create(person, &#123;  <span class="attr">name</span>: &#123;    <span class="attr">value</span>: <span class="string">"Greg"</span>  &#125;&#125;);alert(anotherPerson.name); <span class="comment">//"Greg"</span></span><br></pre></td></tr></table></figure><h3 id="寄生式继承-只是下述寄生组合式继承的原理"><a href="#寄生式继承-只是下述寄生组合式继承的原理" class="headerlink" title="寄生式继承(只是下述寄生组合式继承的原理)"></a>寄生式继承(只是下述寄生组合式继承的原理)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  F.prototype = o</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F() </span><br><span class="line">  <span class="comment">//这里返回的事一个新对象,不是obj的浅拷贝,而是obj的原型继承对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inHeritance</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o1 = object(o)</span><br><span class="line">  <span class="comment">//增强o1,添加sayHi()方法</span></span><br><span class="line">  o1.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hey'</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'choteewang'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newObj = inHeritance(obj)</span><br><span class="line">newObj.sayHi() <span class="comment">//hey</span></span><br><span class="line"><span class="built_in">console</span>.log(newObj.name) <span class="comment">//choteewang,继承自原型对象</span></span><br><span class="line">obj.sayHi() <span class="comment">//报错,obj没有这个属性</span></span><br></pre></td></tr></table></figure><h3 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h3><blockquote><p>本章的终结,改善了<code>组合式继承</code>的缺点,是最成熟的js继承方式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// just 原型式继承</span><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>) </span>&#123;  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;  F.prototype = o;  <span class="keyword">return</span> <span class="keyword">new</span> F();&#125;<span class="comment">// 寄生式继承</span><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">subType, superType</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 使用原型式继承创建一个对象,此对象原型式继承自superType.prototype</span>  <span class="keyword">var</span> prototype = object(superType.prototype); </span><br><span class="line">  <span class="comment">// 将此对象赋值为subType的原型对象指针subType.prototype</span></span><br><span class="line">  <span class="comment">// 相当于使subType.prototype原型式继承自superType.protottype</span></span><br><span class="line">  <span class="comment">// 从而使所有subtype实例获得了superType.prototype上的公用属性和方法</span>  prototype.constructor = subType;   subType.prototype = prototype; &#125;<span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;  <span class="keyword">this</span>.name = name;  <span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>];&#125;<span class="comment">// 下述方法会因寄生式继承继承给subType.prototype</span>SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  alert(<span class="keyword">this</span>.name);&#125;;<span class="comment">// 借用构造函数继承</span><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 使用借用构造函数式继承,继承了SuperType构造函数中的属性</span></span><br><span class="line">  <span class="comment">// 借用构造函数继承的属性不复用.每个subType实例中的属性都是独立的</span></span><br><span class="line">  <span class="comment">// 原理是this都不一样,所以当然是独立的</span>  SuperType.call(<span class="keyword">this</span>, name);  <span class="keyword">this</span>.age = age;&#125;<span class="comment">// 修改subType.prototype指向</span></span><br><span class="line"><span class="comment">// 使其指向我们创建的继承自superType.prototype的对象</span>inheritPrototype(SubType, SuperType);<span class="comment">// 增强SubType.prototype,增加的方法sayAge是supertype实例访问不到的.</span>SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  alert(<span class="keyword">this</span>.age);&#125;;<span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType(<span class="string">"Nicholas"</span>, <span class="number">29</span>);instance1.colors.push(<span class="string">"black"</span>);alert(instance1.colors); <span class="comment">//"red,blue,green,black"</span>instance1.sayName(); <span class="comment">//"Nicholas";</span>instance1.sayAge(); <span class="comment">//29</span><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType(<span class="string">"Greg"</span>, <span class="number">27</span>);alert(instance2.colors); <span class="comment">//"red,blue,green"</span>instance2.sayName(); <span class="comment">//"Greg";</span>instance2.sayAge(); <span class="comment">//27</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;理解对象&quot;&gt;&lt;a href=&quot;#理解对象&quot; class=&quot;headerlink&quot; title=&quot;理解对象&quot;&gt;&lt;/a&gt;理解对象&lt;/h2&gt;&lt;h3 id=&quot;对象的底层attribute&quot;&gt;&lt;a href=&quot;#对象的底层attribute&quot; class=&quot;headerli
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正反馈系列:《JavaScript高级程序设计》1-5章，知识点总结 &amp; 查缺补漏</title>
    <link href="http://yoursite.com/2017/12/19/15-%E9%AB%98%E7%A8%8B1-5%E7%AB%A0/"/>
    <id>http://yoursite.com/2017/12/19/15-高程1-5章/</id>
    <published>2017-12-18T18:22:47.000Z</published>
    <updated>2017-12-24T01:19:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本概念-第三章"><a href="#基本概念-第三章" class="headerlink" title="基本概念(第三章)"></a>基本概念(第三章)</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li><code>Undefined</code> 基本</li><li><code>Null</code> 基本</li><li><code>Boolean</code> 基本</li><li><code>Number</code> 基本</li><li><code>String</code> 基本</li><li><code>Object</code> (复杂)</li></ul><h3 id="typeof运算符"><a href="#typeof运算符" class="headerlink" title="typeof运算符"></a>typeof运算符</h3><p>返回值是字符串,有六种,对应上述6种数据类型,又略有区别,<code>null</code>返回”object”,函数单独返回”function”</p><ul><li><code>&quot;undefined&quot;</code></li><li><code>&quot;boolean&quot;</code></li><li><code>&quot;string&quot;</code></li><li><code>&quot;number&quot;</code></li><li><code>&quot;object&quot;</code> (object或null都会返回object)</li><li><code>&quot;function&quot;</code> (如果是函数对象)</li></ul><h3 id="Undefined类型"><a href="#Undefined类型" class="headerlink" title="Undefined类型"></a>Undefined类型</h3><p>此类型只有一个值即<code>undefined</code></p><h3 id="Null类型"><a href="#Null类型" class="headerlink" title="Null类型"></a>Null类型</h3><p>此类型只有一个值<code>null</code>,表示空对象指针,所以<code>typeof</code>会返回<code>&quot;object&quot;</code></p><p>定义的变量准备在将来用于保存对象，那么最好将该变量初始化为 null 而不是其他值。这样 一来，只要直接检查 null 值就可以知道相应的变量是否已经保存了一个对象的引用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (car != <span class="literal">null</span>)&#123; <span class="comment">// 对 car 对象执行某些操作 &#125;</span></span><br></pre></td></tr></table></figure><p>实际上，undefined 值是派生自 null 值的，因此 ECMA-262 规定对它们的相等性测试要返回 true：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="literal">null</span> == <span class="literal">undefined</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a>Boolean类型</h3><p>关于转型函数<code>Boolean(x)</code>转化结果</p><table><thead><tr><th style="text-align:center">x</th><th style="text-align:center">result</th></tr></thead><tbody><tr><td style="text-align:center">“”空字符串</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">NaN</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">null</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">任何对象除了null</td><td style="text-align:center">true</td></tr></tbody></table><h3 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a>Number类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 八进制 </span></span><br><span class="line"><span class="keyword">var</span> octal = <span class="number">013</span> <span class="comment">//0开头,严格模式下无效,任何一位&gt;7,去掉前面的0转为十进制</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 十六进制 </span></span><br><span class="line"><span class="keyword">var</span> hex = <span class="number">0xA</span> <span class="comment">//0x开头</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算时,八进制十六进制都转换为十进制</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 浮点数 </span></span><br><span class="line"><span class="keyword">var</span> float = <span class="number">3.125e7</span> <span class="comment">//相当于3.125*10^7,注意底数是10不是e</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大值,最小值</span></span><br><span class="line"><span class="built_in">Number</span>.MAX_VALUE, <span class="built_in">Number</span>.MIN_VALUE</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无穷</span></span><br><span class="line"><span class="comment">// 超过最大值的数会转换为特殊值Infinity</span></span><br><span class="line"><span class="comment">// 如果是负数转换为-Infinity</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// isFnite() return boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isFinite</span>(<span class="number">1</span>)) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// NaN</span></span><br><span class="line"><span class="comment">// 表示一个本来要返回数值的操作数未返回数值（不会抛出错误了）。</span></span><br><span class="line"><span class="comment">// isNaN() return boolean</span></span><br><span class="line"><span class="comment">// 先尝试将参数转换为数值,再返回boolean</span></span><br></pre></td></tr></table></figure><h4 id="转换数值-Number-parseInt-parseFloat"><a href="#转换数值-Number-parseInt-parseFloat" class="headerlink" title="转换数值,Number(),parseInt(),parseFloat()"></a>转换数值,Number(),parseInt(),parseFloat()</h4><p><code>Number</code>的转换规则复杂,且不合理,具体详见高程p30</p><p><code>parseInt(string,base)</code>,string按base数制转换规则转换,可以识别八进制和十六进制前缀</p><p><code>parseFloat(string)</code>,始终忽略前导0,所以不能识别十六进制与八进制前缀</p><h3 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h3><p>特殊字符字面量</p><ul><li><code>\n</code> 换行</li><li><code>\r</code> 回车</li><li><code>\t</code> 制表</li><li><code>\b</code> 退格</li><li><code>\\</code> \</li><li><code>\&#39;</code> 单引号</li><li><code>\&quot;</code> 双引号</li><li><code>\xnn</code> 十六进制代码nn代表的一个字符</li><li><code>\unnnn</code> 十六进制代码nnnn代表的一个Unicode字符</li></ul><h4 id="toString-base-方法-String"><a href="#toString-base-方法-String" class="headerlink" title="toString(base)方法,String()"></a>toString(base)方法,String()</h4><p>Number,Boolean,Object,String都有toString()方法,Null和Undefined没有.</p><p>在不确定值是否是Null或Undefined的情况下,可以使用String()转换,可以输出’null’与’undefined’</p><p>如果在把num.toString(base),传入base值,可按固定base数制输出</p><h3 id="Object类型"><a href="#Object类型" class="headerlink" title="Object类型"></a>Object类型</h3><p>任何Object的实例都具有下述方法</p><ul><li><code>obj.constructor</code> 保存用于创建当前对象的函数</li><li><code>obj.hasOwnProperty(propertyName)</code> 用于检测给定属性在当前实例中(不包含原型链中)是否存在</li><li><code>obj.isPrototypeOf(obj2)</code> 用于检查obj是否在obj2的原型链上</li><li><code>obj.propertyIsEnumerable(propertyName)</code> 用于检查给定属性是否可枚举</li><li><code>toLocaleString()</code> </li><li><code>toString()</code></li><li><code>valueOf()</code> 返回对象的字符串,数值,或布尔值表示,通常与toString()返回值相同</li></ul><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><h3 id="布尔操作符"><a href="#布尔操作符" class="headerlink" title="布尔操作符"></a>布尔操作符</h3><h4 id="逻辑非运算结果"><a href="#逻辑非运算结果" class="headerlink" title="逻辑非运算结果"></a>逻辑非运算结果</h4><ul><li><code>!obj</code> false</li><li><code>!&quot;&quot;</code> true</li><li><code>!&quot; &quot;</code> false</li><li><code>!0</code> true</li><li><code>!Infinity</code> false</li><li><code>!NaN</code> true</li><li><code>!null</code> true</li><li><code>undefined</code> true</li></ul><p>这里附上刚才写的<code>Boolean(x)</code>的结果</p><table><thead><tr><th style="text-align:center">x</th><th style="text-align:center">result</th></tr></thead><tbody><tr><td style="text-align:center">“”空字符串</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">NaN</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">null</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">任何对象除了null</td><td style="text-align:center">true</td></tr></tbody></table><h1 id="引用类型-第五章"><a href="#引用类型-第五章" class="headerlink" title="引用类型(第五章)"></a>引用类型(第五章)</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray()"></a>Array.isArray()</h3><p><code>Array.isArray(arr) return boolean</code> 用于检测arr是不是数组</p><p>arr instanceof Array虽然也能返回一个boolean值判断Array.prototoype在不在arr的原型链上, 但若网络中存在多个不同的执行环境, arr可能来自于不同执行环境中的不同构造函数,这个判断可能会出错, 所以建议用Arr.isArray()</p><h3 id="数组的toString-与valueOf"><a href="#数组的toString-与valueOf" class="headerlink" title="数组的toString()与valueOf()"></a>数组的toString()与valueOf()</h3><p><code>arr.toString()</code>,<code>arr.valueOf()</code>返回相同的值, 后者实际上调用了前者, 输出的都是与<code>arr.split(&#39;,&#39;)</code>一样的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>]; <span class="comment">// 创建一个包含 3 个字符串的数组 </span></span><br><span class="line">alert(colors.toString()); <span class="comment">// red,blue,green </span></span><br><span class="line">alert(colors.valueOf()); <span class="comment">// red,blue,green</span></span><br></pre></td></tr></table></figure><h3 id="arr-sort"><a href="#arr-sort" class="headerlink" title="arr.sort()"></a>arr.sort()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">10</span>]</span><br><span class="line">arr.sort()</span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// 1,10,2,3</span></span><br></pre></td></tr></table></figure><p>产生上述结果的原因是如果sort方法不传参数默认先调用<code>arr.toString()</code>,再调用<code>arr.sort</code></p><p>向<code>arr.sort</code>传回调函数可解决此问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 升序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;b) <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">if</span>(a&gt;b) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 降序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;b) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(a&gt;b) <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简写</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b <span class="comment">// 升序,降序b-a</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记忆: a,b相当于数组相邻的两个值, a-b降序, b-a升序</span></span><br></pre></td></tr></table></figure><h3 id="arr-reduce-arr-reduceRight"><a href="#arr-reduce-arr-reduceRight" class="headerlink" title="arr.reduce(), arr.reduceRight"></a>arr.reduce(), arr.reduceRight</h3><p><code>arr.reduce(callback[, initialValue]) return sum</code></p><ul><li><p>callback</p><ul><li>accumulator 累加器累加回调的返回值; 它是上一次调用回调时返回的累积值，或initialValue（如下所示）。</li><li>currentValue 数组中正在处理的元素。</li><li>currentIndex 数组中正在处理的当前元素的索引。 如果提供了initialValue，则索引号为0，否则为索引为1。</li><li>array 调用reduce的数组</li></ul></li><li><p>initialValue [可选] 归并基础值,就是return回去的值,不传即是数组的第一个元素  </p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> total = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].reduce(<span class="function"><span class="keyword">function</span>(<span class="params">sum, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sum + value;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// total is 6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> flattened = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a.concat(b);</span><br><span class="line">&#125;, []);</span><br><span class="line"><span class="comment">// flattened is [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p><code>arr.reduceRight</code>与<code>arr.reduce</code>都是一个套路,只不过reduceRight是从数组最后一项往前,reduce是从第一项往后.</p><h2 id="Date类型"><a href="#Date类型" class="headerlink" title="Date类型"></a>Date类型</h2><h3 id="创建日期对象"><a href="#创建日期对象" class="headerlink" title="创建日期对象"></a>创建日期对象</h3><p><code>var now = new Date()</code></p><h3 id="Date-parse"><a href="#Date-parse" class="headerlink" title="Date.parse"></a>Date.parse</h3><p>传达日期格式,用作<code>new Date()</code>的回调函数,具体有几种格式,详细请参阅高程</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> someDate = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.parse(<span class="string">"May 25, 2004"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> someDate = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"May 25, 2004"</span>); <span class="comment">//用表示日期的字符串传递给Date构造函数,会在后台自动调用Date.parse()</span></span><br></pre></td></tr></table></figure><p><code>Date.UTC()</code>也能做类似的事,但格式和<code>Date.parse()</code>不同,详细请参阅高程</p><h3 id="Date-now"><a href="#Date-now" class="headerlink" title="Date.now()"></a>Date.now()</h3><p><code>Date.now()</code>简化上述转换操作直接返回一个毫秒数,在不支持它的浏览器中,使用<code>+new Date()</code> </p><h3 id="Date的toLocalString-toString-ValueOf"><a href="#Date的toLocalString-toString-ValueOf" class="headerlink" title="Date的toLocalString(),toString() ValueOf()"></a>Date的toLocalString(),toString() ValueOf()</h3><blockquote><p>很明显,这三个方法都没啥用</p></blockquote><p><code>date.tolocalString()</code>会按照与浏览器 设置的地区相适应的格式返回日期和时间,不同浏览器差别大</p><p><code>date.toString()</code>通常返回带有时区信息的日期和 时间，其中时间一般以军用时间（即小时的范围是 0 到 23）表示</p><p><code>date.valueOf()</code> 返回毫秒显示</p><h3 id="Date的组件方法"><a href="#Date的组件方法" class="headerlink" title="Date的组件方法"></a>Date的组件方法</h3><p><img src="https://i.loli.net/2017/12/19/5a38081a34f0e.jpg" alt=""></p><h2 id="RegExp类型"><a href="#RegExp类型" class="headerlink" title="RegExp类型"></a>RegExp类型</h2><h3 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h3><p><a href="https://baike.baidu.com/item/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/1700215?fr=aladdin" target="_blank" rel="external">正则表达式符号,百度百科跳转</a></p><h3 id="创建一个正则表达式"><a href="#创建一个正则表达式" class="headerlink" title="创建一个正则表达式"></a>创建一个正则表达式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字面量</span></span><br><span class="line"><span class="keyword">var</span> expression = <span class="regexp">/ pattern /</span> flags ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="comment">// 使用RegExp构造函数，接收两个参数：要匹配的字符串模式，可选的标志字符串。</span></span><br><span class="line"><span class="comment">// var pattern1 = /[bc]at/i;</span></span><br><span class="line"><span class="comment">// 注意若使用了元字符作为正则表达式普通字符, 要进行双重转义</span></span><br><span class="line"><span class="comment">// 例,用来匹配字符串'[',第一次转义为了将元字符转化为普通字符'\['</span></span><br><span class="line"><span class="comment">// 第二次为了将'\'字符转化'\\'用于字符串,</span></span><br><span class="line"><span class="comment">// 最终转义为'\\[',才能用于构造函数参数</span></span><br><span class="line"><span class="keyword">var</span> pattern2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"[bc]at"</span>, <span class="string">"i"</span>);</span><br></pre></td></tr></table></figure><h3 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h3><ul><li>g: 表示全局（global）模式，即模式将被应用于所有字符串，而非在发现第一个匹配项时立即停止；</li><li>i: 表示不区分大小写（case-insensitive）模式，即在确定匹配项时忽略模式与字符串的大小写；</li><li>m: 表示多行（multiline）模式，即在到达一行文本末尾时还会继续查找下一行中是否存在与模式匹配的项。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 匹配字符串中所有"at"的实例 */</span> </span><br><span class="line"><span class="keyword">var</span> pattern1 = <span class="regexp">/at/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 匹配第一个"bat"或"cat"，不区分大小写 */</span> </span><br><span class="line"><span class="keyword">var</span> pattern2 = <span class="regexp">/[bc]at/i</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* * 匹配所有以"at"结尾的 3 个字符的组合，不区分大小写 */</span> </span><br><span class="line"><span class="keyword">var</span> pattern3 = <span class="regexp">/.at/gi</span>;</span><br></pre></td></tr></table></figure><p>正则表达式所有元字符都必须转义,元字符包括</p><p><code>( [ { \ ^ $ | ) ? * + .]}</code></p><h3 id="RegExp实例属性"><a href="#RegExp实例属性" class="headerlink" title="RegExp实例属性"></a>RegExp实例属性</h3><p><code>RegExp</code>的每个实例都具有下列属性,通过这些属性可以取得有关模式的各种信息</p><ul><li><code>global</code>: 布尔值，表示是否设置了 g 标志。</li><li><code>ingoreCase</code>: 布尔值，表示是否设置了 i 标志。</li><li><code>lastIndex</code>: 整数，表示开始搜索下一个匹配项的字符位置，从 0 算起。</li><li><code>multiline</code>: 布尔值，表示是否设置了 m 标志。</li><li><code>source</code>: 正则表达式的字符串表示，按照字面量形式而非传入构造函数中的字符串模式返回。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pattern1 = <span class="regexp">/\[bc\]at/i</span>;</span><br><span class="line">    </span><br><span class="line">alert(pattern1.global);     <span class="comment">//false</span></span><br><span class="line">alert(pattern1.ignoreCase); <span class="comment">//true</span></span><br><span class="line">alert(pattern1.multiline);  <span class="comment">//false</span></span><br><span class="line">alert(pattern1.lastIndex);  <span class="comment">//0</span></span><br><span class="line">alert(pattern1.source);     <span class="comment">//"\[bc\]at"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pattern2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\[bc\\]at"</span>, <span class="string">"i"</span>);</span><br><span class="line"></span><br><span class="line">alert(pattern2.global);     <span class="comment">//false</span></span><br><span class="line">alert(pattern2.ignoreCase); <span class="comment">//true</span></span><br><span class="line">alert(pattern2.multiline);  <span class="comment">//false</span></span><br><span class="line">alert(pattern2.lastIndex);  <span class="comment">//0</span></span><br><span class="line">alert(pattern2.source);     <span class="comment">//"\[bc\]at"</span></span><br></pre></td></tr></table></figure><h3 id="reg-exec"><a href="#reg-exec" class="headerlink" title="reg.exec()"></a>reg.exec()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"帅,不是一般的帅,也不是外在的帅,也不是内在的帅"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/帅/g</span>;</span><br><span class="line"><span class="keyword">var</span> result = reg.exec(str);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br></pre></td></tr></table></figure><p>该方法每次匹配成功会改变正则表达式实例对象的lastIndex属性,下次搜索从lastIndex开始</p><p><img src="https://i.loli.net/2017/12/19/5a38081a1df77.jpg" alt=""></p><blockquote><p>此方法还能匹配不同的捕获组,从而形成result[1],result[2],关于捕获组有关例子,具体看高程</p></blockquote><h3 id="reg-test"><a href="#reg-test" class="headerlink" title="reg.test()"></a>reg.test()</h3><p><code>reg.text(str) return boolean</code>,嗯,就这样.</p><h3 id="reg-toLocaleString-reg-toString-valueOf"><a href="#reg-toLocaleString-reg-toString-valueOf" class="headerlink" title="reg.toLocaleString(),reg.toString(),valueOf()"></a>reg.toLocaleString(),reg.toString(),valueOf()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pattern = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\[bc\\]at"</span>, <span class="string">"gi"</span>); </span><br><span class="line">alert(pattern.toString()); <span class="comment">// /\[bc\]at/gi </span></span><br><span class="line">alert(pattern.toLocaleString()); <span class="comment">// /\[bc\]at/gi</span></span><br></pre></td></tr></table></figure><p>正则表达式的valueOf()方法返回正则表达式本身</p><h3 id="regExp构造函数属性"><a href="#regExp构造函数属性" class="headerlink" title="regExp构造函数属性"></a>regExp构造函数属性</h3><p>RegExp 构造函数包含一些属性（静态属性）。这些属性适用于作用域中的所有正则表达式，并且基于所执行的最近一次正则表达式操作而变化。关于这些属性的另一个独 特之处，就是可以通过两种方式访问它们。换句话说，这些属性分别有一个长属性名和一个短属性名(短属性名需要通过方括号方式访问)</p><p><img src="https://i.loli.net/2017/12/19/5a38081a07454.jpg" alt=""></p><p>除了上面介绍的几个属性之外，还有多达 9 个用于存储捕获组的构造函数属性。访问这些属性的语 法是 RegExp.$1、RegExp.$2…RegExp.$9，分别用于存储第一、第二……第九个匹配的捕获组。在 调用 exec()或 test()方法时</p><blockquote><p>一看就用的不多,具体demo看高程p108</p></blockquote><p>除了上面介绍的几个属性之外，还有多达 9 个用于存储捕获组的构造函数属性。访问这些属性的语 法是 RegExp.$1、RegExp.$2…RegExp.$9，分别用于存储第一、第二……第九个匹配的捕获组。在 调用 exec()或 test()方法时被改变</p><h2 id="Function类型"><a href="#Function类型" class="headerlink" title="Function类型"></a>Function类型</h2><h3 id="使用Function构造函数创建函数"><a href="#使用Function构造函数创建函数" class="headerlink" title="使用Function构造函数创建函数"></a>使用Function构造函数创建函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="comment">// 最后一个字符串是函数体,前面是参数,接收变量名是函数名</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"num1"</span>, <span class="string">"num2"</span>, <span class="string">"return num1 + num2"</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>)</span>&#123; <span class="keyword">return</span> num1 + num2; &#125;;</span><br></pre></td></tr></table></figure><h3 id="内部属性arguments"><a href="#内部属性arguments" class="headerlink" title="内部属性arguments"></a>内部属性arguments</h3><h4 id="arguments-callee"><a href="#arguments-callee" class="headerlink" title="arguments.callee"></a>arguments.callee</h4><p>指向拥有arguments对象的函数,即自己</p><h3 id="内部属性this"><a href="#内部属性this" class="headerlink" title="内部属性this"></a>内部属性this</h3><p>函数执行的环境对象,网页全局window</p><h3 id="内部属性caller"><a href="#内部属性caller" class="headerlink" title="内部属性caller"></a>内部属性caller</h3><p>这个属性中保存着调用当前函数的函数的引用,不能被赋值,否则报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    inner();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(inner.caller) <span class="comment">// 显示outer函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数实例属性和方法"><a href="#函数实例属性和方法" class="headerlink" title="函数实例属性和方法"></a>函数实例属性和方法</h3><h4 id="函数实例属性length"><a href="#函数实例属性length" class="headerlink" title="函数实例属性length"></a>函数实例属性length</h4><p>表示函数希望接收的命名参数的个数</p><h4 id="函数实例属性prototype"><a href="#函数实例属性prototype" class="headerlink" title="函数实例属性prototype"></a>函数实例属性prototype</h4><p>不可枚举,<code>for-in</code>无法发现</p><h4 id="函数实例方法call-apply-bind"><a href="#函数实例方法call-apply-bind" class="headerlink" title="函数实例方法call,apply,bind"></a>函数实例方法call,apply,bind</h4><p><code>func.apply(this[,arr])</code> === <code>this.func(...arr)</code></p><p><code>func.call(this[,arg1,arg2,arg3])</code> === <code>this.func(arg1,arg2,arg3)</code></p><p><code>func.bind(this) return newFunc</code></p><h2 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h2><p>包含Boolean,Number,String三种,与其他引用类型相似,但同时也具有与各自基本类型相应的特殊行为</p><p>在需要时执行类似下列过程: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">"some text"</span>; </span><br><span class="line"><span class="keyword">var</span> s2 = s1.substring(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// js内部执行的方法</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"some text"</span>); <span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">var</span> s2 = s1.substring(<span class="number">2</span>); <span class="comment">// 调用方法</span></span><br><span class="line"> s1 = <span class="literal">null</span>; <span class="comment">//销毁实例</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="string">"25"</span>; </span><br><span class="line"><span class="keyword">var</span> number = <span class="built_in">Number</span>(value); <span class="comment">//转型函数</span></span><br><span class="line">alert(<span class="keyword">typeof</span> number); <span class="comment">//"number"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Number</span>(value); <span class="comment">//构造函数</span></span><br><span class="line">alert(<span class="keyword">typeof</span> obj); <span class="comment">//"object"</span></span><br></pre></td></tr></table></figure><h3 id="基本包装Boolean类型"><a href="#基本包装Boolean类型" class="headerlink" title="基本包装Boolean类型"></a>基本包装Boolean类型</h3><blockquote><p>永远不要使用Boolean对象,坑多.具体见高程p120</p></blockquote><h3 id="基本包装Number类型"><a href="#基本包装Number类型" class="headerlink" title="基本包装Number类型"></a>基本包装Number类型</h3><blockquote><p>与Boolean类型一样,不建议用Number()构造函数直接实例化Number()类型</p></blockquote><h4 id="num-toFiexed-args"><a href="#num-toFiexed-args" class="headerlink" title="num.toFiexed(args)"></a>num.toFiexed(args)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toFiexed(<span class="number">2</span>)) <span class="comment">//10.00</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">10.005</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num1.toFixed(<span class="number">2</span>)) <span class="comment">//10.01,能够自动舍入</span></span><br></pre></td></tr></table></figure><h4 id="num-toExponential-args"><a href="#num-toExponential-args" class="headerlink" title="num.toExponential(args)"></a>num.toExponential(args)</h4><p>返回指数表示法,接收一个参数,指定输出结果中的小数位数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toExponential(<span class="number">1</span>)) <span class="comment">// 1.0e+1</span></span><br></pre></td></tr></table></figure><h4 id="num-toPrecision-args"><a href="#num-toPrecision-args" class="headerlink" title="num.toPrecision(args)"></a>num.toPrecision(args)</h4><p>根据所传的num和args,智能调用上面的<code>num.toFixed(args)</code>或<code>num.toExponential(args)</code>方法,总是返回最准确的值</p><h3 id="基本包装String类型"><a href="#基本包装String类型" class="headerlink" title="基本包装String类型"></a>基本包装String类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stringObject = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"hello world"</span>);</span><br></pre></td></tr></table></figure><h4 id="str-length"><a href="#str-length" class="headerlink" title="str.length"></a>str.length</h4><p>表示字符串长度</p><h4 id="str-index"><a href="#str-index" class="headerlink" title="str[index]"></a>str[index]</h4><p>ES5定义的访问个别字符的方法,使用类数组的访问方式</p><h4 id="String实例方法"><a href="#String实例方法" class="headerlink" title="String实例方法"></a>String实例方法</h4><ul><li><code>str.charAt(index) return char</code></li><li><code>str.charCodeAt(index) return charCode</code></li><li><code>str.concat(str1) return newStr</code></li><li><code>str.slice(start[,end]) return newStr</code></li><li><code>str.subString(start[,end]) return newStr</code> 与slice的区别是end不能是负值,但还有些细节,具体看高程p124</li><li><code>str.substr(start[,num]) return newStr</code></li><li><code>str.indexOf(str1[,index]) return index/-1</code></li><li><code>str.lastIndexOf(str1[,index]) return index/-1</code></li><li><code>str.trim()</code></li><li><code>toLowerCase()、toLocaleLowerCase()、toUpperCase()和 toLocaleUpperCase()</code> 推荐用带Locale的替换不带Locale的,有些语言会出问题</li><li><code>str.split(str1/regExp) return arr</code> 当参数是regExp时看mdn相关说明或高程p128</li></ul><blockquote><p>下面两个方法有些冷门</p></blockquote><ul><li><code>str.localeCompare(str1) return 1/0/-1</code> 比较str1和str1的字母表顺序,若str1排在前,返回+1,以此类推</li><li><code>String.fromCharCode(104,101,108,108,111) return &#39;hello&#39;</code> 静态方法,接受字符编码,返回字符串</li></ul><h4 id="String实例的模式匹配方法"><a href="#String实例的模式匹配方法" class="headerlink" title="String实例的模式匹配方法"></a>String实例的模式匹配方法</h4><ul><li><code>str.match(str1/regExp) return arr</code> 是<code>regExp.exec(str)</code>的逆方法,输出一模一样</li><li><code>str.search(str1/regExp) return index/-1</code> 是str.match的变更版本,不返回数组了,返回第一次出现的索引.</li><li><code>str.replace(regExp/string,replacement) return newStr</code> //若regExp设置g属性则替换全部,replacement除了是str还可以是function,具体看高程p128</li></ul><h2 id="单体内置对象"><a href="#单体内置对象" class="headerlink" title="单体内置对象"></a>单体内置对象</h2><p>由ECMAScript 实现提供的、不依赖于宿主环境的对象，这些对象在 ECMAScript 程序执行之前就已经存在了.意思就是说，开发人员不必显式地实例化内置对象，因为它们已经实例化了. 之前介绍的Object,Array,String等都是这样.</p><p>下面说两个单体内置对象Global和Math</p><h3 id="Global对象"><a href="#Global对象" class="headerlink" title="Global对象"></a>Global对象</h3><p>isNaN()、isFinite()、parseInt()以及 parseFloat() 都是Global对象的方法,没处归类的方法都是他的.</p><h4 id="Global对象的属性"><a href="#Global对象的属性" class="headerlink" title="Global对象的属性"></a>Global对象的属性</h4><p>Global 对象还包含一些属性， 其中一部分属性已经在本书前面介绍过了。 例如，特殊的值 undefined、NaN 以及 Infinity 都是 Global 对象的属性。此外，所有原生引用类型的构造函数，像 Object 和 Function，也都是 Global 对象的属性。下表列出了 Global 对象的所有属性。</p><p><img src="https://i.loli.net/2017/12/19/5a38081a2a5a9.jpg" alt=""></p><h4 id="URI方法"><a href="#URI方法" class="headerlink" title="URI方法"></a>URI方法</h4><p>Global 对象的 encodeURI() 和 encodeURIComponent() 方法可以对 URI（Uniform Resource Identifiers，通用资源标识符）进行编码，以便发送给浏览器。</p><p>有效的 URI 中不能包含某些字符，例如 空格。而这两个 URI 编码方法就可以对 URI 进行编码，它们用特殊的 UTF-8 编码替换所有无效的字符， 从而让浏览器能够接受和理解。</p><p>其中，<code>encodeURI()</code>主要用于整个 URI（例如，<a href="http://www.wrox.com/illegal" target="_blank" rel="external">http://www.wrox.com/illegal</a> value.htm），而 <code>encodeURIComponent()</code>主要用于对 URI 中的某一段（例如前面 URI 中的 illegal value.htm）进行编码。 它们的主要区别在于，encodeURI()不会对本身属于 URI 的特殊字符进行编码，例如冒号、正斜杠、问号和井字号；而 <code>encodeURIComponent()</code>则会对它发现的任何非标准字符进行编码。来看下面的例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uri = <span class="string">"http://www.wrox.com/illegal value.htm#start"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//"http://www.wrox.com/illegal%20value.htm#start"</span></span><br><span class="line">alert(<span class="built_in">encodeURI</span>(uri));</span><br><span class="line"></span><br><span class="line"><span class="comment">//"http%3A%2F%2Fwww.wrox.com%2Fillegal%20value.htm%23start"</span></span><br><span class="line">alert(<span class="built_in">encodeURIComponent</span>(uri));</span><br></pre></td></tr></table></figure><blockquote><p>使用 <code>encodeURIComponent()</code>要比使用 <code>encodeURI()</code>更多，因为在实践中更常见的是对查询字符串参数而不是对基础 URI 进行编码。</p></blockquote><p>对应解码方法是 <code>decodeURI()</code> 和 <code>decodeURIComponent()</code>，<code>decodeURI()</code>只能对使用 <code>encodeURI()</code>替换的字符进行解码。它可将%20替换成一个空格，但不会对%23作任何处理，因为%23表示井字号（#），而井字号不是使用<code>encodeURI()</code>替换的。同样地，<code>decodeURIComponent()</code>能够解码使用 <code>encodeURIComponent()</code>编码</p><blockquote><p>URI 方法 encodeURI()、encodeURIComponent()、decodeURI()和 decodeURIComponent()用于替代已经被 ECMA-262第 3版废弃的 escape()和 unescape() 方法。URI 方法能够编码所有 Unicode 字符，而原来的方法只能正确地编码 ASCII 字符。 因此在开发实践中，特别是在产品级的代码中，一定要使用 URI 方法，不要使用 escape() 和 unescape()方法。</p></blockquote><h4 id="eval方法"><a href="#eval方法" class="headerlink" title="eval方法"></a>eval方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eval内部定义的变量和函数没有变量提升,外部访问不到</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">"function sayHi() &#123; alert('hi'); &#125;"</span>); </span><br><span class="line">sayHi();</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">"var msg = 'hello world'; "</span>); </span><br><span class="line">alert(msg); <span class="comment">//"hello world"</span></span><br></pre></td></tr></table></figure><p>当解析器发现代码中调用 <code>eval()</code>方法时，它会将传入的参数当作实际的 ECMAScript 语句来解析，然后把执行结果插入到原位置。通过 <code>eval()</code>执行的代码被认为是包含该次调用的执行环境的一部分，因此被执行的代码具有与该执行环境相同的作用域链。这意味着通过 <code>eval()</code>执行的代码可以引用在包 含环境中定义的变量</p><p>在<code>eval()</code>中创建的任何变量或函数都不会被提升，因为在解析代码的时候，它们被包含在一个字符串中；它们只在 <code>eval()</code>执行的时候创建。</p><p>严格模式下，在外部访问不到 <code>eval()</code>中创建的任何变量或函数，没有提升,没有变量声明,所以会导致错误。 同样，在严格模式下，为 eval 赋值也会导致错误</p><h4 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h4><p>在浏览器环境中,<code>window</code>对象就是<code>Global</code>对象,</p><h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><h4 id="Math对象的属性"><a href="#Math对象的属性" class="headerlink" title="Math对象的属性"></a>Math对象的属性</h4><p><img src="https://i.loli.net/2017/12/19/5a38081a29ecb.jpg" alt=""></p><h4 id="Math-min-Math-max"><a href="#Math-min-Math-max" class="headerlink" title="Math.min(),Math.max()"></a>Math.min(),Math.max()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> max = <span class="built_in">Math</span>.max(<span class="number">3</span>, <span class="number">54</span>, <span class="number">32</span>, <span class="number">16</span>);</span><br><span class="line">alert(max);    <span class="comment">//54</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> min = <span class="built_in">Math</span>.min(<span class="number">3</span>, <span class="number">54</span>, <span class="number">32</span>, <span class="number">16</span>);</span><br><span class="line">alert(min);    <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 求数组的最大值</span></span><br><span class="line"><span class="keyword">var</span> values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]; </span><br><span class="line"><span class="keyword">var</span> max = <span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, values);</span><br></pre></td></tr></table></figure><h4 id="Math-ceil-、Math-floor-和-Math-round-Math-Random"><a href="#Math-ceil-、Math-floor-和-Math-round-Math-Random" class="headerlink" title="Math.ceil()、Math.floor()和 Math.round(),Math.Random()"></a>Math.ceil()、Math.floor()和 Math.round(),Math.Random()</h4><ul><li><code>Math.ceil()</code></li><li><code>Math.floor()</code></li><li><code>Math.round()</code> 总是将数值四舍五入为最接近的整数</li><li><code>Math.random()</code> 返回一个大于等于0小于1的一个随机数</li></ul><p><code>值 = Math.floor(Math.random() * 可能值的总数 + 第一个可能的值)</code> ,范围公式</p><p>范围工具函数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectFrom</span>(<span class="params">lowerValue, upperValue</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> choices = upperValue - lowerValue + <span class="number">1</span>; </span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * choices + lowerValue); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Math的其他方法"><a href="#Math的其他方法" class="headerlink" title="Math的其他方法"></a>Math的其他方法</h4><p><img src="https://i.loli.net/2017/12/19/5a38081a36443.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本概念-第三章&quot;&gt;&lt;a href=&quot;#基本概念-第三章&quot; class=&quot;headerlink&quot; title=&quot;基本概念(第三章)&quot;&gt;&lt;/a&gt;基本概念(第三章)&lt;/h1&gt;&lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vuex 03 : 代码拆分 &amp; mapAnything</title>
    <link href="http://yoursite.com/2017/12/06/12-Vuex-03/"/>
    <id>http://yoursite.com/2017/12/06/12-Vuex-03/</id>
    <published>2017-12-06T08:06:45.000Z</published>
    <updated>2017-12-20T03:55:37.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mapActions-mapGetters-mapMutations"><a href="#mapActions-mapGetters-mapMutations" class="headerlink" title="mapActions,mapGetters,mapMutations"></a>mapActions,mapGetters,mapMutations</h3><p>map系列函数能帮我们用更简洁的语法将store.actions,mutations,getters绑定到组件中, 是很好的语法糖. 这里以<code>mapGetters</code>举例,剩下剩下两个也是一个套路.</p><p><code>mapGetters</code> 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性, 可以向方法中传一个数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  computed: &#123;</span><br><span class="line">  <span class="comment">// 使用对象展开运算符将 getter 混入 computed 对象中</span></span><br><span class="line">    ...mapGetters([</span><br><span class="line">      <span class="string">'doneTodosCount'</span>,</span><br><span class="line">      <span class="string">'anotherGetter'</span>,</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你想将一个 getter 属性另取一个名字，使用对象形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mapGetters(&#123;</span><br><span class="line">  <span class="comment">// 映射 `this.doneCount` 为 `store.getters.doneTodosCount`</span></span><br><span class="line">  doneCount: <span class="string">'doneTodosCount'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>回到本例,我们可以修改代码为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  ...mapGetters([<span class="string">"oddOrEven"</span>])</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  ...mapActions([<span class="string">"increment"</span>, <span class="string">"decrement"</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件拆分"><a href="#文件拆分" class="headerlink" title="文件拆分"></a>文件拆分</h3><p>接下来将文件拆分:</p><ol><li>将所有与store相关的方法移到store.js中, </li><li>将Counter组件提出称为单文件组件Counter.vue</li><li>将store.js与Counter.vue一起import进入口文件index.js,并在入口的根实例中绑定store</li></ol><p>测试一下,完成! 下面是分文件的完整代码</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><hr><h3 id="store-js"><a href="#store-js" class="headerlink" title="store.js"></a>store.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用常量替代字符串</span></span><br><span class="line"><span class="keyword">const</span> INCREMENT = <span class="string">'INCREMENT'</span></span><br><span class="line"><span class="keyword">const</span> DECREMENT = <span class="string">'DECREMENT'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  count: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  <span class="comment">// getter方法的第一个参数是state,第二个参数是getters对象</span></span><br><span class="line">  oddOrEven(state) &#123;</span><br><span class="line">    <span class="keyword">return</span> state.count % <span class="number">2</span> === <span class="number">0</span> ? <span class="string">'even'</span> : <span class="string">'odd'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="comment">// ES6计算属性写法,来命名函数名,payload是组件内部提交的&#123;type:string,step:string&#125;的对象</span></span><br><span class="line">  [INCREMENT](state, payload) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state.count += payload.step</span><br><span class="line">  &#125;,</span><br><span class="line">  [DECREMENT](state, payload) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state.count -= payload.step</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="comment">// 用action将mutation包一层,把触发mutation的逻辑写在action中</span></span><br><span class="line">  increment(&#123; commit &#125;) &#123;</span><br><span class="line">    <span class="comment">// 对象风格提交方式提交mutation, 与Redux统一</span></span><br><span class="line">    commit(&#123; <span class="attr">type</span>: INCREMENT, <span class="attr">step</span>: <span class="number">1</span> &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// action可以是异步的,可以用Promise包装</span></span><br><span class="line">  decrement(&#123; commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        commit(&#123; <span class="attr">type</span>: DECREMENT, <span class="attr">step</span>: <span class="number">1</span> &#125;)</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;, <span class="number">3000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  getters,</span><br><span class="line">  mutations,</span><br><span class="line">  actions</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Counter-vue"><a href="#Counter-vue" class="headerlink" title="Counter.vue"></a>Counter.vue</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; $store.state.count &#125;&#125; is &#123;&#123; oddOrEven &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button v-on:click="increment"&gt; + &lt;/</span>button&gt;</span><br><span class="line">    &lt;button v-on:click=<span class="string">"decrement"</span>&gt; - (Async) &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">import Vue from "vue";</span></span><br><span class="line"><span class="regexp">import &#123; mapActions, mapGetters &#125; from "vuex";</span></span><br><span class="line"><span class="regexp">export default Vue.component("Counter", &#123;</span></span><br><span class="line"><span class="regexp">  computed: &#123;</span></span><br><span class="line"><span class="regexp">    ...mapGetters(["oddOrEven"])</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  methods: &#123;</span></span><br><span class="line"><span class="regexp">    ...mapActions(["increment", "decrement"])</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Counter <span class="keyword">from</span> <span class="string">'./Counter'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  store,</span><br><span class="line">  template: <span class="string">'&lt;Counter/&gt;'</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><p>至此, 我们已经完成了一个具备大多数Vuex功能的counter, 当然Vuex可以做的事比这个例子更多, 比如Module模块分割和路径管理等. 但都是在这个基础上进行改动的. 相信看文档与实际项目结合,接受的会很快</p><p>其实Flux架构的大体思路都差不多, 单向数据流, 视图触发<code>dispatch</code>一个<code>action</code>, 从而修改<code>store</code>中的<code>state</code>, View层监视到<code>state</code>的修改从而更新数据触发渲染. 不管是Vuex还是Redux都是一个套路. 希望从这几篇blog的总结中, 我自己可以有收获!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;mapActions-mapGetters-mapMutations&quot;&gt;&lt;a href=&quot;#mapActions-mapGetters-mapMutations&quot; class=&quot;headerlink&quot; title=&quot;mapActions,mapGetters,ma
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vuex 02 : 基于Getter, Mutation, Action,继续改造Demo</title>
    <link href="http://yoursite.com/2017/12/06/11-vuex-02/"/>
    <id>http://yoursite.com/2017/12/06/11-vuex-02/</id>
    <published>2017-12-06T00:25:08.000Z</published>
    <updated>2017-12-20T03:55:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>经过上篇的旅程, 已经可以做出一个有Vuex基本功能的Counter了. 为了让Counter的逻辑更完善, 今天引入Getter, Mutation, Action 来继续优化代码</p><h3 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h3><p>Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</p><p>在本例中,将count是奇书还是偶数的逻辑写在getter中.</p><p>Getter接收<code>state</code>作为第一个参数,</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getters:&#123;</span><br><span class="line">  <span class="comment">// getter方法的第一个参数是state,第二个参数是getters对象</span></span><br><span class="line">  oddOrEven(state)&#123;</span><br><span class="line">    <span class="keyword">return</span> state.count % <span class="number">2</span> === <span class="number">0</span> ? <span class="string">'even'</span> : <span class="string">'odd'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组件内部的写法,这里getter会暴露为Store.getters对象, 同时getter也接收getters对象本身作为第二个参数, 这样可以接受其他getter</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">  count()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.count</span><br><span class="line">  &#125;,</span><br><span class="line">  oddOrEven()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$store.getters.oddOrEven</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h3><p>在Vuex里,提交状态需要用到<code>mutation</code>与<code>action</code>,<code>action</code>更像在mutation外面包了一层, 类似Redux中的<code>action creater</code>产生<code>action</code>一样, 在Vuex里, <code>mutation</code>只保留最原始的逻辑, 操作state中的数据, 其他commit mutation的逻辑和异步操作交给<code>action</code>去处理.</p><p>所以,异步和其他逻辑处理交给<code>action</code>,所以<code>mutation</code>必须是同步的</p><p><code>mutation</code>的类型最好用常量去代替, 这点也与Redux等Flux架构相统一, 可以使用ES6的计算属性优化常量作为函数名的写法.</p><p>提交mutation的唯一方式是<code>store.commit(mutation)</code>,这里可以在<code>commit mutation</code>时附加提交数据<code>payload</code>,习惯写成对象的提交方式如<code>{type:INCREMENT,step:1}</code>,这个对象在store定义时的<code>mutation</code>方法中是第二个参数, 写成<code>payload</code>是很好的社区规范.这里用step来定义 counter 加减的跨度</p><p>总结一下,如下改写mutation:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> INCREMENT = <span class="string">'INCREMENT'</span></span><br><span class="line"><span class="keyword">const</span> DECREMENT = <span class="string">'DECREMENT'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">mutations:&#123;</span><br><span class="line">  <span class="comment">// ES6计算属性写法,来命名函数名,payload是组件内部提交的&#123;type:string,step:string&#125;的对象</span></span><br><span class="line">  [INCREMENT](state,payload)&#123;</span><br><span class="line">    <span class="keyword">this</span>.state.count += payload.step</span><br><span class="line">  &#125;,</span><br><span class="line">  [DECREMENT](state,payload)&#123;</span><br><span class="line">    <span class="keyword">this</span>.state.count -= payload.step</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在组件内提交时</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$store.commit(&#123;<span class="attr">type</span>:INCREMENT,<span class="attr">step</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><p><code>action</code>是在<code>mutation</code>外包的一层方法, 用来定义触发<code>commit mutation</code>的逻辑, 更主要的是异步逻辑.</p><p>Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 <code>context.commit</code> 提交一个 mutation，或者通过 <code>context.state</code> 和 <code>context.getters</code> 来获取 state 和 getters</p><p>实践中，我们会经常用到 ES6的解构赋值来简化代码（特别是我们需要调用 <code>commit</code> 很多次的时候</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  increment (&#123; commit &#125;) &#123;</span><br><span class="line">    commit(<span class="string">'increment'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Action 通过 store.dispatch 方法触发：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(<span class="string">'increment'</span>)</span><br></pre></td></tr></table></figure><p>Action 通常是异步的，那么如何知道 action 什么时候结束呢？更重要的是，我们如何才能组合多个 action，以处理更加复杂的异步流程？</p><p>首先，你需要明白 <code>store.dispatch</code> 可以处理被触发的 action 的处理函数返回的 Promise，并且 <code>store.dispatch</code> 仍旧返回 Promise：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  actionA (&#123; commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        commit(<span class="string">'someMutation'</span>)</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以现在在dispatch时可以:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(<span class="string">'actionA'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在另一个action内也可以:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  actionB (&#123; dispatch, commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> dispatch(<span class="string">'actionA'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      commit(<span class="string">'someOtherMutation'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回到本例,将提交mutation的逻辑全部移入action,将做减法的逻辑改成异步,1秒以后执行,代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store配置内</span></span><br><span class="line">actions:&#123;</span><br><span class="line">    <span class="comment">// 用action将mutation包一层,把触发mutation的逻辑写在action中</span></span><br><span class="line">    [INCREMENT](&#123;commit&#125;)&#123;</span><br><span class="line">      <span class="comment">// 对象风格提交方式提交mutation, 与Redux统一</span></span><br><span class="line">      commit(&#123;<span class="attr">type</span>:INCREMENT,<span class="attr">step</span>:<span class="number">1</span>&#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// action可以是异步的,可以用Promise包装</span></span><br><span class="line">    [DECREMENT](&#123;commit&#125;)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          commit(&#123;<span class="attr">type</span>:DECREMENT,<span class="attr">step</span>:<span class="number">1</span>&#125;)</span><br><span class="line">          resolve()</span><br><span class="line">        &#125;, <span class="number">3000</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 组件methods内</span></span><br><span class="line">methods:&#123;</span><br><span class="line">  increment()&#123;</span><br><span class="line">    <span class="keyword">this</span>.$store.dispatch(INCREMENT) </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//store.dispatch可以处理被触发的action的处理函数返回的promiste,dispatch仍旧返回Promise</span></span><br><span class="line">  decrement()&#123;</span><br><span class="line">    <span class="keyword">this</span>.$store.dispatch(DECREMENT).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="string">'Async deduct works!'</span>)&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://i.loli.net/2017/12/06/5a27a4aade6b2.jpg" alt=""></p><h3 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用常量替代字符串</span></span><br><span class="line"><span class="keyword">const</span> INCREMENT = <span class="string">'INCREMENT'</span></span><br><span class="line"><span class="keyword">const</span> DECREMENT = <span class="string">'DECREMENT'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state:&#123;</span><br><span class="line">    count:<span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  getters:&#123;</span><br><span class="line">    <span class="comment">// getter方法的第一个参数是state,第二个参数是getters对象</span></span><br><span class="line">    oddOrEven(state)&#123;</span><br><span class="line">      <span class="keyword">return</span> state.count % <span class="number">2</span> === <span class="number">0</span> ? <span class="string">'even'</span> : <span class="string">'odd'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations:&#123;</span><br><span class="line">    <span class="comment">// ES6计算属性写法,来命名函数名,payload是组件内部提交的&#123;type:string,step:string&#125;的对象</span></span><br><span class="line">    [INCREMENT](state,payload)&#123;</span><br><span class="line">      <span class="keyword">this</span>.state.count += payload.step</span><br><span class="line">    &#125;,</span><br><span class="line">    [DECREMENT](state,payload)&#123;</span><br><span class="line">      <span class="keyword">this</span>.state.count -= payload.step</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions:&#123;</span><br><span class="line">    <span class="comment">// 用action将mutation包一层,把触发mutation的逻辑写在action中</span></span><br><span class="line">    [INCREMENT](&#123;commit&#125;)&#123;</span><br><span class="line">      <span class="comment">// 对象风格提交方式提交mutation, 与Redux统一</span></span><br><span class="line">      commit(&#123;<span class="attr">type</span>:INCREMENT,<span class="attr">step</span>:<span class="number">1</span>&#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// action可以是异步的,可以用Promise包装</span></span><br><span class="line">    [DECREMENT](&#123;commit&#125;)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          commit(&#123;<span class="attr">type</span>:DECREMENT,<span class="attr">step</span>:<span class="number">1</span>&#125;)</span><br><span class="line">          resolve()</span><br><span class="line">        &#125;, <span class="number">3000</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Counter = &#123;</span><br><span class="line">  template:<span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;&#123;&#123; count &#125;&#125; is &#123;&#123; oddOrEven &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;button v-on:click="increment"&gt; + &lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;button v-on:click="decrement"&gt; - (Async) &lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  computed:&#123;</span><br><span class="line">    count()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.count</span><br><span class="line">    &#125;,</span><br><span class="line">    oddOrEven()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.getters.oddOrEven</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    increment()&#123;</span><br><span class="line">      <span class="keyword">this</span>.$store.dispatch(INCREMENT) </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//store.dispatch可以处理被触发的action的处理函数返回的promiste,dispatch仍旧返回Promise</span></span><br><span class="line">    decrement()&#123;</span><br><span class="line">      <span class="keyword">this</span>.$store.dispatch(DECREMENT).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="string">'Async deduct works!'</span>)&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  store,</span><br><span class="line">  template: <span class="string">'&lt;Counter/&gt;'</span>,</span><br><span class="line">  components: &#123; Counter &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>现在, 我们已经完成了一个符合Vuex规范的Counter, 其可以完美的运行和异步处理数据, 下一次将会对代码进行拆分解耦, 并在组件内部优化action与getter的部署代码</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;经过上篇的旅程, 已经可以做出一个有Vuex基本功能的Counter了. 为了让Counter的逻辑更完善, 今天引入Getter, Mutation, Action 来继续优化代码&lt;/p&gt;
&lt;h3 id=&quot;Getter&quot;&gt;&lt;a href=&quot;#Getter&quot; class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vuex 01 : 入门</title>
    <link href="http://yoursite.com/2017/12/05/10-vuex-01/"/>
    <id>http://yoursite.com/2017/12/05/10-vuex-01/</id>
    <published>2017-12-05T00:18:36.000Z</published>
    <updated>2017-12-06T09:37:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为之前学习了Redux, 这次学Vuex就快速多了, 总的来说思路是一样的, 都是用闭包实现了对一些数据的维护, 再用从闭包return出去的方法操作这些数据, 或获得此时闭包数据的snapshot. </p><h3 id="Vuex-安装"><a href="#Vuex-安装" class="headerlink" title="Vuex 安装"></a>Vuex 安装</h3><p>在一个模块化的打包系统中，您必须显式地通过 <code>Vue.use()</code> 来安装 Vuex：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br></pre></td></tr></table></figure><p>当使用script标签引入时, 不需要以上过程.</p><h3 id="什么是状态管理-单向数据流的意义"><a href="#什么是状态管理-单向数据流的意义" class="headerlink" title="什么是状态管理? 单向数据流的意义"></a>什么是状态管理? 单向数据流的意义</h3><p><img src="https://i.loli.net/2017/12/05/5a25e7c210411.jpg" alt=""></p><p>状态自管理应用包含以下几个部分：</p><ul><li><strong>state</strong>，驱动应用的数据源；</li><li><strong>view</strong>，以声明方式将 <strong>state</strong> 映射到视图；</li><li><strong>actions</strong>，响应在 <strong>view</strong> 上的用户输入导致的状态变化。</li></ul><p>简单来说, 就是app维护一个State库, 将很多组件需要共同使用的状态存储在这个库中, 上图的动作可以分解为几个步骤.</p><ol><li><p>需要使用到其中状态数据的组件, 通过<code>State</code>向其传递的<code>props</code>向<code>View</code>层展示数据, </p></li><li><p>在View层操作数据之后, 通过<code>dispatch</code>相应的<code>action</code>修改<code>state</code>中维护的闭包数据,</p></li><li><p>闭包中的数据改变后, 在<code>dispatch</code>方法中, 操作数据得到个更新后的<code>State</code>后, 调用<code>listener</code>数组中的方法, 通知<code>View</code>层更新数据, 这里回到步骤1, <code>View</code>层再次请求<code>State</code>向其传递的<code>props</code></p></li></ol><p>与<strong>后台API接口</strong>结合后, 用vuex官网更形象更具体的图来描述这个过程</p><p><img src="https://i.loli.net/2017/12/06/5a27396e59fd9.png" alt=""></p><h3 id="Vuex-Counter-最初形态"><a href="#Vuex-Counter-最初形态" class="headerlink" title="Vuex Counter 最初形态"></a>Vuex Counter 最初形态</h3><p>具体上简单的代码来实现以下刚才说的东西</p><p>我们采用vue-cli构建,首先来写一个最简单的vue计数器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Counter = &#123;</span><br><span class="line">  template:<span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;&#123;&#123; count &#125;&#125; is &#123;&#123; oddOrEven &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;button v-on:click="Increase"&gt; + &lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;button v-on:click="Decrease"&gt; - (Async) &lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  data()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count:<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed:&#123;</span><br><span class="line">    oddOrEven()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.count % <span class="number">2</span> === <span class="number">0</span> ? <span class="string">'even'</span> : <span class="string">'odd'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    Increase()&#123;</span><br><span class="line">      <span class="keyword">this</span>.count ++</span><br><span class="line">    &#125;,</span><br><span class="line">    Decrease()&#123;</span><br><span class="line">      <span class="keyword">this</span>.count--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  template: <span class="string">'&lt;Counter/&gt;'</span>,</span><br><span class="line">  components: &#123; Counter &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/12/06/5a27396e6a067.jpg" alt=""></p><p>此时的计数器是完全没有应用状态管理技术的, 虽然引入了vuex.js, 但没有使用, 计数的count完全来自组件内部的data对象.下面要一步步的把他改造成应用状态管理vuex的组件</p><h3 id="创建store-在组件内部引入store-state和store-commit-实现最简单的vuex功能"><a href="#创建store-在组件内部引入store-state和store-commit-实现最简单的vuex功能" class="headerlink" title="创建store,在组件内部引入store.state和store.commit,实现最简单的vuex功能"></a>创建store,在组件内部引入store.state和store.commit,实现最简单的vuex功能</h3><p><code>store</code>就是一个仓库, 是一个容器, 是一个闭包, <code>store</code>中维护者组件中需要的<code>state</code>数据, 和触发这些数据更改的方法</p><p><code>store</code>的存储状态应该是响应式的, 所以最佳实践是<code>store.state</code>中的状态数据通过计算属性返回</p><p>在Vue组件中, 不能直接改变<code>store.state</code>, 只能<code>store.commit(相应的mutation)</code>来改变数据</p><p><code>mutations</code>对象中的键对应的是函数, 其第一个参数是<code>state</code>,在组件内部的<code>methods</code>中,可以在方法内部调用<code>store.commit(mutation)</code>来对应触发<code>store</code>中定义的<code>mutation</code>, 从而修改<code>store.state</code>中的数据</p><p><code>mutation</code>有点像<code>Redux</code>中的<code>action</code>, 不带异步的<code>action</code>, 但不是<code>action creater</code>, 在Vuex中, 有<code>Action</code>更像Redux中的<code>action creater</code>, 这个会在后面进行讨论</p><p>下面把之前的Counter代码修改一下, 让它具备基本的Vuex功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"><span class="comment">// 在构建中使用Vuex中间件</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state:&#123;</span><br><span class="line">    count:<span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations:&#123;</span><br><span class="line">    <span class="comment">// mutation的第一个参数对应store.state</span></span><br><span class="line">    increment(state)&#123;</span><br><span class="line">      <span class="keyword">this</span>.state.count++</span><br><span class="line">    &#125;,</span><br><span class="line">    decrement(state)&#123;</span><br><span class="line">      <span class="keyword">this</span>.state.count--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Counter = &#123;</span><br><span class="line">  template:<span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;&#123;&#123; count &#125;&#125; is &#123;&#123; oddOrEven &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;button v-on:click="increment"&gt; + &lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;button v-on:click="decrement"&gt; - (Async) &lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  computed:&#123;</span><br><span class="line">    count()&#123;</span><br><span class="line">      <span class="comment">// 由于要保证store.state数据的响应式, 用计算属性返回state中的数据值</span></span><br><span class="line">      <span class="keyword">return</span> store.state.count</span><br><span class="line">    &#125;,</span><br><span class="line">    oddOrEven()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.count % <span class="number">2</span> === <span class="number">0</span> ? <span class="string">'even'</span> : <span class="string">'odd'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    increment()&#123;</span><br><span class="line">      <span class="comment">// store.commit('对应的mutation名称'),这是提交mutation的方法</span></span><br><span class="line">      store.commit(<span class="string">'increment'</span>) </span><br><span class="line">    &#125;,</span><br><span class="line">    decrement()&#123;</span><br><span class="line">      store.commit(<span class="string">'decrement'</span>) </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  template: <span class="string">'&lt;Counter/&gt;'</span>,</span><br><span class="line">  components: &#123; Counter &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="根组件注入store-mapState辅助函数生成计算属性"><a href="#根组件注入store-mapState辅助函数生成计算属性" class="headerlink" title="根组件注入store, mapState辅助函数生成计算属性"></a>根组件注入store, mapState辅助函数生成计算属性</h3><p>继续改进代码.Vuex 通过 <code>store</code> 选项，提供了一种机制将状态从根组件“注入”到每一个子组件中（需调用 <code>Vue.use(Vuex)</code>）：</p><p>通过在根实例中注册 <code>store</code> 选项，该 <code>store</code> 实例会注入到根组件下的所有子组件中，且子组件能通过 <code>this.$store</code>访问到。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state:&#123;</span><br><span class="line">    count:<span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations:&#123;</span><br><span class="line">    increment(state)&#123;</span><br><span class="line">      <span class="keyword">this</span>.state.count++</span><br><span class="line">    &#125;,</span><br><span class="line">    decrement(state)&#123;</span><br><span class="line">      <span class="keyword">this</span>.state.count--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Counter = &#123;</span><br><span class="line">  template:<span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;&#123;&#123; count &#125;&#125; is &#123;&#123; oddOrEven &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;button v-on:click="increment"&gt; + &lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;button v-on:click="decrement"&gt; - (Async) &lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  computed:&#123;</span><br><span class="line">    count()&#123;</span><br><span class="line">      <span class="comment">// 这里因为根组件注入了store, 可以访问到this.$store对象了.</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.count</span><br><span class="line">    &#125;,</span><br><span class="line">    oddOrEven()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.count % <span class="number">2</span> === <span class="number">0</span> ? <span class="string">'even'</span> : <span class="string">'odd'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    increment()&#123;</span><br><span class="line">      <span class="keyword">this</span>.$store.commit(<span class="string">'increment'</span>) </span><br><span class="line">    &#125;,</span><br><span class="line">    decrement()&#123;</span><br><span class="line">      <span class="keyword">this</span>.$store.commit(<span class="string">'decrement'</span>) </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  <span class="comment">// 根组件处注入store, 子组件全部可以访问store中的状态数据</span></span><br><span class="line">  store,</span><br><span class="line">  template: <span class="string">'&lt;Counter/&gt;'</span>,</span><br><span class="line">  components: &#123; Counter &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>至此, 根组件已经注入了在状态仓库store, this.$store在Vue组件内部可访问, 组件和视图间的数据传递和更新用Vuex实现.</p><p>下一篇, 主要说说关于computed属性中的Getter与和methods中的Mutation的改造.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;因为之前学习了Redux, 这次学Vuex就快速多了, 总的来说思路是一样的, 都是用闭包实现了对一些数据的维护, 再用从闭包return出去的方法操作这些数据, 或获得此时闭包数据的snapshot. &lt;/p&gt;
&lt;h3 id=&quot;Vuex-安装&quot;&gt;&lt;a href=&quot;#Vue
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React高阶组件(1):Intro</title>
    <link href="http://yoursite.com/2017/11/20/9-React%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B61%20:%20Intro/"/>
    <id>http://yoursite.com/2017/11/20/9-React高阶组件1 : Intro/</id>
    <published>2017-11-20T00:03:53.000Z</published>
    <updated>2017-11-20T08:43:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引子-高阶函数"><a href="#引子-高阶函数" class="headerlink" title="引子,高阶函数"></a>引子,高阶函数</h3><p>收函数作为输入，或者输出另一个函数的一类函数，被称作高阶函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello chotee'</span>)  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wrapped</span>(<span class="params"> fn </span>) </span>&#123; </span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'wrapped'</span>)</span><br><span class="line">    fn()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">hello = wrapped(hello)</span><br><span class="line"></span><br><span class="line">hello() <span class="comment">// wrapped hello chotee</span></span><br></pre></td></tr></table></figure><p>容易出现混淆的一点是: 虽然在hello = wrapped(hello) 这句话执行之后, hello这个变量指向的函数发生了变化, 但传入wrapped闭包内部的hello却仍然是最初定义的hello, 并没有被改写. </p><p>原因是进入wrapped内部执行后, 形参fn重新指向了最初hello定义时所指向的地址, 且wrapped运行完成后由于闭包形成, 这个地址不会被释放. 所以虽然hello重新被赋值, 但传入的函数在闭包内部却不会随着赋值操作发生改变.</p><h3 id="简单的React高阶组件"><a href="#简单的React高阶组件" class="headerlink" title="简单的React高阶组件"></a>简单的React高阶组件</h3><p>高阶组件的定义类似高阶函数, 它描述的便是接受React组件作为输入，输出一个新的React组件的组件。</p><p>实现一个withHeader的高阶组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通React组件Hello</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;这是Hello组件&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 定义一个包裹函数,参数是传入的'要被包裹的组件',return一个'包裹着参数组件的高阶组件'</span></span><br><span class="line"><span class="regexp">function withHeader(Component) &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    class HOC extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">      render() &#123;</span></span><br><span class="line"><span class="regexp">        return (</span></span><br><span class="line"><span class="regexp">          &lt;div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;h1&gt;wrapped Header&lt;/</span>h1&gt;</span><br><span class="line">            &lt;Component &#123;...this.props&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Component</span>&gt;</span></span></span><br><span class="line">          &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 被withHeader包裹后的组件高阶组件HelloWithHeader</span></span><br><span class="line"><span class="regexp">const HelloWithHeader = withHeader(Hello)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;HelloWithHeader&gt;&lt;/</span>HelloWithHeader&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('root'));</span></span><br></pre></td></tr></table></figure><ul><li>渲染结果</li></ul><p><img src="https://i.loli.net/2017/11/20/5a12442bbf77d.png" alt="Jietu20171120-105321"></p><ul><li>dom结构<br><img src="https://i.loli.net/2017/11/20/5a124442cdf6c.png" alt="Jietu20171120-105501"></li></ul><h3 id="关于上述代码的对象展开语法的注意点"><a href="#关于上述代码的对象展开语法的注意点" class="headerlink" title="关于上述代码的对象展开语法的注意点"></a>关于上述代码的对象展开语法的注意点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;WrappedComponent &#123;...this.props&#125;/&gt;</span><br><span class="line"><span class="comment">// is equivalent to</span></span><br><span class="line">React.createElement(WrappedComponent, <span class="keyword">this</span>.props, <span class="literal">null</span>)</span><br></pre></td></tr></table></figure><h3 id="ES7-装饰器写法"><a href="#ES7-装饰器写法" class="headerlink" title="ES7 装饰器写法"></a>ES7 装饰器写法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里省略了和上面例子一模一样的withHeader函数的定义代码</span></span><br><span class="line"></span><br><span class="line">@withHeader <span class="comment">// @ withHeader 等同于写了 Hello = withHeader(Hello)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;这是Hello组件&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;Hello&gt;&lt;/</span>Hello&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('root')); /</span><span class="regexp">/得到与上面同样结果</span></span><br></pre></td></tr></table></figure><h3 id="柯里化-组件参数"><a href="#柯里化-组件参数" class="headerlink" title="柯里化,组件参数"></a>柯里化,组件参数</h3><blockquote><p>柯里化 Curry<br>概念: 只传递函数的一部分参数来调用它,让它返回一个函数去处理剩下的参数<br>函数签名:func(params)(otherParams)<br>应用: 在React里,通过柯里化,通过传入不同的参数得到不同的高阶组件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需求:在刚才的例子里, 在h1标签里输出传入的参数title,以这个需求改造withHeader</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">withHeader</span>(<span class="params">title</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">Component</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="class"><span class="keyword">class</span> <span class="title">HOC</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        render() &#123;</span><br><span class="line">          <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">              &lt;h1&gt;&#123;<span class="string">`包裹的是一个名字叫<span class="subst">$&#123;title&#125;</span>的组件`</span>&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">              &lt;Component &#123;...this.props&#125;&gt;&lt;/</span>Component&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">          )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 注意这里为了区分特意传入了小写'h'开头的'hello'参数</span></span><br><span class="line"><span class="regexp">@withHeader('hello')</span></span><br><span class="line"><span class="regexp">class Hello extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;这是Hello组件&lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Hello&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Hello</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('root'))</span></span><br></pre></td></tr></table></figure><ul><li><p>渲染结果<br><img src="https://i.loli.net/2017/11/20/5a12502b3ffe1.png" alt="Jietu20171120-114530"></p></li><li><p>使用ES6写法可以更加简洁</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> withHeader = <span class="function">(<span class="params">title</span>) =&gt;</span> (Component) =&gt; (</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">HOC</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;h1&gt;&#123;<span class="string">`包裹的是一个名字叫<span class="subst">$&#123;title&#125;</span>的组件`</span>&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Component &#123;...this.props&#125;&gt;&lt;/</span>Component&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;)</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="属性代理"><a href="#属性代理" class="headerlink" title="属性代理"></a>属性代理</h3><p>高阶组件有两种常见的使用方式,第一种是属性代理,第二种是反向继承,直接上属性代理的示例代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将被包裹组件的props和新生成的props一起传递给被包裹的组件,称之为属性代理</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">withHeader</span>(<span class="params">Component</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">HOC</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">      render() &#123;</span><br><span class="line">        <span class="keyword">const</span> newProps = &#123;</span><br><span class="line">          test : <span class="string">'HOC'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">            &lt;h1&gt;wrapped Header&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">            &lt;Component &#123;...newProps &#125; &#123;...this.props&#125; &gt;&lt;/</span>Component&gt;</span><br><span class="line">          &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">@withHeader</span></span><br><span class="line"><span class="regexp">class Hello extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;这是Hello组件&lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Hello&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Hello</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('root'))</span></span><br></pre></td></tr></table></figure><h3 id="反向继承"><a href="#反向继承" class="headerlink" title="反向继承"></a>反向继承</h3><p>这种方式返回的React组件继承了被传入的组件，所以它能够访问到的区域、权限更多，相比属性代理方式，它更像打入组织内部，对其进行修改。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">withHeader</span>(<span class="params">Component</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">HOC</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">      componentDidMount() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'这是高阶组件额外的生命周期'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      render() &#123;</span><br><span class="line">        <span class="comment">// super([arguments]),调用父类的构造函数</span></span><br><span class="line">        <span class="comment">// super.xxx,调用父类上的xxx方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.render() </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@withHeader</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;这是Hello组件&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;Hello&gt;&lt;/</span>Hello&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('root'))</span></span><br></pre></td></tr></table></figure><h3 id="REFERENCE"><a href="#REFERENCE" class="headerlink" title="REFERENCE"></a>REFERENCE</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/28138664" target="_blank" rel="external">深入浅出React高阶组件</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;引子-高阶函数&quot;&gt;&lt;a href=&quot;#引子-高阶函数&quot; class=&quot;headerlink&quot; title=&quot;引子,高阶函数&quot;&gt;&lt;/a&gt;引子,高阶函数&lt;/h3&gt;&lt;p&gt;收函数作为输入，或者输出另一个函数的一类函数，被称作高阶函数&lt;/p&gt;
&lt;figure class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>由 &quot;对象深拷贝&quot; 引发的思考</title>
    <link href="http://yoursite.com/2017/11/15/8-%E7%94%B1%22%E5%AF%B9%E8%B1%A1%E6%B7%B1%E6%8B%B7%E8%B4%9D%22%E5%BC%95%E5%8F%91%E7%9A%84%E5%B0%9D%E8%AF%95/"/>
    <id>http://yoursite.com/2017/11/15/8-由&quot;对象深拷贝&quot;引发的尝试/</id>
    <published>2017-11-15T00:03:53.000Z</published>
    <updated>2017-11-20T02:13:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="今天做什么"><a href="#今天做什么" class="headerlink" title="今天做什么?"></a>今天做什么?</h3><p>今天在用到<code>Object.assign</code>方法时,发现这个方法进行的是对象的浅拷贝. 借此契机复习一下浅拷贝与深拷贝的知识, 解决一些实际问题.</p><h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h3><p>  首先说下<code>Object.assign</code>方法,这是一个es6方法, 可以用来合并对象,直接上代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">  a: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> b = &#123;</span><br><span class="line">  a: <span class="number">2</span>,</span><br><span class="line">  b: &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> c = <span class="built_in">Object</span>.assign(a, b)</span><br><span class="line"><span class="built_in">console</span>.log(c) <span class="comment">// &#123; a:2,b:&#123;a:1,b:2&#125; &#125;</span></span><br></pre></td></tr></table></figure><p>但是在上述代码下面再加一行,将b对象b属性中a的值由1改成3,再打印c的值,得:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b.b.a = <span class="number">3</span></span><br><span class="line"><span class="built_in">console</span>.log(c) <span class="comment">// &#123; a:2,b:&#123;a:3,b:2&#125; &#125;</span></span><br></pre></td></tr></table></figure><p>可见,Object.assign中的拷贝,是浅拷贝. </p><h3 id="什么是浅拷贝"><a href="#什么是浅拷贝" class="headerlink" title="什么是浅拷贝?"></a>什么是浅拷贝?</h3><p>即在给对象赋值时 (比如本例中<code>Object.assign</code>方法要给对象c的b属性赋值为<code>b.b</code>的值<code>{a:1,b:2}</code>) , </p><p>只将另一个对象 (本例中的<code>b.b</code>)在内存栈中的引用传递了过去,并没有在堆中开辟新的空间用来存储一个新的对象<code>c.b</code>的值),</p><p>所以在后面例子中当<code>b.b</code>中的属性a改变时, 由于<code>c.b</code>与<code>b.b</code>指向了堆中的同一个地址, 导致<code>c.b.a</code>也发生了改变.</p><h3 id="什么是深拷贝"><a href="#什么是深拷贝" class="headerlink" title="什么是深拷贝?"></a>什么是深拷贝?</h3><p>给对象赋值时,在堆中开辟新的空间用来存储对象的数据,形成新的地址传给栈,将要赋的值复制过来放在新的空间中. 这就是深拷贝</p><h3 id="浅拷贝的代码实现"><a href="#浅拷贝的代码实现" class="headerlink" title="浅拷贝的代码实现"></a>浅拷贝的代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>:<span class="number">1</span>, <span class="attr">arr</span>: [<span class="number">2</span>,<span class="number">3</span>] &#125;;</span><br><span class="line"><span class="keyword">var</span> shallowObj = shallowCopy(obj); <span class="comment">// &#123;a:1,arr[2:3]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shallowCopy</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(prop)) &#123;</span><br><span class="line">      result[prop] = obj[prop];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">shallowObj.arr[<span class="number">1</span>] = <span class="number">5</span>;</span><br><span class="line">obj.arr[<span class="number">1</span>]   <span class="comment">// = 5</span></span><br></pre></td></tr></table></figure><p>浅复制只会将对象的各个属性进行依次复制，并不会进行递归复制，而 JavaScript 存储对象都是存地址的，所以浅复制会导致 obj.arr 和 shallowObj.arr 指向同一块内存地址，大概的示意图如下。</p><p><img src="https://pic4.zhimg.com/50/v2-39761dfd012733879e0d100ec260a5d7_hd.jpg" alt="enter image description here"></p><p>而深复制则不同，它不仅将原对象的各个属性逐个复制出去，而且将原对象各个属性所包含的对象也依次采用深复制的方法递归复制到新对象上。这就不会存在上面 obj 和 shallowObj 的 arr 属性指向同一个对象的问题。</p><p><img src="https://pic1.zhimg.com/50/6604224933c95787764d941432a1f968_hd.jpg" alt="enter image description here"></p><h3 id="深拷贝的代码实现"><a href="#深拷贝的代码实现" class="headerlink" title="深拷贝的代码实现"></a>深拷贝的代码实现</h3><p>简单的说就是”遇到复制对象就递归,一直到拷贝值,才进行拷贝”,因为进行对象属性的赋值运算时,会在堆内自动开辟空间存储值,从而实现深拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>:<span class="number">1</span>, <span class="attr">arr</span>: [<span class="number">2</span>,<span class="number">3</span>] &#125;;</span><br><span class="line"><span class="keyword">var</span> deepObj = deepCopy(obj);</span><br><span class="line"></span><br><span class="line">deepObj.arr[<span class="number">1</span>] = <span class="number">5</span>;</span><br><span class="line">obj.arr[<span class="number">1</span>]   <span class="comment">// = 3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">obj, start</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  start = start || &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(i)) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (obj[i] <span class="keyword">instanceof</span> <span class="built_in">Function</span>) &#123;</span><br><span class="line">        start[i] = obj[i]</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj[i] <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">        start[i] = (obj[i] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) ? []:&#123;&#125;</span><br><span class="line">        deepCopy(obj[i], start[i])</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        start[i] = obj[i]</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> start</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一道面试题"><a href="#一道面试题" class="headerlink" title="一道面试题"></a>一道面试题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: &#123;</span><br><span class="line">    a: <span class="number">22</span>,</span><br><span class="line">    b: <span class="number">33</span>,</span><br><span class="line">    c: <span class="number">44</span></span><br><span class="line">  &#125;,</span><br><span class="line">  c: <span class="number">55</span>,</span><br><span class="line">  d: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  e: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  a: <span class="number">2</span>,</span><br><span class="line">  b: &#123;</span><br><span class="line">    a: <span class="number">33</span>,</span><br><span class="line">    c: &#123;</span><br><span class="line">      a: <span class="number">44</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  e: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写一个方法,合并对象obj1,与obj2,要求输出</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   a: 2,</span></span><br><span class="line"><span class="comment">//   b: &#123;</span></span><br><span class="line"><span class="comment">//     a: 33,</span></span><br><span class="line"><span class="comment">//     b: 33,</span></span><br><span class="line"><span class="comment">//     c: &#123;</span></span><br><span class="line"><span class="comment">//       a: 44</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">//   c: 55,</span></span><br><span class="line"><span class="comment">//   d: function () &#123;</span></span><br><span class="line"><span class="comment">//     return false</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   e: [1, 3, 5, 4, 5]</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>上面这个面试题,比深拷贝复杂一点, 仔细分析需求, 发现在要拷贝的属性与原对象属性重名,且类型一样时,需要保留原对象属性的未修改字段,那么需要对前面的算法做一些修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeObj</span>(<span class="params">obj, start</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  start = start || &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(i)) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (obj[i] <span class="keyword">instanceof</span> <span class="built_in">Function</span>) &#123;</span><br><span class="line">        start[i] = obj[i]</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj[i] <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line"></span><br><span class="line">        start[i] = (obj[i] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) ?</span><br><span class="line">          <span class="comment">/* 如果原对象的[i]属性也是数组,则将原对象[i]属性对</span></span><br><span class="line"><span class="comment">          应的数组传入,否则传入一个空数组 */</span></span><br><span class="line">          ((start[i] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) ? start[i] : []) :</span><br><span class="line">          <span class="comment">/* 如果原对象的[i]属性也是对象,则将原对象[i]属性</span></span><br><span class="line"><span class="comment">          对应的对象传入,否则传入一个空对象 */</span></span><br><span class="line">          ((start[i] <span class="keyword">instanceof</span> <span class="built_in">Object</span>) ? start[i] : &#123;&#125;)</span><br><span class="line">        deepCopy(obj[i], start[i])</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        start[i] = obj[i]</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> start</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mergeObj(obj1,obj2))</span><br></pre></td></tr></table></figure><h3 id="黑科技JSON直接进行深拷贝对象"><a href="#黑科技JSON直接进行深拷贝对象" class="headerlink" title="黑科技JSON直接进行深拷贝对象"></a>黑科技JSON直接进行深拷贝对象</h3><p>其实不涉及复杂的需求时,将一个对象深拷贝最简单的方式是用JSON.stringify直接转为字符串,然后用JSON.parse直接创建一个字面量对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  a: <span class="number">2</span>,</span><br><span class="line">  b: &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj)))</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;今天做什么&quot;&gt;&lt;a href=&quot;#今天做什么&quot; class=&quot;headerlink&quot; title=&quot;今天做什么?&quot;&gt;&lt;/a&gt;今天做什么?&lt;/h3&gt;&lt;p&gt;今天在用到&lt;code&gt;Object.assign&lt;/code&gt;方法时,发现这个方法进行的是对象的浅拷贝. 借此契
      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Redux 6: React Router 4 + Redux 数据流 模拟注册登录</title>
    <link href="http://yoursite.com/2017/11/14/7-React%20Router%204%20+%20Redux%20%E6%95%B0%E6%8D%AE%E6%B5%81%20%E6%A8%A1%E6%8B%9F%E6%B3%A8%E5%86%8C%E7%99%BB%E5%BD%95/"/>
    <id>http://yoursite.com/2017/11/14/7-React Router 4 + Redux 数据流 模拟注册登录/</id>
    <published>2017-11-14T00:03:53.000Z</published>
    <updated>2017-12-20T03:56:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BEFORE"><a href="#BEFORE" class="headerlink" title="BEFORE"></a>BEFORE</h2><p>在Redux学习的三篇学习笔记之后,加上React-Router 4的学习,模拟了一个注册登录+计数器的Redux数据流</p><h2 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js Provider,路由,根组件挂载处</span></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;BrowserRouter&gt;</span><br><span class="line">      &#123;<span class="comment">/* Switch:命中第一个路由后不再继续跳转 */</span>&#125;</span><br><span class="line">      &lt;Switch&gt;</span><br><span class="line">        &#123;<span class="comment">/* Route匹配路由跳转路径与组件间的关系,exact开启精确匹配,不再继续向下查找 */</span>&#125;</span><br><span class="line">        &lt;Route path='/login' exact component=&#123;Auth&#125;&gt;&lt;/Route&gt;</span><br><span class="line">        &lt;Route path='/dashboard' component=&#123;DashBoard&#125;&gt;&lt;/Route&gt;</span><br><span class="line">        &#123;<span class="comment">/* Redirect发起重定向 */</span>&#125;</span><br><span class="line">        &lt;Redirect to='/dashboard'&gt;&lt;/Redirect&gt;</span><br><span class="line">      &lt;/Switch&gt;</span><br><span class="line">    &lt;/BrowserRouter&gt;</span><br><span class="line">  &lt;/Provider&gt;,</span><br><span class="line">  document.getElementById(<span class="string">'root'</span>));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Auth.redux.js</span></span><br><span class="line"><span class="comment">// 权限登录的reducer与action creater</span></span><br><span class="line"><span class="comment">// isAuth代表是否登录</span></span><br><span class="line"><span class="keyword">const</span> LOGIN = <span class="string">'LOGIN'</span></span><br><span class="line"><span class="keyword">const</span> LOGOUT = <span class="string">'LOGOUT'</span></span><br><span class="line"><span class="comment">//reducer</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> AuthReducer = <span class="function">(<span class="params">state = &#123; isAuth: <span class="literal">false</span>, user: <span class="string">'choteewang'</span> &#125;, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> LOGIN:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">isAuth</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    <span class="keyword">case</span> LOGOUT:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">isAuth</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//action creater</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> login = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: LOGIN &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> logout = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: LOGOUT &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//myRedux.js</span></span><br><span class="line"><span class="keyword">const</span> INCREASE = <span class="string">'increase'</span></span><br><span class="line"><span class="keyword">const</span> DECREASE = <span class="string">'decrease'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> reducer = <span class="function">(<span class="params">state  = <span class="number">0</span>, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'increase'</span>:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'decrease'</span>:</span><br><span class="line">      <span class="keyword">return</span> state - <span class="number">1</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> onIncrease = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: INCREASE &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> onDecrease = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: DECREASE &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> onIncreaseAsync = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      dispatch(onIncrease())</span><br><span class="line">    &#125;,<span class="number">3000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//reducer.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; reducer &#125; <span class="keyword">from</span> <span class="string">'./myRedux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AuthReducer &#125; <span class="keyword">from</span> <span class="string">'./Auth.redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="comment">// 利用combineReducers合并两个Reducer</span></span><br><span class="line"><span class="comment">// 变为store中的state对象包裹2个reducer定义的state小对象的数据结构&#123;counter:&#123;&#125;,AutuReducer:&#123;&#125;&#125;</span></span><br><span class="line"><span class="comment">// 这里要注意改键名,防止之前使用小state的组件访问根组件state时key名发生错误</span></span><br><span class="line"><span class="comment">// 所以最佳实践是reducer要起名要有语义</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> combineReducers(&#123;<span class="attr">counter</span>:reducer, <span class="attr">AuthReducer</span>:AuthReducer&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Auth.js</span></span><br><span class="line"><span class="keyword">import</span> React from <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; from <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123;login&#125; from <span class="string">'./Auth.redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Redirect&#125; from <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Auth</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    const redirect = &lt;Redirect to='/dashboard'&gt;&lt;/Redirect&gt;</span><br><span class="line">    <span class="keyword">const</span> login = (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;您没登录,请登录&lt;/h3&gt;</span><br><span class="line">        &lt;button onClick=&#123;this.props.login&#125;&gt;点我模拟登录&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 若登录了,则跳转到dashboard页面,若没登录,显示登录页面</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.isAuth ? redirect : login</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> Auth = connect(</span><br><span class="line">  (state) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isAuth:state.AuthReducer.isAuth,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;login&#125;</span><br><span class="line">)(Auth)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dashboard.js</span></span><br><span class="line"><span class="keyword">import</span> React from <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; from <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123;login&#125; from <span class="string">'./Auth.redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Redirect&#125; from <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Auth</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    const redirect = &lt;Redirect to='/dashboard'&gt;&lt;/Redirect&gt;</span><br><span class="line">    <span class="keyword">const</span> login = (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;您没登录,请登录&lt;/h3&gt;</span><br><span class="line">        &lt;button onClick=&#123;this.props.login&#125;&gt;点我模拟登录&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 若登录了,则跳转到dashboard页面,若没登录,显示登录页面</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.isAuth ? redirect : login</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> Auth = connect(</span><br><span class="line">  (state) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isAuth:state.AuthReducer.isAuth,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;login&#125;</span><br><span class="line">)(Auth)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> React from <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; from <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123;login&#125; from <span class="string">'./Auth.redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Redirect&#125; from <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Auth</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    const redirect = &lt;Redirect to='/dashboard'&gt;&lt;/Redirect&gt;</span><br><span class="line">    <span class="keyword">const</span> login = (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;您没登录,请登录&lt;/h3&gt;</span><br><span class="line">        &lt;button onClick=&#123;this.props.login&#125;&gt;点我模拟登录&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 若登录了,则跳转到dashboard页面,若没登录,显示登录页面</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.isAuth ? redirect : login</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> Auth = connect(</span><br><span class="line">  (state) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isAuth:state.AuthReducer.isAuth,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;login&#125;</span><br><span class="line">)(Auth)</span><br></pre></td></tr></table></figure><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://i.loli.net/2017/11/14/5a0a34278b587.png" alt="Jietu20171112-085631"></p><p><img src="https://i.loli.net/2017/11/14/5a0a343ce1d95.png" alt="Jietu20171112-085643"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;BEFORE&quot;&gt;&lt;a href=&quot;#BEFORE&quot; class=&quot;headerlink&quot; title=&quot;BEFORE&quot;&gt;&lt;/a&gt;BEFORE&lt;/h2&gt;&lt;p&gt;在Redux学习的三篇学习笔记之后,加上React-Router 4的学习,模拟了一个注册登录+计数器的R
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Redux 5: 使用axios 配合redux 实现 异步请求的Redux数据流</title>
    <link href="http://yoursite.com/2017/11/14/6-%E4%BD%BF%E7%94%A8axios%E9%85%8D%E5%90%88Redux%E5%AE%9E%E7%8E%B0%20%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%E5%90%8E%E5%8F%B0%E6%95%B0%E6%8D%AE%E7%9A%84Redux%E6%95%B0%E6%8D%AE%E6%B5%81/"/>
    <id>http://yoursite.com/2017/11/14/6-使用axios配合Redux实现 异步请求后台数据的Redux数据流/</id>
    <published>2017-11-14T00:02:52.000Z</published>
    <updated>2017-12-20T03:56:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置知识-axios-API"><a href="#前置知识-axios-API" class="headerlink" title="前置知识 axios API"></a>前置知识 axios API</h2><p><a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="external">axios API</a></p><h2 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Express Server Code</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建express服务</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.get(<span class="string">'/data'</span>,(req,res) =&gt; &#123;</span><br><span class="line">  res.json(&#123;<span class="attr">hobby</span>:<span class="string">"basketball"</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3001</span>,() =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'chotee server'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="package-json-配置proxy字段-解决跨域问题"><a href="#package-json-配置proxy字段-解决跨域问题" class="headerlink" title="package.json 配置proxy字段,解决跨域问题"></a>package.json 配置proxy字段,解决跨域问题</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"proxy":"http://localhost:3001"</span><br></pre></td></tr></table></figure><h3 id="Auth-redux-js"><a href="#Auth-redux-js" class="headerlink" title="Auth.redux.js"></a>Auth.redux.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 权限登录的AuthReducer与action creater</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">const</span> LOGIN = <span class="string">'LOGIN'</span></span><br><span class="line"><span class="keyword">const</span> LOGOUT = <span class="string">'LOGOUT'</span></span><br><span class="line"><span class="keyword">const</span> GETUSERDATA = <span class="string">'GETUSERDATA'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//initState</span></span><br><span class="line"><span class="keyword">const</span> initState = &#123;</span><br><span class="line">  name: <span class="string">'choteewang'</span>,</span><br><span class="line">  isAuth: <span class="literal">false</span>,</span><br><span class="line">  hobby: <span class="string">'football'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//reducer</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> AuthReducer = <span class="function">(<span class="params">state = initState, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> LOGIN:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">isAuth</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    <span class="keyword">case</span> LOGOUT:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">isAuth</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    <span class="keyword">case</span> GETUSERDATA:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">hobby</span>: action.payload &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//action creater</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增支持异步请求的action creater, 返回一个函数,函数参数是store.dispatch与store.getState</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getUserData = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 在return出的函数内进行异步请求</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">    axios.get(<span class="string">'/data'</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res)</span><br><span class="line">      <span class="comment">// res是axios的响应数据,格式见下面图</span></span><br><span class="line">      <span class="keyword">if</span> (res.status === <span class="number">200</span>) &#123;</span><br><span class="line">        dispatch(getuserdataAsync(res.data.hobby))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getuserdataAsync = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="attr">type</span>: GETUSERDATA, <span class="attr">payload</span>: data&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> login = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: LOGIN &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> logout = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: LOGOUT &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/11/14/5a0a3b5b0874e.png" alt="Jietu20171114-083933"></p><h3 id="Auth-js-对应路由-login"><a href="#Auth-js-对应路由-login" class="headerlink" title="Auth.js 对应路由/login"></a>Auth.js 对应路由/login</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123; login, getUserData &#125; <span class="keyword">from</span> <span class="string">'./Auth.redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Redirect &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Auth</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="comment">// 组件mount完成后发起异步请求,这里的getUserData是经过react-thunk中间件处理的action creater</span></span><br><span class="line">    <span class="keyword">this</span>.props.getUserData()</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> redirect = <span class="xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">'/dashboard'</span>&gt;</span><span class="tag">&lt;/<span class="name">Redirect</span>&gt;</span></span></span><br><span class="line">    <span class="keyword">const</span> login = (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p&gt;&#123;<span class="string">`我叫<span class="subst">$&#123;<span class="keyword">this</span>.props.name&#125;</span>,我的爱好是<span class="subst">$&#123;<span class="keyword">this</span>.props.hobby&#125;</span>`</span>&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;h3&gt;您没登录,请登录&lt;/</span>h3&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.props.login&#125;&gt;点我模拟登录&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 若登录了,则跳转到dashboard页面,若没登录,显示登录页面</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.isAuth ? redirect : login</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Auth = connect(</span><br><span class="line">  <span class="comment">//引入AuthReducer的字段给Auth的UI组件作为参数</span></span><br><span class="line">  (state) =&gt; state.AuthReducer,</span><br><span class="line">  <span class="comment">// 拿到getUserData的actionCreater</span></span><br><span class="line">  &#123; login, getUserData &#125;</span><br><span class="line">)(Auth)</span><br></pre></td></tr></table></figure><h3 id="config-js-设置全局拦截器"><a href="#config-js-设置全局拦截器" class="headerlink" title="config.js 设置全局拦截器"></a>config.js 设置全局拦截器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置全局拦截器的config.js,在根组件页面index.js页面引入</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Toast &#125; <span class="keyword">from</span> <span class="string">'antd-mobile'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">  Toast.loading(<span class="string">'请求中'</span>, <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    Toast.hide()</span><br><span class="line">  &#125;, <span class="number">5000</span>);</span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://i.loli.net/2017/11/14/5a0a32dfd3da7.png" alt="Jietu20171112-111033"></p><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://github.com/choteewang/BLOG-NOTE/tree/master/Demos/axios+redux_demo" target="_blank" rel="external">https://github.com/choteewang/BLOG-NOTE/tree/master/Demos/axios+redux_demo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前置知识-axios-API&quot;&gt;&lt;a href=&quot;#前置知识-axios-API&quot; class=&quot;headerlink&quot; title=&quot;前置知识 axios API&quot;&gt;&lt;/a&gt;前置知识 axios API&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.k
      
    
    </summary>
    
    
  </entry>
  
</feed>
