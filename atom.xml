<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>choteewang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-21T02:21:26.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>choteewang@qq.com</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>模拟Vue.js的实现模式(一): 双向绑定 &amp; MVVM</title>
    <link href="http://yoursite.com/2018/04/01/my-vue-01/"/>
    <id>http://yoursite.com/2018/04/01/my-vue-01/</id>
    <published>2018-03-31T18:59:54.000Z</published>
    <updated>2018-04-21T02:21:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>做了好几个<code>Vue</code>个人项目, 最近研究了部分<code>Vue</code>源码, 尤其针对<code>Vue</code>的设计模式这部分做了认真的研读. 感叹设计巧妙的同时, 希望做些东西巩固一下其巧妙的代码设计模式</p><p>这个系列的博客旨在从最简易的双向绑定原理开始, 一步步写出一个能实现部分<code>Vue</code>部分功能的<code>&quot;mini Vue&quot;</code>, 希望把阅读源码的收获在这个小项目中体现出来.</p><p>在这个小项目中, 观察者模式这部分模拟了Vue源码的实现思想. 在模板编译部分, 去繁就简, 拿掉了<code>Vue</code>源码中<code>render</code>函数和<code>VNode</code>,<code>Diff算法</code>这部分内容, 实现了一个能实现同样功能的编译方法, 模拟了<code>DOM</code>节点在形成过程中经过的处理, 主要体现了<code>new Watcher</code>触发的时机, 让我们更有效率的理解<code>Vue</code>的核心设计模式.</p><p>下面让我们从最基本的页面双向绑定开始</p><h3 id="什么是双向绑定-two-way-bindings-什么是MVVM"><a href="#什么是双向绑定-two-way-bindings-什么是MVVM" class="headerlink" title="什么是双向绑定(two-way-bindings)? 什么是MVVM ?"></a>什么是双向绑定(two-way-bindings)? 什么是MVVM ?</h3><p>双向绑定(<code>two-way-binding</code>)即将视图和数据绑定在一个数据模型上, 修改此数据模型(<code>Model</code>)会触发视图(<code>View</code>)的更新, 在视图中通过交互修改视图中显示的数据(<code>input元素</code>)会更新数据模型(<code>Model</code>)</p><p><code>MVVM</code>中的<code>ViewModel</code>的含义比较模糊, 浅显狭义的讲, 所有<code>Model</code>和<code>View</code>中间的桥梁都是<code>View Model</code>的一部分, 比如给<code>Vue</code>组件模板字符串中表示绑定指令的<code>attr</code>, 比如在创建<code>Vue</code>实例时传递的配置对象中绑定的<code>methods</code>, 都可以理解为<code>View Model</code>的一部分. 当然<code>Model</code>和<code>View</code>在绑定过程中难免要借用一个<code>中间变量</code>来进行数据交换, 在<code>Vue</code>的实现过程中, 这个中间变量是通过<code>闭包</code>来实现的, 我们后文在慢慢解释</p><p><img src="https://i.loli.net/2018/04/21/5adaa007d0c99.png" alt="6519022-b42f7711343d00d4"></p><h3 id="双向绑定的核心API及基本原理"><a href="#双向绑定的核心API及基本原理" class="headerlink" title="双向绑定的核心API及基本原理"></a>双向绑定的核心API及基本原理</h3><p>下面说下实现双向绑定的核心API, <code>MVVM</code>框架通过<code>Object.defineProperty</code>实现<code>data -&gt; view</code> 的绑定, 通过DOM元素的<code>input</code>或<code>change</code>事件来实现<code>view -&gt; data</code>的绑定. 如下图所示:</p><p><img src="https://i.loli.net/2018/04/21/5ada38416f040.jpg" alt=""></p><p>如果对<code>Object.defineProperty</code>这个语法不熟, 这是一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener">MDN传送门</a>, 可以取学习一下这个API的语法. </p><p>下面上个小例子演示下, 一个<code>input</code>输入框与一个全局对象<code>data</code>的<code>inputValue</code>属性进行双向数据绑定, 这个例子能清楚的展示双向绑定的基本API, 以及绑定过程中对<code>中间变量</code>的依赖.</p><p>先写一个<code>html</code>文件,它的<code>DOM</code>结构如下所示:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"two-way-binding"</span> <span class="attr">style</span>=<span class="string">"color: red"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">input输入框的value绑定了全局变量data的inputValue, 它现在的值是</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: red"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们在<code>body</code>标签底部添加<code>script</code>标签加入js代码如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取dom</span></span><br><span class="line"><span class="keyword">var</span> input = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">var</span> span = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'span'</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="comment">// 定义viewmodel</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;&#125;</span><br><span class="line"><span class="comment">// 定义数据原型</span></span><br><span class="line"><span class="keyword">var</span> inputValue = <span class="string">''</span></span><br><span class="line"><span class="comment">// data -&gt; view</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(data, <span class="string">'inputValue'</span>, &#123;</span><br><span class="line">  configurable: <span class="literal">false</span>,</span><br><span class="line">  enumerable: <span class="literal">true</span>,</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> inputValue</span><br><span class="line">  &#125;,</span><br><span class="line">  set: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    inputValue = val</span><br><span class="line">    input.value = inputValue <span class="comment">// data -&gt; view</span></span><br><span class="line">    showViewModel()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// view -&gt; data</span></span><br><span class="line">input.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  data.inputValue = event.target.value <span class="comment">// view -&gt; data</span></span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showViewModel</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  span.innerText = data.inputValue</span><br><span class="line">&#125;</span><br><span class="line">showViewModel()</span><br></pre></td></tr></table></figure><p>打开<code>html</code>文件运行, 发现在输入框中进行文本输入已可以与<code>data.inputValue</code>进行双向绑定, 打开控制台, 给<code>data.inputValue</code>赋值时, 也可触发<code>input</code>输入框的<code>value</code>值改变. 如下图所示:</p><p><img src="https://i.loli.net/2018/04/21/5ada384184fb5.png" alt="1524235700383"></p><p>在这个例子中, 在控制台用<code>data.inputValue = &quot;xxx&quot;</code>改变<code>Model</code>的值时, <code>Object.defineProperty</code>的<code>set</code>方法将最新值传递给<code>inputValue</code>中间变量, 同时让<code>input</code>元素<code>value</code>特性的值等于这个中间变量<code>inputValue</code>继而达到了将最新的值传递给<code>input</code>元素<code>value</code>特性的目的</p><p>同时, 中间变量<code>inputValue</code>并不光有<code>set</code>中的值传递作用, 在<code>input</code>输入框的<code>value</code>值改变后, 在控制台打印<code>data.inputValue</code>会调用其<code>get</code>方法, 返回中间变量<code>inputValue</code>的值, 通过这个方法可以在开发过程中拿到<code>Model</code>的最新值, 这个中间变量<code>inputValue</code>是<code>ViewModel</code>中的重要组成部分, <code>Vue</code>的观察者模式中复杂闭包也是以这种原理为基础实现的.</p><p>上述例子只是一个双向绑定的基本原理, <code>Vue</code>中的双向绑定没有这么简单, 其中还包括了”数据代理”(<code>data proxy</code>), “属性寄存器监听”(<code>Object.defineProperty(data, key, {get, set})</code>), “收集依赖”(<code>collect Denpendency</code>), “通知变化”(<code>notify</code>)等一系列观察者模式的内容. 这篇博客只是讲了一个基本的双向绑定原理.</p><p>理解了双向绑定的原理和<code>MVVM</code>的概念, 接下来就要开始实现一个<code>mini-Vue</code>了, 为了让接下来的<code>&quot;数据代理&quot;</code>部分 (也用到了DefineProperty(),但和此篇所讲应用原理不同) 不和双向绑定的原理混淆, 重开一篇博客继续实现<code>数据代理</code>部分的解读</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;做了好几个&lt;code&gt;Vue&lt;/code&gt;个人项目, 最近研究了部分&lt;code&gt;Vue&lt;/code&gt;源码, 尤其针对&lt;code&gt;Vue&lt;/code&gt;的设计模式这部分做了认真的研读. 感叹设计巧妙的同时, 希望做些东西巩固一下其巧妙的代码设计模式&lt;/p&gt;
&lt;p&gt;这个系列的博客
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基于Vue,Hotcss+Px2rem自适应设计,Webpack+Npm script自动化构建的jd-finance web app</title>
    <link href="http://yoursite.com/2018/03/20/vue-jd/"/>
    <id>http://yoursite.com/2018/03/20/vue-jd/</id>
    <published>2018-03-20T09:15:55.000Z</published>
    <updated>2018-03-20T09:19:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="A-jd-finance-web-app-based-on-Vue-hotcss-px2rem"><a href="#A-jd-finance-web-app-based-on-Vue-hotcss-px2rem" class="headerlink" title="A jd-finance web app based on Vue, hotcss + px2rem"></a>A jd-finance web app based on Vue, hotcss + px2rem</h1><h3 id="Tech"><a href="#Tech" class="headerlink" title="Tech"></a>Tech</h3><ul><li>Vue 2.5+</li><li>Vue-router </li><li>sass</li><li>css-modules</li><li>hotcss</li><li>px2rem</li><li>full-ES6-syntax-cover</li><li>eslint</li><li>vue-awesome-swiper</li><li>webpack </li><li>npm scirpts</li></ul><h3 id="自适应方案设计"><a href="#自适应方案设计" class="headerlink" title="自适应方案设计"></a>自适应方案设计</h3><ul><li>利用<code>hotcss</code>动态调整<code>meta</code>标签和<code>dpr</code>, 动态设定<code>html</code>标签的<code>font-size</code>(<code>Rem布局实现</code>)</li><li>利用<code>px2rem-loader</code>在自动化构建时自动转换<code>scss</code>的css尺寸</li><li>一份代码, 所有移动设备动态适配</li></ul><p>详情请移步我的技术博客: <a href="https://choteewang.github.io/2018/03/20/vue-jd%E8%87%AA%E9%80%82%E5%BA%94%E6%96%B9%E6%A1%88%E8%AE%BE%E8%AE%A1/" target="_blank" rel="noopener">记一次vue项目的自适应方案设计 hotcss + px2rem </a></p><h3 id="自动化构建"><a href="#自动化构建" class="headerlink" title="自动化构建"></a>自动化构建</h3><blockquote><p>使用<code>webpack</code>与<code>npm script</code>进行自动化构建, 手写所有代码</p></blockquote><ul><li>处理<code>vue</code>,<code>js</code>,<code>css</code>,<code>scss</code></li><li>处理图片,开启<code>Base64</code></li><li>自动清理<code>dist</code>目录</li><li>热重载</li><li>提取<code>vendors</code>与<code>manifest</code></li><li><code>Js-Uglify</code></li><li><code>Css-Minify</code></li><li>区分<code>开发环境</code>和<code>生产环境</code></li><li><code>生产环境</code>提取css文件</li><li><code>开发环境</code>开启<code>js-SourceMap</code></li><li><code>开发环境</code>开启<code>css-SourceMap</code></li><li><code>eslint</code></li></ul><h3 id="css模块化"><a href="#css模块化" class="headerlink" title="css模块化"></a>css模块化</h3><p>使用css模块化, 对公用模板组件的css进行抽象, 后续开发完全继承于已抽象的css模块</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">'layout'</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> btn(<span class="variable">$size</span>:<span class="number">14px</span>,<span class="variable">$color</span>:<span class="number">#fff</span>,<span class="variable">$bgcolor</span>:<span class="number">#F04752</span>,<span class="variable">$padding</span>:<span class="number">5px</span>,<span class="variable">$radius</span>:<span class="number">5px</span>) &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="variable">$padding</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">$bgcolor</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="variable">$radius</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="variable">$bgcolor</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$size</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> list(<span class="variable">$direction</span>:column) &#123;</span><br><span class="line">  @<span class="keyword">include</span> flex(<span class="variable">$direction</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> panel(<span class="variable">$bgcolor</span>:<span class="number">#fff</span>,<span class="variable">$padding</span>:<span class="number">0</span>,<span class="variable">$margin</span>:<span class="number">20px</span> 0,<span class="variable">$height</span>:<span class="number">112px</span>,<span class="variable">$txtPadding</span>:<span class="number">0</span> 32px,<span class="variable">$color</span>:<span class="number">#333</span>,<span class="variable">$fontSize</span>:<span class="number">32px</span>) &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">$bgcolor</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="variable">$padding</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="variable">$margin</span>;</span><br><span class="line">  &gt; <span class="selector-tag">h4</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">$height</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="variable">$height</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="variable">$txtPadding</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">$fontSize</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="vue组件模块化"><a href="#vue组件模块化" class="headerlink" title="vue组件模块化"></a>vue组件模块化</h3><p>抽象了<code>slider</code>, <code>btn</code>, <code>panel</code> 三个js组件模块, 后续所有组件开发继承于已抽象组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">// slider.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">:class</span>=<span class="string">"cname"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">swiper</span> <span class="attr">:options</span>=<span class="string">"options"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">swiper-slide</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">:key</span>=<span class="string">"item.href"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name:item.href&#125;"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"item.src"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">swiper-slide</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-pagination"</span> <span class="attr">v-if</span>=<span class="string">"options.pagination"</span> <span class="attr">slot</span>=<span class="string">"pagination"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; swiper, swiperSlide &#125; <span class="keyword">from</span> <span class="string">'vue-awesome-swiper'</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  components: &#123;</span></span><br><span class="line"><span class="undefined">    swiper,</span></span><br><span class="line"><span class="undefined">    swiperSlide</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  props: &#123;</span></span><br><span class="line"><span class="undefined">    cname: &#123;</span></span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    options: &#123;</span></span><br><span class="line"><span class="javascript">      type: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">          autoplay: &#123;</span></span><br><span class="line"><span class="undefined">            delay: 3000,</span></span><br><span class="line"><span class="javascript">            disableOnInteraction: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">            stopOnLastSlide: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="javascript">          loop: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">          disableOnInteraction: <span class="literal">false</span>,</span></span><br><span class="line"><span class="undefined">          pagination: &#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'.swiper-pagination'</span></span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    items: &#123;</span></span><br><span class="line"><span class="javascript">      type: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> []</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">@<span class="keyword">import</span> <span class="string">'~swiper/dist/css/swiper.css'</span>;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// panel.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">:class</span>=<span class="string">"[panelClass,cname]"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>-&#123;&#123;title&#125;&#125;-<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  props: &#123;</span></span><br><span class="line"><span class="undefined">    cname: &#123;</span></span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    title: &#123;</span></span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  data() &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      panelClass: <span class="string">'panel'</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">@<span class="keyword">import</span> <span class="string">'../../css/element'</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.panel</span> &#123;</span></span><br><span class="line"><span class="css">  @<span class="keyword">include</span> panel;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h3><p><img src="https://i.loli.net/2018/03/20/5ab0cfc0b90e3.gif" alt="1"></p><p><img src="https://i.loli.net/2018/03/20/5ab0cfc16c581.gif" alt="2"></p><p><img src="https://i.loli.net/2018/03/20/5ab0cfc352d89.gif" alt="3"></p><p><img src="https://i.loli.net/2018/03/20/5ab0cfc14ecd8.gif" alt="4"></p><p><img src="https://i.loli.net/2018/03/20/5ab0cfc3b4594.gif" alt="5"></p><h3 id="github"><a href="#github" class="headerlink" title="github:"></a>github:</h3><p><a href="https://github.com/choteewang/vue-jd" target="_blank" rel="noopener">https://github.com/choteewang/vue-jd</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;A-jd-finance-web-app-based-on-Vue-hotcss-px2rem&quot;&gt;&lt;a href=&quot;#A-jd-finance-web-app-based-on-Vue-hotcss-px2rem&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hotcss + px2rem 实现 vue 项目的自适应方案设计 </title>
    <link href="http://yoursite.com/2018/03/20/vue-jd%E8%87%AA%E9%80%82%E5%BA%94%E6%96%B9%E6%A1%88%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/2018/03/20/vue-jd自适应方案设计/</id>
    <published>2018-03-20T09:05:45.000Z</published>
    <updated>2018-03-20T12:06:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自适应方案设计"><a href="#自适应方案设计" class="headerlink" title="自适应方案设计"></a>自适应方案设计</h2><p>做到一份代码, 构建出的app适配各种设备, 根据设备的屏幕尺寸, 自动缩放所有css尺寸, 让所有设备的浏览体验基本接近</p><h3 id="核心实现原理"><a href="#核心实现原理" class="headerlink" title="核心实现原理:"></a>核心实现原理:</h3><ul><li><code>hotcss</code>利用<code>viewport</code>和<code>设备像素比(dpr)</code>调整html标签的<code>font-size</code>(Rem基准像素)</li><li>使用<code>px2rem-loader</code>实现<code>px</code>向<code>rem</code>的转化</li></ul><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://i.loli.net/2018/03/20/5ab0cfc3b4594.gif" alt="https://i.loli.net/2018/03/20/5ab0cfc3b4594.gif"></p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><blockquote><p><code>css像素</code>, <code>逻辑像素</code>, <code>设备像素</code>, <code>物理像素</code>, <code>设备像素比</code><br><a href="https://github.com/jawil/blog/issues/21" target="_blank" rel="noopener">https://github.com/jawil/blog/issues/21</a></p></blockquote><ul><li><code>css像素</code> 就是 <code>设备独立像素(dip)</code></li><li><code>设备像素</code> : <code>设备像素</code> 就是 <code>物理像素</code> 若在retina屏幕上的<code>设备像素比</code>=<code>2</code>, 则显示1px<code>css像素</code>需要2个<code>物理像素</code>, 显示宽高都是1px(<code>css像素</code>)的方块需要2*2个(<code>设备像素</code>)</li><li><code>设备像素比(dpr)</code>: <ul><li>广义定义: <code>设备像素</code>(<code>物理像素</code>) / <code>设备独立像素(dip)</code>(<code>css像素</code>) , </li><li>同义定义: <code>屏幕横向设备像素</code> / <code>理想视口的宽</code></li><li>获取方式: <code>window.devicePixelRatio</code></li><li>与<code>initial-scale</code>的关系: 互为倒数</li></ul></li></ul><p><img src="https://i.loli.net/2018/03/20/5ab0ceccad75e.jpg" alt="15213620087815"></p><blockquote><p>viewport</p></blockquote><p>viewport分三类: <code>layout viewport</code>, <code>visual viewport</code>, <code>ideal viewport</code></p><ul><li><code>layout viewport</code><br><img src="https://i.loli.net/2018/03/20/5ab0ceccc9890.jpg" alt="15213628251435"></li></ul><p>这个<code>layout viewport</code>的宽度可以通过<code>document.documentElement.clientWidth</code> 来获取。</p><ul><li><code>ideal viewport</code> 与 <code>visual viewport</code><br>在<code>meta</code>标签的<code>user-scalable=no</code>时,<code>ideal viewport</code>就是<code>visual viewport</code>, 宽度是屏幕宽度<code>window.innerWidth</code><br><img src="https://i.loli.net/2018/03/20/5ab0ceccd2587.jpg" alt="15213632335178"></li></ul><p><code>meta</code> 标签的<code>width=device-width</code>其实就是将<code>ideal-viewport</code>的宽度赋值给了<code>layout viewport</code><br><img src="https://i.loli.net/2018/03/20/5ab0ceccdc066.jpg" alt="15213640815087"></p><h3 id="核心工作原理"><a href="#核心工作原理" class="headerlink" title="核心工作原理"></a>核心工作原理</h3><blockquote><p><code>hotcss</code>利用<code>viewport</code>和<code>设备像素比(dpr)</code>调整基准像素</p></blockquote><p><a href="https://github.com/imochen/hotcss" target="_blank" rel="noopener">hotcss github地址</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// hotcss打包方式</span></span><br><span class="line">entry: &#123;</span><br><span class="line">  app: [<span class="string">'./app/js/main.js'</span>, <span class="string">'./app/js/hotcss.js'</span>],</span><br><span class="line">  vendor: [<span class="string">'vue'</span>, <span class="string">'vue-router'</span>, <span class="string">'vue-awesome-swiper'</span>]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>rem</li></ul><p><code>设计稿fontSize基准值(remUnit)</code>/<code>设计稿物理像素宽度</code> = <code>当前设备html标签fontSize值(所求)</code>/当前设备<code>物理像素宽度</code></p><p><img src="https://i.loli.net/2018/03/20/5ab0ceccd1164.jpg" alt="15213642316299"></p><p>对于上图的解释: </p><ul><li>左面是<code>设计稿</code>, 右面是<code>设备</code></li><li><code>设计稿物理像素宽度</code>是 320px(<code>css像素</code>丈量下的<code>ideal port</code>宽度) * 2(<code>dpr</code>) = 640(<code>物理像素</code>)</li><li>若此时适配到了一个<code>ideal port</code>宽度为375px,<code>dpr</code>=3的设备</li><li>则<code>设备物理像素宽度</code> = 375px(<code>css像素</code>丈量下的<code>ideal port</code>宽度) * 3(<code>dpr</code>) = 1125(<code>物理像素</code>)</li><li>与<code>rem</code>关系, <code>remUnit</code>(设计稿html标签fontSize基准值)/ <code>设备html标签fontSize值</code> = <code>设计稿物理像素宽度</code> / <code>设备物理像素宽度</code></li></ul><p><strong>若此时左面设计稿的<code>html</code>标签的<code>font-size</code>是40px, 则hotcss应将右面设计稿的<code>html</code>标签的<code>font-size</code>计算为:</strong><br><strong><code>(375 * 3) / (320 * 2) * 40 = 70.3125</code>, 从而达到等比缩放的效果</strong></p><blockquote><p>利用px2rem自动转换css单位</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">  loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    loaders: &#123;</span><br><span class="line">      <span class="comment">// npm install px2rem-loader</span></span><br><span class="line">      <span class="comment">// 叹号分隔loader, 从右向左加载</span></span><br><span class="line">      <span class="comment">// 开启px2rem, npm install px2rem-loader</span></span><br><span class="line">      <span class="comment">// remUnit = 75(在设计稿中html字体的大小, 也可理解为在原设计稿中1rem=多少像素)</span></span><br><span class="line">      <span class="comment">// 设计稿fontSize基准值(remUnit)/设计稿物理像素宽度 = 当前设备html标签fontSize值(所求)/当前设备物理像素宽度(媒体查询适配)</span></span><br><span class="line">      <span class="comment">// Precision = 8 转换小数精度</span></span><br><span class="line">      css: <span class="string">'vue-style-loader!css-loader!px2rem-loader?remUnit=40&amp;remPreceision=8'</span>,</span><br><span class="line">      scss: <span class="string">'vue-style-loader!css-loader!px2rem-loader?remUnit=40&amp;remPrecision=8!sass-loader'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>配置了<code>px2rem</code>后, 再写一个<code>80px</code>的css会被转化为<code>1.06666667rem</code>, 满足8位小数(Precision = 8), 且 1.06666667rem * 75(<code>remUnit</code>) = 80px</p></li><li><p>注意, 我们只需关心原始设计图的css尺寸开发, <code>hotcss</code>会根据不同设备的<code>dpr</code>与<code>ideal viewport</code>宽度来创建meta标签(将<code>initial-scale</code>设置为<code>dpr</code>的倒数), 同时设置html标签的<code>fontSize</code></p></li></ul><h3 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h3><p>这里主要拣一些在踩坑过程中容易出现混淆的细节详细说说</p><blockquote><p>关于webpack配置里remUnit的含义</p></blockquote><p><code>scss: &#39;vue-style-loader!css-loader!px2rem-loader?remUnit=40&amp;remPrecision=8!sass-loader&#39;</code></p><p>webpack中这个配置中声明了<code>px2rem-loader</code>的一个<code>option</code>选项<code>remUnit</code>的值赋值为40px, 但是如何理解这个40px? 这个值设成别的值行不行? </p><p><code>remUnit</code>本身是指<strong>设计稿</strong>的<code>html</code>标签的<code>font-size</code>属性值, 假设这个值设为40px, 其代表了在以设计稿为基准以<code>rem</code>布局书写css时, 每1rem代表了40px, 若此时有一个<code>div</code>的<code>font-size</code>的css书写是80px, <code>px2rem</code>会将其转化为2rem. 若此时再将<code>remUnit</code>在<code>webpack</code>中的配置改为<code>80</code>, 则重新构建后<code>div</code>的<code>font-size</code>变为<strong>1rem</strong></p><p>看起来这个<code>remUnit</code> 的设置并不会影响我们的界面展示, 因为根据书写css的尺寸是固定的, <code>rem尺寸</code> = <code>css尺寸</code> / <code>remUnit</code>, 不论我们写多少, <code>px2rem</code>都会调整为显示效果一样的rem尺寸. 但若是再加上<code>hotcss</code>呢? </p><blockquote><p>试一下随便改几个<code>remUnit</code>的尺寸, 配合<code>hotcss</code>就知道不行了. 若是熟悉了本篇博客上面写的基础知识, 再去看<code>hotcss</code>源码就可得到答案.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hotcss 源码</span></span><br><span class="line">hotcss.px2rem = <span class="function"><span class="keyword">function</span>(<span class="params">px, designWidth</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//预判你将会在JS中用到尺寸，特提供一个方法助你在JS中将px转为rem。就是这么贴心。</span></span><br><span class="line">  <span class="keyword">if</span> (!designWidth) &#123;</span><br><span class="line">    <span class="comment">//如果你在JS中大量用到此方法，建议直接定义 hotcss.designWidth 来定义设计图尺寸;</span></span><br><span class="line">    <span class="comment">//否则可以在第二个参数告诉我你的设计图是多大。</span></span><br><span class="line">    designWidth = <span class="built_in">parseInt</span>(hotcss.designWidth, <span class="number">10</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(px, <span class="number">10</span>) * <span class="number">320</span> / designWidth / <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">hotcss.mresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//对，这个就是核心方法了，给HTML设置font-size。</span></span><br><span class="line">  <span class="keyword">var</span> innerWidth =</span><br><span class="line">    <span class="built_in">document</span>.documentElement.getBoundingClientRect().width ||</span><br><span class="line">    <span class="built_in">window</span>.innerWidth</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (hotcss.maxWidth &amp;&amp; innerWidth / hotcss.dpr &gt; hotcss.maxWidth) &#123;</span><br><span class="line">    innerWidth = hotcss.maxWidth * hotcss.dpr</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!innerWidth) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.documentElement.style.fontSize = innerWidth * <span class="number">20</span> / <span class="number">320</span> + <span class="string">'px'</span></span><br><span class="line"></span><br><span class="line">  hotcss.callback &amp;&amp; hotcss.callback()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hotcss.mresize()</span><br><span class="line"><span class="comment">//直接调用一次</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(</span><br><span class="line">  <span class="string">'resize'</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    clearTimeout(hotcss.tid)</span><br><span class="line">    hotcss.tid = setTimeout(hotcss.mresize, <span class="number">33</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">//绑定resize的时候调用</span></span><br></pre></td></tr></table></figure><p><strong>通过读这段源码, 结合本篇博客开篇所介绍的基础知识, 我们可以得知其中原理: hotcss的作者将320px的设计图的rem基准定为了20px,其他设备不同屏幕宽度的设备页面的基准字号其实也随之而定了, 比如你的设计稿是iphone手机, dpr是2, 设计稿宽度是640px, 那么hotcss给html设置的<code>font-size</code>就是40px.</strong></p><p><strong>从rem自适应的原理上来说, 经px2rem转换之后, css中的rem单位都已经定下来了, 不会随着页面的变化而更改, 所以只有等比的设置不同屏幕的基准font-size, 才能达到一套代码全部屏幕自适应的需求, hotcss通过监听<code>window.resize</code>事件, 根据当前设备的<code>ideal port</code>宽度和<code>dpr</code>的值, 动态给页面的html标签设置基准font-size</strong></p><p><strong>回到我们抛出的问题, webpack中px2rem中remUnit值的设置, 其实相当于<code>在项目原始设计稿的标准下, html标签中的基准font-size会被hotcss转化为的数值</code>, 若以我的项目举例, 我的设计稿是640px的, 所以这里webpack中的remUnit必须设为40px</strong></p><p>至此, 很详细的说了这次自适应设计的原理, 整个处理webpack构建和设计自适应的过程是对自己处理问题能力的一个提升. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;自适应方案设计&quot;&gt;&lt;a href=&quot;#自适应方案设计&quot; class=&quot;headerlink&quot; title=&quot;自适应方案设计&quot;&gt;&lt;/a&gt;自适应方案设计&lt;/h2&gt;&lt;p&gt;做到一份代码, 构建出的app适配各种设备, 根据设备的屏幕尺寸, 自动缩放所有css尺寸, 让所有
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正反馈系列: Webpack (二)</title>
    <link href="http://yoursite.com/2018/03/16/webpack02/"/>
    <id>http://yoursite.com/2018/03/16/webpack02/</id>
    <published>2018-03-16T01:53:16.000Z</published>
    <updated>2018-03-20T03:40:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇博客总结了<code>webpack</code>的基本配置, 处理js, css, 代码分割, 懒加载, tree-shaking等方法, 这篇博客继续总结资源处理, 第三方js库处理, html相关, devServer相关等知识.</p><h2 id="图片处理"><a href="#图片处理" class="headerlink" title="图片处理"></a>图片处理</h2><h3 id="场景与技术"><a href="#场景与技术" class="headerlink" title="场景与技术"></a>场景与技术</h3><ul><li>CSS中引入的图片 <code>file-loader</code></li><li>自动合成的雪碧图 <code>postcss-sprites</code></li><li>压缩图片 <code>img-loader</code></li><li>Base64编码 <code>url-loader</code></li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">      use: ExtractTextWebpackPlugin.extract(</span><br><span class="line">        &#123;</span><br><span class="line">          fallback: &#123;</span><br><span class="line">            loader: <span class="string">'style-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              singleton: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          use: [</span><br><span class="line">            &#123;</span><br><span class="line">              loader: <span class="string">'css-loader'</span>,</span><br><span class="line">              options: &#123;</span><br><span class="line">                importLoaders: <span class="number">2</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">              options: &#123;</span><br><span class="line">                ident: <span class="string">'postcss'</span>,</span><br><span class="line">                plugins: [</span><br><span class="line">                  <span class="comment">// CSS 雪碧图</span></span><br><span class="line">                  <span class="built_in">require</span>(<span class="string">'postcss-sprites'</span>)(&#123;</span><br><span class="line">                    spritePath: <span class="string">'dist/assets/imgs/sprites'</span>,</span><br><span class="line">                    <span class="comment">// 只对形如'border@2x.png'类似的文件名起效</span></span><br><span class="line">                    retina: <span class="literal">true</span></span><br><span class="line">                  &#125;),</span><br><span class="line">                  <span class="built_in">require</span>(<span class="string">'postcss-cssnext'</span>)()</span><br><span class="line">                ]</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              loader: <span class="string">'less-loader'</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.(png|jpg|jpeg|gif)$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// url-loader和file-loader在图片处理时唯一的区别是url-loader可以设limit转Base64</span></span><br><span class="line">          <span class="comment">// 所以可以用url-loader代替file-loader</span></span><br><span class="line">          loader: <span class="string">'url-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            <span class="comment">// ext代表后缀名</span></span><br><span class="line">            name: <span class="string">'[name]-[hash:5].[ext]'</span>,</span><br><span class="line">            limit: <span class="number">1000</span>,</span><br><span class="line">            <span class="comment">// publicPath: 静态资源引用地址</span></span><br><span class="line">            <span class="comment">// 覆盖output中的publicPath设置</span></span><br><span class="line">            <span class="comment">// 若服务为httpServer, 设置为'/'则指向了网站根目录,相当于开启一个绝对路径</span></span><br><span class="line">            <span class="comment">/* 一些publicPath示例</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">                publicPath: "https://cdn.example.com/assets/", // CDN（总是 HTTPS 协议）</span></span><br><span class="line"><span class="comment">                publicPath: "//cdn.example.com/assets/", // CDN (协议相同)</span></span><br><span class="line"><span class="comment">                publicPath: "/assets/", // 相对于服务(server-relative)</span></span><br><span class="line"><span class="comment">                publicPath: "assets/", // 相对于 HTML 页面</span></span><br><span class="line"><span class="comment">                publicPath: "../assets/", // 相对于 HTML 页面</span></span><br><span class="line"><span class="comment">                publicPath: "", // 相对于 HTML 页面（目录相同）</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            publicPath: <span class="string">'/'</span>,</span><br><span class="line">            <span class="comment">// outputPath: 构建文件输出地址</span></span><br><span class="line">            <span class="comment">// 相对output.path的相对路径,以'/'结尾表示文件夹</span></span><br><span class="line">            outputPath: <span class="string">'assets/imgs/'</span>,</span><br><span class="line">            <span class="comment">// 会模拟源代码的目录结构生成对应的相对文件结构, 方便css等相对路径的引用</span></span><br><span class="line">            <span class="comment">// useRelativePath: true</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'img-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            pngquant: &#123;</span><br><span class="line">              quality: <span class="number">80</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字体文件处理"><a href="#字体文件处理" class="headerlink" title="字体文件处理"></a>字体文件处理</h2><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><blockquote><p>方法同图片文件处理: 即不涉及Base64编码时使用<code>file-loader</code>,否则使用<code>url-loader</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(eot|woff2?|ttf|svg)$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'url-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        name: <span class="string">'[name]-[hash:5].[ext]'</span>,</span><br><span class="line">        <span class="comment">// 转为 baseurl 的前提</span></span><br><span class="line">        limit: <span class="number">5000</span>,</span><br><span class="line">        publicPath: <span class="string">''</span>,</span><br><span class="line">        outputPath: <span class="string">'dist/'</span>,</span><br><span class="line">        useRelativePath: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="处理第三方JS库"><a href="#处理第三方JS库" class="headerlink" title="处理第三方JS库"></a>处理第三方JS库</h2><h3 id="场景和方法"><a href="#场景和方法" class="headerlink" title="场景和方法"></a>场景和方法</h3><ul><li>远程cdn库用script标签链html中: <code>script</code>标签在html页面中引入, <code>window</code>全局引入, 所有模块皆可使用</li><li>npm install的库注入模块中: <code>webpack.providePlugin</code>,  <code>imports-loader</code></li><li>本地目录下的js文件注入模块中: <code>resolve</code>属性配置<code>alias</code>后, <code>webpack.providePlugin</code>或<code>imports-loader</code>引入`</li></ul><h3 id="webpack-providePlugin"><a href="#webpack-providePlugin" class="headerlink" title="webpack.providePlugin"></a>webpack.providePlugin</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 若本地目录下的js文件需引入模块则配置resolve, npm仓库不需配置</span></span><br><span class="line">  <span class="comment">// 配置alias后也可用imports-loader导入</span></span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="comment">// jquery 别名，告诉webpack jquery = src/libs/jquery.min.js</span></span><br><span class="line">      <span class="comment">// 这里加$号的原因是需匹配具体文件,而不是文件夹</span></span><br><span class="line">      <span class="comment">// $号前的jquery字符串对应ProvidePlugin中的'jquery'</span></span><br><span class="line">      jquery$: path.resolve(__dirname, <span class="string">'src/libs/jquery.min.js'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// 将jquery注入到每一个模块中</span></span><br><span class="line">    <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">      $: <span class="string">'jquery'</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="imports-loader"><a href="#imports-loader" class="headerlink" title="imports-loader"></a>imports-loader</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">&#123;</span><br><span class="line">  test: path.resolve(__dirname, <span class="string">'src/app.js'</span>),</span><br><span class="line">  use: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 使用 imports-loader 注入</span></span><br><span class="line">      loader: <span class="string">'imports-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        $: <span class="string">'jquery'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HTML-in-Webpack"><a href="#HTML-in-Webpack" class="headerlink" title="HTML in Webpack"></a>HTML in Webpack</h2><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ul><li>自动生成html, 引入bundle: <code>HtmlWebpackPlugin</code></li><li>html中img标签用src引入图片: <code>html-loader</code></li><li>直接在src中用require方式引用: <code>require</code>语法</li><li>将提取的manifest公共代码通过script标签引入, <code>htmlWebpackInlineChunkPlugin</code></li></ul><h3 id="自动生成html-htmlWebpackPlugin"><a href="#自动生成html-htmlWebpackPlugin" class="headerlink" title="自动生成html, htmlWebpackPlugin"></a>自动生成html, htmlWebpackPlugin</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    <span class="comment">// 可指定目录'dist/index.html'</span></span><br><span class="line">    filename: <span class="string">'index.html'</span>,</span><br><span class="line">    template: <span class="string">'./index.html'</span>,</span><br><span class="line">    minify: &#123;</span><br><span class="line">      collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 选择插入哪些entry生成的bundle</span></span><br><span class="line">    <span class="comment">// chunks: ['app','app2']</span></span><br><span class="line">    <span class="comment">// 选择是否插入生成的bundle</span></span><br><span class="line">    <span class="comment">// false时可以手动在html页面内引入</span></span><br><span class="line">    <span class="comment">// inject: true</span></span><br><span class="line">  &#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="html中img标签用src引入图片-html-loader"><a href="#html中img标签用src引入图片-html-loader" class="headerlink" title="html中img标签用src引入图片, html-loader"></a>html中img标签用src引入图片, html-loader</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'html-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">          attrs: [<span class="string">'img:src'</span>, <span class="string">'img:data-src'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="直接在src中用require方式引用"><a href="#直接在src中用require方式引用" class="headerlink" title="直接在src中用require方式引用"></a>直接在src中用require方式引用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"$&#123;require('./assets/img.png')&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="将提取的manifest公共代码通过script标签引入-htmlWebpackInlineChunkPlugin"><a href="#将提取的manifest公共代码通过script标签引入-htmlWebpackInlineChunkPlugin" class="headerlink" title="将提取的manifest公共代码通过script标签引入, htmlWebpackInlineChunkPlugin"></a>将提取的manifest公共代码通过script标签引入, htmlWebpackInlineChunkPlugin</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">  name: <span class="string">'manifest'</span></span><br><span class="line">&#125;),</span><br><span class="line"><span class="comment">//!</span></span><br><span class="line"><span class="keyword">new</span> HtmlInlinkChunkPlugin(&#123;</span><br><span class="line">  <span class="comment">// 注意若在htmlWebpackPlugin中配置了chunks属性, 需将'manifest'加入数组</span></span><br><span class="line">  inlineChunks: [<span class="string">'manifest'</span>]</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><h2 id="开发服务器"><a href="#开发服务器" class="headerlink" title="开发服务器"></a>开发服务器</h2><h3 id="三种方式"><a href="#三种方式" class="headerlink" title="三种方式"></a>三种方式</h3><p><code>webpack-watch-mode</code>, 只监视文件,无服务器<br><code>webpack-dev-server</code><br><code>express + webpack-dev-middleware</code> 灵活的配置服务, 比如<code>koa</code>替换<code>express</code></p><h3 id="清除webpack代码-cleanWebpackPlugin"><a href="#清除webpack代码-cleanWebpackPlugin" class="headerlink" title="清除webpack代码, cleanWebpackPlugin"></a>清除webpack代码, cleanWebpackPlugin</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="comment">// 数组中是需要清除的路径</span></span><br><span class="line"><span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist'</span>])</span><br></pre></td></tr></table></figure><h3 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h3><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><ul><li>live-reloading</li><li>打包文件写入内存</li><li>路径重定向</li><li>https</li><li>浏览器中显示编译错误</li><li>接口代理</li><li>模块热更新</li></ul><h4 id="npm-scripts-启动"><a href="#npm-scripts-启动" class="headerlink" title="npm scripts 启动"></a>npm scripts 启动</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">"scripts": &#123;</span><br><span class="line">  // 通过命令行形式直接运行webpack-dev-server会找不到</span><br><span class="line">  // 因为该命令入口在/node_modules/.bin目录下</span><br><span class="line">  "server": "webpack-dev-server --open"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="H5-history-api-rewrite-historyApiFallback"><a href="#H5-history-api-rewrite-historyApiFallback" class="headerlink" title="H5 history api rewrite, historyApiFallback"></a>H5 history api rewrite, historyApiFallback</h4><blockquote><p>作用: 当使用 <code>HTML5 History AP</code>I 时，任意的 404 响应都可能需要被替代为 index.html<br>也可以配置rewrites进一步配置, 防止用户在浏览器栏输入地址并刷新时跳转到不存在的404页面</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 头部不用import devServer</span></span><br><span class="line">devServer: &#123;</span><br><span class="line">  <span class="comment">// liveReloading是自动的, 不用参数配置</span></span><br><span class="line">  <span class="comment">// 本地服务端口号</span></span><br><span class="line">  port: <span class="number">9001</span>,</span><br><span class="line">  <span class="comment">// HTML5 histroy API rewrite</span></span><br><span class="line">  <span class="comment">// 简单版使用 'historyApiFallback: true'</span></span><br><span class="line">  <span class="comment">// 之后在浏览器访问一个不存在的地址时不会报404,会停留在index.html</span></span><br><span class="line">  <span class="comment">// historyApiFallback: true</span></span><br><span class="line">  historyApiFallback: &#123;</span><br><span class="line">    rewrites: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 来自什么样的路径</span></span><br><span class="line">        <span class="keyword">from</span>: <span class="regexp">/^\/([a-zA-Z0-9]+\/?)([a-zA-Z0-9]+)/</span>,</span><br><span class="line">        <span class="comment">// 跳转到哪里</span></span><br><span class="line">        <span class="comment">// context拿到正则捕获组</span></span><br><span class="line">        to: <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">'/'</span> + context.match[<span class="number">1</span>] + context.match[<span class="number">2</span>] + <span class="string">'.html'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h4><blockquote><p>Proxy 内部集成 <code>http-proxy-middleware</code></p></blockquote><ul><li><code>target</code>: 指定代理服务器地址</li><li><code>changeOrigin</code>: 改变源到url, 设置为true时可以请求vitual host站点, 默认false记得设为true</li><li><code>headers</code>: 给http增加请求头</li><li><code>logLevel</code>: 在控制台或terminal中显示代理信息, 帮助调试</li><li><code>pathRewrite</code>: 可以用简短的地址代替长地址请求</li></ul><blockquote><p>例: 请求新浪微博接口 <code>https://m.weibo.cn/api/comments/show?id=4193586758833502&amp;page=1</code><br>在js文件中用jquery请求我们自己定义的短路径’/comments/show’</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在自己开发的js中写入下述代码</span></span><br><span class="line"><span class="comment">// '/comments/show' 是我们自己定义的缩短路径</span></span><br><span class="line">$.get(<span class="string">'/comments/show'</span>, &#123;</span><br><span class="line">  id: <span class="string">'4193586758833502'</span>,</span><br><span class="line">  page: <span class="number">1</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">devServer: &#123;</span><br><span class="line">  port: <span class="number">9001</span>,</span><br><span class="line">  proxy: &#123;</span><br><span class="line">    <span class="comment">// 需要被代理的路径开头</span></span><br><span class="line">    <span class="string">'/'</span>: &#123;</span><br><span class="line">      <span class="comment">// 指定代理服务器地址</span></span><br><span class="line">      target: <span class="string">'https://m.weibo.cn'</span>,</span><br><span class="line">      <span class="comment">// 设置为true时可以请求vitual host站点, 默认false, 需要设置为true</span></span><br><span class="line">      changeOrigin: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// 在控制台或terminal中显示代理信息, 帮助调试</span></span><br><span class="line">      logLevel: <span class="string">'debug'</span>,</span><br><span class="line">      <span class="comment">// 用简短的地址替换长地址请求</span></span><br><span class="line">      pathRewrite: &#123;</span><br><span class="line">        <span class="string">'^/comments'</span>: <span class="string">'/api/comments'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 给http协议增加请求头</span></span><br><span class="line">      headers: &#123;</span><br><span class="line">        <span class="string">'Cookie'</span>: <span class="string">'_T_WM=044532f80b8fabc6dc347fd417c33202; ALF=1517569014; SUBP=0033WrSXqPxfM725Ws9jqgMF55529P9D9WhQljxrwvAfCCZa_p.u8pB.5JpX5K-hUgL.Fo2cS0qRehBcSKM2dJLoI7HpqJ8XwBtt; SCF=AkQsXaaTywl0RziwnumQ0tVE_xW5udcpoGP43q7eb2tFW9lXRc4bVNOn9N5m_ZKwFc-Q2r4Hz5oMBAbVJuhI1uk.; SUB=_2A253SLARDeRhGedI7FQZ8CrKzjuIHXVUstBZrDV6PUJbktANLUXEkW1NVtAHXD7nHQtwFntsDZsmqj2nB17cClnd; SUHB=0k1zt1ckxYq3c6; H5_INDEX_TITLE=qbaty; H5_INDEX=0_all; WEIBOCN_FROM=1110006030; M_WEIBOCN_PARAMS=oid%3D4193586758833502%26luicode%3D20000061%26lfid%3D4193594443440569%26uicode%3D20000061%26fid%3D4193586758833502'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="模块热更新-MHR-Module-Hot-Reloading"><a href="#模块热更新-MHR-Module-Hot-Reloading" class="headerlink" title="模块热更新 MHR(Module Hot Reloading)"></a>模块热更新 MHR(Module Hot Reloading)</h4><blockquote><p>与liveReloading的区别: </p></blockquote><ul><li>不重新刷新浏览器更新前端代码</li><li>可以保持应用数据状态</li><li>节省时间, 样式调试更快</li></ul><blockquote><p>所需工具和方法</p></blockquote><ul><li><code>devServer.hot: true</code> 即可使用</li><li><code>webpack.HotModuleReplacementPlugin</code> 必须使用</li><li><code>webpack.NamedModulesPlugin</code> 启用HMR时, 如果想看到模块相对路径, 需使用</li></ul><blockquote><p>配置</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">devServer: &#123;</span><br><span class="line">  hot: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 使全局无论如何不通过刷新页面实现热更新</span></span><br><span class="line">  hotOnly: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">  <span class="keyword">new</span> webpack.NamedModulesPlugin(),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>注意: HMR更新的是内存中的代码, 所以若css用<code>ExtractTextWebpackPlugin</code>提取过的话, 无法进行热更新<br>解决方法是改为<code>style-loader</code>注入的方式<br>关于<code>NamedModulesPlugin</code>的具体效果, 移步<a href="https://doc.webpack-china.org/guides/caching/#%E6%A8%A1%E5%9D%97%E6%A0%87%E8%AF%86%E7%AC%A6-module-identifiers-" target="_blank" rel="noopener">webpack官中文档</a></p></blockquote><h2 id="Source-Map"><a href="#Source-Map" class="headerlink" title="Source Map"></a>Source Map</h2><h3 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h3><blockquote><p>JS Source Map</p></blockquote><ul><li><code>devtool</code></li><li><code>webpack.SourceMapDevToolPlugin</code></li><li><code>webpack.EvalSourceMapDevToolPlugin</code></li></ul><blockquote><p>CSS Source Map<br>将下列属性设置为true即可</p></blockquote><ul><li><code>style-loader.option.sourceMap</code></li><li><code>css-loader.option.sourceMap</code> </li><li><code>less-loader.option.sourceMap</code></li><li><code>sass-loader.option.sourceMap</code></li></ul><h3 id="devtool-取值"><a href="#devtool-取值" class="headerlink" title="devtool 取值"></a>devtool 取值</h3><blockquote><p>Development</p></blockquote><ul><li><code>eval</code></li><li><code>eval-source-map</code></li><li><code>cheap-eval-source-map</code></li><li><code>cheap-module-eval-source-map</code> 建议在开发环境使用</li></ul><blockquote><p>Production</p></blockquote><ul><li><code>source-map</code></li><li><code>hidden-source-map</code></li><li><code>nosource-source-map</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  devtool: <span class="string">'cheap-module-eval-source-map'</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS-Source-Map-设置"><a href="#CSS-Source-Map-设置" class="headerlink" title="CSS Source Map 设置"></a>CSS Source Map 设置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'style-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        <span class="comment">// 必须去掉singleton属性才可以正确开启css-sourcemap</span></span><br><span class="line">        <span class="comment">// singleton: true</span></span><br><span class="line">        sourceMap: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'css-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        importLoaders: <span class="number">2</span>,</span><br><span class="line">        sourceMap: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        ident: <span class="string">'postcss'</span>,</span><br><span class="line">        sourceMap: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'less-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        sourceMap: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置-EsLint"><a href="#设置-EsLint" class="headerlink" title="设置 EsLint"></a>设置 EsLint</h2><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ul><li><code>eslint</code></li><li><code>eslint-loader</code></li><li><code>eslint-plugin-html</code>: 当在html中以script标签引入js时开启eslint</li><li><code>eslint-friendly-formatter</code> 开启更友好的eslint提示</li></ul><h3 id="方式-1"><a href="#方式-1" class="headerlink" title="方式"></a>方式</h3><ul><li>在<code>webpack.config.js</code>中开启<code>eslint-loader</code></li><li>在<code>.eslintrc</code>或<code>package.json</code>中的<code>eslintConfig</code>属性中设置相关选项</li></ul><h3 id="eslint规范"><a href="#eslint规范" class="headerlink" title="eslint规范"></a>eslint规范</h3><blockquote><p>JavaScript Standard Style (<a href="https://standardjs.com/" target="_blank" rel="noopener">https://standardjs.com/</a>)</p></blockquote><ul><li><code>eslint-config-standard</code></li><li><code>eslint-plugin-promise</code></li><li><code>eslint-plugin-standard</code></li><li><code>eslint-plugin-import</code></li><li><code>eslint-plugin-node</code></li><li><code>eslint-config-xxx</code></li></ul><h3 id="eslint-loader等配置"><a href="#eslint-loader等配置" class="headerlink" title="eslint-loader等配置"></a>eslint-loader等配置</h3><blockquote><p>eslint-loader</p></blockquote><ul><li><code>options.failOnWarning</code>: 若Warning则不通过编译</li><li><code>options.failOnError</code>: 若Error则不通过编译</li><li><code>options.formatter</code>: 设置第三方友好代码提示的选项, 可用<code>eslint-friendly-formatter</code></li><li><code>options.outputReport</code>: 输出一个代码格式检查的报告</li></ul><blockquote><p><code>devServer.overlay</code><br>配置此选项可让eslint在浏览器中输出</p></blockquote><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install eslint eslint-loader eslint-plugin-html eslint-friendly-formatter --save-dev</span><br><span class="line">npm install eslint-config-standard eslint-plugin-promise eslint-plugin-node eslint-plugin-import eslint-plugin-standard --save-dev</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">devServer: &#123;</span><br><span class="line">  overlay: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      include: [path.resolve(__dirname, <span class="string">'src'</span>)],</span><br><span class="line">      exclude: [path.resolve(__dirname, <span class="string">'src/libs'</span>)],</span><br><span class="line">      use: [</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            presets: [<span class="string">'env'</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            <span class="comment">// 设置第三方友好代码提示的选项, 可用`eslint-friendly-formatter`</span></span><br><span class="line">            formatter: <span class="built_in">require</span>(<span class="string">'eslint-friendly-formatter'</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .eslintrc</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  extends: <span class="string">'standard'</span>,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// eslint-plugin-html插件</span></span><br><span class="line">    <span class="string">'html'</span></span><br><span class="line">  ],</span><br><span class="line">  env: &#123;</span><br><span class="line">    browser: <span class="literal">true</span>,</span><br><span class="line">    node: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 允许的全局变量</span></span><br><span class="line">  globals: &#123;</span><br><span class="line">    $: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 覆盖extends标准的规则</span></span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="string">'indent'</span>: [<span class="string">'error'</span>, <span class="number">4</span>],</span><br><span class="line">    <span class="string">'eol-last'</span>: [<span class="string">'error'</span>, <span class="string">'never'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Resolve"><a href="#Resolve" class="headerlink" title="Resolve"></a>Resolve</h2><h3 id="resolve-alias"><a href="#resolve-alias" class="headerlink" title="resolve.alias"></a>resolve.alias</h3><blockquote><p>可以在<code>import</code>时启用别名替换</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">alias: &#123;</span><br><span class="line">  Utilities: path.resolve(__dirname, <span class="string">'src/utilities/'</span>),</span><br><span class="line">  Templates: path.resolve(__dirname, <span class="string">'src/templates/'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置前: import Utility from '../../utilities/utility';</span></span><br><span class="line"><span class="comment">// 设置后: import Utility from 'Utilities/utility';</span></span><br></pre></td></tr></table></figure><h3 id="resolve-extensions"><a href="#resolve-extensions" class="headerlink" title="resolve.extensions"></a>resolve.extensions</h3><blockquote><p>可以在<code>import</code>时忽略的扩展名</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">resolve: &#123;</span><br><span class="line">  extensions: [<span class="string">".js"</span>, <span class="string">".vue"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区分开发环境和生产环境"><a href="#区分开发环境和生产环境" class="headerlink" title="区分开发环境和生产环境"></a>区分开发环境和生产环境</h2><blockquote><p>开发环境需要(对应<code>webpack.dev.conf.js</code>):</p></blockquote><ul><li>模块热更新</li><li>sourceMap</li><li>接口代理</li><li>代码规范检查</li></ul><blockquote><p>生产环境需要(对应<code>webpack.prod.conf.js</code>): </p></blockquote><ul><li>提取公用代码</li><li>压缩混淆</li><li>文件压缩或Base64编码</li><li>Tree-Shaking</li></ul><blockquote><p>共同点(对应<code>webpack.common.conf.js</code>)</p></blockquote><ul><li>同样的入口</li><li>同样的代码处理(loader处理)</li><li>同样的解析配置</li></ul><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><ul><li>用<code>webpack.DefinePlugin</code>设置常量</li><li>进阶: <code>webpack-merge</code> 拼接webpack配置</li></ul><h3 id="webpack-DefinePlugin"><a href="#webpack-DefinePlugin" class="headerlink" title="webpack.DefinePlugin"></a>webpack.DefinePlugin</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">env</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        loader: env === PRODUCTION ? ExtractTextPlugin.extract(&#123;</span><br><span class="line">          use: <span class="string">'css-loader'</span>,</span><br><span class="line">          fallback: <span class="string">'style-loader'</span></span><br><span class="line">        &#125;) : <span class="string">'style-loader!css-loader'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// 此插件用来定义全局变量</span></span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="comment">// 因为插件直接进行文本替换,要保留原始引号,两种方法是:</span></span><br><span class="line">      <span class="comment">// 1. '"production"'</span></span><br><span class="line">      <span class="comment">// 2. JSON.stringify('production')</span></span><br><span class="line">      PRODUCTION: <span class="built_in">JSON</span>.stringify(<span class="string">'production'</span>),</span><br><span class="line">      DEV: <span class="built_in">JSON</span>.stringify(<span class="string">'development'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="webpack-merge配置"><a href="#webpack-merge配置" class="headerlink" title="webpack-merge配置"></a>webpack-merge配置</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">"scripts": &#123;</span><br><span class="line">  "server": "webpack-dev-server --env development --open --config build/webpack.common.conf.js",</span><br><span class="line">  "build": "webpack --env production --config build/webpack.common.conf.js",</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.common.conf.js</span></span><br><span class="line"><span class="keyword">const</span> productionConfig = <span class="built_in">require</span>(<span class="string">'./webpack.prod.conf'</span>)</span><br><span class="line"><span class="keyword">const</span> developmentConfig = <span class="built_in">require</span>(<span class="string">'./webpack.dev.conf'</span>)</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="comment">// 生成提取css文件的Plugin</span></span><br><span class="line"><span class="keyword">const</span> extractLess = <span class="keyword">new</span> ExtractTextWebpackPlugin(&#123;</span><br><span class="line">  filename: <span class="string">'css/[name]-bundle-[hash:5].css'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 这里的参数env是npm scripts --env 传入的字符串</span></span><br><span class="line"><span class="keyword">const</span> generateConfig = <span class="function"><span class="params">env</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 设置js需要的scriptloader</span></span><br><span class="line">  <span class="keyword">const</span> scriptLoader = [</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'babel-loader'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ].concat(env === <span class="string">'production'</span> ? [] : [</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        formatter: <span class="built_in">require</span>(<span class="string">'eslint-friendly-formatter'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ])</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 设置css需要的cssLoaders</span></span><br><span class="line">  <span class="keyword">const</span> cssLoaders = [</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'css-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        importLoaders: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 若是dev环境则关闭sourceMap</span></span><br><span class="line">        sourceMap: env === <span class="string">'development'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        ident: <span class="string">'postcss'</span>,</span><br><span class="line">        <span class="comment">// 若是dev环境则关闭sourceMap</span></span><br><span class="line">        sourceMap: env === <span class="string">'development'</span>,</span><br><span class="line">        plugins: [</span><br><span class="line">          <span class="built_in">require</span>(<span class="string">'postcss-cssnext'</span>)()</span><br><span class="line">        ].concat(</span><br><span class="line">          <span class="comment">// 若是生产环境,加载post-css雪碧图功能</span></span><br><span class="line">          env === <span class="string">'production'</span></span><br><span class="line">            ? <span class="built_in">require</span>(<span class="string">'postcss-sprites'</span>)(&#123;</span><br><span class="line">              spritePath: <span class="string">'dist/assets/imgs/sprites'</span>,</span><br><span class="line">              retina: <span class="literal">true</span></span><br><span class="line">            &#125;)</span><br><span class="line">            : []</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'less-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        <span class="comment">// 若是dev环境则关闭sourceMap</span></span><br><span class="line">        sourceMap: env === <span class="string">'development'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// style-loader若是prod环境需提取,dev环境直接使用style-loader</span></span><br><span class="line">  <span class="keyword">const</span> styleLoader = env === <span class="string">'production'</span></span><br><span class="line">    ? extractLess.extract(&#123;</span><br><span class="line">      fallback: <span class="string">'style-loader'</span>,</span><br><span class="line">      use: cssLoaders</span><br><span class="line">    &#125;)</span><br><span class="line">    : [&#123;</span><br><span class="line">      loader: <span class="string">'style-loader'</span></span><br><span class="line">    &#125;].concat(cssLoaders)</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 针对file-loader的配置</span></span><br><span class="line">  <span class="comment">// fileLoader根据img和font文件的不同设置不同的outputPath</span></span><br><span class="line">  <span class="keyword">const</span> fileLoader = <span class="function"><span class="params">path</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果是dev环境,使用file-loader,若是prod环境,使用url-loader开启Base64编码</span></span><br><span class="line">    <span class="keyword">return</span> env === <span class="string">'development'</span></span><br><span class="line">      ? [&#123;</span><br><span class="line">        loader: <span class="string">'file-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          name: <span class="string">'[name]-[hash:5].[ext]'</span>,</span><br><span class="line">          outputPath: path</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;]</span><br><span class="line">      : [&#123;</span><br><span class="line">        loader: <span class="string">'url-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          name: <span class="string">'[name]-[hash:5].[ext]'</span>,</span><br><span class="line">          limit: <span class="number">1000</span>,</span><br><span class="line">          outputPath: path</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,&#123;</span><br><span class="line">        loader: <span class="string">'img-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          pngquant: &#123;</span><br><span class="line">            quality: <span class="number">80</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回配置对象, 在各自rules的use字段载入上述定义的loader</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    entry,</span><br><span class="line">    output,</span><br><span class="line">    resolve,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">      rules: [</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">          include: [path.resolve(__dirname, <span class="string">'../src'</span>)],</span><br><span class="line">          exclude: [path.resolve(__dirname, <span class="string">'../src/libs'</span>)],</span><br><span class="line">          use: scriptLoader</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">          use: styleLoader(<span class="string">'assets/imgs/'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.(png|jpg|jpeg|gif)$/</span>,</span><br><span class="line">          use: fileLoader</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.(eot|woff2?|ttf|svg)$/</span>,</span><br><span class="line">          use: fileLoader(<span class="string">'assets/fonts/'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="comment">// 提取less</span></span><br><span class="line">      extractLess,</span><br><span class="line">      <span class="comment">// 自动生成html, 引入bundle</span></span><br><span class="line">      <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">        filename: <span class="string">'index.html'</span>,</span><br><span class="line">        template: <span class="string">'./index.html'</span>,</span><br><span class="line">        minify: &#123;</span><br><span class="line">          collapseWhitespace: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="comment">// 将本地的jquery文件注入到每一个模块中</span></span><br><span class="line">      <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">        $: <span class="string">'jquery'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的参数env是npm scripts --env 传入的字符串</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">env</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// config根据传入的env变量赋值为对应的prod配置或dev配置</span></span><br><span class="line">  <span class="keyword">let</span> config = env === <span class="string">'production'</span></span><br><span class="line">    ? productionConfig</span><br><span class="line">    : developmentConfig</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> merge(generateConfig(env), config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.dev.conf.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devtool: <span class="string">'cheap-module-source-map'</span>,</span><br><span class="line">  devServer,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// 引入devServer相关plugins</span></span><br><span class="line">    <span class="comment">// 热更新</span></span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">    <span class="comment">// 启用热更新时显示模块相对路径</span></span><br><span class="line">    <span class="keyword">new</span> webpack.NamedModulesPlugin(),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.prod.conf.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// CSS Tree Shaking</span></span><br><span class="line">    <span class="keyword">new</span> PurifyWebpack(&#123;</span><br><span class="line">      paths: glob.sync([</span><br><span class="line">        <span class="string">'./*.html'</span>,</span><br><span class="line">        <span class="string">'./src/*.js'</span></span><br><span class="line">      ])</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 提取manifest</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">'manifest'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 将manifest以script标签形式放入html中</span></span><br><span class="line">    <span class="keyword">new</span> HtmlInlinkChunkPlugin(&#123;</span><br><span class="line">      inlineChunks: [<span class="string">'manifest'</span>]</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// JS Tree Shaking</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(),</span><br><span class="line">    <span class="comment">// 打包前 clean dist 目录</span></span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(path.resolve(__dirname, <span class="string">'../dist'</span>)),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优化打包速度"><a href="#优化打包速度" class="headerlink" title="优化打包速度"></a>优化打包速度</h2><blockquote><p>分开vender和app</p></blockquote><ul><li><code>DllPlugin</code>: 通过打包第三包库会生成map(映射关系),供业务代码引用</li><li><code>DllReferencePlugin</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.dll.conf.js</span></span><br><span class="line"><span class="comment">// 所有vendor库代码打包配置</span></span><br><span class="line"><span class="comment">// 在生产环境构建中运行一次即可 webpack --config webpack.dll.conf.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    vue: [<span class="string">'vue'</span>, <span class="string">'vue-router'</span>],</span><br><span class="line">    ui: [<span class="string">'element-ui'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.join(__dirname, <span class="string">'../src/dll/'</span>),</span><br><span class="line">    filename: <span class="string">'[name].dll.js'</span>,</span><br><span class="line">    <span class="comment">// 定义第三方库的引用名, 若不配置此项, 则vendor都以全局变量引入</span></span><br><span class="line">    library: <span class="string">'[name]'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// `DllPlugin`: 通过打包第三包库会生成map(映射关系),供业务代码引用</span></span><br><span class="line">    <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">      <span class="comment">// 这里选择的输出其实是map的输出地址, map是json文件</span></span><br><span class="line">      path: path.join(__dirname, <span class="string">'../src/dll/'</span>, <span class="string">'[name]-manifest.json'</span>),</span><br><span class="line">      name: <span class="string">'[name]'</span></span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/03/16/5aab232642fad.jpg" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.prod.conf.js</span></span><br><span class="line">plugins: [</span><br><span class="line">plugins: [</span><br><span class="line">  <span class="comment">// 用DllReferencePlugin将刚才生成的map文件引入</span></span><br><span class="line">  <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">    manifest: <span class="built_in">require</span>(<span class="string">'../src/dll/ui-manifest.json'</span>)</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">    manifest: <span class="built_in">require</span>(<span class="string">'../src/dll/vue-manifest.json'</span>)</span><br><span class="line">  &#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>平行处理压缩混淆</p></blockquote><ul><li><code>UglifyJsPlugin</code><ul><li><code>parallel: true</code>: 平行线程处理</li><li><code>cache: true</code>: 利用缓存</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.dev.conf.js</span></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">    parallel: <span class="literal">true</span>,</span><br><span class="line">    cache: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>平行处理文件loaders处理</p></blockquote><ul><li><code>HappyPack</code><ul><li><code>HappyPack.ThreadPool</code>: 共享文件loaders处理线程池</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.base.conf.js</span></span><br><span class="line"><span class="keyword">const</span> HappyPack = <span class="built_in">require</span>(<span class="string">'happypack'</span>)</span><br><span class="line"><span class="keyword">const</span> vueLoaderConfig = <span class="built_in">require</span>(<span class="string">'./vue-loader.conf'</span>)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">      <span class="comment">// id与plugins中HappyPack实例中的id相对应, </span></span><br><span class="line">      <span class="comment">// 将options传给plugins中的happyPack实例即可, 不用在此引入</span></span><br><span class="line">      loader: <span class="string">'happypack/loader?id=vue'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">    id: <span class="string">'vue'</span>,</span><br><span class="line">    loaders: [&#123;</span><br><span class="line">      loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">      option: <span class="built_in">require</span>(<span class="string">'./vue-loader.conf'</span>)</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>babel-loader</p></blockquote><ul><li><code>options.cacheDirecotry</code>: 开启缓存</li><li><code>include</code> &amp; <code>exclude</code>: 尽可能规定使用babel范围</li></ul><blockquote><p>其他因素</p></blockquote><ul><li>减少<code>resolve</code></li><li>上线去除<code>sourcemap</code></li><li><code>cache-loader</code>: 将所有loader结果缓存</li><li>升级<code>node</code>与<code>webpack</code></li></ul><h2 id="长缓存优化"><a href="#长缓存优化" class="headerlink" title="长缓存优化"></a>长缓存优化</h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>当版本更新时, 使用户的浏览器只下载更新过的模块, 其他模块由于hash值的不变不用用户再次下载</p><h3 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h3><ul><li>提取<code>vender</code></li><li><code>hash</code> -&gt; <code>chunkHash</code></li><li>提取 <code>webpack runtime 与 manifest</code> </li><li>使用 <code>NamedChunksPlugin</code>: 使Chunk的<code>id</code>以<code>name</code>命名, 不再分配打包顺序数字</li><li>使用 <code>NamedModule是Plugin</code>: 使Module的<code>id</code>以<code>相对路径</code>命名, 不再分配打包顺序数字</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: <span class="string">'./src/foo'</span>,</span><br><span class="line">    vendor: [<span class="string">'react'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    <span class="comment">// 以[chunkhash]代替[hash]</span></span><br><span class="line">    filename: <span class="string">'[name].[chunkhash].js'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.NamedChunksPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.NamedModulesPlugin(),</span><br><span class="line">    <span class="comment">// 提取公用代码, 此例中为react库的代码</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">'vendor'</span>,</span><br><span class="line">      minChunks: <span class="literal">Infinity</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 提取manifest与runtime</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">'manifest'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="webpack多页面应用"><a href="#webpack多页面应用" class="headerlink" title="webpack多页面应用"></a>webpack多页面应用</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>多入口 entry</li><li>多页面 html</li><li>每个页面不同的 chunk (js, css)</li><li>每个页面需要不同的webpack参数</li></ul><h3 id="多配置"><a href="#多配置" class="headerlink" title="多配置"></a>多配置</h3><blockquote><p>方法:</p></blockquote><ul><li><code>parallel-webpack</code>: 并行处理没有关联的多份配置(比如同时打包10个页面)</li></ul><blockquote><p>优点:</p></blockquote><ul><li>可以使用<code>parallel-webpack</code>来提高打包速度</li><li>配置更加独立, 灵活</li></ul><blockquote><p>缺点:</p></blockquote><ul><li>不能多页面之间共享代码, 不能使用长缓存, 用户加载效率低</li></ul><blockquote><p>配置:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多页面多配置的parallel-webpack并行打包多页面的优化</span></span><br><span class="line"><span class="comment">// npm install parallel-webpack --save-dev</span></span><br><span class="line"><span class="comment">// node_modules/parallel-webpack/bin/run.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baseConfig = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    react: [<span class="string">'react'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'js/[name].[chunkhash].js'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: ExtractTextWebpack.extract(&#123;</span><br><span class="line">          fallback: <span class="string">'style-loader'</span>,</span><br><span class="line">          use: <span class="string">'css-loader'</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> ExtractTextWebpack(&#123;</span><br><span class="line">      filename: <span class="string">'css/[name].[hash].css'</span></span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> CleanWebpack(path.resolve(__dirname, <span class="string">'dist'</span>)),</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">'react'</span>,</span><br><span class="line">      minChunks: <span class="literal">Infinity</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 每个页面的配置生成函数</span></span><br><span class="line"><span class="keyword">const</span> generatePage = <span class="function"><span class="keyword">function</span> (<span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                                 title = <span class="string">''</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 entry = <span class="string">''</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 template = <span class="string">'./src/index.html'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 name = <span class="string">''</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 chunks = []</span></span></span><br><span class="line"><span class="function"><span class="params">                               &#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    entry,</span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">        chunks,</span><br><span class="line">        template,</span><br><span class="line">        filename: name + <span class="string">'.html'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 生成每个页面的配置数组</span></span><br><span class="line"><span class="keyword">const</span> pages = [</span><br><span class="line">  generatePage(&#123;</span><br><span class="line">    title: <span class="string">'page A'</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">      a: <span class="string">'./src/pages/a'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    name: <span class="string">'a'</span>,</span><br><span class="line">    chunks: [<span class="string">'react'</span>, <span class="string">'a'</span>]</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  generatePage(&#123;</span><br><span class="line">    title: <span class="string">'page B'</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">      b: <span class="string">'./src/pages/b'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    name: <span class="string">'b'</span>,</span><br><span class="line">    chunks: [<span class="string">'react'</span>, <span class="string">'b'</span>]</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  generatePage(&#123;</span><br><span class="line">    title: <span class="string">'page C'</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">      c: <span class="string">'./src/pages/c'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    name: <span class="string">'c'</span>,</span><br><span class="line">    chunks: [<span class="string">'react'</span>, <span class="string">'c'</span>]</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模块返回一个配置数组, 每一项都是每个页面的单独配置和baseConfig的一个合并</span></span><br><span class="line"><span class="built_in">module</span>.exports = pages.map(<span class="function"><span class="params">page</span> =&gt;</span> merge(baseConfig, page))</span><br></pre></td></tr></table></figure><h3 id="单配置-共享配置"><a href="#单配置-共享配置" class="headerlink" title="单配置(共享配置)"></a>单配置(共享配置)</h3><blockquote><p>优点:</p></blockquote><ul><li>可以共享各个 <code>entry</code> 之间的公用代码</li></ul><blockquote><p>缺点: </p></blockquote><ul><li>打包速度比较慢</li><li>输出的内容比较复杂</li></ul><blockquote><p>配置: </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> baseConfig = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    react: [<span class="string">'react'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'js/[name].[chunkhash].js'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: ExtractTextWebpack.extract(&#123;</span><br><span class="line">          fallback: <span class="string">'style-loader'</span>,</span><br><span class="line">          use: <span class="string">'css-loader'</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> ExtractTextWebpack(&#123;</span><br><span class="line">      filename: <span class="string">'css/[name].[hash].css'</span></span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> CleanWebpack(path.resolve(__dirname, <span class="string">'dist'</span>)),</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">'react'</span>,</span><br><span class="line">      minChunks: <span class="literal">Infinity</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> generatePage = <span class="function"><span class="keyword">function</span> (<span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                                 title = <span class="string">''</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 entry = <span class="string">''</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 template = <span class="string">'./src/index.html'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 name = <span class="string">''</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 chunks = []</span></span></span><br><span class="line"><span class="function"><span class="params">                               &#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    entry,</span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">        chunks,</span><br><span class="line">        template,</span><br><span class="line">        title,</span><br><span class="line">        filename: name + <span class="string">'.html'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pages = [</span><br><span class="line">  generatePage(&#123;</span><br><span class="line">    title: <span class="string">'page A'</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">      a: <span class="string">'./src/pages/a'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    name: <span class="string">'a'</span>,</span><br><span class="line">    chunks: [<span class="string">'react'</span>, <span class="string">'a'</span>]</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  generatePage(&#123;</span><br><span class="line">    title: <span class="string">'page B'</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">      b: <span class="string">'./src/pages/b'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    name: <span class="string">'b'</span>,</span><br><span class="line">    chunks: [<span class="string">'react'</span>, <span class="string">'b'</span>]</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  generatePage(&#123;</span><br><span class="line">    title: <span class="string">'page C'</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">      c: <span class="string">'./src/pages/c'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    name: <span class="string">'c'</span>,</span><br><span class="line">    chunks: [<span class="string">'react'</span>, <span class="string">'c'</span>]</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多页面单配置</span></span><br><span class="line"><span class="built_in">module</span>.exports = merge([baseConfig].concat(pages))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一篇博客总结了&lt;code&gt;webpack&lt;/code&gt;的基本配置, 处理js, css, 代码分割, 懒加载, tree-shaking等方法, 这篇博客继续总结资源处理, 第三方js库处理, html相关, devServer相关等知识.&lt;/p&gt;
&lt;h2 id=&quot;图片处
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正反馈系列: Webpack (一)</title>
    <link href="http://yoursite.com/2018/03/07/webpack01/"/>
    <id>http://yoursite.com/2018/03/07/webpack01/</id>
    <published>2018-03-07T14:14:28.000Z</published>
    <updated>2018-03-20T08:59:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>看了Webpack官方文档, 力求有些产出, 此篇文章将学习所得知识总结记录, 力求得到学习的正反馈</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="全局npm安装路径"><a href="#全局npm安装路径" class="headerlink" title="全局npm安装路径"></a>全局npm安装路径</h3><p><code>/usr/local/lib/node_modules</code></p><h3 id="nvm管理的Node中npm安装路径"><a href="#nvm管理的Node中npm安装路径" class="headerlink" title="nvm管理的Node中npm安装路径"></a>nvm管理的Node中npm安装路径</h3><p><code>/Users/choteewang/.nvm/versions/node/@Node使用版本号(v8.9.4)/lib/node_modules</code></p><h3 id="UMD-规范"><a href="#UMD-规范" class="headerlink" title="UMD 规范"></a>UMD 规范</h3><p>UMD规范: 先检查模块是否是AMD(requireJS), 再检查是否是commonJS(node), 若都不是, 输出一个全局变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">root, factory</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">    define([], factory);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> exports === <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="built_in">module</span>.exports = factory();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Browswer globals (root is window)</span></span><br><span class="line">    root .returnExports = factory();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Just return a value to define the module export.</span></span><br><span class="line">  <span class="comment">// This example returns an object, but the module </span></span><br><span class="line">  <span class="comment">// can return a function as the exported value.</span></span><br><span class="line">  <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="webpack-cli-命令"><a href="#webpack-cli-命令" class="headerlink" title="webpack cli 命令"></a>webpack cli 命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 显示进度, 带颜色, 显示详细信息</span><br><span class="line">webpack --progress --color --display-reasons</span><br></pre></td></tr></table></figure><h3 id="package-json中的browserslist字段"><a href="#package-json中的browserslist字段" class="headerlink" title="package.json中的browserslist字段"></a>package.json中的browserslist字段</h3><p>在package.json中定义的brwoserslist后, 所有webpack配置中需要兼容浏览器的polyfill规则都会以此字段为标准进行垫片</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">"browserslist": [</span><br><span class="line">  "&gt;= 1%",</span><br><span class="line">  <span class="string">"last 2 versions"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="chunk-Bundle-Module-分别是什么"><a href="#chunk-Bundle-Module-分别是什么" class="headerlink" title="chunk, Bundle, Module 分别是什么?"></a>chunk, Bundle, Module 分别是什么?</h3><ul><li><code>Chunk</code> 是指webpack由代码分割出来的代码块, 出现在webpack打包的过程中, 最终被打进bundle里</li><li><code>bundle</code> 是webpack打包出的文件</li><li><code>module</code> 是开发中的单个模块, import和require进来的模块</li></ul><h2 id="编译ES6"><a href="#编译ES6" class="headerlink" title="编译ES6"></a>编译ES6</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-loader babel-core babel-preset-env --save-dev</span><br></pre></td></tr></table></figure><h3 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./app.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].[hash:8].js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="string">'/node_modules/'</span>,</span><br><span class="line">        use: <span class="string">'babel-loader'</span></span><br><span class="line">        <span class="comment">// 若在.babelrc中已经配置了, 下面内容不用配置i</span></span><br><span class="line">        options: &#123;</span><br><span class="line">          preset: [<span class="string">'env'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="安装Babel-loader"><a href="#安装Babel-loader" class="headerlink" title="安装Babel-loader"></a>安装Babel-loader</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 最新webpack</span><br><span class="line">npm install @babel/preset-env --save-dev</span><br><span class="line">// 普通webpack</span><br><span class="line">npm install babel-preset-env --save-dev</span><br><span class="line">// 使用见下面.babelrc节</span><br></pre></td></tr></table></figure><h3 id="Babel-Polyfill-与-Babel-Runtime-Transform-区别"><a href="#Babel-Polyfill-与-Babel-Runtime-Transform-区别" class="headerlink" title="Babel Polyfill 与 Babel Runtime Transform 区别"></a>Babel Polyfill 与 Babel Runtime Transform 区别</h3><p><code>Babel Polyfill</code>是全局垫片, 会引入全局污染, 为开发应用(比如开发一个网站)准备</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-polyfill --save</span><br><span class="line">// 在整个应用入口处</span><br><span class="line">import <span class="string">'babel-polyfill'</span></span><br></pre></td></tr></table></figure><p>相对的, <code>Babel-Runtime Transform</code>是局部垫片, 为开发框架(比如开发一个组件库等需要别人引用的代码)准备, 不会引入全局污染</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 对应上面babelloader的安装版本, 安装命令略有不同</span><br><span class="line">npm install @babel/runtime --save</span><br><span class="line">npm install @babel/plugin-transform-runtime --save-dev</span><br><span class="line"></span><br><span class="line">npm install babel-plugin-transform-runtime --save-dev</span><br><span class="line">npm install babel-runtime --save</span><br><span class="line">// 配置需在.babelrc中配置</span><br></pre></td></tr></table></figure><h3 id="babelrc"><a href="#babelrc" class="headerlink" title=".babelrc"></a>.babelrc</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"@babel/preset-env"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        // targets属性可以指定构建目标是browsers或node之类</span><br><span class="line">        "targets": &#123;</span><br><span class="line">          "browsers": [</span><br><span class="line">            <span class="string">"last 2 versions"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  "plugins": ["@babel/transform-runtime"]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提取公共代码-CommonsChunkPlugin"><a href="#提取公共代码-CommonsChunkPlugin" class="headerlink" title="提取公共代码 CommonsChunkPlugin"></a>提取公共代码 CommonsChunkPlugin</h2><h3 id="目的和方法"><a href="#目的和方法" class="headerlink" title="目的和方法"></a>目的和方法</h3><p>减少代码冗余, 提高加载速度, 减少重复代码的下载, 增高代码复用率</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(options)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="string">'pageA'</span>: <span class="string">'./src/pageA'</span>,</span><br><span class="line">    <span class="string">'pageB'</span>: <span class="string">'./src/pageB'</span>,</span><br><span class="line">    <span class="string">'vendor'</span>: [<span class="string">'lodash'</span>, <span class="string">'jquery'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    chunkFilename: <span class="string">'[name].chunk.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 提取公共代码</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// 通过指定 entry 配置中未用到的名称'manifest',将 webpack 样板(boilerplate)和 manifest 提取出来</span></span><br><span class="line">    <span class="comment">// 提取公共代码只有在多entry时才有效</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      names: [<span class="string">'vendor'</span>, <span class="string">'manifest'</span>],</span><br><span class="line">      <span class="comment">// 在传入  公共chunk(commons chunk) 之前所需要包含的最少数量的 chunks 。</span></span><br><span class="line">      <span class="comment">// 数量必须大于等于2，或者少于等于 chunks的数量</span></span><br><span class="line">      <span class="comment">// 传入 `Infinity` 会马上生成 公共chunk，但里面没有模块。</span></span><br><span class="line">      <span class="comment">// (随着 entry chunk 越来越多，</span></span><br><span class="line">      <span class="comment">// 这个配置保证没其它的模块会打包进 vendor chunk)</span></span><br><span class="line">      <span class="comment">// 你可以传入一个 `function` ，以添加定制的逻辑（默认是 chunk 的数量）</span></span><br><span class="line">      minChunks: <span class="literal">Infinity</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码分割-和-懒加载"><a href="#代码分割-和-懒加载" class="headerlink" title="代码分割 和 懒加载"></a>代码分割 和 懒加载</h2><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>分离业务代码和第三方依赖, 分离业务代码和业务公共代码和第三方依赖, 分离首次加载和访问后加载的代码</p><h3 id="webpack-config-js-1"><a href="#webpack-config-js-1" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="string">'pageA'</span>: <span class="string">'./src/pageA'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    publicPath: <span class="string">'./dist/'</span>,</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    chunkFilename: <span class="string">'[name].chunk.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法1-Dynamic-Import-Magic-Comment"><a href="#方法1-Dynamic-Import-Magic-Comment" class="headerlink" title="方法1: Dynamic Import, Magic Comment"></a>方法1: Dynamic Import, Magic Comment</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> page = <span class="string">'subpageA'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (page === <span class="string">'subpageA'</span>) &#123;</span><br><span class="line">  <span class="comment">// magicComment的值决定了打包出的bundle的name</span></span><br><span class="line">  <span class="keyword">import</span>(<span class="comment">/* webpackChunkName:'subpageA' */</span><span class="string">'./subPageA'</span>)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">subPageA</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(subPageA)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (page === <span class="string">'subPageB'</span>) &#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="comment">/* webpackChunkName:'subpageB' */</span><span class="string">'./subPageB'</span>)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">subPageB</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(subPageB)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'pageA'</span></span><br></pre></td></tr></table></figure><h3 id="方法2-require-ensure-require-include"><a href="#方法2-require-ensure-require-include" class="headerlink" title="方法2: require.ensure(), require.include()"></a>方法2: require.ensure(), require.include()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pageA.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用 require.include 将 subPageA 与 subPageB 都依赖的moduleA引入</span></span><br><span class="line"><span class="comment">// moduleA的代码不会再在subPageA与subPageB中各打包一份,而会打包在pageA的代码中</span></span><br><span class="line"><span class="comment">// 这里不用commonChunkPlugin的原因是webpack配置为单entry,其不起作用</span></span><br><span class="line"><span class="built_in">require</span>.include(<span class="string">'./moduleA'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> page = <span class="string">'subPageA'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (page === <span class="string">'subPageA'</span>) &#123;</span><br><span class="line">  <span class="comment">// 实现懒加载的require.ensure方法</span></span><br><span class="line">  <span class="built_in">require</span>.ensure([<span class="comment">/* 这里是依赖项数组, 本来可以写'./moduleA' */</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> subPageA = <span class="built_in">require</span>(<span class="string">'./subPageA'</span>)</span><br><span class="line">  &#125;, <span class="string">'subPageA'</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (page === <span class="string">'subPageB'</span>) &#123;</span><br><span class="line">  <span class="built_in">require</span>.ensure([<span class="comment">/* 这里是依赖项数组, 本来可以写'./moduleA' */</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> subPageB = <span class="built_in">require</span>(<span class="string">'./subPageB'</span>)</span><br><span class="line">  &#125;, <span class="string">'subPageB'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>.ensure([], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>)</span><br><span class="line">  _.join([<span class="string">'1'</span>, <span class="string">'2'</span>], <span class="string">'3'</span>)</span><br><span class="line">&#125;, <span class="string">'vendor'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'pageA'</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/03/07/5a9ff39de8c6b.jpg" alt=""></p><h3 id="提取多entry中的共同异步模块"><a href="#提取多entry中的共同异步模块" class="headerlink" title="提取多entry中的共同异步模块"></a>提取多entry中的共同异步模块</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="string">'pageA'</span>: <span class="string">'./src/pageA'</span>,</span><br><span class="line">    <span class="string">'pageB'</span>: <span class="string">'./src/pageB'</span>,</span><br><span class="line">    <span class="string">'vendor'</span>: [<span class="string">'lodash'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    publicPath: <span class="string">'./dist/'</span>,</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    chunkFilename: <span class="string">'[name].chunk.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// 提取异步模块，如果好几个模块是异步加载的</span></span><br><span class="line">    <span class="comment">// 就提取这些异步加载的模块之间的公共代码</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      <span class="comment">// 异步模块名称</span></span><br><span class="line">      <span class="keyword">async</span>: <span class="string">'async-common'</span>,</span><br><span class="line">      <span class="comment">// 在子代subPageA与subPageB中找</span></span><br><span class="line">      children: <span class="literal">true</span>,</span><br><span class="line">      minChunks: <span class="number">2</span></span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单独打包 vendor 和 webpack runtime(manifest)</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      names: [<span class="string">'vendor'</span>, <span class="string">'manifest'</span>],</span><br><span class="line">      minChunks: <span class="literal">Infinity</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pageA.js/pageB.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步模块subPageA与subPageB都依赖于./moduleA, moduleA会被打入async-common中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> page = <span class="string">'subpageA/B'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (page === <span class="string">'subpageA'</span>) &#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="comment">/* webpackChunkName:'subpageA' */</span><span class="string">'./subPageA'</span>)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">subPageA</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(subPageA)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (page === <span class="string">'subPageB'</span>) &#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="comment">/* webpackChunkName:'subpageB' */</span><span class="string">'./subPageB'</span>)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">subPageB</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(subPageB)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'pageA/B'</span></span><br></pre></td></tr></table></figure><h2 id="处理-CSS"><a href="#处理-CSS" class="headerlink" title="处理 CSS"></a>处理 CSS</h2><h3 id="行为"><a href="#行为" class="headerlink" title="行为"></a>行为</h3><ul><li><code>style-loader</code> 在html中创建style标签</li><li><code>css-loader</code> 使js中可以import css, 压缩css</li><li><code>css-loader/url</code> 用file-loader替换掉css-loader, 可以创建link标签引入一个构建的css文件, 由于会生成多个link标签引起多次http请求, 不推荐</li><li><code>css-loader/useable</code> 可以将import出的css赋值给一个变量, 这个变量有<code>use</code>与<code>unuse</code>方法, 控制css的插入与不插入</li></ul><h3 id="配置Sass-less-CSS-Modules"><a href="#配置Sass-less-CSS-Modules" class="headerlink" title="配置Sass, less, CSS-Modules"></a>配置Sass, less, CSS-Modules</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install less-loader less --save-dev</span><br><span class="line">npm install sass-loader node-sass --save-dev</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/app.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    publicPath: <span class="string">'./dist/'</span>,</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    <span class="comment">// 动态打包文件名输出规则</span></span><br><span class="line">    chunkFilename: <span class="string">'[name].bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'style-loader'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">// 后面的loader先use</span></span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'css-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              <span class="comment">// 开启css压缩</span></span><br><span class="line">              minimize: <span class="literal">true</span>,</span><br><span class="line">              <span class="comment">// CSS Module</span></span><br><span class="line">              modules: <span class="literal">true</span>,</span><br><span class="line">              <span class="comment">// CSS module 打包出来的class名规则</span></span><br><span class="line">              <span class="comment">// local代表类名</span></span><br><span class="line">              localIdentName: <span class="string">'[path][name]_[local]_[hash:base64:5]'</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'less-loader'</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="提取样式文件-ExtractTextWebpackPlugin"><a href="#提取样式文件-ExtractTextWebpackPlugin" class="headerlink" title="提取样式文件, ExtractTextWebpackPlugin"></a>提取样式文件, ExtractTextWebpackPlugin</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/app.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    publicPath: <span class="string">'./dist/'</span>,</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    <span class="comment">// 动态打包文件名输出规则</span></span><br><span class="line">    chunkFilename: <span class="string">'[name].bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: ExtractTextWebpackPlugin.extract(&#123;</span><br><span class="line">          <span class="comment">// fallback定义没有被提取的css要如何处理</span></span><br><span class="line">          fallback: &#123;</span><br><span class="line">            loader: <span class="string">'style-loader'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          use: [</span><br><span class="line">            &#123;</span><br><span class="line">              loader: <span class="string">'css-loader'</span>,</span><br><span class="line">              options: &#123;</span><br><span class="line">                <span class="comment">// CSS Module</span></span><br><span class="line">                modules: <span class="literal">true</span>,</span><br><span class="line">                <span class="comment">// CSS module 打包出来的class名规则</span></span><br><span class="line">                <span class="comment">// local代表类名</span></span><br><span class="line">                localIdentName: <span class="string">'[path][name]_[local]_[hash:base64:5]'</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              loader: <span class="string">'less-loader'</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// 提取 css 到指定的文件</span></span><br><span class="line">    <span class="keyword">new</span> ExtractTextWebpackPlugin(&#123;</span><br><span class="line">      <span class="comment">// 指定文件名</span></span><br><span class="line">      filename: <span class="string">'[name].min.css'</span>,</span><br><span class="line">      <span class="comment">// 动态加载的样式不放在提取出的文件中(放在js模块代码中,按照上面的fallback属性在style标签中输出)</span></span><br><span class="line">      allChunks: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PostCss"><a href="#PostCss" class="headerlink" title="PostCss"></a>PostCss</h3><p><strong>A tool for transforming CSS with JavaScript</strong></p><ul><li><code>autoprefixer</code> 加前缀</li><li><code>CSS-nano</code> css压缩</li><li><code>CSS-next</code> 使用未来的css语法, CSS变量, 自定义选择器, 动态计算</li><li><code>postcss-import</code></li><li><code>postcss-url</code></li><li><code>postcss-assets</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install postcss postcss-loader autofrefixer cssnano postcss-cssnext --save-dev</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// postcss-loader插入位置在less-loader与css-loader之间</span></span><br><span class="line">  loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    <span class="comment">// 表明下面plugins属性引入的插件是给postcss使用的</span></span><br><span class="line">    ident: <span class="string">'postcss'</span>,</span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="comment">// 自动加浏览器前缀</span></span><br><span class="line">      <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)(),</span><br><span class="line">      <span class="comment">// 使用未来的css</span></span><br><span class="line">      <span class="comment">// require('postcss-cssnext')()</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="Tree-Shaking-去除冗余代码"><a href="#Tree-Shaking-去除冗余代码" class="headerlink" title="Tree Shaking (去除冗余代码)"></a>Tree Shaking (去除冗余代码)</h2><h3 id="场景-1"><a href="#场景-1" class="headerlink" title="场景"></a>场景</h3><ul><li>常规优化</li><li>引入第三方库的某一个功能, 只用这一个功能, 其他代码都是冗余的</li></ul><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ul><li><code>js-tree-shaking</code> webpack.optimize.uglifyJS</li><li><code>css-tree-shaking</code> Purifycss-webpack</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// glob-all 加载多路径工具</span><br><span class="line">npm install purifycss-webpack glob-all --save-dev</span><br></pre></td></tr></table></figure><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">var</span> Webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">var</span> PurifyCSS = <span class="built_in">require</span>(<span class="string">'purifycss-webpack'</span>)</span><br><span class="line"><span class="comment">// glob-all 加载多路径工具</span></span><br><span class="line"><span class="keyword">var</span> glob = <span class="built_in">require</span>(<span class="string">'glob-all'</span>)</span><br><span class="line"><span class="keyword">var</span> ExtractTextWebpackPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/app.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    publicPath: <span class="string">'./dist/'</span>,</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    chunkFilename: <span class="string">'[name].bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: ExtractTextWebpackPlugin.extract(&#123;</span><br><span class="line">          fallback: &#123;</span><br><span class="line">            loader: <span class="string">'style-loader'</span>,</span><br><span class="line">            options: &#123;<span class="attr">singleton</span>: <span class="literal">true</span>&#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          use: [</span><br><span class="line">            &#123;</span><br><span class="line">              loader: <span class="string">'css-loader'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              loader: <span class="string">'less-loader'</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> ExtractTextWebpackPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'[name].min.css'</span>,</span><br><span class="line">      allChunks: <span class="literal">false</span></span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CSS Tree shaking</span></span><br><span class="line">    <span class="comment">// 必须在ExtractTextWebpackPlugin的后面</span></span><br><span class="line">    <span class="comment">// 无法与CSS-Modules一起使用</span></span><br><span class="line">    <span class="keyword">new</span> PurifyCSS(&#123;</span><br><span class="line">      <span class="comment">// glob-all 加载多路径工具</span></span><br><span class="line">      paths: glob.sync([</span><br><span class="line">        path.join(__dirname, <span class="string">'./*.html'</span>),</span><br><span class="line">        path.join(__dirname, <span class="string">'./src/*.js'</span>)</span><br><span class="line">      ])</span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// JS Tree shaking</span></span><br><span class="line">    <span class="keyword">new</span> Webpack.optimize.UglifyJsPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;看了Webpack官方文档, 力求有些产出, 此篇文章将学习所得知识总结记录, 力求得到学习的正反馈&lt;/p&gt;
&lt;h2 id=&quot;前置知识&quot;&gt;&lt;a href=&quot;#前置知识&quot; class=&quot;headerlink&quot; title=&quot;前置知识&quot;&gt;&lt;/a&gt;前置知识&lt;/h2&gt;&lt;h3 id=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue 2.5+ 外卖 webapp</title>
    <link href="http://yoursite.com/2018/01/27/vue2-5-%E5%A4%96%E5%8D%96app/"/>
    <id>http://yoursite.com/2018/01/27/vue2-5-外卖app/</id>
    <published>2018-01-27T09:16:18.000Z</published>
    <updated>2018-01-31T09:53:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue-2-5-外卖-webapp"><a href="#vue-2-5-外卖-webapp" class="headerlink" title="vue 2.5+ 外卖 webapp"></a>vue 2.5+ 外卖 webapp</h1><h3 id="presentation"><a href="#presentation" class="headerlink" title="presentation"></a>presentation</h3><p><img src="https://i.loli.net/2018/01/27/5a6c4030d5043.gif" alt="pre1"><br><img src="https://i.loli.net/2018/01/27/5a6c42ac6c4bb.gif" alt="pre2"><br><img src="https://i.loli.net/2018/01/27/5a6c42a8e08a0.gif" alt="3"><br><img src="https://i.loli.net/2018/01/27/5a6c42a88b9af.gif" alt="4"><br><img src="https://i.loli.net/2018/01/27/5a6c42a864868.gif" alt="5"></p><h3 id="tech"><a href="#tech" class="headerlink" title="tech"></a>tech</h3><ul><li>Vue 2.5+</li><li>Vue-router 3.0+</li><li>Full-ES6-Syntax-Cover</li><li>stylus css预处理器</li><li>axios</li><li>better-scroll</li><li>eslint</li><li>移动端flex布局, inline-block布局, css-sticky-footer</li><li>media query 实现移动端1px边框和背景图片切换</li></ul><h2 id="High-Light"><a href="#High-Light" class="headerlink" title="High Light"></a>High Light</h2><h3 id="两侧同步滚动-算法实现"><a href="#两侧同步滚动-算法实现" class="headerlink" title="两侧同步滚动,算法实现"></a>两侧同步滚动,算法实现</h3><h4 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h4><p><img src="https://i.loli.net/2018/01/27/5a6c42ac6c4bb.gif" alt="pre2"></p><h4 id="goods-vue中的code"><a href="#goods-vue中的code" class="headerlink" title="goods.vue中的code"></a>goods.vue中的code</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu-wrapper"</span> <span class="attr">ref</span>=<span class="string">"menuWrapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in goods"</span> <span class="attr">:key</span>=<span class="string">"index"</span> <span class="attr">class</span>=<span class="string">"menu-item"</span> <span class="attr">:class</span>=<span class="string">"&#123; current : currentIndex === index &#125;"</span> @<span class="attr">click</span>=<span class="string">"selectMenu(index,$event)"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"foods-wrapper"</span> <span class="attr">ref</span>=<span class="string">"foodsWrapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in goods"</span> <span class="attr">:key</span>=<span class="string">"index"</span> <span class="attr">class</span>=<span class="string">"food-list"</span> <span class="attr">ref</span>=<span class="string">"foodList"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 存放所有dom高度的数组</span></span><br><span class="line">    listHeight: [],</span><br><span class="line">    <span class="comment">// 存放</span></span><br><span class="line">    scrollY: <span class="number">0</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br><span class="line">created() &#123;</span><br><span class="line">  axios.get(<span class="string">'/api/goods'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.data.errno === ERR_OK) &#123;</span><br><span class="line">      <span class="keyword">this</span>.goods = res.data.data;</span><br><span class="line">      <span class="comment">// 先让this.goods更新template中的dom后,iscroll才能准确计算出dom高度,dom的更新在vue中是异步的,所以在nextTick异步更新后再用iScroll算高度</span></span><br><span class="line">      <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>._initScroll();</span><br><span class="line">        <span class="keyword">this</span>._calculateHeight();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  _initScroll() &#123;</span><br><span class="line">    <span class="comment">// 用BScroll初始化左侧栏</span></span><br><span class="line">    <span class="keyword">this</span>.menuScroll = <span class="keyword">new</span> BScroll(<span class="keyword">this</span>.$refs.menuWrapper, &#123;</span><br><span class="line">      click: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 用BScroll初始化右侧栏</span></span><br><span class="line">    <span class="keyword">this</span>.foodScroll = <span class="keyword">new</span> BScroll(<span class="keyword">this</span>.$refs.foodsWrapper, &#123;</span><br><span class="line">      click: <span class="literal">true</span>,</span><br><span class="line">      probeType: <span class="number">3</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 右侧栏滚动时实时返回y值</span></span><br><span class="line">    <span class="keyword">this</span>.foodScroll.on(<span class="string">'scroll'</span>, pos =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.scrollY = <span class="built_in">Math</span>.abs(<span class="built_in">Math</span>.round(pos.y));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 将 ref为foodList li标签 累加高度 组成数组</span></span><br><span class="line">  _calculateHeight() &#123;</span><br><span class="line">    <span class="keyword">const</span> listHeight = <span class="keyword">this</span>.listHeight;</span><br><span class="line">    <span class="keyword">const</span> foodList = <span class="keyword">this</span>.$refs.foodList;</span><br><span class="line">    <span class="keyword">var</span> height = <span class="number">0</span>;</span><br><span class="line">    listHeight.push(height);</span><br><span class="line">    foodList.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">      height += v.clientHeight;</span><br><span class="line">      listHeight.push(height);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 左侧li点击时传入index,滚动到index对应的右侧menu</span></span><br><span class="line">  selectMenu(index) &#123;</span><br><span class="line">    <span class="keyword">const</span> el = <span class="keyword">this</span>.$refs.foodList[index];</span><br><span class="line">    <span class="comment">// BScorll库方法Bscroll.ScrollToElement(el,time)</span></span><br><span class="line">    <span class="keyword">this</span>.foodScroll.scrollToElement(el, <span class="number">300</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">    <span class="comment">// 根据 外层容器foodsWrapper的scrollTop值 所处于 listHeight数组 的区间,来返回当前左侧栏被选中的index</span></span><br><span class="line">    currentIndex() &#123;</span><br><span class="line">      <span class="keyword">let</span> scrollY = <span class="keyword">this</span>.scrollY;</span><br><span class="line">      <span class="keyword">const</span> listHeight = <span class="keyword">this</span>.listHeight;</span><br><span class="line">      <span class="keyword">const</span> length = listHeight.length;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> top = listHeight[i];</span><br><span class="line">        <span class="keyword">const</span> bottom = listHeight[i + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (!bottom || (scrollY &gt;= top &amp;&amp; scrollY &lt; bottom)) &#123;</span><br><span class="line">          <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h3 id="购物车-数据流实现"><a href="#购物车-数据流实现" class="headerlink" title="购物车 - 数据流实现"></a>购物车 - 数据流实现</h3><p><img src="https://i.loli.net/2018/01/27/5a6c34653fb80.png" alt="vue-sell购物车"></p><h3 id="购物小球-数据结构实现"><a href="#购物小球-数据结构实现" class="headerlink" title="购物小球 - 数据结构实现"></a>购物小球 - 数据结构实现</h3><h4 id="效果演示-1"><a href="#效果演示-1" class="headerlink" title="效果演示"></a>效果演示</h4><p><img src="https://i.loli.net/2018/01/27/5a6c4030d5043.gif" alt="pre1"></p><h4 id="事件派发数据流"><a href="#事件派发数据流" class="headerlink" title="事件派发数据流"></a>事件派发数据流</h4><p><img src="https://i.loli.net/2018/01/27/5a6c3467ed132.png" alt="vue-sell小球缓落动画"></p><h4 id="shopcart中的数据结构"><a href="#shopcart中的数据结构" class="headerlink" title="shopcart中的数据结构"></a>shopcart中的数据结构</h4><p>shopcart中采用一个<code>balls</code>数组用来沟通<code>cartcontrol.vue</code>传递的<code>event.target</code>的dom元素与动画小球dom元素的联系</p><p><img src="https://i.loli.net/2018/01/27/5a6c34694efe5.jpg" alt=""></p><h4 id="shopcart-vue中的code"><a href="#shopcart-vue中的code" class="headerlink" title="shopcart.vue中的code"></a>shopcart.vue中的code</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ball-container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"drop"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">"(ball,index) in balls"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">:key</span>=<span class="string">"index"</span> </span></span><br><span class="line"><span class="tag">    @<span class="attr">before-enter</span>=<span class="string">"beforeDrop"</span> </span></span><br><span class="line"><span class="tag">    @<span class="attr">enter</span>=<span class="string">"dropping"</span> </span></span><br><span class="line"><span class="tag">    @<span class="attr">after-enter</span>=<span class="string">"endDropping"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ball-outer"</span> <span class="attr">v-show</span>=<span class="string">"ball.show"</span> <span class="attr">:num</span>=<span class="string">"ball.num"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ball-inner"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      balls: [</span><br><span class="line">        &#123;</span><br><span class="line">          num: <span class="number">1</span>,</span><br><span class="line">          show: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          num: <span class="number">2</span>,</span><br><span class="line">          show: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          num: <span class="number">3</span>,</span><br><span class="line">          show: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          num: <span class="number">4</span>,</span><br><span class="line">          show: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          num: <span class="number">5</span>,</span><br><span class="line">          show: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    对goods页面调用的$refs.shopcart.drop(el)做反应,开始小球掉落</span></span><br><span class="line"><span class="comment">    找到this.balls中第一个ball.show == false的项</span></span><br><span class="line"><span class="comment">    将此项开始的show置为true,el属性设置为传入的el-dom</span></span><br><span class="line"><span class="comment">    开始掉落此球</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    drop(el) &#123;</span><br><span class="line">      <span class="keyword">let</span> ballSelected = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">const</span> truth = <span class="keyword">this</span>.balls.some(<span class="function"><span class="keyword">function</span>(<span class="params">ball</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ball.show === <span class="literal">false</span>) &#123;</span><br><span class="line">          ballSelected = ball;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (truth) &#123;</span><br><span class="line">        ballSelected.el = el;</span><br><span class="line">        ballSelected.show = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeDrop(el) &#123;</span><br><span class="line">      <span class="comment">// Start通过绑定自定义属性拿到event.target,改进了原版算法</span></span><br><span class="line">      <span class="keyword">const</span> elNum = <span class="built_in">parseInt</span>(el.getAttribute(<span class="string">'num'</span>));</span><br><span class="line">      <span class="keyword">let</span> ballEl = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">this</span>.balls.some(<span class="function"><span class="keyword">function</span>(<span class="params">ball</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ball.num === elNum) &#123;</span><br><span class="line">          ballEl = ball.el;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// End通过绑定自定义属性拿到event.target,改进了原版算法</span></span><br><span class="line">      <span class="keyword">let</span> rect = ballEl.getBoundingClientRect();</span><br><span class="line">      <span class="keyword">let</span> x = rect.left - <span class="number">22</span>;</span><br><span class="line">      <span class="keyword">let</span> y = -(<span class="built_in">window</span>.innerHeight - rect.top - <span class="number">42</span>);</span><br><span class="line">      el.style.display = <span class="string">'block'</span>;</span><br><span class="line">      el.style.webkitTransform = <span class="string">`translate3d(0,<span class="subst">$&#123;y&#125;</span>px,0)`</span>;</span><br><span class="line">      el.style.transform = <span class="string">`translate3d(0,<span class="subst">$&#123;y&#125;</span>px,0)`</span>;</span><br><span class="line">      <span class="keyword">let</span> inner = el.firstElementChild;</span><br><span class="line">      inner.style.webkitTransform = <span class="string">`translate3d(<span class="subst">$&#123;x&#125;</span>px,0,0)`</span>;</span><br><span class="line">      inner.style.transform = <span class="string">`translate3d(<span class="subst">$&#123;x&#125;</span>px,0,0)`</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    dropping(el, done) &#123;</span><br><span class="line">      <span class="comment">// 强制浏览器重绘</span></span><br><span class="line">      <span class="comment">/* eslint-disable no-unused-vars */</span></span><br><span class="line">      <span class="keyword">let</span> rf = el.offsetHeight;</span><br><span class="line">      <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        el.style.webkitTransform = <span class="string">'translate3d(0,0,0)'</span>;</span><br><span class="line">        el.style.transform = <span class="string">'translate3d(0,0,0)'</span>;</span><br><span class="line">        <span class="keyword">let</span> inner = el.firstElementChild;</span><br><span class="line">        inner.style.webkitTransform = <span class="string">'translate3d(0,0,0)'</span>;</span><br><span class="line">        inner.style.transform = <span class="string">'translate3d(0,0,0)'</span>;</span><br><span class="line">        el.addEventListener(<span class="string">'transitionend'</span>, done);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    endDropping(el) &#123;</span><br><span class="line">      <span class="comment">// Start通过绑定自定义属性拿到el,改进了原版算法</span></span><br><span class="line">      <span class="keyword">const</span> elNum = <span class="built_in">parseInt</span>(el.getAttribute(<span class="string">'num'</span>));</span><br><span class="line">      <span class="keyword">this</span>.balls.some(<span class="function"><span class="keyword">function</span>(<span class="params">ball</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ball.num === elNum) &#123;</span><br><span class="line">          ball.show = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      el.style.display = <span class="string">'none'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// End通过绑定自定义属性拿到el,改进了原版算法</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 外层负责纵向y轴位移</span></span><br><span class="line">.ball-container</span><br><span class="line">  .ball-outer</span><br><span class="line">    <span class="attribute">position</span> fixed</span><br><span class="line">    <span class="attribute">left</span> <span class="number">32px</span></span><br><span class="line">    <span class="attribute">bottom</span> <span class="number">32px</span></span><br><span class="line">    <span class="attribute">z-index</span> <span class="number">200</span></span><br><span class="line">    <span class="attribute">transition</span> all <span class="number">0.4s</span> cubic-bezier(<span class="number">0.17</span>, -<span class="number">0.34</span>, <span class="number">0.75</span>, <span class="number">0.46</span>)</span><br><span class="line">    <span class="comment">// 内层负责横向x轴位移</span></span><br><span class="line">    .ball-inner</span><br><span class="line">      <span class="attribute">width</span> <span class="number">16px</span></span><br><span class="line">      <span class="attribute">height</span> <span class="number">16px</span></span><br><span class="line">      <span class="attribute">border-radius</span> <span class="number">50%</span></span><br><span class="line">      <span class="attribute">background</span> rgb(<span class="number">0</span>, <span class="number">160</span>, <span class="number">220</span>)</span><br><span class="line">      <span class="attribute">transition</span> all <span class="number">0.4s</span></span><br></pre></td></tr></table></figure><h3 id="根据scroll时动态获取的y轴偏移值设置back按钮的位置和颜色"><a href="#根据scroll时动态获取的y轴偏移值设置back按钮的位置和颜色" class="headerlink" title="根据scroll时动态获取的y轴偏移值设置back按钮的位置和颜色"></a>根据scroll时动态获取的y轴偏移值设置back按钮的位置和颜色</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// food.vue</span></span><br><span class="line">show() &#123;</span><br><span class="line">  <span class="keyword">this</span>.showFlag = <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">// 每次打开food页面默认显示所有有评论的评价</span></span><br><span class="line">  <span class="keyword">this</span>.selectType = ALL;</span><br><span class="line">  <span class="keyword">this</span>.onlyContent = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 每次打开food页面初始化betterScroll</span></span><br><span class="line">  <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.scroll) &#123;</span><br><span class="line">      <span class="keyword">this</span>.scroll = <span class="keyword">new</span> BScroll(<span class="keyword">this</span>.$refs.foodWrapper, &#123;</span><br><span class="line">        click: <span class="literal">true</span>,</span><br><span class="line">        probeType: <span class="number">3</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.scroll.refresh();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 每次进入food页面时,先定义一次back元素位置</span></span><br><span class="line">    <span class="keyword">let</span> transform = <span class="built_in">window</span>.getComputedStyle(</span><br><span class="line">      <span class="keyword">this</span>.$refs.foodWrapper.firstElementChild,</span><br><span class="line">      <span class="literal">null</span></span><br><span class="line">    ).transform;</span><br><span class="line">    <span class="comment">//截取字符串,找到被滚动的.food-content元素的y偏移量</span></span><br><span class="line">    <span class="comment">//这个值相当于translateY的值</span></span><br><span class="line">    <span class="comment">//console.log(transform); // matrix(1, 0, 0, 1, 0, -55.7028)</span></span><br><span class="line">    <span class="keyword">if</span> (transform.indexOf(<span class="string">'-'</span>) === <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$refs.back.style.transform = <span class="string">`translate3d(0,0,0)`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      transform = transform.slice(transform.indexOf(<span class="string">'-'</span>) + <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">this</span>.$refs.back.style.transform = <span class="string">`translate3d(0,<span class="subst">$&#123;transform&#125;</span>px,0)`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 根据scroll时动态获取的y轴偏移值设置back按钮的位置和颜色</span></span><br><span class="line">    <span class="keyword">this</span>.scroll.on(<span class="string">'scroll'</span>, pos =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (pos.y &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> transform = <span class="built_in">window</span>.getComputedStyle(</span><br><span class="line">          <span class="keyword">this</span>.$refs.foodWrapper.firstElementChild,</span><br><span class="line">          <span class="literal">null</span></span><br><span class="line">        ).transform;</span><br><span class="line">        <span class="built_in">console</span>.log(transform); <span class="comment">//</span></span><br><span class="line">        <span class="keyword">this</span>.$refs.back.style.transform = <span class="string">`translate3d(0,<span class="subst">$&#123;-pos.y&#125;</span>px,0)`</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> style = <span class="keyword">this</span>.$refs.back.firstElementChild.style;</span><br><span class="line">      style.color = pos.y &lt; -<span class="built_in">window</span>.innerWidth + <span class="number">30</span> ? <span class="string">'#000'</span> : <span class="string">'#fff'</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="seller-vue页面的页面dom初始化"><a href="#seller-vue页面的页面dom初始化" class="headerlink" title="seller.vue页面的页面dom初始化"></a>seller.vue页面的页面dom初始化</h3><p>在<code>seller.vue</code>初始化BScroll中遇到的问题,页面必须拿到<code>seller</code>才能初始化dom</p><p><code>seller</code>是在app.vue中发ajax请求异步得到后通过<code>v-bind</code>传入<code>seller.vue</code>中的</p><p>在刷新页面时要使用<code>watch</code>监视传递的<code>seller</code>异步获取完成</p><p>在切换路由时<code>app.vue</code>不会进行ajax请求,但vue实例的生命周期会重新加载一次, 所以会在<code>created</code>或<code>mounted</code>里再写入初始化<code>BScroll</code>代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// seller.vue</span></span><br><span class="line">props: &#123;</span><br><span class="line">  seller: &#123;</span><br><span class="line">    type: <span class="built_in">Object</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">created() &#123;</span><br><span class="line">  <span class="keyword">this</span>.$nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 若刷新,触发顺序1</span></span><br><span class="line">    <span class="comment">// 在不刷新只切换路由时由于app.vue不再触发ajax请求只触发此步</span></span><br><span class="line">    <span class="comment">// console.log('created initScroll'); </span></span><br><span class="line">    <span class="keyword">this</span>._initScroll();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br><span class="line">watch: &#123;</span><br><span class="line">  seller: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 若刷新,触发顺序2,因为app.vue的ajax是异步请求</span></span><br><span class="line">    <span class="comment">//console.log('watch initScroll'); </span></span><br><span class="line">    <span class="keyword">this</span>._initScroll();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  _initScroll() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(); <span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.scroll) &#123;</span><br><span class="line">      <span class="keyword">this</span>.scroll = <span class="keyword">new</span> BScroll(<span class="keyword">this</span>.$refs.sellerWrapper, &#123;</span><br><span class="line">        click: <span class="literal">true</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.scroll.refresh();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="Tips-amp-Util"><a href="#Tips-amp-Util" class="headerlink" title="Tips &amp; Util"></a>Tips &amp; Util</h2><h3 id="视网膜屏1px边框实现"><a href="#视网膜屏1px边框实现" class="headerlink" title="视网膜屏1px边框实现"></a>视网膜屏1px边框实现</h3><p>前置知识:<a href="http://www.zhangxinxu.com/wordpress/2012/08/window-devicepixelratio/" target="_blank" rel="noopener">设备像素比devicePixelRatio简单介绍</a></p><p>移动端的1px边框到了视网膜屏因为要乘以像素比,所以实际大小要几倍大于1px(比如iphone6的像素比是2,则2*1px=2px)</p><p>因此, 1px边框可以由<code>after伪类</code>加上,然后用<code>@media</code>根据不同的像素比查询来缩放<code>after伪类</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个mixin加给要添加伪类的父类</span></span><br><span class="line"><span class="function"><span class="title">border-1px</span><span class="params">(<span class="variable">$color</span>)</span></span></span><br><span class="line">   <span class="attribute">position</span>: relative</span><br><span class="line">   &amp;::after</span><br><span class="line">     <span class="attribute">position</span>: absolute</span><br><span class="line">     <span class="attribute">left</span>: <span class="number">0</span></span><br><span class="line">     <span class="attribute">bottom</span>: <span class="number">0</span></span><br><span class="line">     <span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line">     <span class="attribute">content</span>:<span class="string">''</span></span><br><span class="line">     <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="variable">$color</span></span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@media (min-device-pixel-ratio : <span class="number">1.5</span>),(-webkit-min-device-pixel-ratio : <span class="number">1.5</span>)</span><br><span class="line">  <span class="comment">/* 1.5*7 ~= 1 */</span></span><br><span class="line">  .<span class="attribute">border</span>-<span class="number">1px</span></span><br><span class="line">    &amp;::after</span><br><span class="line">      <span class="attribute">transform</span>: scaleY(<span class="number">0.7</span>)</span><br><span class="line">      -webkit-<span class="attribute">transform</span>: scaleY(<span class="number">0.7</span>)</span><br><span class="line"></span><br><span class="line">@media (min-device-pixel-ratio : <span class="number">2.0</span>),(-webkit-min-device-pixel-ratio : <span class="number">2.0</span>)</span><br><span class="line">  <span class="comment">/* 2.0*5 = 1 */</span></span><br><span class="line">  .<span class="attribute">border</span>-<span class="number">1px</span></span><br><span class="line">    &amp;::after</span><br><span class="line">      <span class="attribute">transform</span>: scaleY(<span class="number">0.5</span>)</span><br><span class="line">      -webkit-<span class="attribute">transform</span>: scaleY(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><h3 id="根据不同的设备像素比应用不同图片"><a href="#根据不同的设备像素比应用不同图片" class="headerlink" title="根据不同的设备像素比应用不同图片"></a>根据不同的设备像素比应用不同图片</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">bg-image</span><span class="params">(<span class="variable">$url</span>)</span></span></span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="variable">$url</span> + <span class="string">'@2x.png'</span>)</span><br><span class="line"></span><br><span class="line">  @media (-webkit-min-device-pixel-ratio: <span class="number">3</span>), (min-device-pixel-ratio: <span class="number">3</span>)</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="variable">$url</span> + <span class="string">'@3x.png'</span>)</span><br></pre></td></tr></table></figure><h3 id="多行文本的垂直居中"><a href="#多行文本的垂直居中" class="headerlink" title="多行文本的垂直居中"></a>多行文本的垂直居中</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.menu-wrapper</span><br><span class="line">    <span class="attribute">display</span> table</span><br><span class="line">    .text</span><br><span class="line">    <span class="attribute">display</span> table-cell</span><br><span class="line">    <span class="attribute">vertical-align</span> middle</span><br></pre></td></tr></table></figure><h3 id="背景模糊-iPhone独占"><a href="#背景模糊-iPhone独占" class="headerlink" title="背景模糊(iPhone独占)"></a>背景模糊(iPhone独占)</h3><p><code>backdrop-filter blur(10px)</code></p><h3 id="padding-margin-百分比实现高度自适应"><a href="#padding-margin-百分比实现高度自适应" class="headerlink" title="padding,margin 百分比实现高度自适应"></a>padding,margin 百分比实现高度自适应</h3><p>当margin/padding取形式为百分比的值时，无论是left/right，还是top/bottom，都是以父元素的width为参照物的</p><p>自适应设备宽度的方形图片</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.image-header</span><br><span class="line">  <span class="attribute">position</span> relative</span><br><span class="line">  <span class="attribute">width</span> <span class="number">100%</span></span><br><span class="line">  <span class="attribute">height</span> <span class="number">0</span></span><br><span class="line">  <span class="comment">// padding设置100%时按宽度计算</span></span><br><span class="line">  <span class="attribute">padding-top</span> <span class="number">100%</span></span><br><span class="line">  img</span><br><span class="line">    <span class="comment">// 图像设置position:absolute的原因是父元素height是0</span></span><br><span class="line">    <span class="attribute">position</span> absolute</span><br><span class="line">    <span class="attribute">top</span> <span class="number">0</span></span><br><span class="line">    <span class="attribute">left</span> <span class="number">0</span></span><br><span class="line">    <span class="attribute">width</span> <span class="number">100%</span></span><br><span class="line">    <span class="attribute">height</span> <span class="number">100%</span></span><br></pre></td></tr></table></figure><h3 id="inline-block布局代替float布局"><a href="#inline-block布局代替float布局" class="headerlink" title="inline-block布局代替float布局"></a>inline-block布局代替float布局</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.father</span><br><span class="line">    <span class="comment">// 父元素设置字体为0避免son1与son2的html代码换行造成的空格</span></span><br><span class="line">    <span class="attribute">font-size</span> <span class="number">0</span></span><br><span class="line">    .son1</span><br><span class="line">        <span class="attribute">display</span> inline-block</span><br><span class="line">        <span class="attribute">vertical-align</span> top</span><br><span class="line">        <span class="attribute">margin-right</span> <span class="number">8px</span></span><br><span class="line">    .son2</span><br><span class="line">        <span class="attribute">display</span> inline-block</span><br><span class="line">        <span class="attribute">vertical-align</span> top</span><br></pre></td></tr></table></figure><h3 id="css-sticky-footer"><a href="#css-sticky-footer" class="headerlink" title="css-sticky-footer"></a>css-sticky-footer</h3><p>永远固定在底端的footer,在内容高度不足时依然固定在底端</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"body"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.body</span><br><span class="line">    <span class="attribute">display</span> flex</span><br><span class="line">    <span class="attribute">min-height</span> <span class="number">100%</span></span><br><span class="line">    .<span class="attribute">content</span></span><br><span class="line">    <span class="attribute">flex</span> <span class="number">1</span></span><br><span class="line">    .footer</span><br><span class="line">    <span class="attribute">height</span> <span class="number">50px</span></span><br></pre></td></tr></table></figure><h3 id="格式化日期的工具方法"><a href="#格式化日期的工具方法" class="headerlink" title="格式化日期的工具方法"></a>格式化日期的工具方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">formatDate</span>(<span class="params">timestamp, formatType</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> str = formatType <span class="comment">// YYYY-MM-DD HH:mm</span></span><br><span class="line">  <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(timestamp)</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/(Y+)/</span>.test(str)) &#123;</span><br><span class="line">    str = str.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, date.getFullYear().toString().slice(<span class="number">4</span> - <span class="built_in">RegExp</span>.$<span class="number">1.</span>length))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> transObj = &#123;</span><br><span class="line">    <span class="string">'M+'</span>: date.getMonth() + <span class="number">1</span>,</span><br><span class="line">    <span class="string">'D+'</span>: date.getDate(),</span><br><span class="line">    <span class="string">'H+'</span>: date.getHours(),</span><br><span class="line">    <span class="string">'m+'</span>: date.getMinutes()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> transObj) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`(<span class="subst">$&#123;key&#125;</span>)`</span>).test(str)) &#123;</span><br><span class="line">      <span class="keyword">const</span> value = transObj[key].toString()</span><br><span class="line">      str = str.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, padLeftZero(value))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 补0函数,传入12-&gt;12,传入2-&gt;02</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">padLeftZero</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="string">'00'</span>+value).slice(value.length)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LocalStorage"><a href="#LocalStorage" class="headerlink" title="LocalStorage"></a>LocalStorage</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">saveToLocalStorage</span>(<span class="params">id, key, value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// __seller__可替换为其他命名空间名</span></span><br><span class="line">  <span class="keyword">let</span> seller = <span class="built_in">JSON</span>.parse(<span class="built_in">window</span>.localStorage.getItem(<span class="string">'__seller__'</span>))</span><br><span class="line">  <span class="keyword">if</span> (!seller) &#123;</span><br><span class="line">    seller = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!seller[id]) &#123;</span><br><span class="line">    seller[id] = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  seller[id][key] = value</span><br><span class="line">  <span class="built_in">window</span>.localStorage.setItem(<span class="string">'__seller__'</span>, <span class="built_in">JSON</span>.stringify(seller))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">readFromLocalStorage</span>(<span class="params">id, key, def</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// __seller__可替换为其他命名空间名</span></span><br><span class="line">  <span class="keyword">const</span> seller = <span class="built_in">JSON</span>.parse(<span class="built_in">window</span>.localStorage.getItem(<span class="string">'__seller__'</span>))</span><br><span class="line">  <span class="keyword">if</span> (!seller) &#123;</span><br><span class="line">    <span class="keyword">return</span> def</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!seller[id]) &#123;</span><br><span class="line">    <span class="keyword">return</span> def</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> seller[id][key] || def</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="queryString-to-Object"><a href="#queryString-to-Object" class="headerlink" title="queryString to Object"></a>queryString to Object</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">urlSerialize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> search = <span class="built_in">window</span>.location.search</span><br><span class="line">  <span class="comment">// ?id=123&amp;a=b</span></span><br><span class="line">  <span class="keyword">const</span> regExp = <span class="regexp">/[?&amp;][^?&amp;]+=[^?&amp;]+/g</span></span><br><span class="line">  <span class="keyword">const</span> matches = search.match(regExp)</span><br><span class="line">  <span class="comment">// ['?id=123','&amp;a=b']</span></span><br><span class="line">  <span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> (matches) &#123;</span><br><span class="line">    matches.forEach(<span class="function">(<span class="params">match</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> tempArr = match.slice(<span class="number">1</span>).split(<span class="string">'='</span>)</span><br><span class="line">      <span class="keyword">const</span> key = <span class="built_in">decodeURIComponent</span>(tempArr[<span class="number">0</span>])</span><br><span class="line">      <span class="keyword">const</span> value = <span class="built_in">decodeURIComponent</span>(tempArr[<span class="number">1</span>])</span><br><span class="line">      obj[key] = value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h3><p><a href="https://github.com/choteewang/vue-sell" target="_blank" rel="noopener">https://github.com/choteewang/vue-sell</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue-2-5-外卖-webapp&quot;&gt;&lt;a href=&quot;#vue-2-5-外卖-webapp&quot; class=&quot;headerlink&quot; title=&quot;vue 2.5+ 外卖 webapp&quot;&gt;&lt;/a&gt;vue 2.5+ 外卖 webapp&lt;/h1&gt;&lt;h3 id=&quot;pre
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>自定义事件的应用: 在全局拖放对象中添加自定义事件</title>
    <link href="http://yoursite.com/2018/01/04/%E5%B0%81%E8%A3%85%E6%8B%96%E6%94%BE%E5%AF%B9%E8%B1%A1-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/01/04/封装拖放对象-自定义事件/</id>
    <published>2018-01-04T02:24:17.000Z</published>
    <updated>2018-01-04T02:24:47.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="做什么"><a href="#做什么" class="headerlink" title="做什么"></a>做什么</h3><p>之前两篇博客讲述了观察者模式实现自定义事件的思维步骤, 但自定义事件还未真正用到实际DOM操作中, 我们的最终目的是真正使用<code>观察者模式</code>与<code>DOM操作</code>融合, 实现一个自定义事件.</p><p>这篇博客先来封装一个全局拖放对象, 作为自定义事件的场景, 然后再在这个场景下添加自定义事件</p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><ul><li><a href="https://choteewang.github.io/2017/12/20/17-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3javaScript%E7%BB%A7%E6%89%BF/" target="_blank" rel="noopener">深入理解javaScript继承机制</a></li><li><a href="https://choteewang.github.io/2017/12/23/javascript-%E4%B8%8E-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">javascript 与 “发布/订阅(观察者)模式”</a></li><li><a href="https://choteewang.github.io/2018/01/04/javascript%E4%B8%8E%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F2/" target="_blank" rel="noopener">javascript 与 ‘发布订阅(观察者)模式’ 2: 自定义事件</a></li></ul><h3 id="鼠标拖尾"><a href="#鼠标拖尾" class="headerlink" title="鼠标拖尾"></a>鼠标拖尾</h3><p>拖放的基本概念: 创建一个绝对定位的元素，使其可以用鼠标移动, 先从最简单的<code>鼠标拖尾</code>开始</p><p><img src="https://i.loli.net/2018/01/04/5a4d9021a03f1.jpg" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;div id="myDiv" style="background:red;width:100px;height:100px;position:absolute"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"mousemove"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> myDiv = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line">  myDiv.style.left = event.clientX + <span class="string">"px"</span>;</span><br><span class="line">  myDiv.style.top = event.clientY + <span class="string">"px"</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="封装拖放对象"><a href="#封装拖放对象" class="headerlink" title="封装拖放对象"></a>封装拖放对象</h3><p>由于<code>mousedown</code>,<code>mousemove</code>,<code>mouseup</code>全是冒泡的,所以可以封装一个全局拖放对象,注册在<code>document</code>对象上,用来管理界面的所有拖放功能,初始代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;div id="myDiv" style="background:red;width:100px;height:100px;position:absolute" class="draggable"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="keyword">var</span> DragDrop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//单例模式</span></span><br><span class="line">  <span class="keyword">var</span> dragging = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleEvent</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target = event.target</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (event.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mousedown"</span>:</span><br><span class="line">        <span class="keyword">if</span> (target.className.indexOf(<span class="string">"draggable"</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">          dragging = target;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mousemove"</span>:</span><br><span class="line">        <span class="keyword">if</span> (dragging !== <span class="literal">null</span>) &#123;</span><br><span class="line">          dragging.style.left = event.clientX + <span class="string">"px"</span>;</span><br><span class="line">          dragging.style.top = event.clientY + <span class="string">"px"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mouseup"</span>:</span><br><span class="line">        dragging = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    enable: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">document</span>.addEventListener(<span class="string">"mousedown"</span>, handleEvent);</span><br><span class="line">      <span class="built_in">document</span>.addEventListener(<span class="string">"mousemove"</span>, handleEvent);</span><br><span class="line">      <span class="built_in">document</span>.addEventListener(<span class="string">"mouseup"</span>, handleEvent);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    disable: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">document</span>.removeEventListener(<span class="string">"mousedown"</span>, handleEvent);</span><br><span class="line">      <span class="built_in">document</span>.removeEventListener(<span class="string">"mousemove"</span>, handleEvent);</span><br><span class="line">      <span class="built_in">document</span>.removeEventListener(<span class="string">"mouseup"</span>, handleEvent);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;();</span><br><span class="line">DragDrop.enable()</span><br></pre></td></tr></table></figure><blockquote><p>上述代码先用一个闭包return出<code>DragDrop</code>对象,这个对象有两个方法<code>DragDrop.enable</code>与<code>DragDrop.disable()</code>,分别向外暴露注册在<code>document</code>对象上的全局鼠标事件接口.<br>在闭包内部,使用一个单例<code>dragging</code>,在<code>mousedown</code>时,将<code>event.target</code>赋值给<code>dragging</code>从而在<code>mousemove</code>的过程中改变<code>dragging</code>也就是<code>event.target</code>对象的位置,在<code>mouseup</code>时将<code>dragging</code>置空,使<code>mousemove</code>事件不再影响<code>dragging</code></p></blockquote><h3 id="修改拖放时的鼠标位置"><a href="#修改拖放时的鼠标位置" class="headerlink" title="修改拖放时的鼠标位置"></a>修改拖放时的鼠标位置</h3><p>之前的代码有一个小bug,如图:</p><blockquote><p><code>mousemove</code>发生之前</p></blockquote><p><img src="https://i.loli.net/2018/01/04/5a4d9021c078a.jpg" alt=""></p><blockquote><p><code>mousemove</code>发生之后</p></blockquote><p><img src="https://i.loli.net/2018/01/04/5a4d9021c0da2.jpg" alt=""></p><blockquote><p>产生此问题的原因是在<code>mousemove</code>发生后,直接将<code>event.clientX</code>与<code>event.clientY</code>赋值给了<code>div</code>的<code>left</code>和<code>top</code><br>解决方法如下图所示,计算出<code>event.clientX-element.offsetLeft</code>与<code>event.clientY-element.offsetTop</code>这两个定值(在mousemove的过程中不会改变,所以是定值),并从<code>element</code>的<code>left</code>与<code>top</code>中减去即可</p></blockquote><p> <img src="https://i.loli.net/2018/01/04/5a4d9021ccb55.jpg" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;div id="myDiv" style="background:red;width:100px;height:100px;position:absolute" class="draggable"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="keyword">var</span> DragDrop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//单例模式</span></span><br><span class="line">  <span class="keyword">var</span> dragging = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">var</span> distanceX = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> distanceY = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleEvent</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target = event.target</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (event.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mousedown"</span>:</span><br><span class="line">        <span class="keyword">if</span> (target.className.indexOf(<span class="string">"draggable"</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">          dragging = target;</span><br><span class="line">          distanceX = event.clientX - dragging.offsetLeft;</span><br><span class="line">          distanceY = event.clientY - dragging.offsetTop;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mousemove"</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dragging !== <span class="literal">null</span>) &#123;</span><br><span class="line">          dragging.style.left = (event.clientX - distanceX) + <span class="string">"px"</span>;</span><br><span class="line">          dragging.style.top = (event.clientY - distanceY) + <span class="string">"px"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mouseup"</span>:</span><br><span class="line">        dragging = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    enable: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">document</span>.addEventListener(<span class="string">"mousedown"</span>, handleEvent);</span><br><span class="line">      <span class="built_in">document</span>.addEventListener(<span class="string">"mousemove"</span>, handleEvent);</span><br><span class="line">      <span class="built_in">document</span>.addEventListener(<span class="string">"mouseup"</span>, handleEvent);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    disable: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">document</span>.removeEventListener(<span class="string">"mousedown"</span>, handleEvent);</span><br><span class="line">      <span class="built_in">document</span>.removeEventListener(<span class="string">"mousemove"</span>, handleEvent);</span><br><span class="line">      <span class="built_in">document</span>.removeEventListener(<span class="string">"mouseup"</span>, handleEvent);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;();</span><br><span class="line">DragDrop.enable()</span><br></pre></td></tr></table></figure><h3 id="添加自定义事件"><a href="#添加自定义事件" class="headerlink" title="添加自定义事件"></a>添加自定义事件</h3><p>之前, 我们封装了一个全局拖放对象, 但它只是能”拖”, 还不能有真正的功能让其和拖动功能交互, 用之前总结的<code>自定义事件</code>来完善功能.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PubEvent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.listener = &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PubEvent.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: PubEvent,</span><br><span class="line">  addListener: function (key, listenerFuction) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span>.listener)[key]) &#123;</span><br><span class="line">      <span class="keyword">this</span>.listener[key] = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.listener[key].push(listenerFuction)</span><br><span class="line">  &#125;,</span><br><span class="line">  trigger: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!event.target) &#123;</span><br><span class="line">      event.target = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.listener[event.type] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> listener = <span class="keyword">this</span>.listener[event.type]</span><br><span class="line">      listener.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">v, i</span>) </span>&#123;</span><br><span class="line">        v(event);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  removeListener: <span class="function"><span class="keyword">function</span> (<span class="params">key, listenerFuction</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> listenerKey = <span class="keyword">this</span>.listener[key]</span><br><span class="line">    <span class="keyword">if</span> (!listenerKey) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!listenerFuction) &#123;</span><br><span class="line">      listenerKey = []</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      listenerKey.some(<span class="function"><span class="keyword">function</span> (<span class="params">v, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (v === listenerFuction) &#123;</span><br><span class="line">          listenerKey.splice(i, <span class="number">1</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;div id="myDiv" style="background:red;width:100px;height:100px;position:absolute" class="draggable"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="keyword">var</span> DragDrop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> dragdrop = <span class="keyword">new</span> PubEvent();</span><br><span class="line">  <span class="comment">//单例模式</span></span><br><span class="line">  <span class="keyword">var</span> dragging = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">var</span> distanceX = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> distanceY = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleEvent</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target = event.target</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (event.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mousedown"</span>:</span><br><span class="line">        <span class="keyword">if</span> (target.className.indexOf(<span class="string">"draggable"</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">          dragging = target;</span><br><span class="line">          distanceX = event.clientX - dragging.offsetLeft;</span><br><span class="line">          distanceY = event.clientY - dragging.offsetTop;</span><br><span class="line">          dragdrop.trigger(&#123;</span><br><span class="line">            type: <span class="string">"dragstart"</span>,</span><br><span class="line">            target: dragging</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mousemove"</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dragging !== <span class="literal">null</span>) &#123;</span><br><span class="line">          dragging.style.left = (event.clientX - distanceX) + <span class="string">"px"</span>;</span><br><span class="line">          dragging.style.top = (event.clientY - distanceY) + <span class="string">"px"</span>;</span><br><span class="line">          dragdrop.trigger(&#123;</span><br><span class="line">            type: <span class="string">"drag"</span>,</span><br><span class="line">            target: dragging,</span><br><span class="line">            x: event.clientX - distanceX,</span><br><span class="line">            y: event.clientY - distanceY</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mouseup"</span>:</span><br><span class="line">        </span><br><span class="line">        dragdrop.trigger(&#123;</span><br><span class="line">          type: <span class="string">"end"</span>,</span><br><span class="line">          target: dragging</span><br><span class="line">        &#125;)</span><br><span class="line">        dragging = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  dragdrop.enable = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">"mousedown"</span>, handleEvent);</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">"mousemove"</span>, handleEvent);</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">"mouseup"</span>, handleEvent);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  dragdrop.disable = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.removeEventListener(<span class="string">"mousedown"</span>, handleEvent);</span><br><span class="line">    <span class="built_in">document</span>.removeEventListener(<span class="string">"mousemove"</span>, handleEvent);</span><br><span class="line">    <span class="built_in">document</span>.removeEventListener(<span class="string">"mouseup"</span>, handleEvent);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dragdrop</span><br><span class="line">&#125;();</span><br><span class="line">DragDrop.enable()</span><br></pre></td></tr></table></figure><blockquote><p>注册<code>dragstart</code>,<code>drag</code>,<code>dragend</code>自定义事件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;div id="myDiv" style="background:red;width:100px;height:100px;position:absolute" class="draggable"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">//&lt;div id="status" style="width:600px;height:600px;background-color:pink;overflow:hidden;"&gt;&lt;/div&gt;</span></span><br><span class="line">DragDrop.addListener(<span class="string">'dragstart'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> status = <span class="built_in">document</span>.getElementById(<span class="string">'status'</span>);</span><br><span class="line">  status.innerHTML = <span class="string">"drag start "</span> + event.target.id</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">DragDrop.addListener(<span class="string">'drag'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> status = <span class="built_in">document</span>.getElementById(<span class="string">'status'</span>);</span><br><span class="line">  status.innerHTML += <span class="string">"&lt;br&gt;drag move "</span> + event.target.id + <span class="string">" to ("</span> + event.x + <span class="string">" , "</span> + event.y + <span class="string">")"</span></span><br><span class="line">&#125;)</span><br><span class="line">DragDrop.addListener(<span class="string">'dragend'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> status = <span class="built_in">document</span>.getElementById(<span class="string">'status'</span>);</span><br><span class="line">  status.innerHTML += <span class="string">"&lt;br&gt;drag drop "</span> + event.target.id</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/01/04/5a4d902219154.jpg" alt=""></p><p>至此,我们事先了三个自定义事件<code>dragstart</code>,<code>drag</code>,<code>dragend</code>,它们分别在拖放行为的不同阶段向<code>div</code>中输出拖放动作的详细信息. 这只是个简单的例子, 添加自定义事件可以使对象更健壮, 可以在网络应用中处理复杂的拖放功能.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;做什么&quot;&gt;&lt;a href=&quot;#做什么&quot; class=&quot;headerlink&quot; title=&quot;做什么&quot;&gt;&lt;/a&gt;做什么&lt;/h3&gt;&lt;p&gt;之前两篇博客讲述了观察者模式实现自定义事件的思维步骤, 但自定义事件还未真正用到实际DOM操作中, 我们的最终目的是真正使用&lt;cod
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>javascript 与 &#39;发布订阅(观察者)模式&#39; vol.2 : 自定义事件</title>
    <link href="http://yoursite.com/2018/01/04/javascript%E4%B8%8E%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F2/"/>
    <id>http://yoursite.com/2018/01/04/javascript与发布订阅模式2/</id>
    <published>2018-01-04T00:29:28.000Z</published>
    <updated>2018-01-04T01:13:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>上次的<a href="https://choteewang.github.io/2017/12/23/javascript-%E4%B8%8E-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">博客</a>里写了发布订阅模式的实现, 这次的目的是用发布订阅模式实现一个自定义事件</p><h3 id="之前的代码"><a href="#之前的代码" class="headerlink" title="之前的代码"></a>之前的代码</h3><p>这里放上上篇博客: <a href="https://choteewang.github.io/2017/12/23/javascript-%E4%B8%8E-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">javascript 与 “发布订阅(观察者)模式”</a> 中最后总结的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pubEvent = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> listener = &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> addListener = <span class="function"><span class="keyword">function</span> (<span class="params">key, listenerFuction</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!listener[key]) &#123;</span><br><span class="line">      listener[key] = []</span><br><span class="line">    &#125;</span><br><span class="line">    listener[key].push(listenerFuction)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> trigger = <span class="function"><span class="keyword">function</span> (<span class="params">key, args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!listener[key] || listener[key].length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    listener[key].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">v, i</span>) </span>&#123;</span><br><span class="line">      v.call(<span class="literal">null</span>, &#123; key, ...args &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> removeListener = <span class="function"><span class="keyword">function</span> (<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> listenerKey = listener[key]</span><br><span class="line">    <span class="keyword">if</span> (!listenerKey) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">      listenerKey = []</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      listenerKey.some(<span class="function"><span class="keyword">function</span> (<span class="params">v, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (v === fn) &#123;</span><br><span class="line">          listenerKey.splice(i, <span class="number">1</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    addListener,</span><br><span class="line">    trigger,</span><br><span class="line">    removeListener</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>我们上次将上述代码作为了一个<code>全局工具对象</code>, 用闭包的方式向外return出一个对象接口, 操纵比包内的数据. 若要使用这个<code>全局工具对象</code>, 可以如此调用:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册事件</span></span><br><span class="line">pubEvent.addListener(<span class="string">'countAdd'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'dv'</span>).innerHTML = data.count</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发事件</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  count++</span><br><span class="line">  <span class="comment">// 触发"countAdd"事件</span></span><br><span class="line">  pubEvent.trigger(<span class="string">'countAdd'</span>, &#123;</span><br><span class="line">    count</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>但这样的调用方式和原生js事件还有些差异, 原生js的事件的注册对象应是<code>元素element</code>,数据应由<code>事件参数对象event</code>传递, 为了兼容各种浏览器, 我们今天将之前的ES6代码改为ES5表现, 再利用之前总结的<code>javascript寄生组合式继承</code>知识, 打造<code>自定义事件</code></p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><ul><li><a href="https://choteewang.github.io/2017/12/20/17-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3javaScript%E7%BB%A7%E6%89%BF/" target="_blank" rel="noopener">深入理解javaScript继承机制</a></li><li><a href="https://choteewang.github.io/2017/12/23/javascript-%E4%B8%8E-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">javascript 与 “发布/订阅(观察者)模式”</a></li></ul><h3 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 改造为构造函数和原型,使其可以被继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PubEvent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.listener = &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PubEvent.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: PubEvent,</span><br><span class="line">  addListener: function (key, listenerFuction) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span>.listener)[key]) &#123;</span><br><span class="line">      <span class="keyword">this</span>.listener[key] = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.listener[key].push(listenerFuction)</span><br><span class="line">  &#125;,</span><br><span class="line">  trigger: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!event.target) &#123;</span><br><span class="line">      event.target = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.listener[event.type] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> listener = <span class="keyword">this</span>.listener[event.type]</span><br><span class="line">      listener.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">v, i</span>) </span>&#123;</span><br><span class="line">        v(event);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  removeListener: <span class="function"><span class="keyword">function</span> (<span class="params">key, listenerFuction</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> listenerKey = <span class="keyword">this</span>.listener[key]</span><br><span class="line">    <span class="keyword">if</span> (!listenerKey) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!listenerFuction) &#123;</span><br><span class="line">      listenerKey = []</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      listenerKey.some(<span class="function"><span class="keyword">function</span> (<span class="params">v, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (v === listenerFuction) &#123;</span><br><span class="line">          listenerKey.splice(i, <span class="number">1</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> abc = <span class="keyword">new</span> PubEvent()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> handler = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(event.message); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abc.addListener(<span class="string">'click'</span>,handler)</span><br><span class="line">abc.trigger(&#123;<span class="attr">type</span>:<span class="string">'click'</span>,<span class="attr">message</span>:<span class="string">'this is a click'</span>&#125;) <span class="comment">//this is a click</span></span><br><span class="line">abc.removeListener(<span class="string">'click'</span>,handler)</span><br><span class="line">abc.trigger(&#123;<span class="attr">type</span>:<span class="string">'click'</span>,<span class="attr">message</span>:<span class="string">'this is a click'</span>&#125;) <span class="comment">//无输出</span></span><br></pre></td></tr></table></figure><blockquote><p>初级调用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> abc = <span class="keyword">new</span> PubEvent()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> handler = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(event.message); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abc.addListener(<span class="string">'click'</span>,handler)</span><br><span class="line">abc.trigger(&#123;<span class="attr">type</span>:<span class="string">'click'</span>,<span class="attr">message</span>:<span class="string">'this is a click'</span>&#125;) <span class="comment">//this is a click</span></span><br><span class="line">abc.removeListener(<span class="string">'click'</span>,handler)</span><br><span class="line">abc.trigger(&#123;<span class="attr">type</span>:<span class="string">'click'</span>,<span class="attr">message</span>:<span class="string">'this is a click'</span>&#125;) <span class="comment">//无输出</span></span><br></pre></td></tr></table></figure><h3 id="结合寄生组合继承"><a href="#结合寄生组合继承" class="headerlink" title="结合寄生组合继承"></a>结合寄生组合继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  F.prototype = o;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">subType, superType</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> prototype = object(superType.prototype); </span><br><span class="line">  prototype.constructor = subType; </span><br><span class="line">  subType.prototype = prototype; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shoes</span>(<span class="params">model, size</span>) </span>&#123;</span><br><span class="line">  PubEvent.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.model = model;</span><br><span class="line">  <span class="keyword">this</span>.size = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inheritPrototype(Shoes, PubEvent);</span><br><span class="line"></span><br><span class="line">Shoes.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.trigger(&#123;</span><br><span class="line">    type: <span class="string">"message"</span>,</span><br><span class="line">    message: message</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleMessage</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"model is "</span>+ event.target.model + <span class="string">" size is "</span> + event.target.size + <span class="string">" message is "</span> + event.message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aj3 = <span class="keyword">new</span> Shoes(<span class="string">"aj3"</span>, <span class="number">42</span>);</span><br><span class="line">aj3.addListener(<span class="string">"message"</span>, handleMessage);</span><br><span class="line">aj3.say(<span class="string">"which is chotee\'s favorite"</span>); <span class="comment">//model is aj3 size is 42 message is which is chotee's favorite</span></span><br></pre></td></tr></table></figure><p>在上面的例子里, 使用寄生组合继承使<code>Shoes</code>的原型继承自<code>PubEvent</code>的原型, 在<code>Shoes</code>构造函数内部使用借用构造函数继承了<code>PubEvent</code>构造函数内的<code>listener</code>对象,使<code>Shoes</code>的实例<code>shoes</code>可以触发自己订阅的事件<code>message</code>.</p><p>在数据流方面,<code>say</code>方法把<code>message</code>字符串传递给调用<code>trigger</code>时内部包装的<code>event</code>对象,这个对象在<code>trigger</code>方法执行时将<code>event</code>对象传递给实例放在<code>this.listener</code>对象中的订阅方法<code>handleMessage</code>并立即调用.所以在订阅的方法中可以显示<code>trigger</code>时传递的数据</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上次的&lt;a href=&quot;https://choteewang.github.io/2017/12/23/javascript-%E4%B8%8E-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正反馈系列:《JavaScript高级程序设计》最佳实践,新兴API</title>
    <link href="http://yoursite.com/2018/01/03/%E9%AB%98%E7%A8%8B13-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-%E6%96%B0%E5%85%B4API/"/>
    <id>http://yoursite.com/2018/01/03/高程13-最佳实践-新兴API/</id>
    <published>2018-01-03T15:42:26.000Z</published>
    <updated>2018-03-21T10:28:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><h2 id="可维护性"><a href="#可维护性" class="headerlink" title="可维护性"></a>可维护性</h2><h3 id="代码约定"><a href="#代码约定" class="headerlink" title="代码约定"></a>代码约定</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过初始化指定变量类型 </span></span><br><span class="line"><span class="keyword">var</span> found = <span class="literal">false</span>; <span class="comment">//布尔型 </span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">-1</span>; <span class="comment">//数字 </span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">""</span>; <span class="comment">//字符串 </span></span><br><span class="line"><span class="keyword">var</span> person = <span class="literal">null</span>; <span class="comment">//对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用于指定数据类型的匈牙利标记法 </span></span><br><span class="line"><span class="keyword">var</span> bFound; <span class="comment">//布尔型 </span></span><br><span class="line"><span class="keyword">var</span> iCount; <span class="comment">//整数 </span></span><br><span class="line"><span class="keyword">var</span> sName; <span class="comment">//字符串 </span></span><br><span class="line"><span class="keyword">var</span> oPerson; <span class="comment">//对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用于指定类型的类型注释 </span></span><br><span class="line"><span class="keyword">var</span> found <span class="comment">/*:Boolean*/</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> count <span class="comment">/*:int*/</span> = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> name <span class="comment">/*:String*/</span> = <span class="string">"Nicholas"</span>;</span><br><span class="line"><span class="keyword">var</span> person <span class="comment">/*:Object*/</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h3 id="松散耦合"><a href="#松散耦合" class="headerlink" title="松散耦合"></a>松散耦合</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleKeyPress</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  <span class="keyword">if</span> (event.keyCode == <span class="number">13</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line">    <span class="keyword">var</span> value = <span class="number">5</span> * <span class="built_in">parseInt</span>(target.value);</span><br><span class="line">    <span class="keyword">if</span> (value &gt; <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">"error-msg"</span>).style.display = <span class="string">"block"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 改变为</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validateValue</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  value = <span class="number">5</span> * <span class="built_in">parseInt</span>(value);</span><br><span class="line">  <span class="keyword">if</span> (value &gt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"error-msg"</span>).style.display = <span class="string">"block"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleKeyPress</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  <span class="keyword">if</span> (event.keyCode == <span class="number">13</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line">    validateValue(target.value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="避免与-null-进行比较"><a href="#避免与-null-进行比较" class="headerlink" title="避免与 null 进行比较"></a>避免与 null 进行比较</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortArray</span>(<span class="params">values</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (values != <span class="literal">null</span>) &#123; <span class="comment">//避免</span></span><br><span class="line">    values.sort(comparator);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortArray</span>(<span class="params">values</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (values <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123; <span class="comment">// 推荐</span></span><br><span class="line">    values.sort(comparator);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果看到了与 null 比较的代码，尝试使用以下技术替换：</p><ul><li>如果值应为一个引用类型，使用instanceof操作符检查其构造函数；</li><li>如果值应为一个基本类型，使用typeof检查其类型；</li><li>如果是希望对象包含某个特定的方法名，则使用typeof操作符确保指定</li></ul><h3 id="使用常量"><a href="#使用常量" class="headerlink" title="使用常量"></a>使用常量</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validate</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!value) &#123;</span><br><span class="line">    alert(<span class="string">"Invalid value!"</span>);</span><br><span class="line">    location.href = <span class="string">"/errors/invalid.php"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换为</span></span><br><span class="line"><span class="keyword">var</span> Constants = &#123;</span><br><span class="line">  INVALID_VALUE_MSG: <span class="string">"Invalid value!"</span>,</span><br><span class="line">  INVALID_VALUE_URL: <span class="string">"/errors/invalid.php"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validate</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!value) &#123;</span><br><span class="line">    alert(Constants.INVALID_VALUE_MSG);</span><br><span class="line">    location.href = Constants.INVALID_VALUE_URL;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重复值——任何在多处用到的值都应抽取为一个常量。这就限制了当一个值变了而另一个没变的时候会造成的错误。这也包含了CSS类名。</li><li>用户界面字符串——任何用于显示给用户的字符串，都应被抽取出来以方便国际化。</li><li>URLs——在Web应用中，资源位置很容易变更，所以推荐用一个公共地方存放所有的URL。</li><li>任意可能会更改的值——每当你在用到字面量值的时候，你都要问一下自己这个值在未来是不是会变化。如果答案是“是”，那么这个值就应该被提取出来作为一个常量。</li></ul><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><h3 id="避免全局查找"><a href="#避免全局查找" class="headerlink" title="避免全局查找"></a>避免全局查找</h3><p>下例中,第一种方法<code>document</code>对象每被引用一次,就会在变量作用域链上层层向上找直到找到<code>document</code>对象,但第二种只需在具备创建一次对<code>document</code>对象的引用,后续无需再进行全局作用域链查找</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateUI</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> imgs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = imgs.length; i &lt; len; i++) &#123;</span><br><span class="line">    imgs[i].title = <span class="built_in">document</span>.title + <span class="string">" image "</span> + i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> msg = <span class="built_in">document</span>.getElementById(<span class="string">"msg"</span>);</span><br><span class="line">  msg.innerHTML = <span class="string">"Update complete."</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改为</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateUI</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> doc = <span class="built_in">document</span>;</span><br><span class="line">  <span class="keyword">var</span> imgs = doc.getElementsByTagName(<span class="string">"img"</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = imgs.length; i &lt; len; i++) &#123;</span><br><span class="line">    imgs[i].title = doc.title + <span class="string">" image "</span> + i;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> msg = doc.getElementById(<span class="string">"msg"</span>);</span><br><span class="line">  msg.innerHTML = <span class="string">"Update complete."</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="避免使用with语句"><a href="#避免使用with语句" class="headerlink" title="避免使用with语句"></a>避免使用with语句</h3><p>在性能非常重要的地方必须避免使用<code>with</code>语句。和函数类似，<code>with</code>语句会创建自己的作用域，因此会增加其中执行的代码的作用域链的长度。由于额外的作用域链查找，在<code>with</code>语句中执行的代码肯定会比外面执行的代码要慢。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBody</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">with</span>(<span class="built_in">document</span>.body) &#123;</span><br><span class="line">    alert(tagName);</span><br><span class="line">    innerHTML = <span class="string">"Hello world!"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//替换为</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBody</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> body = <span class="built_in">document</span>.body</span><br><span class="line">  alert(body.tagName);</span><br><span class="line">  body.innerHTML = <span class="string">"Hello world!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择正确的方法"><a href="#选择正确的方法" class="headerlink" title="选择正确的方法"></a>选择正确的方法</h3><p>使用变量和数组要比访问对象上的属性更有效率，后者是一个<code>O(n)</code>操作。对象上的任何属性查找都要比访问变量或者数组花费更长时间，因为必须在原型链中对拥有该名称的属性进行一次搜索。简而言之，属性查找越多，执行时间就越长。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 效率是O(1)</span></span><br><span class="line"><span class="keyword">var</span> value = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">10</span> + value;</span><br><span class="line">alert(sum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> values = [<span class="number">5</span>, <span class="number">10</span>];</span><br><span class="line"><span class="keyword">var</span> sum = values[<span class="number">0</span>] + values[<span class="number">1</span>];</span><br><span class="line">alert(sum);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 效率是O(n) </span></span><br><span class="line"><span class="keyword">var</span> values = &#123;</span><br><span class="line">  first: <span class="number">5</span>,</span><br><span class="line">  second: <span class="number">10</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> sum = values.first + values.second;</span><br><span class="line">alert(sum);</span><br></pre></td></tr></table></figure><h3 id="Duff算法"><a href="#Duff算法" class="headerlink" title="Duff算法"></a>Duff算法</h3><p>比for循环一次次与length比较快,以8为运行单位,每次运行8次,这里<code>values</code>是一个数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> iterations = <span class="built_in">Math</span>.floor(values.length / <span class="number">8</span>); </span><br><span class="line"><span class="keyword">var</span> leftover = values.length % <span class="number">8</span>; </span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (leftover &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    process(values[i++]);</span><br><span class="line">  &#125; <span class="keyword">while</span> (--leftover &gt; <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  process(values[i++]);</span><br><span class="line">  process(values[i++]);</span><br><span class="line">  process(values[i++]);</span><br><span class="line">  process(values[i++]);</span><br><span class="line">  process(values[i++]);</span><br><span class="line">  process(values[i++]);</span><br><span class="line">  process(values[i++]);</span><br><span class="line">  process(values[i++]);</span><br><span class="line">&#125; <span class="keyword">while</span> (--iterations &gt; <span class="number">0</span>);</span><br></pre></td></tr></table></figure><blockquote><p>小数据集用处不大,大数据集再采用</p></blockquote><h3 id="优化DOM交互"><a href="#优化DOM交互" class="headerlink" title="优化DOM交互"></a>优化DOM交互</h3><h4 id="最小化现场更新"><a href="#最小化现场更新" class="headerlink" title="最小化现场更新"></a>最小化现场更新</h4><p>一旦你需要访问的DOM部分是已经显示的页面的一部分，那么你就是在进行一个现场更新。之所以叫现场更新，是因为需要立即（现场）对页面对用户的显示进行更新。每一个更改，不管是插入单个字符，还是移除整个片段，都有一个性能惩罚，因为浏览器要重新计算无数尺寸以进行更新。现场更新进行得越多，代码完成执行所花的时间就越长；完成一个操作所需的现场更新越少，代码就越快。</p><p>下面这段代码为列表添加了10个项目。添加每个项目时，都有2个现场更新：一个添加<code>&lt;li&gt;</code>元素，另一个给它添加文本节点。这样添加10个项目，这个操作总共要完成20个现场更新。</p><p>要修正这个性能瓶颈，需要减少现场更新的数量。一般有2种方法。第一种是将列表从页面上移除，最后进行更新，最后再将列表插回到同样的位置。这个方法不是非常理想，因为在每次页面更新的时候它会不必要的闪烁。第二个方法是使用文档片段来构建DOM结构，接着将其添加到List元素中。这个方式避免了现场更新和页面闪烁问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">"myList"</span>),</span><br><span class="line">  item, i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  item = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">  list.appendChild(item);</span><br><span class="line">  item.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">"Item "</span> + i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换为</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">"myList"</span>),</span><br><span class="line">  fragment = <span class="built_in">document</span>.createDocumentFragment(),</span><br><span class="line">  item,</span><br><span class="line">  i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  item = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">  fragment.appendChild(item);</span><br><span class="line">  item.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">"Item "</span> + i));</span><br><span class="line">&#125;</span><br><span class="line">list.appendChild(fragment);</span><br></pre></td></tr></table></figure><p>在这个例子中只有一次现场更新，它发生在所有项目都创建好之后。文档片段用作一个临时的占位符，放置新创建的项目。然后使用<code>appendChild()</code>将所有项目添加到列表中。记住，当给<code>appendChild()</code>传入文档片段时，只有片段中的子节点被添加到目标，片段本身不会被添加的。一旦需要更新DOM，请考虑使用文档片段来构建DOM结构，然后再将其添加到现存的文档中。</p><h4 id="使用-innerHTML"><a href="#使用-innerHTML" class="headerlink" title="使用 innerHTML"></a>使用 innerHTML</h4><p>有两种在页面上创建DOM节点的方法：使用诸如<code>createElement()</code>和<code>appendChild()</code>之类的DOM方法，以及使用<code>innerHTML</code>。对于小的DOM更改而言，两种方法效率都差不多。然而，<strong>对于大的DOM更改</strong>，使用<code>innerHTML</code>要比使用标准DOM方法创建同样的DOM结构快得多。</p><p>当把<code>innerHTML</code>设置为某个值时，后台会创建一个HTML解析器，然后使用内部的DOM调用来创建DOM结构，而非基于JavaScript的DOM调用。由于内部方法是编译好的而非解释执行的，所以执行快得多。</p><h1 id="新兴API"><a href="#新兴API" class="headerlink" title="新兴API"></a>新兴API</h1><h2 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame()"></a>requestAnimationFrame()</h2><p><code>window.requestAnimationFrame(callback) return id</code> 方法接收一个参数，即在下次重绘屏幕前调用的一个函数,返回一个id,用<code>window.cancelAnimationFrame(id)</code>可取消调用.<code>callback</code>也有一个参数<code>timestamp</code>,which indicates the current time (the time returned from <code>performance.now()</code> ) for when requestAnimationFrame() starts to fire callbacks.</p><blockquote><p>利用上述特性,可以封装一个<code>requestAnimationFrame()</code>的动画函数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> RAFid;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RAFBundle</span>(<span class="params">callback, interval</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> startTime = <span class="built_in">Date</span>.now()</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">timestamp</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> currentTime = <span class="built_in">Date</span>.now()</span><br><span class="line">    <span class="keyword">if</span> (currentTime - startTime &gt;= interval) &#123;</span><br><span class="line">      callback()</span><br><span class="line">      startTime = currentTime</span><br><span class="line">    &#125;</span><br><span class="line">    RAFid = <span class="built_in">window</span>.requestAnimationFrame(render)</span><br><span class="line">  &#125;</span><br><span class="line">  render();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止绘制</span></span><br><span class="line"><span class="built_in">window</span>.cancelAnimationFrame(RAFid)</span><br></pre></td></tr></table></figure><h2 id="File-API"><a href="#File-API" class="headerlink" title="File API"></a>File API</h2><p>File API在表单中的文件输入字段的基础上，又添加了一些直接访问文件信息的接口。HTML5在DOM中为文件输入元素添加了一个<code>element.files</code>属性,它是一个集合。在通过文件输入字段选择了一或多个文件时，<code>element.files</code>集合中将包含一组<code>File</code>对象，每个<code>File</code>对象对应着一个文件。每个File对象都有下列只读属性。</p><ul><li><code>name</code>：本地文件系统中的文件名。</li><li><code>size</code>：文件的字节大小。</li><li><code>type</code>：字符串，文件的MIME类型。</li><li><code>lastModifiedDate</code>：字符串，文件上一次被修改的时间（只有Chrome实现了这个属性）。</li></ul><p>举个例子，通过侦听<code>change</code>事件并读取<code>element.files</code>集合就可以知道选择的每个文件的信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;input type="file" multiple id="files-list"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> filesList = <span class="built_in">document</span>.getElementById(<span class="string">"files-list"</span>);</span><br><span class="line">EventUtil.addHandler(filesList, <span class="string">"change"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> info = <span class="string">""</span>,</span><br><span class="line">    output = <span class="built_in">document</span>.getElementById(<span class="string">"output"</span>),</span><br><span class="line">    files = EventUtil.getTarget(event).files,</span><br><span class="line">    i = <span class="number">0</span>,</span><br><span class="line">    len = files.length;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">    info += files[i].name + <span class="string">" ("</span> + files[i].type + <span class="string">", "</span> + files[i].size + <span class="string">" bytes)&lt;br&gt;"</span>;</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  output.innerHTML = info;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="FileReader-类型"><a href="#FileReader-类型" class="headerlink" title="FileReader 类型"></a>FileReader 类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader()</span><br></pre></td></tr></table></figure><p><code>FileReader</code>类型实现的是一种异步文件读取机制。可以把<code>FileReader</code>想象成<code>XMLHttpRequest</code>，区别只是它读取的是文件系统，而不是远程服务器。为了读取文件中的数据，<code>FileReader</code>提供了如下几个方法。</p><ul><li><code>reader.readAsText(file,encoding)</code>：以纯文本形式读取文件，将读取到的文本保存在<code>reader.result</code>属性中。第二个参数用于指定编码类型，是可选的。</li><li><code>reader.readAsDataURL(file)</code>：读取文件并将文件以数据URI的形式保存在<code>reader.result</code>属性中。</li><li><code>reader.readAsBinaryString(file)</code>：读取文件并将一个字符串保存在<code>reader.result</code>属性中，字符串中的每个字符表示一字节。</li><li><code>reader.readAsArrayBuffer(file)</code>：读取文件并将一个包含文件内容的ArrayBuffer保存在<code>reader.result</code>属性中。</li></ul><p>由于读取过程是异步的，因此<code>FileReader</code>也提供了几个事件。其中最有用的三个事件是<code>progress</code>、<code>error</code>和<code>load</code>，分别表示是否又读取了新数据、是否发生了错误以及是否已经读完了整个文件。</p><p>每过50ms左右，就会触发一次<code>progress</code>事件，通过事件对象可以获得与XHR的<code>progress</code>事件类似的属性：<code>lengthComputable</code>(布尔值,表示进度信息是否可见)、<code>loaded</code>(已读取完成数量)和<code>total</code>(总共需读取数量)。另外，尽管可能没有包含全部数据，但每次<code>progress</code>事件中都可以通过<code>FileReader</code>的<code>reader.result</code>属性读取到文件内容。</p><p>由于种种原因无法读取文件，就会触发<code>error</code>事件。触发<code>error</code>事件时，相关的信息将保存到<code>FileReader</code>的<code>error</code>属性中。这个属性中将保存一个对象，该对象只有一个属性<code>code</code>，即错误码。这个错误码是<code>1</code>表示未找到文件，是<code>2</code>表示安全性错误，是<code>3</code>表示读取中断，是<code>4</code>表示文件不可读，是<code>5</code>表示编码错误。</p><p>文件成功加载后会触发<code>load</code>事件；如果发生了<code>error</code>事件，就不会发生<code>load</code>事件</p><p>下面是一个全面的例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> filesList = <span class="built_in">document</span>.getElementById(<span class="string">"files-list"</span>);</span><br><span class="line">EventUtil.addHandler(filesList, <span class="string">"change"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> info = <span class="string">""</span>,</span><br><span class="line">    output = <span class="built_in">document</span>.getElementById(<span class="string">"output"</span>),</span><br><span class="line">    progress = <span class="built_in">document</span>.getElementById(<span class="string">"progress"</span>),</span><br><span class="line">    files = EventUtil.getTarget(event).files,</span><br><span class="line">    type = <span class="string">"default"</span>,</span><br><span class="line">    reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/image/</span>.test(files[<span class="number">0</span>].type)) &#123;</span><br><span class="line">    reader.readAsDataURL(files[<span class="number">0</span>]);</span><br><span class="line">    type = <span class="string">"image"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reader.readAsText(files[<span class="number">0</span>]);</span><br><span class="line">    type = <span class="string">"text"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  reader.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    output.innerHTML = <span class="string">"Could not read file, error code is "</span> + reader.error.code;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  reader.onprogress = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.lengthComputable) &#123;</span><br><span class="line">      progress.innerHTML = event.loaded + <span class="string">"/"</span> + event.total;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> html = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"image"</span>:</span><br><span class="line">        html = <span class="string">"&lt;img src=\""</span> + reader.result + <span class="string">"\"&gt;"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"text"</span>:</span><br><span class="line">        html = reader.result;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    output.innerHTML = html;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果想中断读取过程，可以调用 <code>reader.abort()</code>方法，这样就会触发 <code>abort</code> 事件。在触发 <code>load</code>、<code>error</code> 或 <code>abort</code> 事件后，会触发另一个事件 <code>loadend</code>。<code>loadend</code> 事件发生就意味着已经读取完整个文件，或者读取时发生了错误，或者读取过程被中断。</p><h3 id="读取部分内容"><a href="#读取部分内容" class="headerlink" title="读取部分内容"></a>读取部分内容</h3><p>我们只想读取文件的一部分而不是全部内容。为此，File对象还支持一个<code>slice()</code>方法，这个方法在Firefox中的实现叫<code>mozSlice()</code>，在Chrome中的实现叫<code>webkitSlice()</code>，Safari的5.1及之前版本不支持这个方法。<code>slice()</code>方法接收两个参数：起始字节,要读取的字节数。这个方法返回一个<code>Blob</code>的实例，<code>Blob</code>是File类型的父类型。</p><p>Blob类型有一个<code>size</code>属性和一个<code>type</code>属性，而且它也支持<code>slice()</code>方法，以便进一步切割数据。通过<code>FileReader</code>也可以从<code>Blob</code>中读取数据。下面这个例子只读取文件的32B内容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blobSlice</span>(<span class="params">blob, startByte, length</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (blob.slice) &#123;</span><br><span class="line">    <span class="keyword">return</span> blob.slice(startByte, length);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (blob.webkitSlice) &#123;</span><br><span class="line">    <span class="keyword">return</span> blob.webkitSlice(startByte, length);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (blob.mozSlice) &#123;</span><br><span class="line">    <span class="keyword">return</span> blob.mozSlice(startByte, length);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> filesList = <span class="built_in">document</span>.getElementById(<span class="string">"files-list"</span>);</span><br><span class="line">EventUtil.addHandler(filesList, <span class="string">"change"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> info = <span class="string">""</span>,</span><br><span class="line">    output = <span class="built_in">document</span>.getElementById(<span class="string">"output"</span>),</span><br><span class="line">    progress = <span class="built_in">document</span>.getElementById(<span class="string">"progress"</span>),</span><br><span class="line">    files = EventUtil.getTarget(event).files,</span><br><span class="line">    reader = <span class="keyword">new</span> FileReader(),</span><br><span class="line">    blob = blobSlice(files[<span class="number">0</span>], <span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">  <span class="keyword">if</span> (blob) &#123;</span><br><span class="line">    reader.readAsText(blob);</span><br><span class="line">    reader.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      output.innerHTML = <span class="string">"Could not read file, error code is "</span> + reader.error.code;</span><br><span class="line">    &#125;;</span><br><span class="line">    reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      output.innerHTML = reader.result;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">"Your browser doesn' t support slice()."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="对象-URL"><a href="#对象-URL" class="headerlink" title="对象 URL"></a>对象 URL</h3><p>对象URL也被称为<code>blob URL</code>，指的是引用保存在<code>File</code>或<code>Blob</code>中数据的URL。使用对象URL的好处是可以不必把文件内容读取到JavaScript中而直接使用文件内容。为此，只要在需要文件内容的地方提供对象URL即可。要创建对象URL，可以使用<code>window.URL.createObjectURL(blob) return url</code>方法，并传入<code>File</code>或<code>Blob</code>对象。这个方法在Chrome中的实现叫<code>window.webkitURL.createObjectURL()</code>，因此可以通过如下函数来消除命名的差异：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObjectURL</span>(<span class="params">blob</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.URL) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.URL.createObjectURL(blob);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.webkitURL) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.webkitURL.createObjectURL(blob);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数的返回值是一个字符串，指向一块内存的地址。因为这个字符串是URL，所以在DOM中也能使用。例如，以下代码可以在页面中显示一个图像文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> filesList = <span class="built_in">document</span>.getElementById(<span class="string">"files-list"</span>);</span><br><span class="line">EventUtil.addHandler(filesList, <span class="string">"change"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> info = <span class="string">""</span>,</span><br><span class="line">    output = <span class="built_in">document</span>.getElementById(<span class="string">"output"</span>),</span><br><span class="line">    progress = <span class="built_in">document</span>.getElementById(<span class="string">"progress"</span>),</span><br><span class="line">    files = EventUtil.getTarget(event).files,</span><br><span class="line">    reader = <span class="keyword">new</span> FileReader(),</span><br><span class="line">    url = createObjectURL(files[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (url) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/image/</span>.test(files[<span class="number">0</span>].type)) &#123;</span><br><span class="line">      output.innerHTML = <span class="string">"&lt;img src=\""</span> + url + <span class="string">"\"&gt;"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      output.innerHTML = <span class="string">"Not an image."</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    output.innerHTML = <span class="string">"Your browser doesn't support object URLs."</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>直接把对象URL放在<code>&lt;img&gt;</code>标签中，就省去了把数据先读到JavaScript中的麻烦。另一方面，<img>标签则会找到相应的内存地址，直接读取数据并将图像显示在页面中。如果不再需要相应的数据，最好释放它占用的内容。但只要有代码在引用对象URL，内存就不会释放。要手工释放内存，可以把对象URL传给<code>window.URL.revokeOjbectURL(url)</code>（在Chrome中是<code>window.webkitURL.revokeObjectURL()</code>）。要兼容这两种方法的实现，可以使用以下函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">revokeObjectURL</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.URL) &#123;</span><br><span class="line">    <span class="built_in">window</span>.URL.revokeObjectURL(url);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.webkitURL) &#123;</span><br><span class="line">    <span class="built_in">window</span>.webkitURL.revokeObjectURL(url);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>页面卸载时会自动释放对象URL占用的内存。不过，为了确保尽可能少地占用内存，最好在不需要某个对象URL时，就马上手工释放其占用的内存。</p></blockquote><h3 id="读取拖放的文件"><a href="#读取拖放的文件" class="headerlink" title="读取拖放的文件"></a>读取拖放的文件</h3><p>围绕读取文件信息，结合使用HTML5拖放API和文件API，能够创造出令人瞩目的用户界面：在页面上创建了自定义的放置目标之后，你可以从桌面上把文件拖放到该目标。与拖放一张图片或者一个链接类似，从桌面上把文件拖放到浏览器中也会触发<code>drop</code>事件。而且可以在<code>event.dataTransfer.files</code>中读取到被放置的文件，当然此时它是一个<code>File</code>对象，与通过文件输入字段取得的<code>File</code>对象一样。</p><p>下面这个例子会将放置到页面中自定义的放置目标中的文件信息显示出来：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> droptarget = <span class="built_in">document</span>.getElementById(<span class="string">"droptarget"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleEvent</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> info = <span class="string">""</span>,</span><br><span class="line">    output = <span class="built_in">document</span>.getElementById(<span class="string">"output"</span>),</span><br><span class="line">    files, i, len;</span><br><span class="line"></span><br><span class="line">  EventUtil.preventDefault(event);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (event.type == <span class="string">"drop"</span>) &#123;</span><br><span class="line">    files = event.dataTransfer.files;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    len = files.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">      info += files[i].name + <span class="string">" ("</span> + files[i].type + <span class="string">", "</span> + files[i].size + <span class="string">" bytes)&lt;br&gt;"</span>;</span><br><span class="line"></span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    output.innerHTML = info;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EventUtil.addHandler(droptarget, <span class="string">"dragenter"</span>, handleEvent);</span><br><span class="line">EventUtil.addHandler(droptarget, <span class="string">"dragover"</span>, handleEvent);</span><br><span class="line">EventUtil.addHandler(droptarget, <span class="string">"drop"</span>, handleEvent);</span><br></pre></td></tr></table></figure><blockquote><p>与之前展示的拖放示例一样，这里也必须取消<code>dragenter</code>、<code>dragover</code>和<code>drop</code>的默认行为。在<code>drop</code>事件中，可以通过<code>event.dataTransfer.files</code>读取文件信息。还有一种利用这个功能的流行做法，即结合<code>XMLHttpRequest</code>和拖放文件来实现上传。</p></blockquote><h3 id="使用-XHR-上传文件"><a href="#使用-XHR-上传文件" class="headerlink" title="使用 XHR 上传文件"></a>使用 XHR 上传文件</h3><p>通过<code>File API</code>能够访问到文件内容，利用这一点就可以通过XHR直接把文件上传到服务器。当然啦，把文件内容放到<code>xhr.send()</code>方法中，再通过POST请求，的确很容易就能实现上传。但这样做传递的是文件内容，因而服务器端必须收集提交的内容，然后再把它们保存到另一个文件中。</p><p>其实，更好的做法是以表单提交的方式来上传文件。这样使用<code>FormData</code>类型就很容易做到了。首先，要创建一个<code>FormData</code>对象，通过它调用<code>formdata.append()</code>方法并传入相应的<code>File</code>对象作为参数。然后，再把<code>FormData</code>对象传递给XHR的<code>xhr.send()</code>方法，结果与通过表单上传一模一样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> droptarget = <span class="built_in">document</span>.getElementById(<span class="string">"droptarget"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleEvent</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> info = <span class="string">""</span>,</span><br><span class="line">    output = <span class="built_in">document</span>.getElementById(<span class="string">"output"</span>),</span><br><span class="line">    data, xhr, files, i, len;</span><br><span class="line">  EventUtil.preventDefault(event);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (event.type == <span class="string">"drop"</span>) &#123;</span><br><span class="line">    data = <span class="keyword">new</span> FormData();</span><br><span class="line">    files = event.dataTransfer.files;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    len = files.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">      data.append(<span class="string">"file"</span> + i, files[i]);</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">"post"</span>, <span class="string">"FileAPIExample06Upload.php"</span>, <span class="literal">true</span>);</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">        alert(xhr.responseText);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.send(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EventUtil.addHandler(droptarget, <span class="string">"dragenter"</span>, handleEvent);</span><br><span class="line">EventUtil.addHandler(droptarget, <span class="string">"dragover"</span>, handleEvent);</span><br><span class="line">EventUtil.addHandler(droptarget, <span class="string">"drop"</span>, handleEvent);</span><br></pre></td></tr></table></figure><blockquote><p>这个例子创建一个<code>FormData</code>对象，与每个文件对应的键分别是<code>file0</code>、<code>file1</code>、<code>file2</code>这样的格式。注意，不用额外写任何代码，这些文件就可以作为表单的值提交。而且，也不必使用<code>FileReader</code>，只要传入<code>File</code>对象即可。</p><p>使用<code>FormData</code>上传文件，在服务器端就好像是接收到了常规的表单数据一样，一切按部就班地处理即可。换句话说，如果服务器端使用的是PHP，那么<code>$_FILES</code>数组中就会保存着上传的文件。</p></blockquote><h2 id="Web计时"><a href="#Web计时" class="headerlink" title="Web计时"></a>Web计时</h2><p>Web计时机制的核心是<code>window.performance</code>对象。对页面的所有度量信息，包括那些规范中已经定义的和将来才能确定的，都包含在这个对象里面。WebTiming规范一开始就为performance对象定义了两个属性。</p><h3 id="window-performance-navigation"><a href="#window-performance-navigation" class="headerlink" title="window.performance.navigation"></a>window.performance.navigation</h3><p><code>performance.navigation</code>属性是一个对象，包含着与页面导航有关的多个属性，如下所示</p><ul><li><code>redirectCount</code>：页面加载前的重定向次数。</li><li><code>type</code>：数值常量，表示刚刚发生的导航类型。<ul><li><code>performance.navigation.TYPE_NAVIGATE (0)</code>：页面第一次加载。 </li><li><code>performance.navigation.TYPE_RELOAD (1)</code>：页面重载过。 </li><li><code>performance.navigation.TYPE_BACK_FORWARD (2)</code>：页面是通过“后退”或“前进”按 钮打开的。</li></ul></li></ul><h3 id="window-performance-timing"><a href="#window-performance-timing" class="headerlink" title="window.performance.timing"></a>window.performance.timing</h3><p><code>performance.timing</code>属性是一个对象,这个对象的属性都是时间戳（从软件纪元开始经过的毫秒数），不同的事件会产生不同的时间值</p><ul><li><code>navigationStart</code>：开始导航到当前页面的时间。</li><li><code>unloadEventStart</code>：前一个页面的unload事件开始的时间。但只有在前一个页面与当前页面来自同一个域时这个属性才会有值；否则，值为0。</li><li><code>unloadEventEnd</code>：前一个页面的unload事件结束的时间。但只有在前一个页面与当前页面来自同一个域时这个属性才会有值；否则，值为0。</li><li><code>redirectStart</code>：到当前页面的重定向开始的时间。但只有在重定向的页面来自同一个域时这个属性才会有值；否则，值为0。</li><li><code>redirectEnd</code>：到当前页面的重定向结束的时间。但只有在重定向的页面来自同一个域时这个属性才会有值；否则，值为0。</li><li><code>fetchStart</code>：开始通过HTTPGET取得页面的时间。</li><li><code>domainLookupStart</code>：开始查询当前页面DNS的时间。</li><li><code>domainLookupEnd</code>：查询当前页面DNS结束的时间。</li><li><code>connectStart</code>：浏览器尝试连接服务器的时间。</li><li><code>connectEnd</code>：浏览器成功连接到服务器的时间。</li><li><code>secureConnectionStart</code>：浏览器尝试以SSL方式连接服务器的时间。不使用SSL方式连接时，这个属性的值为0。</li><li><code>requestStart</code>：浏览器开始请求页面的时间。</li><li><code>responseStart</code>：浏览器接收到页面第一字节的时间。</li><li><code>responseEnd</code>：浏览器接收到页面所有内容的时间。</li><li><code>domLoading</code>：document.readyState变为”loading”的时间。</li><li><code>domInteractive</code>：document.readyState变为”interactive”的时间。</li><li><code>domContentLoadedEventStart</code>：发生DOMContentLoaded事件的时间。</li><li><code>domContentLoadedEventEnd</code>：DOMContentLoaded事件已经发生且执行完所有事件处理程序的时间。</li><li><code>domComplete</code>：document.readyState变为”complete”的时间。</li><li><code>loadEventStart</code>：发生load事件的时间。</li><li><code>loadEventEnd</code>：load事件已经发生且执行完所有事件处理程序的时间。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;最佳实践&quot;&gt;&lt;a href=&quot;#最佳实践&quot; class=&quot;headerlink&quot; title=&quot;最佳实践&quot;&gt;&lt;/a&gt;最佳实践&lt;/h1&gt;&lt;h2 id=&quot;可维护性&quot;&gt;&lt;a href=&quot;#可维护性&quot; class=&quot;headerlink&quot; title=&quot;可维护性&quot;&gt;&lt;/a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正反馈系列:《JavaScript高级程序设计》高级技巧,客户端存储</title>
    <link href="http://yoursite.com/2018/01/03/%E9%AB%98%E7%A8%8B12-%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7-Web%E5%AD%98%E5%82%A8/"/>
    <id>http://yoursite.com/2018/01/03/高程12-高级技巧-Web存储/</id>
    <published>2018-01-03T01:07:55.000Z</published>
    <updated>2018-03-21T10:28:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h1><h2 id="高级函数"><a href="#高级函数" class="headerlink" title="高级函数"></a>高级函数</h2><h3 id="安全类型检测"><a href="#安全类型检测" class="headerlink" title="安全类型检测"></a>安全类型检测</h3><p>在任何值上调用Object原生的toString()方法，都会返回一个<code>[objec tNativeConstructorName]</code>格式的字符串。每个类在内部都有一个<code>[[Class]]</code>属性，这个属性中就指定了上述字符串中的构造函数名。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="built_in">Object</span>.prototype.toString.call(value)); <span class="comment">//"[object Array]"</span></span><br></pre></td></tr></table></figure><p>由于原生数组的构造函数名与全局作用域无关，因此使用<code>toString()</code>就能保证返回一致的值。利用这一点，可以创建如下函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测value是不是数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  returnObject.prototype.toString.call(value) == <span class="string">"[objectArray]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 检测value是不是函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFunction</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(value) == <span class="string">"[object Function]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 检测value是不是正则表达式对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isRegExp</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(value) == <span class="string">"[object RegExp]"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一技巧也广泛应用于检测原生JSON对象。<code>Object</code>的<code>toString()</code>方法不能检测非原生构造函数的构造函数名。因此，开发人员定义的任何构造函数都将返回<code>[object Object]</code>。有些JavaScript库会包含与下面类似的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isNativeJSON = <span class="built_in">window</span>.JSON &amp;&amp; <span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">JSON</span>) == <span class="string">"[object JSON]"</span>;</span><br></pre></td></tr></table></figure><blockquote><p>在Web开发中能够区分原生与非原生JavaScript对象非常重要。只有这样才能确切知道某个对象到底有哪些功能。这个技巧可以对任何对象给出正确的结论。</p></blockquote><h3 id="作用域安全的构造函数"><a href="#作用域安全的构造函数" class="headerlink" title="作用域安全的构造函数"></a>作用域安全的构造函数</h3><p>看一个例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.job = job;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = Person(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>); <span class="comment">// 没写new</span></span><br><span class="line">alert(<span class="built_in">window</span>.name); <span class="comment">//"Nicholas" </span></span><br><span class="line">alert(<span class="built_in">window</span>.age); <span class="comment">//29 </span></span><br><span class="line">alert(<span class="built_in">window</span>.job); <span class="comment">//"Software Engineer"</span></span><br></pre></td></tr></table></figure><blockquote><p>避免方法:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span> <span class="keyword">instanceof</span> Person) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.job = job;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Person(name, age, job);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = Person(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</span><br><span class="line">alert(<span class="built_in">window</span>.name); <span class="comment">//"" </span></span><br><span class="line">alert(person1.name); <span class="comment">//"Nicholas"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"Shelby"</span>, <span class="number">34</span>, <span class="string">"Ergonomist"</span>);</span><br><span class="line">alert(person2.name); <span class="comment">//"Shelby"</span></span><br></pre></td></tr></table></figure><p>再看一个例子,该例使用了借用构造函数模式,且不使用原型链,用刚才的方法会出问题,这时就需要加一行<code>Rectangle.prototype = new Polygon();</code>,就解决了这个问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Polygon</span>(<span class="params">sides</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span> <span class="keyword">instanceof</span> Polygon) &#123;</span><br><span class="line">    <span class="keyword">this</span>.sides = sides;</span><br><span class="line">    <span class="keyword">this</span>.getArea = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Polygon(sides);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rectangle</span>(<span class="params">width, height</span>) </span>&#123;</span><br><span class="line">  Polygon.call(<span class="keyword">this</span>, <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">this</span>.width = width;</span><br><span class="line">  <span class="keyword">this</span>.height = height;</span><br><span class="line">  <span class="keyword">this</span>.getArea = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.width * <span class="keyword">this</span>.height;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Rectangle.prototype = new Polygon();</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rect = <span class="keyword">new</span> Rectangle(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">alert(rect.sides); <span class="comment">//undefined //2</span></span><br></pre></td></tr></table></figure><h3 id="惰性载入函数"><a href="#惰性载入函数" class="headerlink" title="惰性载入函数"></a>惰性载入函数</h3><p>看一个例子,之前的xhr对象创建兼容函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXHR</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> XMLHttpRequest != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> ActiveXObject != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">arguments</span>.callee.activeXString != <span class="string">"string"</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> versions = [<span class="string">"MSXML2.XMLHttp.6.0"</span>, <span class="string">"MSXML2.XMLHttp.3.0"</span>, <span class="string">"MSXML2.XMLHttp"</span>],</span><br><span class="line">        i, len;</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>, len = versions.length; i &lt; len; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">new</span> ActiveXObject(versions[i]);</span><br><span class="line">          <span class="built_in">arguments</span>.callee.activeXString = versions[i];</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">          <span class="comment">//跳过 </span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="built_in">arguments</span>.callee.activeXString);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"No XHR object available."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>该函数每次创建一个xhr对象都要进行能力检测,但其实能力检测执行一次就够了,有两种惰性载入方式解决这个问题</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXHR</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> XMLHttpRequest != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    createXHR = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> ActiveXObject != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    createXHR = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">arguments</span>.callee.activeXString != <span class="string">"string"</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> versions = [<span class="string">"MSXML2.XMLHttp.6.0"</span>, <span class="string">"MSXML2.XMLHttp.3.0"</span>,</span><br><span class="line">            <span class="string">"MSXML2.XMLHttp"</span></span><br><span class="line">          ],</span><br><span class="line">          i, len;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>, len = versions.length; i &lt; len; i++) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> ActiveXObject(versions[i]);</span><br><span class="line">            <span class="built_in">arguments</span>.callee.activeXString = versions[i];</span><br><span class="line">          &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">            <span class="comment">//skip</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="built_in">arguments</span>.callee.activeXString);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    createXHR = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"No XHR object available."</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> createXHR();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第二种方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createXHR = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> XMLHttpRequest != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> ActiveXObject != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">arguments</span>.callee.activeXString != <span class="string">"string"</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> versions = [<span class="string">"MSXML2.XMLHttp.6.0"</span>, <span class="string">"MSXML2.XMLHttp.3.0"</span>,</span><br><span class="line">            <span class="string">"MSXML2.XMLHttp"</span></span><br><span class="line">          ],</span><br><span class="line">          i, len;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>, len = versions.length; i &lt; len; i++) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> ActiveXObject(versions[i]);</span><br><span class="line">            <span class="built_in">arguments</span>.callee.activeXString = versions[i];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">            <span class="comment">//skip</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="built_in">arguments</span>.callee.activeXString);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"No XHR object available."</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="函数绑定"><a href="#函数绑定" class="headerlink" title="函数绑定"></a>函数绑定</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">fn, context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fn.apply(context, <span class="built_in">arguments</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述方法等同于原生bind方法<code>fn.bind(context,arg1,arg2,arg3...)</code>,不会像<code>call</code>与<code>apply</code>一样立即执行.</p><h3 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h3><blockquote><p>柯里化 Curry<br>概念: 只传递函数的一部分参数来调用它,让它返回一个函数去处理剩下的参数<br>函数签名:func(params)(otherParams)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单小例子</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> array = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>,<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  array.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">v,i</span>) </span>&#123;</span><br><span class="line">    sum += v;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params">add</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> add.apply(<span class="literal">null</span>,<span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(outer(add)(<span class="number">2</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure><blockquote><p>用柯里化改造上一节的自定义bind()函数,使其变为类似原生.bind一样支持后续参数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">fn, context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> innerArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">var</span> finalArgs = args.concat(innerArgs);</span><br><span class="line">    <span class="keyword">return</span> fn.apply(context, finalArgs);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="防篡改对象"><a href="#防篡改对象" class="headerlink" title="防篡改对象"></a>防篡改对象</h2><h3 id="不可扩展对象-一级防篡改"><a href="#不可扩展对象-一级防篡改" class="headerlink" title="不可扩展对象(一级防篡改)"></a>不可扩展对象(一级防篡改)</h3><h4 id="Object-preventExtensions"><a href="#Object-preventExtensions" class="headerlink" title="Object.preventExtensions()"></a>Object.preventExtensions()</h4><p><code>Object.preventExtensions(obj)</code>,让你不能再给obj添加属性和方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">"Nicholas"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(person);</span><br><span class="line"></span><br><span class="line">person.age = <span class="number">29</span>;</span><br><span class="line">alert(person.age); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><h4 id="Object-istExtensible"><a href="#Object-istExtensible" class="headerlink" title="Object.istExtensible()"></a>Object.istExtensible()</h4><p><code>Object.istExtensible(obj) return boolean</code>,判断对象是否可以扩展</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">"Nicholas"</span></span><br><span class="line">&#125;;</span><br><span class="line">alert(<span class="built_in">Object</span>.isExtensible(person));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(person);</span><br><span class="line">alert(<span class="built_in">Object</span>.isExtensible(person));<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="密封对象-二级防篡改"><a href="#密封对象-二级防篡改" class="headerlink" title="密封对象(二级防篡改)"></a>密封对象(二级防篡改)</h3><p>是<code>密封对象</code>（sealed object）不可扩展，而且已有成员的<code>[[Configurable]]</code>特性将被设置为<code>false</code>。这就意味着不能删除属性和方法，因为不能使用<code>Object.defineProperty()</code>把数据属性修改为访问器属性。属性值是可以修改的。</p><h4 id="Object-seal"><a href="#Object-seal" class="headerlink" title="Object.seal()"></a>Object.seal()</h4><p><code>Object.seal(obj)</code>, 密封对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">"Nicholas"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.seal(person);</span><br><span class="line"></span><br><span class="line">person.age = <span class="number">29</span>;</span><br><span class="line">alert(person.age); <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> person.name;</span><br><span class="line">alert(person.name); <span class="comment">//"Nicholas"</span></span><br></pre></td></tr></table></figure><h4 id="Object-isSealed"><a href="#Object-isSealed" class="headerlink" title="Object.isSealed()"></a>Object.isSealed()</h4><p><code>Object.isSealed(obj) return boolean</code> 检测对象是否被密封了,因为被密封的对象不可扩展，所以用<code>Object.isExtensible(obj)</code>检测密封的对象也会返回false。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">"Nicholas"</span></span><br><span class="line">&#125;;</span><br><span class="line">alert(<span class="built_in">Object</span>.isExtensible(person)); <span class="comment">//true </span></span><br><span class="line">alert(<span class="built_in">Object</span>.isSealed(person)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.seal(person);</span><br><span class="line">alert(<span class="built_in">Object</span>.isExtensible(person)); <span class="comment">//false </span></span><br><span class="line">alert(<span class="built_in">Object</span>.isSealed(person)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="冻结的对象-顶级防篡改"><a href="#冻结的对象-顶级防篡改" class="headerlink" title="冻结的对象(顶级防篡改)"></a>冻结的对象(顶级防篡改)</h3><p>最严格的防篡改级别是<code>冻结对象</code>（frozen object）。冻结的对象既不可扩展，又是密封的，而且对象数据属性的<code>[[Writable]]</code>特性会被设置为<code>false</code>。如果定义<code>[[Set]]</code>函数，访问器属性仍然是可写的。</p><h4 id="Object-freeze"><a href="#Object-freeze" class="headerlink" title="Object.freeze()"></a>Object.freeze()</h4><p><code>Object.freeze(obj)</code> 冻结对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">"Nicholas"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.freeze(person);</span><br><span class="line"></span><br><span class="line">person.age = <span class="number">29</span>;</span><br><span class="line">alert(person.age); <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> person.name;</span><br><span class="line">alert(person.name);  <span class="comment">//"Nicholas"</span></span><br><span class="line"></span><br><span class="line">person.name = <span class="string">"Greg"</span>;</span><br><span class="line">alert(person.name); <span class="comment">//"Nicholas"</span></span><br></pre></td></tr></table></figure><h4 id="Object-isFrozen"><a href="#Object-isFrozen" class="headerlink" title="Object.isFrozen()"></a>Object.isFrozen()</h4><p><code>Object.isFrozen(obj) return boolean</code> 判断对象是否冻结</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">"Nicholas"</span></span><br><span class="line">&#125;;</span><br><span class="line">alert(<span class="built_in">Object</span>.isExtensible(person)); <span class="comment">//true</span></span><br><span class="line">alert(<span class="built_in">Object</span>.isSealed(person)); <span class="comment">//false</span></span><br><span class="line">alert(<span class="built_in">Object</span>.isFrozen(person)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.freeze(person);</span><br><span class="line">alert(<span class="built_in">Object</span>.isExtensible(person)); <span class="comment">//false</span></span><br><span class="line">alert(<span class="built_in">Object</span>.isSealed(person)); <span class="comment">//true</span></span><br><span class="line">alert(<span class="built_in">Object</span>.isFrozen(person)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="高级定时器"><a href="#高级定时器" class="headerlink" title="高级定时器"></a>高级定时器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"my-btn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"message"</span>).style.visibility = <span class="string">"visible"</span>;</span><br><span class="line">  &#125;, <span class="number">250</span>);</span><br><span class="line">  <span class="comment">//其他代码</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>假设上述代码<code>onclick</code>处理程序共执行300ms,执行到第5ms时,创建了250ms的定时器,250ms后,将定时器中的回调函数放入了执行队列,但必须等到<code>onlick</code>处理程序执行完(300ms)后,队列中的代码才开始排队执行,所以定时器中的回调函数最早的执行事件也在300ms后</p></blockquote><p><img src="https://i.loli.net/2018/01/03/5a4c2ca14189b.jpg" alt=""></p><h3 id="重复的定时器"><a href="#重复的定时器" class="headerlink" title="重复的定时器"></a>重复的定时器</h3><p><code>setInterval</code>这种重复定时器的规则有两个问题：(1)某些间隔会被跳过；(2)多个定时器的代码执行之间的间隔可能会比预期的小。假设，某个<code>onclick</code>事件处理程序使用<code>setInterval()</code>设置了一个200ms间隔的重复定时器。如果事件处理程序花了300ms多一点的时间完成，同时定时器代码也花了差不多的时间，就会同时出现跳过间隔且连续运行定时器代码的情况</p><p><img src="https://i.loli.net/2018/01/03/5a4c2ca161b1f.jpg" alt=""></p><blockquote><p>这个例子中的第1个定时器是在205ms处添加到队列中的，但是直到过了300ms处才能够执行。当执行这个定时器代码时，在405ms处又给队列添加了另外一个副本。在下一个间隔，即605ms处，第一个定时器代码仍在运行，同时在队列中已经有了一个定时器代码的实例。结果是，在这个时间点上的定时器代码不会被添加到队列中。结果在5ms处添加的定时器代码结束之后，405ms处添加的定时器代码就立刻执行。</p></blockquote><p>解决办法是用链式调用的<code>setTimeout</code>替代。这样做的好处是，在前一个定时器代码执行完之前，不会向队列插入新的定时器代码，确保不会有任何缺失的间隔。而且，它可以保证在下一次定时器代码执行之前，至少要等待指定的间隔，避免了连续的运行。这个模式主要用于重复定时器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//处理中 </span></span><br><span class="line">  setTimeout(<span class="built_in">arguments</span>.callee, interval);</span><br><span class="line">&#125;, interval);</span><br></pre></td></tr></table></figure><h3 id="Yielding-Processes"><a href="#Yielding-Processes" class="headerlink" title="Yielding Processes"></a>Yielding Processes</h3><p>一旦某个函数需要花 50ms 以上的时间完成，那么最好看看能否将任务分割为一系列可以使用定时器的小任务。可以使用定时器分割任务。这是一种叫做<code>数组分块</code>（arraychunking）的技术，小块小块地处理数组，通常每次一小块。基本的思路是为要处理的项目创建一个队列，然后使用定时器取出下一个要处理的项目进行处理，接着再设置另一个定时器。基本的模式如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chunk</span>(<span class="params">array, process, context</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> item = array.shift();</span><br><span class="line">    process.call(context, item);</span><br><span class="line">    <span class="keyword">if</span> (array.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      setTimeout(<span class="built_in">arguments</span>.callee, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [<span class="number">12</span>, <span class="number">123</span>, <span class="number">1234</span>, <span class="number">453</span>, <span class="number">436</span>, <span class="number">23</span>, <span class="number">23</span>, <span class="number">5</span>, <span class="number">4123</span>, <span class="number">45</span>, <span class="number">346</span>, <span class="number">5634</span>, <span class="number">2234</span>, <span class="number">345</span>, <span class="number">342</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printValue</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line">  div.innerHTML += item + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chunk(data, printValue);</span><br></pre></td></tr></table></figure><blockquote><p>必须当心的地方是，传递给<code>chunk()</code>的数组是用作一个队列的，因此当处理数据的同时，数组中的条目也在改变。如果你想保持原数组不变，则应该将该数组的克隆传递给<code>chunk()</code>，如下例所示：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chunk(data.concat(), printValue);</span><br></pre></td></tr></table></figure><h3 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h3><p>函数节流背后的基本思想是指，某些代码不可以在没有间断的情况连续重复执行。第一次调用函数，创建一个定时器，在指定的时间间隔之后运行代码。当第二次调用该函数时，它会清除前一次的定时器并设置另一个。如果前一个定时器已经执行过了，这个操作就没有任何意义。然而，如果前一个定时器尚未执行，其实就是将其替换为一个新的定时器。目的是只有在执行函数的请求停止了一段时间之后才执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">method, context</span>) </span>&#123;</span><br><span class="line">  clearTimeout(method.tId);</span><br><span class="line">  method.tId = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    method.call(context);</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>应用,在<code>window.onresize</code>这种耗费资源的事件中,事件节流效果显著</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resizeDiv</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line">  div.style.height = div.offsetWidth + <span class="string">"px"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  throttle(resizeDiv);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>只要代码是周期性执行的，都应该使用节流，但是你不能控制请求执行的速率。这里展示的<code>throttle()</code>函数用了100ms作为间隔，你当然可以根据你的需要来修改它。</p></blockquote><h2 id="自定义事件-观察者模式"><a href="#自定义事件-观察者模式" class="headerlink" title="自定义事件,观察者模式"></a>自定义事件,观察者模式</h2><blockquote><p>DOM元素是主题,事件处理程序是观察者</p><p>自定义事件背后的概念是创建一个管理事件的对象，让其他对象监听那些事件。如下:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EventTarget</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.handlers = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EventTarget.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: EventTarget,</span><br><span class="line"></span><br><span class="line">  addHandler: function (type, handler) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.handlers[type] == <span class="string">"undefined"</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.handlers[type] = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.handlers[type].push(handler);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  fire: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!event.target) &#123;</span><br><span class="line">      event.target = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.handlers[event.type] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> handlers = <span class="keyword">this</span>.handlers[event.type];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = handlers.length; i &lt; len; i++) &#123;</span><br><span class="line">        handlers[i](event);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  removeHandler: <span class="function"><span class="keyword">function</span> (<span class="params">type, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.handlers[type] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> handlers = <span class="keyword">this</span>.handlers[type];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = handlers.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (handlers[i] === handler) &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      handlers.splice(i, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>初级调用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleMessage</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Message received: "</span> + event.message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> target = <span class="keyword">new</span> EventTarget();</span><br><span class="line"></span><br><span class="line">target.addHandler(<span class="string">"message"</span>, handleMessage);</span><br><span class="line"></span><br><span class="line">target.fire(&#123;</span><br><span class="line">  type: <span class="string">"message"</span>,</span><br><span class="line">  message: <span class="string">"Hello world!"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">target.removeHandler(<span class="string">"message"</span>, handleMessage);</span><br><span class="line"></span><br><span class="line">target.fire(&#123;</span><br><span class="line">  type: <span class="string">"message"</span>,</span><br><span class="line">  message: <span class="string">"Hello world!"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>高级调用,结合寄生组合继承</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  F.prototype = o;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">subType, superType</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> prototype = object(superType.prototype); <span class="comment">//create object</span></span><br><span class="line">  prototype.constructor = subType; <span class="comment">//augment object</span></span><br><span class="line">  subType.prototype = prototype; <span class="comment">//assign object</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  EventTarget.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inheritPrototype(Person, EventTarget);</span><br><span class="line"></span><br><span class="line">Person.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.fire(&#123;</span><br><span class="line">    type: <span class="string">"message"</span>,</span><br><span class="line">    message: message</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleMessage</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(event.target.name + <span class="string">" says: "</span> + event.message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">"Nicholas"</span>, <span class="number">29</span>);</span><br><span class="line">person.addHandler(<span class="string">"message"</span>, handleMessage);</span><br><span class="line">person.say(<span class="string">"Hi there."</span>);</span><br></pre></td></tr></table></figure><h2 id="拖放"><a href="#拖放" class="headerlink" title="拖放"></a>拖放</h2><h3 id="鼠标拖尾"><a href="#鼠标拖尾" class="headerlink" title="鼠标拖尾"></a>鼠标拖尾</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;div id="myDiv" style="background:red;width:100px;height:100px;position:absolute"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"mousemove"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> myDiv = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line">  myDiv.style.left = event.clientX + <span class="string">"px"</span>;</span><br><span class="line">  myDiv.style.top = event.clientY + <span class="string">"px"</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="拖放接口"><a href="#拖放接口" class="headerlink" title="拖放接口"></a>拖放接口</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;div class="draggable" style="position:absolute; background:red"&gt; &lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> DragDrop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//单例模式</span></span><br><span class="line">  <span class="keyword">var</span> dragging = <span class="literal">null</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleEvent</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//get event and target</span></span><br><span class="line">    event = EventUtil.getEvent(event);</span><br><span class="line">    <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line">    <span class="comment">//determine the type of event</span></span><br><span class="line">    <span class="keyword">switch</span> (event.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mousedown"</span>:</span><br><span class="line">        <span class="keyword">if</span> (target.className.indexOf(<span class="string">"draggable"</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">          dragging = target;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mousemove"</span>:</span><br><span class="line">        <span class="keyword">if</span> (dragging !== <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//assign location</span></span><br><span class="line">          dragging.style.left = event.clientX + <span class="string">"px"</span>;</span><br><span class="line">          dragging.style.top = event.clientY + <span class="string">"px"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mouseup"</span>:</span><br><span class="line">        dragging = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//public interface</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    enable: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"mousedown"</span>, handleEvent);</span><br><span class="line">      EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"mousemove"</span>, handleEvent);</span><br><span class="line">      EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"mouseup"</span>, handleEvent);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    disable: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      EventUtil.removeHandler(<span class="built_in">document</span>, <span class="string">"mousedown"</span>, handleEvent);</span><br><span class="line">      EventUtil.removeHandler(<span class="built_in">document</span>, <span class="string">"mousemove"</span>, handleEvent);</span><br><span class="line">      EventUtil.removeHandler(<span class="built_in">document</span>, <span class="string">"mouseup"</span>, handleEvent);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">DragDrop.enable();</span><br></pre></td></tr></table></figure><blockquote><p><code>DragDrop</code>对象封装了拖放的所有基本功能。这是一个单例对象，并使用了模块模式来隐藏某些实现细节。<code>dragging</code>变量起初是null，将会存放被拖动的元素，所以当该变量不为null时，就知道正在拖动某个东西。<code>handleEvent()</code>函数处理拖放功能中的所有的三个鼠标事件。它首先获取<code>event</code>对象和事件目标的引用。之后，用一个switch语句确定要触发哪个事件样式。当<code>mousedown</code>事件发生时，会检查<code>target</code>的class是否包含”draggable”类，如果是，那么将<code>target</code>存放到<code>dragging</code>中。这个技巧可以很方便地通过标记语言而非JavaScript脚本来确定可拖动的元素。<code>handleEvent()</code>的mousemove情况和前面的代码一样，不过要检查<code>dragging</code>是否为null。当它不是null，就知道dragging就是要拖动的元素，这样就会把它放到恰当的位置上。<code>mouseup</code>情况就仅仅是将dragging重置为null，让mousemove事件中的判断失效。<code>DragDrop</code>还有两个公共方法：<code>DragDrop.enable()</code>和<code>DragDrop.disable()</code>，它们只是相应添加和删除所有的事件处理程序。这两个函数提供了额外的对拖放功能的控制手段。要使用DragDrop对象，只要在页面上包含这些代码并调用<code>DragDrop.enable()</code>。</p></blockquote><h3 id="修缮拖动功能"><a href="#修缮拖动功能" class="headerlink" title="修缮拖动功能"></a>修缮拖动功能</h3><p><img src="https://i.loli.net/2018/01/03/5a4c2ca156296.jpg" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> DragDrop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> dragging = <span class="literal">null</span>,</span><br><span class="line">    diffX = <span class="number">0</span>,</span><br><span class="line">    diffY = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleEvent</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get event and target</span></span><br><span class="line">    event = EventUtil.getEvent(event);</span><br><span class="line">    <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//determine the type of event</span></span><br><span class="line">    <span class="keyword">switch</span> (event.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mousedown"</span>:</span><br><span class="line">        <span class="keyword">if</span> (target.className.indexOf(<span class="string">"draggable"</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">          dragging = target;</span><br><span class="line">          diffX = event.clientX - target.offsetLeft;</span><br><span class="line">          diffY = event.clientY - target.offsetTop;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mousemove"</span>:</span><br><span class="line">        <span class="keyword">if</span> (dragging !== <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//assign location</span></span><br><span class="line">          dragging.style.left = (event.clientX - diffX) + <span class="string">"px"</span>;</span><br><span class="line">          dragging.style.top = (event.clientY - diffY) + <span class="string">"px"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mouseup"</span>:</span><br><span class="line">        dragging = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//public interface</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    enable: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"mousedown"</span>, handleEvent);</span><br><span class="line">      EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"mousemove"</span>, handleEvent);</span><br><span class="line">      EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"mouseup"</span>, handleEvent);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    disable: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      EventUtil.removeHandler(<span class="built_in">document</span>, <span class="string">"mousedown"</span>, handleEvent);</span><br><span class="line">      EventUtil.removeHandler(<span class="built_in">document</span>, <span class="string">"mousemove"</span>, handleEvent);</span><br><span class="line">      EventUtil.removeHandler(<span class="built_in">document</span>, <span class="string">"mouseup"</span>, handleEvent);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><h3 id="添加自定义事件"><a href="#添加自定义事件" class="headerlink" title="添加自定义事件"></a>添加自定义事件</h3><p>拖放功能还不能真正应用起来，除非能知道什么时候拖动开始了。从这点上看，前面的代码没有提供任何方法表示拖动开始、正在拖动或者已经结束。这时，可以使用自定义事件来指示这几个事件的发生，让应用的其他部分与拖动功能进行交互。</p><p>由于<code>DragDrop</code>对象是一个使用了模块模式的<strong>单例</strong>，所以需要进行一些更改来使用<code>EventTarget</code>类型。首先，创建一个新的<code>EventTarget</code>对象，然后添加<code>enable()</code>和<code>disable()</code>方法，最后返回这个对象。看以下内容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> DragDrop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> dragdrop = <span class="keyword">new</span> EventTarget(),</span><br><span class="line">    dragging = <span class="literal">null</span>,</span><br><span class="line">    diffX = <span class="number">0</span>,</span><br><span class="line">    diffY = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleEvent</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get event and target</span></span><br><span class="line">    event = EventUtil.getEvent(event);</span><br><span class="line">    <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//determine the type of event</span></span><br><span class="line">    <span class="keyword">switch</span> (event.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mousedown"</span>:</span><br><span class="line">        <span class="keyword">if</span> (target.className.indexOf(<span class="string">"draggable"</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">          dragging = target;</span><br><span class="line">          diffX = event.clientX - target.offsetLeft;</span><br><span class="line">          diffY = event.clientY - target.offsetTop;</span><br><span class="line">          dragdrop.fire(&#123;</span><br><span class="line">            type: <span class="string">"dragstart"</span>,</span><br><span class="line">            target: dragging,</span><br><span class="line">            x: event.clientX,</span><br><span class="line">            y: event.clientY</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mousemove"</span>:</span><br><span class="line">        <span class="keyword">if</span> (dragging !== <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//assign location</span></span><br><span class="line">          dragging.style.left = (event.clientX - diffX) + <span class="string">"px"</span>;</span><br><span class="line">          dragging.style.top = (event.clientY - diffY) + <span class="string">"px"</span>;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//fire custom event</span></span><br><span class="line">          dragdrop.fire(&#123;</span><br><span class="line">            type: <span class="string">"drag"</span>,</span><br><span class="line">            target: dragging,</span><br><span class="line">            x: event.clientX,</span><br><span class="line">            y: event.clientY</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mouseup"</span>:</span><br><span class="line">        dragdrop.fire(&#123;</span><br><span class="line">          type: <span class="string">"dragend"</span>,</span><br><span class="line">          target: dragging,</span><br><span class="line">          x: event.clientX,</span><br><span class="line">          y: event.clientY</span><br><span class="line">        &#125;);</span><br><span class="line">        dragging = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//public interface</span></span><br><span class="line">  dragdrop.enable = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"mousedown"</span>, handleEvent);</span><br><span class="line">    EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"mousemove"</span>, handleEvent);</span><br><span class="line">    EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"mouseup"</span>, handleEvent);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  dragdrop.disable = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    EventUtil.removeHandler(<span class="built_in">document</span>, <span class="string">"mousedown"</span>, handleEvent);</span><br><span class="line">    EventUtil.removeHandler(<span class="built_in">document</span>, <span class="string">"mousemove"</span>, handleEvent);</span><br><span class="line">    EventUtil.removeHandler(<span class="built_in">document</span>, <span class="string">"mouseup"</span>, handleEvent);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dragdrop;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">DragDrop.enable();</span><br><span class="line"></span><br><span class="line">DragDrop.addHandler(<span class="string">"dragstart"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> status = <span class="built_in">document</span>.getElementById(<span class="string">"status"</span>);</span><br><span class="line">  status.innerHTML = <span class="string">"Started dragging "</span> + event.target.id;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">DragDrop.addHandler(<span class="string">"drag"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> status = <span class="built_in">document</span>.getElementById(<span class="string">"status"</span>);</span><br><span class="line">  status.innerHTML += <span class="string">"&lt;br&gt;Dragged "</span> + event.target.id + <span class="string">" to ("</span> + event.x + <span class="string">","</span> + event.y + <span class="string">")"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">DragDrop.addHandler(<span class="string">"dragend"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> status = <span class="built_in">document</span>.getElementById(<span class="string">"status"</span>);</span><br><span class="line">  status.innerHTML += <span class="string">"&lt;br&gt;Dropped "</span> + event.target.id + <span class="string">" at ("</span> + event.x + <span class="string">","</span> + event.y + <span class="string">")"</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="离线应用与客户端存储"><a href="#离线应用与客户端存储" class="headerlink" title="离线应用与客户端存储"></a>离线应用与客户端存储</h1><h2 id="离线检测"><a href="#离线检测" class="headerlink" title="离线检测"></a>离线检测</h2><h3 id="navigator-onLine属性"><a href="#navigator-onLine属性" class="headerlink" title="navigator.onLine属性"></a>navigator.onLine属性</h3><p>HTML5为此定义了一个<code>navigator.onLine</code>属性，这个属性值为true表示设备能上网，值为false表示设备离线。这个属性的关键是浏览器必须知道设备能否访问网络，从而返回正确的值。</p><p>除<code>navigator.onLine</code>属性之外，为了更好地确定网络是否可用，HTML5还定义了两个事件：<code>online</code>和<code>offline</code>。当网络从离线变为在线或者从在线变为离线时，分别触发这两个事件。这两个事件在<code>window</code>对象上触发。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"online"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Online"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"offline"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Offline"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="应用缓存"><a href="#应用缓存" class="headerlink" title="应用缓存"></a>应用缓存</h2><p>HTML5的应用缓存（applicationcache），或者简称为<code>appcache</code>，是专门为开发离线Web应用而设计的。<code>Appcache</code>就是从浏览器的缓存中分出来的一块缓存区。要想在这个缓存中保存数据，可以使用一个描述文件（<code>manifestfile</code>），列出要下载和缓存的资源。下面是一个简单的描述文件示例。</p><p>CACHE MANIFEST </p><p> #Comment</p><p>file.js file.css</p><blockquote><p>在最简单的情况下，描述文件中列出的都是需要下载的资源，以备离线时使用。</p></blockquote><p>要将描述文件与页面关联起来，可以在<code>&lt;html&gt;</code>中的 manifest 属性中指定这个文件的路径，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">manifest</span>=<span class="string">"/offline.manifest"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上代码告诉页面，<code>/offline.manifest</code>中包含着描述文件。这个文件的MIME类型必须是<code>text/cache-manifest</code>。</p><p>应用缓存还有一些属性和方法,更多详情查阅高程p628</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>HTTP Cookie，通常直接叫做<code>cookie</code>，最初是在客户端用于存储会话信息的。该标准要求服务器对任意HTTP请求发送<code>Set-Cookie</code> HTTP头作为响应的一部分,这种服务器响应的头可能如下：</p><blockquote><p>HTTP/1.1 200 OK<br>Content-type: text/html<br>Set-Cookie: name=value<br>Other-header: other-header-value</p></blockquote><p>这个HTTP响应设置以<code>name</code>为名称、以<code>value</code>为值的一个<code>cookie</code>，名称和值在传送时都必须是URL编码的。浏览器会存储这样的会话信息，并在这之后，通过为每个请求添加<code>Cookie HTTP头</code>将信息发送回服务器，如下所示：</p><blockquote><p>GET /index.html HTTP/1.1<br>Cookie: name=value<br>Other-header: other-header-value</p></blockquote><p><code>cookie</code>在性质上是绑定在特定的域名下的。当设定了一个<code>cookie</code>后，再给创建它的域名发送请求时，都会包含这个<code>cookie</code>。这个限制确保了储存在cookie中的信息只能让批准的接受者访问</p><p>cookie由浏览器保存的以下几块信息构成</p><ul><li><code>名称</code>：一个唯一确定cookie的名称。cookie名称是不区分大小写的，所以myCookie和MyCookie被认为是同一个cookie。然而，实践中最好将cookie名称看作是区分大小写的，因为某些服务器会这样处理 cookie。cookie 的名称必须是经过 URL 编码的。</li><li><code>值</code>：储存在cookie中的字符串值。值必须被URL编码。</li><li><code>域</code>：cookie对于哪个域是有效的。所有向该域发送的请求中都会包含这个cookie信息。这个值可以包含子域（subdomain，如www.wrox.com），也可以不包含它（如.wrox.com，则对于wrox.com的所有子域都有效）。如果没有明确设定，那么这个域会被认作来自设置cookie的那个域。</li><li><code>路径</code>：对于指定域中的那个路径，应该向服务器发送cookie。例如，你可以指定cookie只有从<a href="http://www.wrox.com/books/中才能访问，那么http://www.wrox.com的页面就不会发送cookie信息，即使请求都是来自同一个域的。" target="_blank" rel="noopener">http://www.wrox.com/books/中才能访问，那么http://www.wrox.com的页面就不会发送cookie信息，即使请求都是来自同一个域的。</a></li><li><code>失效时间</code>：表示cookie何时应该被删除的时间戳（也就是，何时应该停止向服务器发送这个cookie）。默认情况下，浏览器会话结束时即将所有cookie删除；不过也可以自己设置删除时间。这个值是个GMT格式的日期（Wdy,DD-Mon-YYYYHH:MM:SSGMT），用于指定应该删除cookie的准确时间。因此，cookie可在浏览器关闭后依然保存在用户的机器上。如果你设置的失效日期是个以前的时间，则cookie会被立刻删除。</li><li><code>安全标志</code>：指定后，cookie只有在使用SSL连接的时候才发送到服务器。例如，cookie信息只能发送给<a href="https://www.wrox.com，而http://www.wrox.com的请求则不能发送cookie。" target="_blank" rel="noopener">https://www.wrox.com，而http://www.wrox.com的请求则不能发送cookie。</a></li></ul><blockquote><p>HTTP/1.1 200 OK<br>Content-type: text/html<br>Set-Cookie: name=value; expires=Mon, 22-Jan-07 07:10:24 GMT; domain=.wrox.com<br>Other-header: other-header-value</p></blockquote><p>该头信息指定了一个叫做name的cookie，它会在格林威治时间2007年1月22日7:10:24失效，同时对于www.wrox.com和wrox.com的任何子域（如p2p.wrox.com）都有效。</p><p>secure标志是cookie中唯一一个非名值对儿的部分，直接包含一个secure单词</p><blockquote><p>HTTP/1.1 200 OK<br>Content-type: text/html<br>Set-Cookie: name=value; domain=.wrox.com; path=/; secure<br>Other-header: other-header-value</p></blockquote><p>这里，创建了一个对于所有wrox.com的子域和域名下（由path参数指定的）所有页面都有效的cookie。因为设置了secure标志，这个cookie只能通过SSL连接才能传输。</p><h3 id="JavaScript中的cookie"><a href="#JavaScript中的cookie" class="headerlink" title="JavaScript中的cookie"></a>JavaScript中的cookie</h3><p>即BOM的<code>document.cookie</code>属性。。当用来获取属性值时，<code>document.cookie</code>返回当前页面可用的（根据cookie的域、路径、失效时间和安全设置）所有cookie的字符串，一系列由分号隔开的名值对儿，如下例所示</p><p>name1=value1;name2=value2;name3=value3</p><p>所有名字和值都是经过URL编码的，所以必须使用<code>decodeURIComponent()</code>来解码。当用于设置值的时候，<code>document.cookie</code>属性可以设置为一个新的<code>cookie</code>字符串。这个<code>cookie</code>字符串会被解释并添加到现有的<code>cookie</code>集合中。设置document.cookie并不会覆盖cookie，除非设置的<code>cookie</code>的名称已经存在。</p><p>name=value;expires=expiration_time;path=domain_path;domain=domain_name;secure</p><p>这些参数中，只有<code>cookie</code>的名字和值是必需的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie=<span class="string">"name=Nicholas"</span>;</span><br></pre></td></tr></table></figure><p>这段代码创建了一个叫<code>name</code>的<code>cookie</code>，值为Nicholas。当客户端每次向服务器端发送请求的时候，都会发送这个<code>cookie</code>；当浏览器关闭的时候，它就会被删除。虽然这段代码没问题，但因为这里正好名称和值都无需编码，所以最好每次设置<code>cookie</code>时都像下面这个例子中一样使用<code>encodeURIComponent()</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = <span class="built_in">encodeURIComponent</span>(<span class="string">"name"</span>) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(<span class="string">"Nicholas"</span>);</span><br></pre></td></tr></table></figure><p>要给被创建的<code>cookie</code>指定额外的信息，只要将参数追加到该字符串，和<code>Set-Cookie</code>头中的格式一样，如下所示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = <span class="built_in">encodeURIComponent</span>(<span class="string">"name"</span>) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(<span class="string">"Nicholas"</span>) + <span class="string">"; domain=.wrox.com; path=/"</span>;</span><br></pre></td></tr></table></figure><h3 id="CookieUtil-js"><a href="#CookieUtil-js" class="headerlink" title="CookieUtil.js"></a>CookieUtil.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CookieUtil = &#123;</span><br><span class="line"></span><br><span class="line">  get: <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cookieName = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">"="</span>,</span><br><span class="line">      cookieStart = <span class="built_in">document</span>.cookie.indexOf(cookieName),</span><br><span class="line">      cookieValue = <span class="literal">null</span>,</span><br><span class="line">      cookieEnd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cookieStart &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      cookieEnd = <span class="built_in">document</span>.cookie.indexOf(<span class="string">";"</span>, cookieStart);</span><br><span class="line">      <span class="keyword">if</span> (cookieEnd == <span class="number">-1</span>) &#123;</span><br><span class="line">        cookieEnd = <span class="built_in">document</span>.cookie.length;</span><br><span class="line">      &#125;</span><br><span class="line">      cookieValue = <span class="built_in">decodeURIComponent</span>(<span class="built_in">document</span>.cookie.substring(cookieStart + cookieName.length, cookieEnd));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cookieValue;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  set: <span class="function"><span class="keyword">function</span> (<span class="params">name, value, expires, path, domain, secure</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cookieText = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(value);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (expires <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">      cookieText += <span class="string">"; expires="</span> + expires.toGMTString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (path) &#123;</span><br><span class="line">      cookieText += <span class="string">"; path="</span> + path;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (domain) &#123;</span><br><span class="line">      cookieText += <span class="string">"; domain="</span> + domain;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (secure) &#123;</span><br><span class="line">      cookieText += <span class="string">"; secure"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.cookie = cookieText;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  unset: <span class="function"><span class="keyword">function</span> (<span class="params">name, path, domain, secure</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.set(name, <span class="string">""</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>), path, domain, secure);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>调用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置 cookie </span></span><br><span class="line">CookieUtil.set(<span class="string">"name"</span>, <span class="string">"Nicholas"</span>);</span><br><span class="line">CookieUtil.set(<span class="string">"book"</span>, <span class="string">"Professional JavaScript"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取 cookie 的值 </span></span><br><span class="line">alert(CookieUtil.get(<span class="string">"name"</span>)); <span class="comment">//"Nicholas" </span></span><br><span class="line">alert(CookieUtil.get(<span class="string">"book"</span>)); <span class="comment">//"Professional JavaScript"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除 cookie </span></span><br><span class="line">CookieUtil.unset(<span class="string">"name"</span>);</span><br><span class="line">CookieUtil.unset(<span class="string">"book"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置 cookie，包括它的路径、域、失效日期 </span></span><br><span class="line">CookieUtil.set(<span class="string">"name"</span>, <span class="string">"Nicholas"</span>, <span class="string">"/books/projs/"</span>, <span class="string">"www.wrox.com"</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"January 1, 2010"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除刚刚设置的 cookie </span></span><br><span class="line">CookieUtil.unset(<span class="string">"name"</span>, <span class="string">"/books/projs/"</span>, <span class="string">"www.wrox.com"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置安全的 cookie </span></span><br><span class="line">CookieUtil.set(<span class="string">"name"</span>, <span class="string">"Nicholas"</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><blockquote><p>没有删除已有<code>cookie</code>的直接方法。所以，需要使用相同的路径、域和安全选项再次设置<code>cookie</code>，并将失效时间设置为过去的时间。<code>CookieUtil.unset()</code>方法可以处理这种事情。它接收4个参数：要删除的<code>cookie</code>的名称、可选的路径参数、可选的域参数和可选的安全参数。这些参数加上空字符串并设置失效时间为1970年1月1日（初始化为0ms的<code>Date</code>对象的值），传给<code>CookieUtil.set()</code>。这样就能确保删除<code>cookie</code>。</p></blockquote><h3 id="子cookie"><a href="#子cookie" class="headerlink" title="子cookie"></a>子cookie</h3><p>为了绕开浏览器的单域名下的cookie数限制，一些开发人员使用了一种称为子cookie（<code>subcookie</code>）的概念。子cookie是存放在单个cookie中的更小段的数据。也就是使用cookie值来存储多个名称值对儿。子cookie最常见的的格式如下所示。</p><p><code>name=name1=value1&amp;name2=value2&amp;name3=value3&amp;name4=value4&amp;name5=value5</code></p><p>子cookie一般也以查询字符串的格式进行格式化。然后这些值可以使用单个cookie进行存储和访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> SubCookieUtil = &#123;</span><br><span class="line">  </span><br><span class="line">  get: <span class="function"><span class="keyword">function</span> (<span class="params">name, subName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> subCookies = <span class="keyword">this</span>.getAll(name);</span><br><span class="line">    <span class="keyword">if</span> (subCookies) &#123;</span><br><span class="line">      <span class="keyword">return</span> subCookies[subName];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  getAll: <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cookieName = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">"="</span>,</span><br><span class="line">      cookieStart = <span class="built_in">document</span>.cookie.indexOf(cookieName),</span><br><span class="line">      cookieValue = <span class="literal">null</span>,</span><br><span class="line">      cookieEnd,</span><br><span class="line">      subCookies,</span><br><span class="line">      i,</span><br><span class="line">      parts,</span><br><span class="line">      result = &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (cookieStart &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      cookieEnd = <span class="built_in">document</span>.cookie.indexOf(<span class="string">";"</span>, cookieStart)</span><br><span class="line">      <span class="keyword">if</span> (cookieEnd == <span class="number">-1</span>) &#123;</span><br><span class="line">        cookieEnd = <span class="built_in">document</span>.cookie.length;</span><br><span class="line">      &#125;</span><br><span class="line">      cookieValue = <span class="built_in">document</span>.cookie.substring(cookieStart + cookieName.length, cookieEnd);</span><br><span class="line">      <span class="keyword">if</span> (cookieValue.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        subCookies = cookieValue.split(<span class="string">"&amp;"</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>, len = subCookies.length; i &lt; len; i++) &#123;</span><br><span class="line">          parts = subCookies[i].split(<span class="string">"="</span>);</span><br><span class="line">          result[<span class="built_in">decodeURIComponent</span>(parts[<span class="number">0</span>])] = <span class="built_in">decodeURIComponent</span>(parts[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  set: <span class="function"><span class="keyword">function</span> (<span class="params">name, subName, value, expires, path, domain, secure</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> subcookies = <span class="keyword">this</span>.getAll(name) || &#123;&#125;;</span><br><span class="line">    subcookies[subName] = value;</span><br><span class="line">    <span class="keyword">this</span>.setAll(name, subcookies, expires, path, domain, secure);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  setAll: <span class="function"><span class="keyword">function</span> (<span class="params">name, subcookies, expires, path, domain, secure</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cookieText = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">"="</span>,</span><br><span class="line">      subcookieParts = <span class="keyword">new</span> <span class="built_in">Array</span>(),</span><br><span class="line">      subName;</span><br><span class="line">    <span class="keyword">for</span> (subName <span class="keyword">in</span> subcookies) &#123;</span><br><span class="line">      <span class="keyword">if</span> (subName.length &gt; <span class="number">0</span> &amp;&amp; subcookies.hasOwnProperty(subName)) &#123;</span><br><span class="line">        subcookieParts.push(<span class="built_in">encodeURIComponent</span>(subName) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(subcookies[subName]));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (subcookieParts.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      cookieText += subcookieParts.join(<span class="string">"&amp;"</span>);</span><br><span class="line">      <span class="keyword">if</span> (expires <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">        cookieText += <span class="string">"; expires="</span> + expires.toGMTString();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (path) &#123;</span><br><span class="line">        cookieText += <span class="string">"; path="</span> + path;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (domain) &#123;</span><br><span class="line">        cookieText += <span class="string">"; domain="</span> + domain;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (secure) &#123;</span><br><span class="line">        cookieText += <span class="string">"; secure"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      cookieText += <span class="string">"; expires="</span> + (<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>)).toGMTString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.cookie = cookieText;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  unset: <span class="function"><span class="keyword">function</span> (<span class="params">name, subName, path, domain, secure</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> subcookies = <span class="keyword">this</span>.getAll(name);</span><br><span class="line">    <span class="keyword">if</span> (subcookies) &#123;</span><br><span class="line">      <span class="keyword">delete</span> subcookies[subName];</span><br><span class="line">      <span class="keyword">this</span>.setAll(name, subcookies, <span class="literal">null</span>, path, domain, secure);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  unsetAll: <span class="function"><span class="keyword">function</span> (<span class="params">name, path, domain, secure</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setAll(name, <span class="literal">null</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>), path, domain, secure);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>调用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设 document.cookie=data=name=Nicholas&amp;book=Professional%20JavaScript</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//取得全部子 cookie </span></span><br><span class="line"><span class="keyword">var</span> data = SubCookieUtil.getAll(<span class="string">"data"</span>); </span><br><span class="line">alert(data.name); <span class="comment">//"Nicholas" </span></span><br><span class="line">alert(data.book); <span class="comment">//"Professional JavaScript"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//逐个获取子 cookie </span></span><br><span class="line">alert(SubCookieUtil.get(<span class="string">"data"</span>, <span class="string">"name"</span>)); <span class="comment">//"Nicholas" </span></span><br><span class="line">alert(SubCookieUtil.get(<span class="string">"data"</span>, <span class="string">"book"</span>)); <span class="comment">//"Professional JavaScript"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//假设 document.cookie=data=name=Nicholas&amp;book=Professional%20JavaScript</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置两个 cookie </span></span><br><span class="line">SubCookieUtil.set(<span class="string">"data"</span>, <span class="string">"name"</span>, <span class="string">"Nicholas"</span>);</span><br><span class="line">SubCookieUtil.set(<span class="string">"data"</span>, <span class="string">"book"</span>, <span class="string">"Professional JavaScript"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置全部子 cookie 和失效日期 </span></span><br><span class="line">SubCookieUtil.setAll(<span class="string">"data"</span>, &#123;</span><br><span class="line">  name: <span class="string">"Nicholas"</span>,</span><br><span class="line">  book: <span class="string">"Professional JavaScript"</span></span><br><span class="line">&#125;, <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"January 1, 2010"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改名字的值，并修改 cookie 的失效日期 </span></span><br><span class="line">SubCookieUtil.set(<span class="string">"data"</span>, <span class="string">"name"</span>, <span class="string">"Michael"</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"February 1, 2010"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//仅删除名为 name 的子 cookie </span></span><br><span class="line">SubCookieUtil.unset(<span class="string">"data"</span>, <span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除整个 cookie </span></span><br><span class="line">SubCookieUtil.unsetAll(<span class="string">"data"</span>);</span><br></pre></td></tr></table></figure><h2 id="Web存储机制"><a href="#Web存储机制" class="headerlink" title="Web存储机制"></a>Web存储机制</h2><p>cookies兼容所有的浏览器，Html5提供的storage存储方式。<br><code>Document.cookie</code><br><code>Window.localstorage</code><br><code>Window.sessionstorage</code><br><code>cookie</code>数据始终在同源的http请求中携带（即使不需要），即<code>cookie</code>在浏览器和服务器间来回传递。而<code>sessionStorage</code>和<code>localStorage</code>不会自动把数据发给服务器，仅在本地保存。<br>存储大小限制也不同，<code>cookie</code>数据不能超过4k，同时因为每次http请求都会携带<code>cookie</code>，所以<code>cookie</code>只适合保存很小的数据，如会话标识。<code>sessionStorage</code>和<code>localStorage</code> 虽然也有存储大小的限制，但比<code>cookie</code>大得多，可以达到5M或更大。<br>数据有效期不同，<code>sessionStorage</code>：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持；<code>localStorage</code>：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；<code>cookie</code>只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。<br>作用域不同，<code>sessionStorage</code>不在不同的浏览器窗口中共享，即使是同一个页面；<code>localStorage</code> 在所有同源窗口中都是共享的；<code>cookie</code>也是在所有同源窗口中都是共享的。</p><h3 id="Storage类型"><a href="#Storage类型" class="headerlink" title="Storage类型"></a>Storage类型</h3><p><code>Storage</code>类型提供最大的存储空间（因浏览器而异）来存储名值对儿。<code>Storage</code>的实例与其他对象类似，有如下方法。</p><ul><li><code>storage.clear()</code>：删除所有值；Firefox中没有实现。</li><li><code>storage.getItem(name)</code>：根据指定的名字name获取对应的值。</li><li><code>storage.key(index)</code>：获得index位置处的值的名字。</li><li><code>storage.removeItem(name)</code>：删除由name指定的名值对儿。</li><li><code>storage.setItem(name,value)</code>：为指定的name设置一个对应的值。</li></ul><blockquote><p>因为每个项目都是作为属性存储在该对象上的，所以可以通过点语法或者方括号语法访问属性来读取值，设置也一样，或者通过<code>delete</code>操作符进行删除。不过，<strong>建议使用方法而不是属性来访问数据</strong>，以免某个键会意外重写该对象上已经存在的成员。还可以使用<code>storage.length</code>属性来判断有多少名值对儿存放在<code>Storage</code>对象中。但无法判断对象中所有数据的大小，</p></blockquote><h3 id="sessionStorage-对象"><a href="#sessionStorage-对象" class="headerlink" title="sessionStorage 对象"></a>sessionStorage 对象</h3><p><code>session Storage</code>对象存储特定于某个会话的数据，也就是该数据只保持到浏览器关闭。这个对象就像会话<code>cookie</code>，也会在浏览器关闭后消失。存储在<code>session Storage</code>中的数据可以跨越页面刷新而存在，同时如果浏览器支持，浏览器崩溃并重启之后依然可用</p><p>因为<code>seesion Storage</code>对象绑定于某个服务器会话，所以当文件在本地运行的时候是不可用的。存储在<code>session Storage</code>中的数据只能由最初给对象存储数据的页面访问到，所以对多页面应用有限制。</p><p>由于<code>session Storage</code>对象其实是<code>Storage</code>的一个实例，所以可以使用<code>setItem()</code>或者直接设置新的属性来存储数据。下面是这两种方法的例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用方法存储数据 </span></span><br><span class="line">sessionStorage.setItem(<span class="string">"name"</span>, <span class="string">"Nicholas"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用属性存储数据 </span></span><br><span class="line">sessionStorage.book = <span class="string">"Professional JavaScript"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用方法读取数据 </span></span><br><span class="line"><span class="keyword">var</span> name = sessionStorage.getItem(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用属性读取数据 </span></span><br><span class="line"><span class="keyword">var</span> book = sessionStorage.book;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 delete 删除一个值——在 WebKit 中无效 </span></span><br><span class="line"><span class="keyword">delete</span> sessionStorage.name;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用方法删除一个值 </span></span><br><span class="line">sessionStorage.removeItem(<span class="string">"book"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还可以通过结合 length 属性和 key()方法来迭代 sessionStorage 中的值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> sessionStorage) &#123;</span><br><span class="line">  <span class="keyword">var</span> value = sessionStorage.getItem(key);</span><br><span class="line">  alert(key + <span class="string">"="</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在撰写本书时，<code>delete</code>操作符在WebKit中无法删除数据，<code>removeItem()</code>则可以在各种支持的浏览器中正确运行。</p></blockquote><h3 id="localStorage对象"><a href="#localStorage对象" class="headerlink" title="localStorage对象"></a>localStorage对象</h3><p><code>localStorage</code>的目的是跨越会话存储数据,要访问同一个<code>localStorage</code>对象，页面必须来自同一个域名（子域名无效），使用同一种协议，在同一个端口上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用方法存储数据 </span></span><br><span class="line">localStorage.setItem(<span class="string">"name"</span>, <span class="string">"Nicholas"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用属性存储数据 </span></span><br><span class="line">localStorage.book = <span class="string">"Professional JavaScript"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用方法读取数据 </span></span><br><span class="line"><span class="keyword">var</span> name = localStorage.getItem(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用属性读取数据 </span></span><br><span class="line"><span class="keyword">var</span> book = localStorage.book;</span><br></pre></td></tr></table></figure><h3 id="storage事件"><a href="#storage事件" class="headerlink" title="storage事件"></a>storage事件</h3><p>对<code>Storage</code>对象进行任何修改，都会在文档上触发<code>storage</code>事件。当通过属性或<code>setItem()</code>方法保存数据，使用<code>delete</code>操作符或<code>removeItem()</code>删除数据，或者调用<code>clear()</code>方法时，都会发生该事件。这个事件的<code>event</code>对象有以下属性。</p><ul><li><code>domain</code>：发生变化的存储空间的域名。</li><li><code>key</code>：设置或者删除的键名。</li><li><code>newValue</code>：如果是设置值，则是新值；如果是删除键，则是null。</li><li><code>oldValue</code>：键被更改之前的值。</li></ul><blockquote><p>在这四个属性中，IE8和Firefox只实现了<code>domain</code>属性。在撰写本书的时候，WebKit尚不支持<code>storage</code>事件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"storage"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Storage changed for "</span> + event.domain);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;高级技巧&quot;&gt;&lt;a href=&quot;#高级技巧&quot; class=&quot;headerlink&quot; title=&quot;高级技巧&quot;&gt;&lt;/a&gt;高级技巧&lt;/h1&gt;&lt;h2 id=&quot;高级函数&quot;&gt;&lt;a href=&quot;#高级函数&quot; class=&quot;headerlink&quot; title=&quot;高级函数&quot;&gt;&lt;/a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正反馈系列:《JavaScript高级程序设计》AJAX,Comet,JSON</title>
    <link href="http://yoursite.com/2018/01/02/%E9%AB%98%E7%A8%8B11-ajax-json/"/>
    <id>http://yoursite.com/2018/01/02/高程11-ajax-json/</id>
    <published>2018-01-01T23:32:30.000Z</published>
    <updated>2018-03-21T10:28:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AJAX-Comet"><a href="#AJAX-Comet" class="headerlink" title="AJAX,Comet"></a>AJAX,Comet</h1><h2 id="XMLHttpRequest对象"><a href="#XMLHttpRequest对象" class="headerlink" title="XMLHttpRequest对象"></a>XMLHttpRequest对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br></pre></td></tr></table></figure><p>兼容代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXHR</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> XMLHttpRequest != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> ActiveXObject != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="comment">// 在IE7之前的浏览器中创建xhr对象</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">arguments</span>.callee.activeXString != <span class="string">"string"</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> versions = [<span class="string">"MSXML2.XMLHttp.6.0"</span>, <span class="string">"MSXML2.XMLHttp.3.0"</span>, <span class="string">"MSXML2.XMLHttp"</span>],</span><br><span class="line">        i, len;</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>, len = versions.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">new</span> ActiveXObject(versions[i]);</span><br><span class="line">          <span class="built_in">arguments</span>.callee.activeXString = versions[i];</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">          <span class="comment">//跳过 </span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="built_in">arguments</span>.callee.activeXString);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"No XHR object available."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="xhr-open-xhr-send"><a href="#xhr-open-xhr-send" class="headerlink" title="xhr.open(),xhr.send()"></a>xhr.open(),xhr.send()</h3><p><code>xhr.open(type,url,boolean)</code> <code>type</code>是请求类型<code>get</code>或<code>post</code>,<code>boolean</code>是否异步请求的布尔值, 不会发送请求,而是启动一个请求以备发送</p><p><code>xhr.send(请求主体)</code></p><p>在使用<code>xhr.send()</code>发送请求后,在收到响应后，响应的数据会自动填充XHR对象的属性，相关的属性简介如下。</p><ul><li><code>responseText</code>：作为响应主体被返回的文本。</li><li><code>responseXML</code>：如果响应的内容类型是”text/xml”或”application/xml”，这个属性中将保存包含着响应数据的XMLDOM文档。</li><li><code>status</code>：响应的HTTP状态码。</li><li><code>statusText</code>：HTTP状态的说明。</li></ul><p>第一步是检查<code>xhr.status</code>属性，以确定响应已经成功返回。一般来说，可以将HTTP状态代码为200作为成功的标志。此时，<code>xhr.responseText</code>属性的内容已经就绪，状态代码为304表示请求的资源并没有被修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"example.txt"</span>, <span class="literal">false</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">  alert(xhr.responseText);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  alert(<span class="string">"Request was unsuccessful: "</span> + xhr.status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>建议要通过检测<code>xhr.status</code>来决定下一步的操作，不要依赖<code>xhr.statusText</code>，因为后者在跨浏览器使用时不太可靠。另外，无论内容类型是什么，响应主体的内容都会保存到<code>xhr.responseText</code>属性中</p></blockquote><p>若发送为异步,则应该检测<code>xhr.readyState</code>属性,该属性表示请求/响应过程的当前活动阶段。这个属性可取的值如下。</p><ul><li><code>0</code>：未初始化。尚未调用<code>xhr.open()</code>方法。</li><li><code>1</code>：启动。已经调用open()方法，但尚未调用<code>xhr.send()</code>方法。</li><li><code>2</code>：发送。已经调用<code>xhr.send()</code>方法，但尚未接收到响应。</li><li><code>3</code>：接收。已经接收到部分响应数据。</li><li><code>4</code>：完成。已经接收到全部响应数据，而且已经可以在客户端使用了。</li></ul><p>只要<code>xhr.readyState</code>属性的值由一个值变成另一个值，都会触发一次<code>readystatechange</code>事件。可以利用这个事件来检测每次状态变化后<code>xhr.readyState</code>的值。通常，我们只对<code>xhr.readyState</code>值为4的阶段感兴趣，因为这时所有数据都已经就绪。不过，必须在调用<code>xhr.open()</code>之前指定<code>onreadystatechange</code>事件处理程序才能确保跨浏览器兼容性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = createXHR();</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">      alert(xhr.responseText);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      alert(<span class="string">"Request was unsuccessful: "</span> + xhr.status);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"example.txt"</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><blockquote><p>在接收到响应之前还可以调用 <code>xhr.abort()</code>方法来取消异步请求</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.abort();</span><br></pre></td></tr></table></figure><blockquote><p>在终止请求之后，还应该对XHR对象进行解引用操作。由于内存原因，不建议重用XHR对象。</p></blockquote><h3 id="HTTP头部信息"><a href="#HTTP头部信息" class="headerlink" title="HTTP头部信息"></a>HTTP头部信息</h3><p>在发送 XHR 请求的同时，还会发送下列HTTP头部信息。</p><ul><li><code>Accept</code>：浏览器能够处理的内容类型。</li><li><code>Accept-Charset</code>：浏览器能够显示的字符集。</li><li><code>Accept-Encoding</code>：浏览器能够处理的压缩编码。</li><li><code>Accept-Language</code>：浏览器当前设置的语言。</li><li><code>Connection</code>：浏览器与服务器之间连接的类型。</li><li><code>Cookie</code>：当前页面设置的任何Cookie。</li><li><code>Host</code>：发出请求的页面所在的域。</li><li><code>Referer</code>：发出请求的页面的URI。注意，HTTP规范将这个头部字段拼写错了，而为保证与规范一致，也只能将错就错了。（这个英文单词的正确拼法应该是referrer。）</li><li><code>User-Agent</code>：浏览器的用户代理字符串。</li></ul><h3 id="xhr-setRequestHeader"><a href="#xhr-setRequestHeader" class="headerlink" title="xhr.setRequestHeader()"></a>xhr.setRequestHeader()</h3><p><code>xhr.setRequestHeader(name,value)</code>方法,设置自定义请求头部信息, 这个方法接受两个参数: 头部字段的名称和头部字段的值,必须在<code>xhr.open()</code>方法之后,<code>xhr.send()</code>方法之前调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = createXHR();</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">      alert(xhr.responseText);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      alert(<span class="string">"Request was unsuccessful: "</span> + xhr.status);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"example.php"</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">"MyHeader"</span>, <span class="string">"MyValue"</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><blockquote><p>服务器在接收到这种自定义的头部信息之后，可以执行相应的后续操作。</p></blockquote><h3 id="xhr-getResponseHeader-xhr-getAllResponseHeaders"><a href="#xhr-getResponseHeader-xhr-getAllResponseHeaders" class="headerlink" title="xhr.getResponseHeader(),xhr.getAllResponseHeaders()"></a>xhr.getResponseHeader(),xhr.getAllResponseHeaders()</h3><p>取得相应的响应头部信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myHeader = xhr.getResponseHeader(<span class="string">"MyHeader"</span>); </span><br><span class="line"><span class="keyword">var</span> allHeaders = xhr.getAllResponseHeaders();</span><br></pre></td></tr></table></figure><h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"example.php?name1=value1&amp;name2=value2"</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><blockquote><p>查询字符串的键值必须经过<code>encodeURIComponent()</code>编码,然后才能放在URL的末尾</p></blockquote><h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">"post"</span>, <span class="string">"example.php"</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>POST请求应该把数据作为请求的主体提交,首先将<code>Content-Type</code>头部信息设置为<code>application/x-www-form-urlencoded</code>，也就是表单提交时的内容类型，其次是以适当的格式创建一个字符串。POST数据的格式与查询字符串格式相同。</p><blockquote><p>这里创建字符串的过程可以用之前总结的<code>serialize(form)</code>方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">serialize</span>(<span class="params">form</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> parts = [],</span><br><span class="line">    field = <span class="literal">null</span>,</span><br><span class="line">    i,</span><br><span class="line">    len,</span><br><span class="line">    j,</span><br><span class="line">    optLen,</span><br><span class="line">    option,</span><br><span class="line">    optValue;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>, len = form.elements.length; i &lt; len; i++) &#123;</span><br><span class="line">    field = form.elements[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (field.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"select-one"</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"select-multiple"</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (field.name.length) &#123;</span><br><span class="line">          <span class="keyword">for</span> (j = <span class="number">0</span>, optLen = field.options.length; j &lt; optLen; j++) &#123;</span><br><span class="line">            option = field.options[j];</span><br><span class="line">            <span class="keyword">if</span> (option.selected) &#123;</span><br><span class="line">              optValue = <span class="string">""</span>;</span><br><span class="line">              <span class="keyword">if</span> (option.hasAttribute) &#123;</span><br><span class="line">                optValue = (option.hasAttribute(<span class="string">"value"</span>) ? option.value : option.text);</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                optValue = (option.attributes[<span class="string">"value"</span>].specified ? option.value : option.text);</span><br><span class="line">              &#125;</span><br><span class="line">              parts.push(<span class="built_in">encodeURIComponent</span>(field.name) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(optValue));</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="literal">undefined</span>: <span class="comment">//fieldset</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"file"</span>: <span class="comment">//file input</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"submit"</span>: <span class="comment">//submit button</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"reset"</span>: <span class="comment">//reset button</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"button"</span>: <span class="comment">//custom button</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"radio"</span>: <span class="comment">//radio button</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"checkbox"</span>: <span class="comment">//checkbox</span></span><br><span class="line">        <span class="keyword">if</span> (!field.checked) &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* falls through */</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">//don't include form fields without names</span></span><br><span class="line">        <span class="keyword">if</span> (field.name.length) &#123;</span><br><span class="line">          parts.push(<span class="built_in">encodeURIComponent</span>(field.name) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(field.value));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> parts.join(<span class="string">"&amp;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">submitData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> xhr = createXHR();</span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">        alert(xhr.responseText);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">"Request was unsuccessful: "</span> + xhr.status);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  xhr.open(<span class="string">"post"</span>, <span class="string">"postexample.php"</span>, <span class="literal">true</span>);</span><br><span class="line">  xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">  <span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"user-info"</span>);</span><br><span class="line">  xhr.send(serialize(form));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="XMLHttpRequest-2级"><a href="#XMLHttpRequest-2级" class="headerlink" title="XMLHttpRequest 2级"></a>XMLHttpRequest 2级</h2><h3 id="FormData"><a href="#FormData" class="headerlink" title="FormData"></a>FormData</h3><p>，XMLHttpRequest2级为此定义了<code>FormData</code>类型。<code>FormData</code>为序列化表单以及创建与表单格式相同的数据（用于通过XHR传输）提供了便利。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formdata = <span class="keyword">new</span> FormData(); </span><br><span class="line">formdata.append(<span class="string">"name"</span>, <span class="string">"Nicholas"</span>);</span><br></pre></td></tr></table></figure><p><code>formdata</code>对象的<code>formdata.append()</code>方法接收两个参数：键和值，分别对应表单字段的名字和字段中包含的值。可以像这样添加任意多个键值对儿。而通过向<code>FormData</code>构造函数中传入表单元素，也可以用表单元素的数据预先向其中填入键值对儿：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formdata = <span class="keyword">new</span> FormData(<span class="built_in">document</span>.forms[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p>使用 <code>FormData</code> 的方便之处体现在不必明确地在 XHR 对象上设置请求头部的<code>Content-type</code>。XHR 对象能够识别传 入的数据类型是 <code>FormData</code> 的实例, 配置适当的头部信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = createXHR();</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">      alert(xhr.responseText);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      alert(<span class="string">"Request was unsuccessful: "</span> + xhr.status);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.open(<span class="string">"post"</span>, <span class="string">"postexample.php"</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"user-info"</span>);</span><br><span class="line">xhr.send(<span class="keyword">new</span> FormData(form));</span><br></pre></td></tr></table></figure><h3 id="超时设定-xhr-timeout"><a href="#超时设定-xhr-timeout" class="headerlink" title="超时设定 xhr.timeout"></a>超时设定 xhr.timeout</h3><p><code>xhr.timeout</code> 属性，表示请求在等待响应多少毫秒之后就终止。 在给 <code>xhr.timeout</code> 设置一个数值后，如果在规定的时间内浏览器还没有接收到响应，那么就会触发 <code>xhr.timeout</code> 事件，进而会调用 <code>ontimeout</code> 事件处理程序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = createXHR();</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">        alert(xhr.responseText);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">"Request was unsuccessful: "</span> + xhr.status);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">      <span class="comment">//假设由 ontimeout 事件处理程序处理 </span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"timeout.php"</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.timeout = <span class="number">1000</span>; <span class="comment">//将超时设置为 1 秒钟（仅适用于 IE8+） </span></span><br><span class="line">xhr.ontimeout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Request did not return in a second."</span>);</span><br><span class="line">&#125;;</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><blockquote><p>这个例子示范了如何使用<code>timeout</code>属性。将这个属性设置为1000毫秒，意味着如果请求在1秒钟内还没有返回，就会自动终止。请求终止时，会调用<code>ontimeout</code>事件处理程序。但此时<code>xhr.readyState</code>可能已经改变为4了，这意味着会调用<code>onreadystatechange</code>事件处理程序。可是，如果在超时终止请求之后再访问<code>xhr.status</code>属性，就会导致错误。为避免浏览器报告错误，可以将检查<code>status</code>属性的语句封装在一个<code>try-catch</code>语句当中。</p></blockquote><h3 id="xhr-overrideMimeType"><a href="#xhr-overrideMimeType" class="headerlink" title="xhr.overrideMimeType()"></a>xhr.overrideMimeType()</h3><p>此方法能够重写服务器返回的MIME类型。比如，服务器返回的MIME类型是text/plain，但数据中实际包含的是XML。根据MIME类型，即使数据是XML，<code>xhr.responseXML</code>属性中仍然是null。通过调用overrideMimeType()方法，可以保证把响应当作XML而非纯文本来处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = createXHR();</span><br><span class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"text.php"</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.overrideMimeType(<span class="string">"text/xml"</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><blockquote><p>这个例子强迫XHR对象将响应当作XML而非纯文本来处理。调用<code>xhr.overrideMimeType()</code>必须在xhr.send()`方法之前，才能保证重写响应的MIME类型。</p></blockquote><h2 id="进度事件"><a href="#进度事件" class="headerlink" title="进度事件"></a>进度事件</h2><p><code>ProgressEvents</code>规范是W3C的一个工作草案，定义了与客户端服务器通信有关的事件,这些事件最早其实只针对XHR操作，但目前也被其他API借鉴。有以下6个进度事件。</p><ul><li><code>loadstart</code>：在接收到响应数据的第一个字节时触发。</li><li><code>progress</code>：在接收响应期间持续不断地触发。</li><li><code>error</code>：在请求发生错误时触发。</li><li><code>abort</code>：在因为调用<code>xhr.abort()</code>方法而终止连接时触发。</li><li><code>load</code>：在接收到完整的响应数据时触发。</li><li><code>loadend</code>：在通信完成或者触发error、abort或load事件后触发。</li></ul><h4 id="load事件"><a href="#load事件" class="headerlink" title="load事件"></a>load事件</h4><p><code>xhr.load</code>事件用以替代<code>xhr.readystatechange</code>事件。响应接收完毕后将触发load事件，因此也就没有必要去检查readyState属性了。</p><p><code>onload</code>事件处理程序会接收到一个<code>event</code>对象，其<code>event.target</code>属性就指向XHR对象实例，因而可以访问到XHR对象的所有方法和属性。然而，并非所有浏览器都为这个事件实现了适当的事件对象。结果，开发人员还是要像下面这样被迫使用 XHR 对象变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = createXHR();</span><br><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">    alert(xhr.responseText);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">"Request was unsuccessful: "</span> + xhr.status);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"altevents.php"</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><blockquote><p>只要浏览器接收到服务器的响应，不管其状态如何，都会触发load事件。而这意味着你必须要检查<code>xhr.status</code>属性，才能确定数据是否真的已经可用了</p></blockquote><h4 id="progress事件"><a href="#progress事件" class="headerlink" title="progress事件"></a>progress事件</h4><p><code>progress</code>事件，这个事件会在浏览器接收新数据期间周期性地触发。</p><p>而<code>onprogress</code>事件处理程序会接收到一个<code>event</code>对象，其<code>event.target</code>属性是XHR对象，但包含着三个额外的属性：</p><ul><li><code>event.lengthComputable</code> 是一个表示进度信息是否可用的布尔值</li><li><code>event.position</code> 表示已经接收的字节数 </li><li><code>event.totalSize</code> 表示根据<code>Content-Length</code>响应头部确定的预期字节数。有了这些信息，我们就可以为用户创建一个进度指示器了。下面展示了为用户创建进度指示器的一个示例。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = createXHR();</span><br><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">    alert(xhr.responseText);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">"Request was unsuccessful: "</span> + xhr.status);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.onprogress = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> divStatus = <span class="built_in">document</span>.getElementById(<span class="string">"status"</span>);</span><br><span class="line">  <span class="keyword">if</span> (event.lengthComputable) &#123;</span><br><span class="line">    divStatus.innerHTML = <span class="string">"Received "</span> + event.position + <span class="string">" of "</span> + event.totalSize + <span class="string">" bytes"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"altevents.php"</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h2 id="跨源资源共享-CORS"><a href="#跨源资源共享-CORS" class="headerlink" title="跨源资源共享 CORS"></a>跨源资源共享 CORS</h2><p>CORS（Cross-OriginResourceSharing，跨源资源共享）是W3C的一个工作草案，定义了在必须访问跨源资源时，浏览器与服务器应该如何沟通。CORS背后的基本思想，就是使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功，还是应该失败。</p><p>在发送HTTP请求时，需要给它附加一个额外的<code>Origin</code>头部，其中包含请求页面的源信息（协议、域名和端口），以便服务器根据这个头部信息来决定是否给予响应。下面是<code>Origin</code>头部的一个示例：</p><blockquote><p>Origin: <a href="http://www.nczonline.net" target="_blank" rel="noopener">http://www.nczonline.net</a></p></blockquote><p>如果服务器认为这个请求可以接受，就在<code>Access-Control-Allow-Origin</code>头部中回发相同的源信息（如果是公共资源，可以回发”*”）。例如：</p><blockquote><p>Access-Control-Allow-Origin:<a href="http://www.nczonline.net" target="_blank" rel="noopener">http://www.nczonline.net</a></p></blockquote><p>如果没有这个头部，或者有这个头部但源信息不匹配，浏览器就会驳回请求。正常情况下，浏览器会处理请求。注意，请求和响应都不包含cookie信息。</p><blockquote><p>使用CORS的HTTP请求有以下限制</p></blockquote><ul><li>不能使用setRequestHeader()设置自定义头部。</li><li>不能发送和接收cookie。</li><li>调用getAllResponseHeaders()方法总会返回空字符串。</li></ul><h3 id="Preflighted-Requests"><a href="#Preflighted-Requests" class="headerlink" title="Preflighted Requests"></a>Preflighted Requests</h3><p>CORS通过一种叫做PreflightedRequests的透明服务器验证机制支持开发人员使用自定义的头部、GET或POST之外的方法，以及不同类型的主体内容。在使用下列高级选项来发送请求时，就会向服务器发送一个Preflight请求。该请求会发送下列头部。</p><ul><li><code>Origin</code>：与简单的请求相同。</li><li><code>Access-Control-Request-Method</code>：请求自身使用的方法。</li><li><code>Access-Control-Request-Headers</code>：（可选）自定义的头部信息，多个头部以逗号分隔。</li></ul><p>例如:</p><blockquote><p>Origin: <a href="http://www.nczonline.net" target="_blank" rel="noopener">http://www.nczonline.net</a><br>Access-Control-Request-Method: POST<br>Access-Control-Request-Headers: NCZ</p></blockquote><p>发送这个请求后，服务器可以决定是否允许这种类型的请求。服务器通过在响应中发送如下头部与浏览器进行沟通。</p><ul><li><code>Access-Control-Allow-Origin</code>：与简单的请求相同。</li><li><code>Access-Control-Allow-Methods</code>：允许的方法，多个方法以逗号分隔。</li><li><code>Access-Control-Allow-Headers</code>：允许的头部，多个头部以逗号分隔。</li><li><code>Access-Control-Max-Age</code>：应该将这个Preflight请求缓存多长时间（以秒表示）。</li></ul><p>例如:</p><blockquote><p>Access-Control-Allow-Origin: <a href="http://www.nczonline.net" target="_blank" rel="noopener">http://www.nczonline.net</a><br>Access-Control-Allow-Methods: POST, GET<br>Access-Control-Allow-Headers: NCZ<br>Access-Control-Max-Age: 1728000</p></blockquote><p><code>Preflight</code>请求结束后，结果将按照响应中指定的时间缓存起来。而为此付出的代价只是第一次发送这种请求时会多一次HTTP请求。</p><blockquote><p>IE10及更早版本不支持</p></blockquote><h3 id="带凭据的请求"><a href="#带凭据的请求" class="headerlink" title="带凭据的请求"></a>带凭据的请求</h3><p>默认情况下，跨源请求不提供凭据（cookie、HTTP认证及客户端SSL证明等）。<code>xhr.withCredentials</code>属性设置为true，可以指定某个请求应该发送凭据。如果服务器接受带凭据的请求，会用下面的HTTP头部来响应。</p><blockquote><p>Access-Control-Allow-Credentials: true</p></blockquote><p>如果发送的是带凭据的请求，但服务器的响应中没有包含这个头部，那么浏览器就不会把响应交给JavaScript（于是，<code>xhr.responseText</code>中将是空字符串，<code>xhr.status</code>的值为0，而且会调用<code>onerror()</code>事件处理程序）。</p><p>另外，服务器还可以在<code>Preflight</code>响应中发送这个HTTP头部，表示允许源发送带凭据的请求。</p><blockquote><p>IE10及更早版本不支持</p></blockquote><h3 id="IE浏览器中CORS的实现"><a href="#IE浏览器中CORS的实现" class="headerlink" title="IE浏览器中CORS的实现"></a>IE浏览器中CORS的实现</h3><p>关于IE浏览器中CORS的实现以及兼容代码查阅高程p582,p585</p><h2 id="其他跨域技术"><a href="#其他跨域技术" class="headerlink" title="其他跨域技术"></a>其他跨域技术</h2><h3 id="图像PING"><a href="#图像PING" class="headerlink" title="图像PING"></a>图像PING</h3><p>浏览器得不到任何具体的数据，但通过侦听<code>img.onload</code>和<code>img.onerror</code>事件，它能知道响应是什么时候接收到的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.onload = img.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Done!"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">img.src = <span class="string">"http://www.example.com/test?name=Nicholas"</span>;</span><br></pre></td></tr></table></figure><blockquote><p>只能发送GET请求，无法访问服务器的响应文本</p></blockquote><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//queryString中对应的callback:对应的要在本地页面运行的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myJsonp</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"myjsonp is "</span>+response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//动态加载script标签的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">letsJsonp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">  script.src=<span class="string">'http://nba.hupu.com/?callback=myJsonp'</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line">letsJsonp();</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务端拿到请求后解析queryString看到callback后,拿到callback的值,按约定响应myJsonp("Jordan");</span></span><br><span class="line">此时相当于在网页上加了一个<span class="string">"&lt;script&gt;myJsonp(Jordan)&lt;/script&gt;"</span>;于是<span class="built_in">console</span>输出<span class="string">"myjsonp is Jordan"</span></span><br></pre></td></tr></table></figure><h3 id="Comet"><a href="#Comet" class="headerlink" title="Comet"></a>Comet</h3><p><code>Ajax</code>是一种从页面向服务器请求数据的技术，而<code>Comet</code>则是一种服务器向页面推送数据的技术。</p><p><code>Comet</code>能够让信息近乎实时地被推送到页面上，非常适合处理体育比赛的分数和股票报价。</p><h3 id="长轮询-短轮询"><a href="#长轮询-短轮询" class="headerlink" title="长轮询,短轮询"></a>长轮询,短轮询</h3><p>有两种实现<code>Comet</code>的方式：长轮询和流。长轮询是传统轮询（也称为短轮询）的一个翻版，即浏览器定时向服务器发送请求，看有没有更新的数据。</p><p><img src="https://i.loli.net/2018/01/02/5a4ac4c90462a.jpg" alt=""></p><p>长轮询把短轮询颠倒了一下。页面发起一个到服务器的请求，然后服务器一直保持连接打开，直到有数据可发送。发送完数据之后，浏览器关闭连接，随即又发起一个到服务器的新请求。这一过程在页面打开期间一直持续不断</p><p><img src="https://i.loli.net/2018/01/02/5a4ac4c918eae.jpg" alt=""></p><p>无论是短轮询还是长轮询，浏览器都要在接收数据之前，先发起对服务器的连接。两者最大的区别在于服务器如何发送数据。短轮询是服务器立即发送响应，无论数据是否有效，而长轮询是等待发送响应。轮询的优势是所有浏览器都支持，因为使用XHR对象和<code>setTimeout()</code>就能实现。而你要做的就是决定什么时候发送请求。</p><h3 id="HTTP流"><a href="#HTTP流" class="headerlink" title="HTTP流"></a>HTTP流</h3><p>第二种流行的Comet实现是HTTP流. 它在页面的整个生命周期内只使用一个HTTP连接。具体来说，就是浏览器向服务器发送一个请求，而服务器保持连接打开，然后周期性地向浏览器发送数据。</p><p>所有服务器端语言都支持打印到输出缓存然后刷新（将输出缓存中的内容一次性全部发送到客户端）的功能。而这正是实现HTTP流的关键所在。</p><p>通过侦听<code>readystatechange</code>事件及检测<code>xhr.readyState</code>的值是否为3，就可以利用XHR对象实现HTTP流。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStreamingClient</span>(<span class="params">url, progress, finished</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest(),</span><br><span class="line">    received = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  xhr.open(<span class="string">"get"</span>, url, <span class="literal">true</span>);</span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="comment">//只取得最新数据并调整计数器 </span></span><br><span class="line">      result = xhr.responseText.substring(received);</span><br><span class="line">      received += result.length;</span><br><span class="line">      <span class="comment">//调用 progress 回调函数 </span></span><br><span class="line">      progress(result);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">      finished(xhr.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  xhr.send(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">return</span> xhr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> client = createStreamingClient(<span class="string">"streaming.php"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Received: "</span> + data);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Done!"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="服务器发送事件-SSE-Servser-Sent-Events"><a href="#服务器发送事件-SSE-Servser-Sent-Events" class="headerlink" title="服务器发送事件 SSE(Servser-Sent Events)"></a>服务器发送事件 SSE(Servser-Sent Events)</h3><p><code>SSE</code>（<code>Server-SentEvents</code>，服务器发送事件）是围绕只读<code>Comet</code>交互推出的API或者模式。<code>SSEAPI</code>用于创建到服务器的单向连接，服务器通过这个连接可以发送任意数量的数据。服务器响应的MIME类型必须是<code>text/event-stream</code>，而且是浏览器中的JavaScriptAPI能解析格式输出。<code>SSE</code>支持短轮询、长轮询和HTTP流，而且能在断开连接时自动确定何时重新连接。有了这么简单实用的API，再实现Comet就容易多了。</p><h4 id="SSE-API"><a href="#SSE-API" class="headerlink" title="SSE API"></a>SSE API</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> eventsource = <span class="keyword">new</span> EventSource(<span class="string">"myevents.php"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>传入的URL必须与创建对象的页面同源（相同的URL模式、域及端口）。<code>EventSource</code>的实例有一个<code>eventsource.readyState</code>属性，值为0表示正连接到服务器，值为1表示打开了连接，值为2表示关闭了连接。<br>还有三个事件</p></blockquote><ul><li><code>open</code>：在建立连接时触发。</li><li><code>message</code>：在从服务器接收到新事件时触发。</li><li><code>error</code>：在无法建立连接时触发。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">source.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data = event.data;</span><br><span class="line">  <span class="comment">//处理数据 </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>服务器发回的数据以字符串形式保存在 <code>event.data</code> 中。</p><p><code>EventSource</code>对象会保持与服务器的活动连接。如果连接断开，还会重新连接。这就意味着SSE适合长轮询和HTTP流。如果想强制立即断开连接并且不再重新连接，可以调用<code>eventsource.close()</code>方法。</p><h4 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h4><p>所谓的服务器事件会通过一个持久的HTTP响应发送，这个响应的MIME类型为<code>text/event-stream</code>。响应的格式是纯文本，最简单的情况是每个数据项都带有前缀<code>data:</code>，例如：</p><p>data: foo </p><p>data: bar </p><p>data: foo<br>data: bar</p><p>对以上响应而言，事件流中的第一个<code>message</code>事件返回的<code>event.data</code>值为”foo”，第二个<code>message</code>事件返回的<code>event.data</code>值为”bar”，第三个<code>message</code>事件返回的<code>event.data</code>值为”foo\nbar”（注意中间的换行符）。对于多个连续的以<code>data:</code>开头的数据行，将作为多段数据解析，每个值之间以一个换行符分隔。只有在包含<code>data:</code>的数据行后面有空行时，才会触发<code>message</code>事件，因此在服务器上生成事件流时不能忘了多添加这一行。通过<code>id:</code>前缀可以给特定的事件指定一个关联的ID，这个ID行位于<code>data:</code>行前面或后面皆可：</p><p>data: foo<br>id: 1</p><p>设置了ID后，<code>EventSource</code>对象会跟踪上一次触发的事件。如果连接断开，会向服务器发送一个包含名为<code>Last-Event-ID</code>的特殊HTTP头部的请求，以便服务器知道下一次该触发哪个事件。在多次连接的事件流中，这种机制可以确保浏览器以正确的顺序收到连接的数据段。</p><h3 id="Web-Sockets"><a href="#Web-Sockets" class="headerlink" title="Web Sockets"></a>Web Sockets</h3><p><code>WebSockets</code>的目标是在一个单独的持久连接上提供全双工、双向通信。在JavaScript中创建了<code>WebSocket</code>之后，会有一个HTTP请求发送到浏览器以发起连接。在取得服务器响应后，建立的连接会使用HTTP升级从HTTP协议交换为<code>WebSocket</code>协议。</p><p>由于<code>WebSockets</code>使用了自定义的协议，所以URL模式也略有不同。未加密的连接不再是<code>http://</code>，而是<code>ws://</code>；加密的连接也不是<code>https://</code>，而是<code>wss://</code></p><p>使用自定义协议而非HTTP协议的好处是，能够在客户端和服务器之间发送非常少量的数据，而不必担心HTTP那样字节级的开销。由于传递的数据包很小，因此<code>WebSockets</code>非常适合移动应用。</p><blockquote><p>注意，必须给<code>WebSocket</code>构造函数传入绝对URL。同源策略对<code>WebSockets</code>不适用，因此可以通过它打开到任何站点的连接。至于是否会与某个域中的页面通信，则完全取决于服务器。（通过握手信息就可以知道请求来自何方。）</p></blockquote><h4 id="Web-Sockets-API"><a href="#Web-Sockets-API" class="headerlink" title="Web Sockets API"></a>Web Sockets API</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://www.example.com/server.php"</span>);</span><br></pre></td></tr></table></figure><p>实例化了<code>WebSocket</code>对象后，浏览器就会马上尝试创建连接。与XHR类似，<code>WebSocket</code>也有一个表示当前状态的<code>readyState</code>属性。不过，这个属性的值与XHR并不相同，而是如下所示。</p><ul><li><code>WebSocket.OPENING(0)</code>：正在建立连接。</li><li><code>WebSocket.OPEN(1)</code>：已经建立连接。</li><li><code>WebSocket.CLOSING(2)</code>：正在关闭连接。</li><li><code>WebSocket.CLOSE(3)</code>：已经关闭连接。</li></ul><p><code>WebSocket</code>没有<code>readystatechange</code>事件；不过，它有其他事件，对应着不同的状态。<code>readyState</code>的值永远从0开始。</p><p>要关闭<code>WebSocket</code>连接，可以在任何时候调用<code>socket.close()</code>方法。调用了<code>socket.close()</code>之后，<code>readyState</code>的值立即变为2（正在关闭），而在关闭连接后就会变成3。</p><h4 id="发送和接收数据"><a href="#发送和接收数据" class="headerlink" title="发送和接收数据"></a>发送和接收数据</h4><p><code>WebSocket</code>只能接收和发送字符串数据.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://www.example.com/server.php"</span>); </span><br><span class="line">socket.send(<span class="string">"Hello world!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> message = &#123;</span><br><span class="line">  time: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">  text: <span class="string">"Hello world!"</span>,</span><br><span class="line">  clientId: <span class="string">"asdfp8734rew"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">socket.send(<span class="built_in">JSON</span>.stringify(message));</span><br></pre></td></tr></table></figure><blockquote><p>当服务器向客户端发来消息时,<code>WebSocket</code>对象会触发<code>message</code>事件,这个<code>message</code>事件与其他传递消息的协议类似，也是把返回的数据保存在<code>event.data</code>属性中。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">socket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data = event.data;</span><br><span class="line">  <span class="comment">//处理数据</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="其他事件"><a href="#其他事件" class="headerlink" title="其他事件"></a>其他事件</h4><p><code>WebSocket</code>对象还有其他三个事件，在连接生命周期的不同阶段触发。</p><ul><li><code>open</code>：在成功建立连接时触发。</li><li><code>error</code>：在发生错误时触发，连接不能持续。</li><li><code>close</code>：在连接关闭时触发。</li></ul><p><code>WebSocket</code>对象不支持DOM2级事件侦听器，因此必须使用DOM0级语法分别定义每个事件处理程序。</p><p>在这三个事件中，只有<code>socket.close</code>事件的<code>event</code>对象有额外的信息。这个事件的事件对象有三个额外的属性：</p><ul><li><code>event.wasClean</code>是一个布尔值，表示连接是否已经明确地关闭；</li><li><code>event.code</code>是服务器返回的数值状态码；</li><li><code>event.reason</code>是一个字符串，包含服务器发回的消息。可以把这些信息显示给用户，也可以记录到日志中以便将来分析。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://www.example.com/server.php"</span>);</span><br><span class="line"></span><br><span class="line">socket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Connection established."</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">socket.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Connection error."</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">socket.onclose = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Was clean? "</span> + event.wasClean + <span class="string">" Code="</span> + event.code + <span class="string">" Reason="</span> + event.reason);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><h3 id="早期浏览器的shim"><a href="#早期浏览器的shim" class="headerlink" title="早期浏览器的shim"></a>早期浏览器的shim</h3><p><a href="https://github.com/douglascrockford/JSON-js" target="_blank" rel="noopener">JSON.js</a></p><h3 id="JSON-stringify"><a href="#JSON-stringify" class="headerlink" title="JSON.stringify()"></a>JSON.stringify()</h3><p><code>JSON.stringify(json[,filter,number]) return string</code>,<code>filter</code>是一个过滤器,可以是一个数组或函数, <code>number</code>代表缩进字符数,表示是否在返回的<code>string</code>中保持缩进,同时也会插入换行符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">  <span class="string">"title"</span>: <span class="string">"Professional JavaScript"</span>,</span><br><span class="line">  <span class="string">"authors"</span>: [<span class="string">"Nicholas C. Zakas"</span>],</span><br><span class="line">  edition: <span class="number">3</span>,</span><br><span class="line">  year: <span class="number">2011</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jsonText = <span class="built_in">JSON</span>.stringify(book, [<span class="string">"title"</span>, <span class="string">"edition"</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//&#123;"title":"Professional JavaScript","edition":3&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>若<code>filter</code>是一个函数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">  <span class="string">"title"</span>: <span class="string">"Professional JavaScript"</span>,</span><br><span class="line">  <span class="string">"authors"</span>: [<span class="string">"Nicholas C. Zakas"</span>],</span><br><span class="line">  edition: <span class="number">3</span>,</span><br><span class="line">  year: <span class="number">2011</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jsonText = <span class="built_in">JSON</span>.stringify(book, <span class="function"><span class="keyword">function</span> (<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"authors"</span>:</span><br><span class="line">      <span class="keyword">return</span> value.join(<span class="string">","</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"year"</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">5000</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"edition"</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>; <span class="comment">//返回undefined,相应的属性会被忽略</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;"title":"Professional JavaScript","authors":"Nicholas C. Zakas","year":5000&#125;</span></span><br></pre></td></tr></table></figure><h3 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse()"></a>JSON.parse()</h3><p><code>JSON.parse(string,reviver) return json</code> 关于<code>reviver</code>函数如何定义看下面的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">  <span class="string">"title"</span>: <span class="string">"Professional JavaScript"</span>,</span><br><span class="line">  <span class="string">"authors"</span>: [<span class="string">"Nicholas C. Zakas"</span>],</span><br><span class="line">  edition: <span class="number">3</span>,</span><br><span class="line">  year: <span class="number">2011</span>,</span><br><span class="line">  releaseDate: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2011</span>, <span class="number">11</span>, <span class="number">1</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jsonText = <span class="built_in">JSON</span>.stringify(book);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bookCopy = <span class="built_in">JSON</span>.parse(jsonText, <span class="function"><span class="keyword">function</span> (<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (key == <span class="string">"releaseDate"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">alert(bookCopy.releaseDate.getFullYear());</span><br></pre></td></tr></table></figure><blockquote><p>若<code>reviver</code>函数返回<code>undefined</code>,则表示要从结果中删除相应的键</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;AJAX-Comet&quot;&gt;&lt;a href=&quot;#AJAX-Comet&quot; class=&quot;headerlink&quot; title=&quot;AJAX,Comet&quot;&gt;&lt;/a&gt;AJAX,Comet&lt;/h1&gt;&lt;h2 id=&quot;XMLHttpRequest对象&quot;&gt;&lt;a href=&quot;#XMLHt
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正反馈系列:《JavaScript高级程序设计》HTML5脚本编程,错误处理</title>
    <link href="http://yoursite.com/2017/12/31/%E9%AB%98%E7%A8%8B10-h5-error/"/>
    <id>http://yoursite.com/2017/12/31/高程10-h5-error/</id>
    <published>2017-12-31T09:53:47.000Z</published>
    <updated>2018-03-21T10:23:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML5-脚本编程-第16章"><a href="#HTML5-脚本编程-第16章" class="headerlink" title="HTML5 脚本编程 (第16章)"></a>HTML5 脚本编程 (第16章)</h1><h2 id="原生拖放"><a href="#原生拖放" class="headerlink" title="原生拖放"></a>原生拖放</h2><h3 id="拖放事件"><a href="#拖放事件" class="headerlink" title="拖放事件"></a>拖放事件</h3><blockquote><p><code>element</code>元素开始被拖放时:</p></blockquote><ol><li><code>element.dragstart</code></li><li><code>element.drag</code> 持续发生</li><li><code>element.dragend</code></li></ol><blockquote><p>拖动到一个有效放置目标<code>target</code>上时:</p></blockquote><ol><li><code>target.dragenter</code></li><li><code>target.dragover</code> 持续发生</li><li><code>target.dragleave</code> 或 <code>drop</code> 不会同时触发</li></ol><h3 id="自定义配置目标"><a href="#自定义配置目标" class="headerlink" title="自定义配置目标"></a>自定义配置目标</h3><p>如果拖动元素经过不允许放置的元素，无论用户如何操作，都不会发生<code>drop</code>事件。不过，你可以把任何元素变成有效的放置目标，方法是重写<code>dragenter</code>和<code>dragover</code>事件的默认行为。例如，假设有一个ID为”droptarget”的<code>&lt;div&gt;</code>元素，可以用如下代码将它变成一个放置目标。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> droptarget = <span class="built_in">document</span>.getElementById(<span class="string">"droptarget"</span>);</span><br><span class="line">EventUtil.addHandler(droptarget, <span class="string">"dragover"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  EventUtil.preventDefault(event);</span><br><span class="line">&#125;);</span><br><span class="line">EventUtil.addHandler(droptarget, <span class="string">"dragenter"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  EventUtil.preventDefault(event);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>在Firefox3.5+中，放置事件的默认行为是打开被放到放置目标上的URL。换句话说，如果是把图像拖放到放置目标上，页面就会转向图像文件；而如果是把文本拖放到放置目标上，则会导致无效URL错误。因此，为了让Firefox支持正常的拖放，还要取消drop事件的默认行为，阻止它打开URL：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取消drop事件原生行为(新窗口打开图片等)</span></span><br><span class="line">EventUtil.addHandler(droptarget, <span class="string">"drop"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  EventUtil.preventDefault(event);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="dataTransfer对象"><a href="#dataTransfer对象" class="headerlink" title="dataTransfer对象"></a>dataTransfer对象</h3><p>HTML5引入了<code>dataTransfer对象</code>,它是<code>event</code>事件对象的一个属性，用于从被拖动元素向放置目标传递字符串格式的数据。只能在拖放事件的事件处理程序中访问dataTransfer对象。</p><p>dataTransfer对象有两个主要方法：<code>event.dataTransfer.getData()</code>和<code>event.dataTransfer.setData()</code>。<code>getData()</code>可以取得由<code>setData()</code>保存的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置和接收文本数据 </span></span><br><span class="line">event.dataTransfer.setData(<span class="string">"text"</span>, <span class="string">"some text"</span>);</span><br><span class="line"><span class="keyword">var</span> text = event.dataTransfer.getData(<span class="string">"text"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置和接收 URL </span></span><br><span class="line">event.dataTransfer.setData(<span class="string">"URL"</span>, <span class="string">"http://www.wrox.com/"</span>);</span><br><span class="line"><span class="keyword">var</span> url = event.dataTransfer.getData(<span class="string">"URL"</span>);</span><br></pre></td></tr></table></figure><p>IE只定义了”text”和”URL”两种有效的数据类型，而HTML5则对此加以扩展，允许指定各种MIME类型。考虑到向后兼容，HTML5也支持”text”和”URL”，但这两种类型会被映射为”text/plain”和”text/uri-list”。</p><p>实际上，<code>dataTransfer对象</code>可以为每种MIME类型都保存一个值。换句话说，同时在这个对象中保存一段文本和一个URL不会有任何问题。不过，保存在<code>dataTransfer对象</code>中的数据只能在<code>drop</code>事件处理程序中读取。如果在ondrop处理程序中没有读到数据，那就是<code>dataTransfer对象</code>已经被销毁，数据也丢失了。</p><p>在拖动<strong>文本框</strong>中的文本时，浏览器会调用<code>event.dataTransfer.setData()</code>方法，将拖动的文本以”text”格式保存在dataTransfer对象中。类似地，在拖放<strong>链接</strong>或<strong>图像</strong>时，会调用<code>event.dataTransfer.setData()</code>方法并保存URL。然后，在这些元素被拖放到放置目标时，就可以通过<code>event.dataTransfer.getData()</code>读到这些数据。当然，作为开发人员，你也可以在<code>dragstart</code>事件处理程序中调用<code>event.dataTransfer.setData()</code>，手工保存自己要传输的数据</p><h3 id="dropEffect与effectAllowed"><a href="#dropEffect与effectAllowed" class="headerlink" title="dropEffect与effectAllowed"></a>dropEffect与effectAllowed</h3><p>dataTransfer 对象的两个属性：<code>event.dataTransfer.dropEffect</code> 和 <code>event.dataTransfer.effectAllowed</code></p><p><code>event.dataTransfer.dropEffect</code> 是针对放置目标<code>target</code>的事件处理程序<code>dragenter</code>设置的.可以知道被拖动的元素能够执行哪种放置行为,可能有4个值:</p><ul><li><code>&quot;none&quot;</code>：不能把拖动的元素放在这里。这是除文本框之外所有元素的默认值。</li><li><code>&quot;move&quot;</code>：应该把拖动的元素移动到放置目标。</li><li><code>&quot;copy&quot;</code>：应该把拖动的元素复制到放置目标。</li><li><code>&quot;link&quot;</code>：表示放置目标会打开拖动的元素（但拖动的元素必须是一个链接，有URL）。</li></ul><blockquote><p><code>dropEffect</code> 属性只有搭配 <code>effectAllowed</code> 属性才有用。</p></blockquote><p><code>event.dataTransfer.effectAllowed</code>属性表示允许拖动元素的哪种<code>dropEffect</code>，是针对被拖动目标<code>element</code>的<code>dragstart</code>事件设置的, <code>effectAllowed</code>属性可能的值如下</p><ul><li><code>&quot;uninitialized&quot;</code>：没有给被拖动的元素设置任何放置行为。</li><li><code>&quot;none&quot;</code>：被拖动的元素不能有任何行为。</li><li><code>&quot;copy&quot;</code>：只允许值为”copy”的dropEffect。</li><li><code>&quot;link&quot;</code>：只允许值为”link”的dropEffect。</li><li><code>&quot;move&quot;</code>：只允许值为”move”的dropEffect。</li><li><code>&quot;copyLink&quot;</code>：允许值为”copy”和”link”的dropEffect。</li><li><code>&quot;copyMove&quot;</code>：允许值为”copy”和”move”的dropEffect。</li><li><code>&quot;linkMove&quot;</code>：允许值为”link”和”move”的dropEffect。</li><li><code>&quot;all&quot;</code>：允许任意dropEffect。</li></ul><blockquote><p>假设你想允许用户把文本框中的文本拖放到一个<code>&lt;div&gt;</code>元素中。首先，必须将<strong>div元素的dragenter事件</strong>中<code>dropEffect</code>和<strong>文本框的dragstart事件</strong>中<code>effectAllowed</code>设置为”move”。但是，由于<code>&lt;div&gt;</code>元素的放置事件的默认行为是什么也不做，所以文本不可能自动移动。重写这个默认行为，就能从文本框中移走文本。然后你就可以自己编写代码将文本插入到<code>&lt;div&gt;</code>中，这样整个拖放操作就完成了。如果你将<code>dropEffect</code>和<code>effectAllowed</code>的值设置为”copy”，那就不会自动移走文本框中的文本。</p></blockquote><h3 id="可拖动"><a href="#可拖动" class="headerlink" title="可拖动"></a>可拖动</h3><p>默认情况下，图像、链接和文本是可以拖动的，也就是说，不用额外编写代码，用户就可以拖动它们。文本只有在被选中的情况下才能拖动，而图像和链接在任何时候都可以拖动。让其他元素可以拖动也是可能的。</p><p>HTML5为所有HTML元素规定了一个<code>draggable</code>属性，表示元素是否可以拖动。图像和链接的<code>draggable</code>属性自动被设置成了true，而其他元素这个属性的默认值都是false。要想让其他元素可拖动，或者让图像或链接不能拖动，都可以设置这个属性。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 让这个图像不可以拖动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"smile.gif"</span> <span class="attr">draggable</span>=<span class="string">"false"</span> <span class="attr">alt</span>=<span class="string">"Smiley face"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 让这个元素可以拖动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="其他成员"><a href="#其他成员" class="headerlink" title="其他成员"></a>其他成员</h3><blockquote><p>HTML5 规范规定 <code>dataTransfer对象</code>还应该包含下列方法和属性。</p></blockquote><ul><li><code>addElement(element)</code>：为拖动操作添加一个元素。添加这个元素只影响数据（即增加作为拖动源而响应回调的对象），不会影响拖动操作时页面元素的外观。在写作本书时，只有Firefox3.5+实现了这个方法。</li><li><code>clearData(format)</code>：清除以特定格式保存的数据。实现这个方法的浏览器有IE、Fireforx3.5+、Chrome和Safari4+。</li><li><code>setDragImage(element,x,y)</code>：指定一幅图像，当拖动发生时，显示在光标下方。这个方法接收的三个参数分别是要显示的HTML元素和光标在图像中的x、y坐标。其中，HTML元素可以是一幅图像，也可以是其他元素。是图像则显示图像，是其他元素则显示渲染后的元素。实现这个方法的浏览器有Firefox3.5+、Safari4+和Chrome。</li><li><code>types</code>：当前保存的数据类型。这是一个类似数组的集合，以”text”这样的字符串形式保存着数据类型。实现这个属性的浏览器有IE10+、Firefox3.5+和Chrome。</li></ul><h2 id="媒体元素"><a href="#媒体元素" class="headerlink" title="媒体元素"></a>媒体元素</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 嵌入视频 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"conference.mpg"</span> <span class="attr">id</span>=<span class="string">"myVideo"</span>&gt;</span>Video player not available.<span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 嵌入音频 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"song.mp3"</span> <span class="attr">id</span>=<span class="string">"myAudio"</span>&gt;</span>Audio player not available.<span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用这两个元素时，至少要在标签中包含<code>src</code>属性，指向要加载的媒体文件。还可以设置<code>width</code>和<code>height</code>属性以指定视频播放器的大小，</p><p>如果标签中有<code>controls</code>特性，则意味着浏览器应该显示UI控件，以便用户直接操作媒体。位于开始和结束标签之间的任何内容都将作为后备内容，在浏览器不支持这两个媒体元素的情况下显示。</p><p>因为并非所有浏览器都支持所有媒体格式，所以可以指定多个不同的媒体来源, 使用一或多个<code>&lt;source&gt;</code>元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 嵌入视频 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"myVideo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"conference.webm"</span> <span class="attr">type</span>=<span class="string">"video/webm; codecs='vp8, vorbis'"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"conference.ogv"</span> <span class="attr">type</span>=<span class="string">"video/ogg; codecs='theora, vorbis'"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"conference.mpg"</span>&gt;</span> Video player not available.</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 嵌入音频 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">id</span>=<span class="string">"myAudio"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"song.ogg"</span> <span class="attr">type</span>=<span class="string">"audio/ogg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"song.mp3"</span> <span class="attr">type</span>=<span class="string">"audio/mpeg"</span>&gt;</span> Audio player not available.</span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p><code>&lt;video&gt;</code>和<code>&lt;audio&gt;</code>元素都提供了完善的 JavaScript 接口。下表列出了这两个元素共有的属性，</p><p><img src="https://i.loli.net/2017/12/31/5a48b37a19ab3.jpg" alt=""></p><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p><img src="https://i.loli.net/2017/12/31/5a48b37a3ab84.jpg" alt=""></p><h3 id="自定义媒体"><a href="#自定义媒体" class="headerlink" title="自定义媒体"></a>自定义媒体</h3><p>使用<code>&lt;audio&gt;</code>和<code>&lt;video&gt;</code>元素的<code>element.play()</code>和<code>element.pause()</code>方法，可以手工控制媒体文件的播放。组合使用属性、事件和这两个方法，很容易创建一个自定义的媒体播放器，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mediaplayer"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"video"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"player"</span> <span class="attr">src</span>=<span class="string">"movie.mov"</span> <span class="attr">poster</span>=<span class="string">"mymovie.jpg"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"200"</span>&gt;</span> Video player not available.</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"controls"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Play"</span> <span class="attr">id</span>=<span class="string">"video-btn"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"curtime"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span>/</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"duration"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">video.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//get references to the elements</span></span><br><span class="line">  <span class="keyword">var</span> player = <span class="built_in">document</span>.getElementById(<span class="string">"player"</span>);</span><br><span class="line">  <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"video-btn"</span>);</span><br><span class="line">  <span class="keyword">var</span> curtime = <span class="built_in">document</span>.getElementById(<span class="string">"curtime"</span>);</span><br><span class="line">  <span class="keyword">var</span> duration = <span class="built_in">document</span>.getElementById(<span class="string">"duration"</span>);</span><br><span class="line">  duration.innerHTML = player.duration;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//attach event handler to button</span></span><br><span class="line">  EventUtil.addHandler(btn, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (player.paused) &#123;</span><br><span class="line">      player.play();</span><br><span class="line">      btn.value = <span class="string">"Pause"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      player.pause();</span><br><span class="line">      btn.value = <span class="string">"Play"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//update the current time periodically</span></span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    curtime.innerHTML = player.currentTime;</span><br><span class="line">  &#125;, <span class="number">250</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="检测编解码器支持情况"><a href="#检测编解码器支持情况" class="headerlink" title="检测编解码器支持情况"></a>检测编解码器支持情况</h3><p>有一个JavaScriptAPI能够检测浏览器是否支持某种格式和编解码器</p><p>这两个媒体元素都有一个<code>element.canPlayType()</code>方法，该方法接收一种格式/编解码器字符串，返回”probably”、”maybe”或””（空字符串）。空字符串是假值，因此可以像下面这样在if语句中使用<code>element.canPlayType()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (audio.canPlayType(<span class="string">"audio/mpeg"</span>)) &#123;</span><br><span class="line">  <span class="comment">//进一步处理 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>“probably”和”maybe”都是真值，因此在 if 语句的条件测试中可以转换成 true。<br>在同时传入MIME类型和编解码器的情况下，可能性就会增加，返回的字符串会变成”probably”。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> audio = <span class="built_in">document</span>.getElementById(<span class="string">"audio-player"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//很可能"maybe" </span></span><br><span class="line"><span class="keyword">if</span> (audio.canPlayType(<span class="string">"audio/mpeg"</span>)) &#123;</span><br><span class="line">  <span class="comment">//进一步处理 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可能是"probably" </span></span><br><span class="line"><span class="keyword">if</span> (audio.canPlayType(<span class="string">"audio/ogg; codecs=\"vorbis\""</span>)) &#123;</span><br><span class="line">  <span class="comment">//进一步处理 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>编解码器必须用引号引起来才行。下表列出了已知的已得到支持的音频格式和编解码器。</p></blockquote><p><img src="https://i.loli.net/2017/12/31/5a48b37a1b202.jpg" alt=""></p><h2 id="历史状态管理"><a href="#历史状态管理" class="headerlink" title="历史状态管理"></a>历史状态管理</h2><h3 id="history-pushState"><a href="#history-pushState" class="headerlink" title="history.pushState()"></a>history.pushState()</h3><p><code>history.pushState(state,title,url)</code>方法，该方法可以接收三个参数：状态对象、新状态的标题,可选的相对 URL,能够在不加载新页面的情况下改变浏览器的URL</p><p>执行<code>history.pushState()</code>方法后，新的状态信息就会被加入历史状态栈，而浏览器地址栏也会变成新的相对URL。但是，浏览器并不会真的向服务器发送请求，即使状态改变之后查询<code>location.href</code>也会返回与地址栏中相同的地址。</p><p>因为pushState()会创建新的历史状态，所以你会发现“后退”按钮也能使用了。按下“后退”按钮，会触发window对象的<code>window.onpopstate</code>事件。事件的事件对象有一个<code>event.state</code>属性，这个属性就包含着当初以第一个参数传递给<code>history.pushState()</code>的状态对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">history.pushState(&#123;<span class="attr">name</span>:<span class="string">"Nicholas"</span>&#125;, <span class="string">"Nicholas page"</span>, <span class="string">"nicholas.html"</span>);</span><br></pre></td></tr></table></figure><h3 id="history-replaceState"><a href="#history-replaceState" class="headerlink" title="history.replaceState()"></a>history.replaceState()</h3><p><code>history.replaceState(state,title,url)</code> 和<code>history.pushState</code>的区别是不是往历史记录里添加一条记录,而是更新当前记录</p><h3 id="window-onpopstate"><a href="#window-onpopstate" class="headerlink" title="window.onpopstate()"></a>window.onpopstate()</h3><p><code>window.onpopstate</code>是<code>popstate</code>事件在<code>window</code>对象上的事件处理程序.</p><p>每当处于激活状态的历史记录条目发生变化时,<code>popstate</code>事件就会在对应<code>window</code>对象上触发. 如果当前处于激活状态的历史记录条目是由<code>history.pushState()</code>方法创建,或者由<code>history.replaceState()</code>方法修改过的, 则<code>popstate</code>事件对象的<code>event.state</code>属性包含了这个历史记录条目的state对象的一个拷贝.</p><p>调用<code>history.pushState()</code>或者<code>history.replaceState()</code>不会触发<code>popstate</code>事件. <code>popstate</code>事件只会在浏览器某些行为下触发, 比如点击后退、前进按钮(或者在JavaScript中调用<code>history.back()</code>、<code>history.forward()</code>、<code>history.go()</code>方法).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onpopstate = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"location: "</span> + <span class="built_in">document</span>.location + <span class="string">", state: "</span> + <span class="built_in">JSON</span>.stringify(event.state));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//绑定事件处理函数. </span></span><br><span class="line">history.pushState(&#123;<span class="attr">page</span>: <span class="number">1</span>&#125;, <span class="string">"title 1"</span>, <span class="string">"?page=1"</span>);    <span class="comment">//添加并激活一个历史记录条目 http://example.com/example.html?page=1,条目索引为1</span></span><br><span class="line">history.pushState(&#123;<span class="attr">page</span>: <span class="number">2</span>&#125;, <span class="string">"title 2"</span>, <span class="string">"?page=2"</span>);    <span class="comment">//添加并激活一个历史记录条目 http://example.com/example.html?page=2,条目索引为2</span></span><br><span class="line">history.replaceState(&#123;<span class="attr">page</span>: <span class="number">3</span>&#125;, <span class="string">"title 3"</span>, <span class="string">"?page=3"</span>); <span class="comment">//修改当前激活的历史记录条目 http://ex..?page=2 变为 http://ex..?page=3,条目索引为3</span></span><br><span class="line">        history.back(); <span class="comment">// 弹出 "location: http://example.com/example.html?page=1, state: &#123;"page":1&#125;"</span></span><br><span class="line">history.back(); <span class="comment">// 弹出 "location: http://example.com/example.html, state: null</span></span><br><span class="line">history.go(<span class="number">2</span>);  <span class="comment">// 弹出 "location: http://example.com/example.html?page=3, state: &#123;"page":3&#125;</span></span><br></pre></td></tr></table></figure><h1 id="错误处理-第17章"><a href="#错误处理-第17章" class="headerlink" title="错误处理 (第17章)"></a>错误处理 (第17章)</h1><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><h3 id="try-catch语句"><a href="#try-catch语句" class="headerlink" title="try-catch语句"></a>try-catch语句</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// 可能会导致错误的代码 </span></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="comment">// 在错误发生时怎么处理 </span></span><br><span class="line">  <span class="built_in">console</span>.log(error.message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果<code>try</code>块中的任何代码发生了错误，就会立即退出代码执行过程，然后接着执行<code>catch</code>块。此时，<code>catch</code>块会接收到一个包含错误信息的对象。与在其他语言中不同的是，即使你不想使用这个错误对象，也要给它起个名字。这个对象中包含的实际信息会因浏览器而异，但共同的是有一个保存着错误消息的<code>error.message</code>属性,一个保存错误类型的<code>error.name</code>属性；</p><h3 id="finally子句"><a href="#finally子句" class="headerlink" title="finally子句"></a>finally子句</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFinally</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>; <span class="comment">// 不会执行</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 不会执行</span></span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 只会return 0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然在<code>try-catch</code>语句中是可选的，但<code>finally</code>子句一经使用，其代码无论如何都会执行。换句话说，<code>try</code>语句块中的代码全部正常执行，<code>finally</code>子句会执行；如果因为出错而执行了<code>catch</code>语句块，<code>finally</code>子句照样还会执行。只要代码中包含<code>finally</code>子句，则无论try或catch语句块中包含什么代码——甚至<code>return</code>语句，都不会阻止<code>finally</code>子句的执行。来看下面这个函数。</p><blockquote><p>如果提供finally子句，则catch子句就成了可选的（catch或finally有一个即可）。<br>请读者务必要记住，只要代码中包含finally子句，那么无论try还是catch语句块中的return语句都将被忽略。</p></blockquote><h3 id="错误类型"><a href="#错误类型" class="headerlink" title="错误类型"></a>错误类型</h3><p>7种错误类型:</p><ul><li><code>Error</code></li><li><code>EvalError</code></li><li><code>RangeError</code></li><li><code>ReferenceError</code></li><li><code>SyntaxError</code></li><li><code>TypeError</code></li><li><code>URIError</code></li></ul><blockquote><p>针对错误类型的编程处理</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  someFunction();</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="keyword">if</span> (error <span class="keyword">instanceof</span> <span class="built_in">TypeError</span>) &#123;</span><br><span class="line">    <span class="comment">//处理类型错误 </span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error <span class="keyword">instanceof</span> <span class="built_in">ReferenceError</span>) &#123;</span><br><span class="line">    <span class="comment">//处理引用错误 </span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//处理其他类型的错误 </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用<code>try-catch</code>最适合处理那些我们无法控制的错误。假设你在使用一个大型<code>JavaScript库</code>中的函数，该函数可能会有意无意地抛出一些错误。由于我们不能修改这个库的源代码，所以大可将对该函数的调用放在<code>try-catch</code>语句当中，万一有什么错误发生，也好恰当地处理它们。<br>在明明白白地知道自己的代码会发生错误时，再使用<code>try-catch</code>语句就不太合适了。例如，如果传递给函数的参数是字符串而非数值，就会造成函数出错，那么就应该先检查参数的类型，然后再决定如何去做。在这种情况下，不应用使用<code>try-catch</code>语句。</p></blockquote><h3 id="抛出错误-throw"><a href="#抛出错误-throw" class="headerlink" title="抛出错误 throw"></a>抛出错误 throw</h3><p>与<code>try-catch</code>语句相配的还有一个<code>throw</code>操作符，用于随时抛出自定义错误。抛出错误时，必须要给<code>throw</code>操作符指定一个值，这个值是什么类型，没有要求。下列代码都是有效的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="number">12345</span>;</span><br><span class="line"><span class="keyword">throw</span> <span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="keyword">throw</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">throw</span> &#123;</span><br><span class="line">  name: <span class="string">"JavaScript"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在遇到<code>throw</code>操作符时，代码会立即停止执行。仅当有<code>try-catch</code>语句捕获到被抛出的值时，代码才会继续执行。通过使用某种内置错误类型，可以更真实地模拟浏览器错误。每种错误类型的构造函数接收一个参数，即实际的错误消息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Something bad happened."</span>);</span><br></pre></td></tr></table></figure><p>这行代码抛出了一个通用错误，带有一条自定义错误消息。浏览器会像处理自己生成的错误一样，来处理这行代码抛出的错误。换句话说，浏览器会以常规方式报告这一错误，并且会显示这里的自定义错误消息。像下面使用其他错误类型，也可以模拟出类似的浏览器错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">SyntaxError</span>(<span class="string">"I don’t like your syntax."</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"What type of variable do you take me for?"</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RangeError</span>(<span class="string">"Sorry, you just don’t have the range."</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">EvalError</span>(<span class="string">"That doesn’t evaluate."</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">URIError</span>(<span class="string">"Uri, is that you?"</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">ReferenceError</span>(<span class="string">"You didn’t cite your references properly."</span>);</span><br></pre></td></tr></table></figure><p>另外，利用原型链还可以通过继承Error来创建自定义错误类型（原型链在第6章中介绍）。此时，需要为新创建的错误类型指定name和message属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CustomError</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">"CustomError"</span>;</span><br><span class="line">  <span class="keyword">this</span>.message = message;</span><br><span class="line">&#125;</span><br><span class="line">CustomError.prototype = <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> CustomError(<span class="string">"My message"</span>);</span><br></pre></td></tr></table></figure><h3 id="错误事件-error"><a href="#错误事件-error" class="headerlink" title="错误事件 error"></a>错误事件 error</h3><p>任何没有通过try-catch处理的错误都会触发<code>window</code>对象的<code>window.onerror(message,url,line)</code>事件。在任何Web浏览器中，<code>onerror</code>事件处理程序都不会创建<code>event</code>事件参数对象，但它可以接收三个参数：错误消息<code>message</code>、错误所在的URL<code>url</code>, 行号<code>line</code>。多数情况下，只有错误消息有用，因为URL只是给出了文档的位置，而行号所指的代码行既可能出自嵌入的JavaScript代码，也可能出自外部的文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">message, url, line</span>) </span>&#123;</span><br><span class="line">  alert(message);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>只要发生错误，无论是不是浏览器生成的，都会触发<code>error</code>事件，并执行这个事件处理程序。然后，浏览器默认的机制发挥作用，像往常一样显示出错误消息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">message, url, line</span>) </span>&#123;</span><br><span class="line">  alert(message);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过return false，这个函数实际上就充当了整个文档中的<code>try-catch</code>语句，可以捕获所有无代码处理的运行时错误。这个事件处理程序是避免浏览器报告错误的最后一道防线，理想情况下，只要可能就不应该使用它。只要能够适当地使用<code>try-catch</code>语句，就不会有错误交给浏览器，也就不会触发<code>error</code>事件。</p><p>图像也支持<code>error</code>事件。只要图像的<code>src</code>特性中的URL不能返回可以被识别的图像格式，就会触发<code>error</code>事件。此时的<code>error</code>事件遵循DOM格式，会返回一个以图像为目标的<code>event</code>对象。下面是一个例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">EventUtil.addHandler(image, <span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Image loaded!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">EventUtil.addHandler(image, <span class="string">"error"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Image not loaded!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">image.src = <span class="string">"smilex.gif"</span>; <span class="comment">//指定不存在的文件</span></span><br></pre></td></tr></table></figure><h3 id="添加查询字符串工具函数"><a href="#添加查询字符串工具函数" class="headerlink" title="添加查询字符串工具函数"></a>添加查询字符串工具函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addQueryStringArg</span>(<span class="params">url, name, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (url.indexOf(<span class="string">"?"</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">    url += <span class="string">"?"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    url += <span class="string">"&amp;"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  url += <span class="built_in">encodeURIComponent</span>(name) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(value);</span><br><span class="line">  <span class="keyword">return</span> url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="把错误记录到服务器"><a href="#把错误记录到服务器" class="headerlink" title="把错误记录到服务器"></a>把错误记录到服务器</h3><p>要建立这样一种JavaScript错误记录系统，首先需要在服务器上创建一个页面（或者一个服务器入口点），用于处理错误数据。这个页面的作用无非就是从查询字符串中取得数据，然后再将数据写入错误日志中。这个页面可能会使用如下所示的函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logError</span>(<span class="params">sev, msg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">  img.src = <span class="string">"log.php?sev="</span> + <span class="built_in">encodeURIComponent</span>(sev) + <span class="string">"&amp;msg="</span> + <span class="built_in">encodeURIComponent</span>(msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个<code>logError()</code>函数接收两个参数：表示严重程度的数值或字符串（视所用系统而异）及错误消息。其中，使用了Image对象来发送请求，这样做非常灵活，主要表现如下几方面。</p><ul><li>所有浏览器都支持Image对象，包括那些不支持XMLHttpRequest对象的浏览器。</li><li>可以避免跨域限制。通常都是一台服务器要负责处理多台服务器的错误，而这种情况下使用XMLHttpRequest是不行的。</li><li>在记录错误的过程中出问题的概率比较低。大多数Ajax通信都是由JavaScript库提供的包装函数来处理的，如果库代码本身有问题，而你还在依赖该库记录错误，可想而知，错误消息是不可能得到记录的。</li></ul><p>只要是使用try-catch语句，就应该把相应错误记录到日志中。来看下面的例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = mods.length; i &lt; len; i++) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    mods[i].init();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">    logError(<span class="string">"nonfatal"</span>, <span class="string">"Module init failed: "</span> + ex.message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调试技术"><a href="#调试技术" class="headerlink" title="调试技术"></a>调试技术</h2><h3 id="console"><a href="#console" class="headerlink" title="console"></a>console</h3><ul><li><code>error(message)</code>：将错误消息记录到控制台</li><li><code>info(message)</code>：将信息性消息记录到控制台</li><li><code>log(message)</code>：将一般消息记录到控制台</li><li><code>warn(message)</code>：将警告消息记录到控制台</li></ul><h3 id="抛出错误-assert"><a href="#抛出错误-assert" class="headerlink" title="抛出错误 assert()"></a>抛出错误 assert()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> num1 != <span class="string">"number"</span> || <span class="keyword">typeof</span> num2 != <span class="string">"number"</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"divide(): Both arguments must be numbers."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> num1 / num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于大型应用程序来说，自定义的错误通常都使用<code>assert(condition,errMessage)</code>函数抛出。这个函数接受两个参数，一个是求值结果应该为true的条件，另一个是条件为false时要抛出的错误信息。以下就是一个非常基本的<code>assert()</code>函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assert</span>(<span class="params">condition, message</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!condition) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以用这个<code>assert()</code>函数代替某些函数中需要调试的if语句，以便输出错误消息。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  assert(<span class="keyword">typeof</span> num1 == <span class="string">"number"</span> &amp;&amp; <span class="keyword">typeof</span> num2 == <span class="string">"number"</span>, <span class="string">"divide(): Both arguments must be numbers."</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> num1 / num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTML5-脚本编程-第16章&quot;&gt;&lt;a href=&quot;#HTML5-脚本编程-第16章&quot; class=&quot;headerlink&quot; title=&quot;HTML5 脚本编程 (第16章)&quot;&gt;&lt;/a&gt;HTML5 脚本编程 (第16章)&lt;/h1&gt;&lt;h2 id=&quot;原生拖放&quot;&gt;&lt;a 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正反馈系列:《JavaScript高级程序设计》表单脚本</title>
    <link href="http://yoursite.com/2017/12/30/%E9%AB%98%E7%A8%8Bvol9-%E8%A1%A8%E5%8D%95%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2017/12/30/高程vol9-表单脚本/</id>
    <published>2017-12-30T02:43:01.000Z</published>
    <updated>2018-03-21T10:23:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="表单的基础知识"><a href="#表单的基础知识" class="headerlink" title="表单的基础知识"></a>表单的基础知识</h2><p>在HTML中，表单是由<code>&lt;form&gt;</code>元素来表示的，而在JavaScript中，表单对应的则是<code>HTMLFormElement</code>类型。<code>HTMLFormElement</code>继承了<code>HTMLElement</code>，因而与其他HTML元素具有相同的默认属性。不过，<code>HTMLFormElement</code>也有它自己下列独有的属性和方法。</p><ul><li><code>acceptCharset</code>：服务器能够处理的字符集；等价于HTML中的<code>accept-charset</code>特性。</li><li><code>action</code>：接受请求的URL；等价于HTML中的<code>action</code>特性。</li><li><code>elements</code>：表单中所有控件的集合（<code>HTMLCollection</code>）。</li><li><code>enctype</code>：请求的编码类型；等价于HTML中的<code>enctype</code>特性。</li><li><code>length</code>：表单中控件的数量。</li><li><code>method</code>：要发送的HTTP请求类型，通常是”get”或”post”；等价于HTML的<code>method</code>特性。</li><li><code>name</code>：表单的名称；等价于HTML的<code>name</code>特性。</li><li><code>reset()</code>：将所有表单域重置为默认值。</li><li><code>submit()</code>：提交表单。</li><li><code>target</code>：用于发送请求和接收响应的窗口名称；等价于HTML的<code>target</code>特性。</li></ul><blockquote><p>取得<code>&lt;form&gt;</code>元素引用的方式有好几种。其中最常见的方式就是将它看成与其他元素一样，并为其添加<code>id</code>特性，然后再像下面这样使用<code>getElementById()</code>方法找到它。其次，通过<code>document.forms</code>可以取得页面中所有的表单。在这个集合中，可以通过<code>数值索引</code>或<code>name</code>值来取得特定的表单</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过id得到form对象</span></span><br><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"form1"</span>);</span><br><span class="line"><span class="comment">//取得页面中的第一个表单 </span></span><br><span class="line"><span class="keyword">var</span> firstForm = <span class="built_in">document</span>.forms[<span class="number">0</span>]; </span><br><span class="line"><span class="comment">//取得页面中名称为"form2"的表单</span></span><br><span class="line"><span class="keyword">var</span> myForm = <span class="built_in">document</span>.forms[<span class="string">"form2"</span>];</span><br></pre></td></tr></table></figure><blockquote><p>另外，在较早的浏览器或者那些支持向后兼容的浏览器中，也会把每个设置了<code>name</code>特性的表单作为属性保存在<code>document</code>对象中。例如，通过<code>document.form2</code>可以访问到名为<code>form2</code>的表单。不过，我们不推荐使用这种方式：一是容易出错，二是将来的浏览器可能会不支持。<br>可以同时为表单指定id和name属性，但它们的值不一定相同。</p></blockquote><h3 id="提交表单"><a href="#提交表单" class="headerlink" title="提交表单"></a>提交表单</h3><p>只要我们单击以下代码生成的按钮，就可以提交表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通用提交按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit Form"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 自定义提交按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Submit Form<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 图像按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"image"</span> <span class="attr">src</span>=<span class="string">"graphic.gif"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只要表单中存在上面列出的任何一种按钮，按回车键就可以提交该表单。（<code>textarea</code>是一个例外，在文本区中回车会换行。）</p><p>以这种方式提交表单时，浏览器会在将请求发送给服务器之前触发<code>submit</code>事件(必须有上述按钮才能触发<code>submit</code>事件,js方法触发<code>form.submit()</code>也可以提交,但并没有触发<code>submit</code>事件,要区别)。这样，我们就有机会验证表单数据，并据以决定是否允许表单提交。阻止这个事件的默认行为就可以取消表单提交。例如，下列代码会阻止表单提交。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"myForm"</span>);</span><br><span class="line">EventUtil.addHandler(form, <span class="string">"submit"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//取得事件对象 </span></span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//阻止默认事件 </span></span><br><span class="line">  EventUtil.preventDefault(event);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以编程方式调用<code>form.submit()</code>方法也可以提交表单。而且，这种方式无需表单包含提交按钮，任何时候都可以正常提交表单。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"myForm"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//提交表单</span></span><br><span class="line">form.submit();</span><br></pre></td></tr></table></figure><blockquote><p>在以调用 <code>form.submit()</code>方法的形式提交表单时，不会触发 <code>submit</code> 事件，因此要记得在调用此方法之前先验证表单数据。</p><p>提交表单时可能出现的最大问题，就是重复提交表单。解决这一问题的办法有两个：在第一次提交表单后就禁用提交按钮，或者利用<code>onsubmit</code>事件处理程序取消后续的表单提交操作。</p></blockquote><h3 id="重置表单"><a href="#重置表单" class="headerlink" title="重置表单"></a>重置表单</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通用重置按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"Reset Form"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 自定义重置按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"reset"</span>&gt;</span>Reset Form<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"myForm"</span>);</span><br><span class="line">EventUtil.addHandler(form, <span class="string">"reset"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//取得事件对象 </span></span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//阻止表单重置 </span></span><br><span class="line">  EventUtil.preventDefault(event);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>与提交表单一样，也可以通过JavaScript来重置表单</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"myForm"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//重置表单 </span></span><br><span class="line">form.reset();</span><br></pre></td></tr></table></figure><blockquote><p>与调用<code>form.submit()</code>方法不同，调用<code>form.reset()</code>方法会像单击重置按钮一样触发<code>reset</code>事件。</p></blockquote><h3 id="表单字段"><a href="#表单字段" class="headerlink" title="表单字段"></a>表单字段</h3><p>每个表单都有<code>form.elements</code>属性，该属性是表单中所有表单元素（字段）的集合。这个<code>form.elements</code>集合是一个有序列表，其中包含着表单中的所有字段，</p><p>每个表单字段在<code>form.elements</code>集合中的顺序，与它们出现在标记中的顺序相同，可以按照位置和<code>name</code>特性来访问它们。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"form1"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取得表单中的第一个字段 </span></span><br><span class="line"><span class="keyword">var</span> field1 = form.elements[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//取得名为"textbox1"的字段 </span></span><br><span class="line"><span class="keyword">var</span> field2 = form.elements[<span class="string">"textbox1"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//取得表单中包含的字段的数量 </span></span><br><span class="line"><span class="keyword">var</span> fieldCount = form.elements.length;</span><br></pre></td></tr></table></figure><blockquote><p>如果有多个表单控件都在使用一个<code>name</code>（如单选按钮），那么就会返回以该<code>name</code>命名的一个<code>NodeList</code>。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">id</span>=<span class="string">"myForm"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">value</span>=<span class="string">"red"</span>&gt;</span>Red<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">value</span>=<span class="string">"green"</span>&gt;</span>Green<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">value</span>=<span class="string">"blue"</span>&gt;</span>Blue<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在这个HTML表单中，有3个单选按钮，它们的<code>name</code>都是”color”，意味着这3个字段是一起的。在访问<code>elements[&quot;color&quot;]</code>时，就会返回一个<code>NodeList</code>，其中包含这3个元素；不过，如果访问<code>elements[0]</code>，则只会返回第一个元素</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"myForm"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> colorFields = form.elements[<span class="string">"color"</span>];</span><br><span class="line">alert(colorFields.length); <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> firstColorField = colorFields[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> firstFormField = form.elements[<span class="number">0</span>];</span><br><span class="line">alert(firstColorField === firstFormField);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><blockquote><p>也可以通过访问表单的属性来访问元素，例如<code>form[0]</code>可以取得第一个表单字段，而<code>form[&quot;color&quot;]</code>则可以取得第一个命名字段。这些属性与通过<code>form.elements</code>集合访问到的元素是相同的。但是，我们应该尽可能使用<code>form.elements</code>，通过表单属性访问元素只是为了与旧浏览器向后兼容而保留的一种过渡方式。</p></blockquote><h4 id="共有的表单字段属性"><a href="#共有的表单字段属性" class="headerlink" title="共有的表单字段属性"></a>共有的表单字段属性</h4><p>除了<code>&lt;fieldset&gt;</code>元素之外，所有表单字段都拥有相同的一组属性。由于<code>&lt;input&gt;</code>类型可以表示多种表单字段，因此有些属性只适用于某些字段，但还有一些属性是所有字段所共有的。表单字段共有的属性如下:</p><ul><li><code>disabled</code>：布尔值，表示当前字段是否被禁用。</li><li><code>form</code>：指向当前字段所属表单的指针；只读。</li><li><code>name</code>：当前字段的名称。</li><li><code>readOnly</code>：布尔值，表示当前字段是否只读。</li><li><code>tabIndex</code>：表示当前字段的切换（tab）序号。</li><li><code>type</code>：当前字段的类型，如”checkbox”、”radio”，等等。</li><li><code>value</code>：当前字段将被提交给服务器的值。对文件字段来说，这个属性是只读的，包含着文件在计算机中的路径。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"myForm"</span>);</span><br><span class="line"><span class="keyword">var</span> field = form.elements[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改 value 属性 </span></span><br><span class="line">field.value = <span class="string">"Another value"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查 form 属性的值 </span></span><br><span class="line">alert(field.form === form); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//把焦点设置到当前字段 </span></span><br><span class="line">field.focus();</span><br><span class="line"></span><br><span class="line"><span class="comment">//禁用当前字段 </span></span><br><span class="line">field.disabled = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改 type 属性（不推荐，但对&lt;input&gt;来说是可行的） </span></span><br><span class="line">field.type = <span class="string">"checkbox"</span>;</span><br></pre></td></tr></table></figure><p>能够动态修改表单字段属性，意味着我们可以在任何时候，以任何方式来动态操作表单。重复单击表单的提交按钮, 最常见的解决方案，就是在第一次单击后就禁用提交按钮。只要侦听<code>submit</code>事件，并在该事件发生时禁用提交按钮即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//避免多次提交表单 </span></span><br><span class="line">EventUtil.addHandler(form, <span class="string">"submit"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//取得提交按钮 </span></span><br><span class="line">  <span class="keyword">var</span> btn = target.elements[<span class="string">"submit-btn"</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">//禁用它 </span></span><br><span class="line">  btn.disabled = <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>以上代码为表单的submit事件添加了一个事件处理程序。事件触发后，代码取得了提交按钮并将其disabled属性设置为true。注意，不能通过onclick事件处理程序来实现这个功能. 因为有的浏览器会在触发表单的submit事件之前触发click事件，而有的浏览器则相反。</p><p>因此，最好是通过submit事件来禁用提交按钮。不过，这种方式不适合表单中不包含提交按钮的情况；如前所述，只有在包含提交按钮的情况下，才有可能触发表单的submit事件。</p></blockquote><p>除了<code>&lt;fieldset&gt;</code>之外，所有表单字段都有<code>element.type</code>属性。对于<code>&lt;input&gt;</code>元素，这个值等于HTML特性<code>type</code>的值。对于其他元素，这个<code>type</code>属性的值如下表所列。</p><p><img src="https://i.loli.net/2017/12/30/5a46fd0916ad1.jpg" alt=""></p><blockquote><p><code>&lt;input&gt;</code>和<code>&lt;button&gt;</code>元素的<code>type</code>属性是可以动态修改的，而<code>&lt;select&gt;</code>元素的type属性则是只读的。</p></blockquote><h4 id="共有的表单字段方法"><a href="#共有的表单字段方法" class="headerlink" title="共有的表单字段方法"></a>共有的表单字段方法</h4><p>每个表单字段都有两个方法：<code>element.focus()</code>和<code>element.blur()</code></p><p>使用<code>element.focus()</code>方法，可以将用户的注意力吸引到页面中的某个部位。例如，在页面加载完毕后，将焦点转移到表单中的第一个字段。为此，可以侦听页面的load事件，并在该事件发生时在表单的第一个字段上调用<code>element.focus()</code>方法.</p><blockquote><p>要注意的是，如果第一个表单字段是一个<code>&lt;input&gt;</code>元素，且其type特性的值为”hidden”，那么以上代码会导致错误。另外，如果使用CSS的display和visibility属性隐藏了该字段，同样也会导致错误。</p></blockquote><p>HTML5为表单字段新增了一个<code>autofocus</code>属性。在支持这个属性的浏览器中，只要设置这个属性，不用JavaScript就能自动把焦点移动到相应字段。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">autofocus</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为了保证前面的代码在设置autofocus的浏览器中正常运行，必须先检测是否设置了该属性，如果设置了，就不用再调用focus()了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> element = <span class="built_in">document</span>.forms[<span class="number">0</span>].elements[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> (element.autofocus !== <span class="literal">true</span>) &#123;</span><br><span class="line">    element.focus();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"JS focus"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>因为<code>autofocus</code>是一个布尔值属性，所以在支持的浏览器中它的值应该是true。（在不支持的浏览器中，它的值将是空字符串。<br>在默认情况下，只有表单字段可以获得焦点。对于其他元素而言，如果先将其<code>element.tabIndex</code>属性设置为-1，然后再调用focus()方法，也可以让这些元素获得焦点。</p></blockquote><h4 id="共有的表单字段事件"><a href="#共有的表单字段事件" class="headerlink" title="共有的表单字段事件"></a>共有的表单字段事件</h4><p>除了支持鼠标、键盘、更改和HTML事件之外，所有表单字段都支持下列3个事件。</p><ul><li><code>blur</code>：当前字段失去焦点时触发。</li><li><code>change</code>：对于<code>&lt;input&gt;</code>和<code>&lt;textarea&gt;</code>元素，在它们失去焦点且<code>value</code>值改变时触发；对于<code>&lt;select&gt;</code>元素，在其选项改变时触发。</li><li><code>focus</code>：当前字段获得焦点时触发。</li></ul><p><code>change</code>事件在不同表单控件中触发的次数会有所不同。对于<code>&lt;input&gt;</code>和<code>&lt;textarea&gt;</code>元素，当它们从获得焦点到失去焦点且<code>value</code>值改变时，才会触发<code>change</code>事件。对于<code>&lt;select&gt;</code>元素，只要用户选择了不同的选项，就会触发change事件；换句话说，<strong>不失去焦点也会触发<code>change</code>事件</strong>。</p><p>可以使用<code>focus</code>和<code>blur</code>事件来以某种方式改变用户界面，要么是向用户给出视觉提示，要么是向界面中添加额外的功能（例如，为文本框显示一个下拉选项菜单）。为确保无论文本框的值如何变化，验证规则始终如一，<code>onblur</code>和<code>onchange</code>事件处理程序中使用了相同的正则表达式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> textbox = <span class="built_in">document</span>.forms[<span class="number">0</span>].elements[<span class="number">0</span>];</span><br><span class="line">EventUtil.addHandler(textbox, <span class="string">"focus"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line">  <span class="keyword">if</span> (target.style.backgroundColor != <span class="string">"red"</span>) &#123;</span><br><span class="line">    target.style.backgroundColor = <span class="string">"yellow"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">EventUtil.addHandler(textbox, <span class="string">"blur"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/[^\d]/</span>.test(target.value)) &#123;</span><br><span class="line">    target.style.backgroundColor = <span class="string">"red"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    target.style.backgroundColor = <span class="string">""</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">EventUtil.addHandler(textbox, <span class="string">"change"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/[^\d]/</span>.test(target.value)) &#123;</span><br><span class="line">    target.style.backgroundColor = <span class="string">"red"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    target.style.backgroundColor = <span class="string">""</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="文本框脚本-input-textarea"><a href="#文本框脚本-input-textarea" class="headerlink" title="文本框脚本 input,textarea"></a>文本框脚本 input,textarea</h2><p>两种方式来表现文本框：<code>&lt;input&gt;</code>，<code>&lt;textarea&gt;</code></p><p>必须将<code>&lt;input&gt;</code>元素的type特性设置为”text”。而通过设置<code>size</code>特性，可以指定文本框中能够显示的字符数。通过<code>value</code>特性，可以设置文本框的初始值，而<code>maxlength</code>特性则用于指定文本框可以接受的最大字符数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">size</span>=<span class="string">"25"</span> <span class="attr">maxlength</span>=<span class="string">"50"</span> <span class="attr">value</span>=<span class="string">"initial value"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;textarea&gt;</code>要指定大小，可以使用<code>rows</code>和<code>cols</code>特性。其中，<code>rows</code>特性指定的是文本框的字符行数，而<code>cols</code>特性指定的是文本框的字符列数,与<code>&lt;input&gt;</code>元素不同，<code>&lt;textarea&gt;</code>的初始值必须要放在<code>&lt;textarea&gt;</code>和<code>&lt;/textarea&gt;</code>之间，如下面的例子所示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">"25"</span> <span class="attr">cols</span>=<span class="string">"5"</span>&gt;</span>initial value<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><p>无论这两种文本框在标记中有什么区别，但它们都会将用户输入的内容保存在<code>value</code>属性中。可以通过这个属性读取和设置文本框的值，如下面的例子所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> textbox = <span class="built_in">document</span>.forms[<span class="number">0</span>].elements[<span class="string">"textbox1"</span>];</span><br><span class="line">alert(textbox.value);</span><br><span class="line">textbox.value = <span class="string">"Some new value"</span>;</span><br></pre></td></tr></table></figure><p>建议像上面这样使用 <code>value</code> 属性读取或设置文本框的值，不要使用 <code>element.setAttribute()</code>设置<code>&lt;input&gt;</code>元素的 <code>value</code> 特性，也不要去修改<code>&lt;textarea&gt;</code> 元素的文本节点。原因很简单：对 <code>value</code> 属性所作的修改，不一定会反映在 <code>DOM</code> 中</p><h3 id="选择脚本"><a href="#选择脚本" class="headerlink" title="选择脚本"></a>选择脚本</h3><p>两种文本框都支持<code>element.select()</code>方法，这个方法用于选择文本框中的所有文本。在调用select()方法时，大多数浏览器（Opera除外）都会将焦点设置到文本框中。</p><p>在文本框获得焦点时选择其所有文本，这是一种非常常见的做法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(textbox, <span class="string">"focus"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line">  target.select();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="select事件"><a href="#select事件" class="headerlink" title="select事件"></a>select事件</h4><p>与<code>element.select()</code>方法对应的，是一个<code>select</code>事件。在选择了文本框中的文本时，就会触发<code>select</code>事件。在调用<code>element.select()</code>方法时也会触发<code>select</code>事件。</p><h4 id="取得选择的文本"><a href="#取得选择的文本" class="headerlink" title="取得选择的文本"></a>取得选择的文本</h4><p>HTML5添加两个属性：<code>element.selectionStart</code>和<code>element.selectionEnd</code>。这两个属性中保存的是基于0的数值，表示所选择文本的范围（即文本选区开头和结尾的偏移量）</p><p>IE8及更早的版本中有一个<code>document.selection</code>对象，其中保存着用户在整个文档范围内选择的文本信息；无法确定用户选择的是页面中哪个部位的文本。不过，在与<code>select</code>事件一起使用的时候，可以假定是用户选择了文本框中的文本，因为触发了<code>select</code>事件。</p><p>要取得选择的文本，首先必须创建一个范围<code>range</code>，然后再将文本从其中提取出来，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSelectedText</span>(<span class="params">textbox</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> textbox.selectionStart == <span class="string">"number"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> textbox.value.substring(textbox.selectionStart, textbox.selectionEnd);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.selection) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.selection.createRange().text;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="选择部分文本"><a href="#选择部分文本" class="headerlink" title="选择部分文本"></a>选择部分文本</h4><p>所有文本框都有一个<code>element.setSelectionRange(start,end)</code>方法。</p><p>要看到选择的文本，必须在调用<code>element.setSelectionRange()</code>之前或之后立即将焦点设置到文本框。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">textbox.value = <span class="string">"Hello world!"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//选择所有文本 </span></span><br><span class="line">textbox.setSelectionRange(<span class="number">0</span>, textbox.value.length); <span class="comment">//"Hello world"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//选择前 3 个字符 </span></span><br><span class="line">textbox.setSelectionRange(<span class="number">0</span>, <span class="number">3</span>); <span class="comment">//"Hel"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//选择第 4 到第 6 个字符 </span></span><br><span class="line">textbox.setSelectionRange(<span class="number">4</span>, <span class="number">7</span>); <span class="comment">//"o w"</span></span><br></pre></td></tr></table></figure><p>关于IE8如何选择部分文本的js程序由于涉及IE8及之前版本的<code>range</code>内容,固不在重点范围,详情先查阅高程范围部分p340, 再查阅此部分p422</p><h3 id="过滤输入"><a href="#过滤输入" class="headerlink" title="过滤输入"></a>过滤输入</h3><h4 id="屏蔽字符"><a href="#屏蔽字符" class="headerlink" title="屏蔽字符"></a>屏蔽字符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(textbox, <span class="string">"keypress"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  EventUtil.preventDefault(event);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行以上代码后，由于所有按键操作都将被屏蔽，结果会导致文本框变成只读的。如果只想屏蔽特定的字符，则需要检测<code>keypress</code>事件对应的字符编码，然后再决定如何响应。例如，需求是只允许用户输入数值。</p><blockquote><p>理论上只应该在用户按下字符键时才触发keypress事件，但有些浏览器也会对其他键触发此事件。这意味着，仅考虑到屏蔽不是数值的字符还不够，还要避免屏蔽这些极为常用和必要的键。所幸的是，要检测这些键并不困难。在Firefox中，所有由非字符键触发的keypress事件对应的字符编码为0，而在Safari3以前的版本中，对应的字符编码全部为8。为了让代码更通用，只要不屏蔽那些字符编码小于10的键即可。</p><p>还有一个问题需要处理：复制、粘贴及其他操作还要用到<code>Ctrl</code>键。在除IE之外的所有浏览器中，前面的代码也会屏蔽<code>Ctrl+C</code>、<code>Ctrl+V</code>，以及其他使用<code>Ctrl</code>的组合键。因此，最后还要添加一个检测条件，以确保用户没有按下<code>Ctrl</code>键，如下面的例子所示。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(textbox, <span class="string">"keypress"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line">  <span class="keyword">var</span> charCode = EventUtil.getCharCode(event);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="regexp">/\d/</span>.test(<span class="built_in">String</span>.fromCharCode(charCode)) &amp;&amp; charCode &gt; <span class="number">9</span> &amp;&amp; !event.ctrlKey) &#123;</span><br><span class="line">    EventUtil.preventDefault(event);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>在这个例子的基础上加以修改和调整，就可以将同样的技术运用于放过和屏蔽任何输入文本框的字符。</p></blockquote><h4 id="操作剪贴板"><a href="#操作剪贴板" class="headerlink" title="操作剪贴板"></a>操作剪贴板</h4><p>HTML5把剪贴板事件纳入了规范。下列就是6个剪贴板事件。</p><ul><li><code>beforecopy</code>：在发生复制操作前触发。</li><li><code>copy</code>：在发生复制操作时触发。</li><li><code>beforecut</code>：在发生剪切操作前触发。</li><li><code>cut</code>：在发生剪切操作时触发。</li><li><code>beforepaste</code>：在发生粘贴操作前触发。</li><li><code>paste</code>：在发生粘贴操作时触发。</li></ul><blockquote><p>。在Safari、Chrome和Firefox中，beforecopy、beforecut和beforepaste事件只会在显示针对文本框的上下文菜单（预期将发生剪贴板事件）的情况下触发。但是，IE则会在触发copy、cut和paste事件之前先行触发这些事件。至于copy、cut和paste事件，只要是在上下文菜单中选择了相应选项，或者使用了相应的键盘组合键，所有浏览器都会触发它们。</p></blockquote><p>要访问剪贴板中的数据，可以使用<code>clipboardData</code>对象, 为了确保跨浏览器兼容性，最好只在发生剪贴板事件期间使用这个对象。</p><blockquote><p>在 IE 中，<code>clipboardData</code>对象是 <code>window</code> 对象的属性；而在 Firefox 4+、Safari 和 Chrome 中，这个对象是相应 event 对象的属性。</p></blockquote><p>这个<code>clipboardData</code>对象有三个方法：<code>clipboardData.getData(string)</code>、<code>clipboardData.setData(string,content)</code>和<code>clipboardData.clearData()</code>。<br><code>clipboardData.getData(string)</code>用于从剪贴板中取得数据，它接受一个参数<code>string</code>，即要取得的数据的格式。在IE中，有两种数据格式：<code>text</code>和<code>URL</code>。在Firefox、Safari和Chrome中，这个参数是一种<code>MIME类型</code>；不过，可以用<code>text</code>代表<code>text/plain</code>。</p><p><code>clipboardData.setData(string,content) return boolean</code>方法,第一个参数也是数据类型，第二个参数是要放在剪贴板中的文本。对于第一个参数，IE照样支持<code>text</code>和<code>URL</code>，而Safari和Chrome仍然只支持<code>MIME类型</code>。但是，与<code>clipboardData.getData()</code>方法不同的是，Safari和Chrome的<code>clipboardData.setData()</code>方法不能识别<code>text</code>类型。这两个浏览器在成功将文本放到剪贴板中后，都会返回true；否则，返回false。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = &#123;</span><br><span class="line">  <span class="comment">//省略的代码</span></span><br><span class="line">  getClipboardText: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> clipboardData = (event.clipboardData || <span class="built_in">window</span>.clipboardData);</span><br><span class="line">    <span class="keyword">return</span> clipboardData.getData(<span class="string">"text"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  setClipboardText: <span class="function"><span class="keyword">function</span> (<span class="params">event, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.clipboardData) &#123;</span><br><span class="line">      <span class="keyword">return</span> event.clipboardData.setData(<span class="string">"text/plain"</span>, value);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.clipboardData) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">window</span>.clipboardData.setData(<span class="string">"text"</span>, value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//省略的代码</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在需要确保粘贴到文本框中的文本中包含某些字符，或者符合某种格式要求时，能够访问剪贴板是非常有用的。例如，如果一个文本框只接受数值，那么就必须检测粘贴过来的值，以确保有效。在<code>paste</code>事件中，可以确定剪贴板中的值是否有效，如果无效，取消默认的行为。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(textbox, <span class="string">"paste"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  <span class="keyword">var</span> text = EventUtil.getClipboardText(event);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="regexp">/^\d*$/</span>.test(text)) &#123;</span><br><span class="line">    EventUtil.preventDefault(event);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="自动切换焦点"><a href="#自动切换焦点" class="headerlink" title="自动切换焦点"></a>自动切换焦点</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"tel1"</span> <span class="attr">id</span>=<span class="string">"txtTel1"</span> <span class="attr">maxlength</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"tel2"</span> <span class="attr">id</span>=<span class="string">"txtTel2"</span> <span class="attr">maxlength</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"tel3"</span> <span class="attr">id</span>=<span class="string">"txtTel3"</span> <span class="attr">maxlength</span>=<span class="string">"4"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">tabForward</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event = EventUtil.getEvent(event);</span><br><span class="line">    <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (target.value.length == target.maxLength) &#123;</span><br><span class="line">      <span class="keyword">var</span> form = target.form;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = form.elements.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (form.elements[i] == target) &#123;</span><br><span class="line">          <span class="keyword">if</span> (form.elements[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            form.elements[i + <span class="number">1</span>].focus();</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> textbox1 = <span class="built_in">document</span>.getElementById(<span class="string">"txtTel1"</span>);</span><br><span class="line">  <span class="keyword">var</span> textbox2 = <span class="built_in">document</span>.getElementById(<span class="string">"txtTel2"</span>);</span><br><span class="line">  <span class="keyword">var</span> textbox3 = <span class="built_in">document</span>.getElementById(<span class="string">"txtTel3"</span>);</span><br><span class="line"></span><br><span class="line">  EventUtil.addHandler(textbox1, <span class="string">"keyup"</span>, tabForward);</span><br><span class="line">  EventUtil.addHandler(textbox2, <span class="string">"keyup"</span>, tabForward);</span><br><span class="line">  EventUtil.addHandler(textbox3, <span class="string">"keyup"</span>, tabForward);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="HTML5约束验证API"><a href="#HTML5约束验证API" class="headerlink" title="HTML5约束验证API"></a>HTML5约束验证API</h3><blockquote><p>为了在将表单提交到服务器之前验证数据，HTML5新增了一些功能。有了这些功能，即便JavaScript被禁用或者由于种种原因未能加载，也可以确保基本的验证。换句话说，浏览器自己会根据标记中的规则执行验证，然后自己显示适当的错误消息（完全不用JavaScript插手）。当然，这个功能只有在支持HTML5这部分内容的浏览器中才有效(IE不支持)</p></blockquote><h4 id="required"><a href="#required" class="headerlink" title="required"></a>required</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">required</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>通过对应的<code>element.required</code>属性，可以检查某个表单字段是否为必填字段。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isUsernameRequired = <span class="built_in">document</span>.forms[<span class="number">0</span>].elements[<span class="string">"username"</span>].required;</span><br></pre></td></tr></table></figure><blockquote><p>使用下面这行代码可以测试浏览器是否支持 required 属性。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isRequiredSupported = <span class="string">"required"</span> <span class="keyword">in</span> <span class="built_in">document</span>.createElement(<span class="string">"input"</span>);</span><br></pre></td></tr></table></figure><h4 id="其他输入类型"><a href="#其他输入类型" class="headerlink" title="其他输入类型"></a>其他输入类型</h4><p>HTML5为<code>&lt;input&gt;</code>元素的<code>type</code>属性又增加了几个值。这些新的类型不仅能反映数据类型的信息，而且还能提供一些默认的验证功能。<code>email</code>和<code>url</code>是两个得到支持最多的类型，各浏览器也都为它们增加了定制的验证机制。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span> =<span class="string">"email"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"url"</span> <span class="attr">name</span>=<span class="string">"homepage"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要检测浏览器是否支持这些新类型，可以在JavaScript创建一个<code>&lt;input&gt;</code>元素，然后将<code>type</code>属性设置为<code>email</code>或<code>url</code>，最后再检测这个属性的值。不支持它们的旧版本浏览器会自动将未知的值设置为”text”，而支持的浏览器则会返回正确的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> input = <span class="built_in">document</span>.createElement(<span class="string">"input"</span>);</span><br><span class="line">input.type = <span class="string">"email"</span>;</span><br><span class="line"><span class="keyword">var</span> isEmailSupported = (input.type == <span class="string">"email"</span>);</span><br></pre></td></tr></table></figure><h4 id="数值范围"><a href="#数值范围" class="headerlink" title="数值范围"></a>数值范围</h4><p>HTML5还给<code>&lt;input&gt;</code>标签的<code>type</code>还有几种取值: <code>number</code>、<code>range</code>、<code>datetime</code>、<code>datetime-local</code>、<code>date</code>、<code>month</code>、<code>week</code>，还有<code>time</code>。</p><blockquote><p>对所有这些数值类型的输入元素，可以指定<code>min</code>属性（最小的可能值）、<code>max</code>属性（最大的可能值）和<code>step</code>属性（从<code>min</code>到<code>max</code>的两个刻度间的差值）。例如，想让用户只能输入0到100的值，而且这个值必须是5的倍数，可以这样写代码：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">min</span>=<span class="string">"0"</span> <span class="attr">max</span>=<span class="string">"100"</span> <span class="attr">step</span>=<span class="string">"5"</span> <span class="attr">name</span>=<span class="string">"count"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这些属性在JavaScript中都能通过对应的元素访问（或修改）。此外，还有两个方法：<code>element.stepUp()</code>和<code>element.stepDown()</code>，都接收一个可选的参数：要在当前值基础上加上或减去的数值。（默认是加或减1。）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">input.stepUp(); <span class="comment">//加 1 </span></span><br><span class="line">input.stepUp(<span class="number">5</span>); <span class="comment">//加 5 </span></span><br><span class="line">input.stepDown(); <span class="comment">//减 1 </span></span><br><span class="line">input.stepDown(<span class="number">10</span>); <span class="comment">//减 10</span></span><br></pre></td></tr></table></figure><h4 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h4><p>HTML5为文本字段新增了<code>pattern</code>属性。这个属性的值是一个正则表达式，用于匹配文本框中的值。例如，如果只想允许在文本字段中输入数值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">pattern</span>=<span class="string">"\d+"</span> <span class="attr">name</span>=<span class="string">"count"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>模式的开头和末尾不用加^和$符号（假定已经有了）。</p><p>与其他输入类型相似，指定<code>pattern</code>也不能阻止用户输入无效的文本。这个模式应用给值，浏览器来判断值是有效，还是无效。在 JavaScript 中可以通过 <code>element.pattern</code> 属性访问模式。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pattern = <span class="built_in">document</span>.forms[<span class="number">0</span>].elements[<span class="string">"count"</span>].pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测浏览器是否支持pattern属性</span></span><br><span class="line"><span class="keyword">var</span> isPatternSupported = <span class="string">"pattern"</span> <span class="keyword">in</span> <span class="built_in">document</span>.createElement(<span class="string">"input"</span>);</span><br></pre></td></tr></table></figure><h4 id="检测有效性"><a href="#检测有效性" class="headerlink" title="检测有效性"></a>检测有效性</h4><ul><li><code>element(form).checkValidity() return boolean</code>方法可以检测表单中的某个字段是否有效。所有表单字段都有个方法，如果字段的值有效，这个方法返回true，否则返回false。字段的值是否有效的判断依据是本节前面介绍过的那些约束。</li></ul><p>要检测整个表单是否有效，可以在表单自身调用<code>form.checkValidity()</code>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 验证字段</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.forms[<span class="number">0</span>].elements[<span class="number">0</span>].checkValidity()) &#123;</span><br><span class="line">  <span class="comment">//字段有效，继续</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//字段无效 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证表单</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.forms[<span class="number">0</span>].checkValidity()) &#123;</span><br><span class="line">  <span class="comment">//表单有效，继续 </span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//表单无效 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>element.validity</code>属性,是一个对象包含一系列属性，每个属性会返回一个布尔值</p><ul><li><code>customError</code>：如果设置了setCustomValidity()，则为true，否则返回false。</li><li><code>patternMismatch</code>：如果值与指定的pattern属性不匹配，返回true。</li><li><code>rangeOverflow</code>：如果值比max值大，返回true。</li><li><code>rangeUnderflow</code>：如果值比min值小，返回true。</li><li><code>stepMisMatch</code>：如果min和max之间的步长值不合理，返回true。</li><li><code>tooLong</code>：如果值的长度超过了maxlength属性指定的长度，返回true。有的浏览器（如Firefox4）会自动约束字符数量，因此这个值可能永远都返回false。</li><li><code>typeMismatch</code>：如果值不是”mail”或”url”要求的格式，返回true。</li><li><code>valid</code>：如果这里的其他属性都是false，返回true。checkValidity()也要求相同的值。</li><li><code>valueMissing</code>：如果标注为required的字段中没有值，返回true。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (input.validity &amp;&amp; !input.validity.valid) &#123;</span><br><span class="line">  <span class="keyword">if</span> (input.validity.valueMissing) &#123;</span><br><span class="line">    alert(<span class="string">"Please specify a value."</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (input.validity.typeMismatch) &#123;</span><br><span class="line">    alert(<span class="string">"Please enter an email address."</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">"Value is invalid."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="禁用验证"><a href="#禁用验证" class="headerlink" title="禁用验证"></a>禁用验证</h4><ul><li><code>novalidate</code>属性,可以告诉表单不进行验证</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"signup.php"</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--这里插入表单元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在JavaScript中使用noValidate属性可以取得或设置这个值，如果这个属性存在，值为true，如果不存在，值为false。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.forms[<span class="number">0</span>].noValidate = <span class="literal">true</span>; <span class="comment">//禁用验证</span></span><br></pre></td></tr></table></figure><ul><li><code>formnovalidate</code> 属性, 如果一个表单中有多个提交按钮，为了指定点击某个提交按钮不必验证表单，可以在相应的按钮上添加<code>formnovalidate</code>属性</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"foo.php"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--这里插入表单元素--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Regular Submit"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">formnovalidate</span> <span class="attr">name</span>=<span class="string">"btnNoValidate"</span> <span class="attr">value</span>=<span class="string">"Non-validating Submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用 JavaScript 也可以设置这个属性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//禁用验证 </span></span><br><span class="line"><span class="built_in">document</span>.forms[<span class="number">0</span>].elements[<span class="string">"btnNoValidate"</span>].formNoValidate = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h2 id="选择框脚本"><a href="#选择框脚本" class="headerlink" title="选择框脚本"></a>选择框脚本</h2><p>选择框是通过<code>&lt;select&gt;</code>和<code>&lt;option&gt;</code>元素创建的。为了方便与这个控件交互，除了所有表单字段共有的属性和方法外，<code>HTMLSelectElement</code>类型还提供了下列属性和方法。</p><ul><li><code>add(newOption,relOption)</code>：向控件中插入新<code>&lt;option&gt;</code>元素，其位置在相关项（relOption）之前。</li><li><code>multiple</code>：布尔值，表示是否允许多项选择；等价于HTML中的<code>multiple</code>特性。</li><li><code>options</code>：控件中所有<code>&lt;option&gt;</code>元素的HTMLCollection。</li><li><code>remove(index)</code>：移除给定位置的选项。</li><li><code>selectedIndex</code>：基于0的选中项的索引，如果没有选中项，则值为-1。对于支持多选的控件，只保存选中项中第一项的索引。</li><li><code>size</code>：选择框中可见的行数；等价于HTML中的<code>size</code>特性。</li></ul><p>选择框的<code>element.type</code>属性不是”select-one”，就是”select-multiple”，这取决于HTML代码中有没有<code>multiple</code>特性。选择框的<code>element.value</code>属性由当前选中项决定</p><ul><li>如果没有选中的项，则选择框的<code>value</code>属性保存<code>空字符串</code>。</li><li>如果有一个选中项，而且该项的<code>value特性</code>已经在HTML中指定，则选择框的<code>value属性</code>等于选中项的<code>value特性</code>。即使value特性的值是空字符串，也同样遵循此条规则。</li><li>如果有一个选中项，但该项的<code>value特性</code>在HTML中未指定，则选择框的value属性等于该项的文本。</li><li>如果有多个选中项，则选择框的<code>value属性</code>将依据前两条规则取得第一个选中项的值</li></ul><p>每个<code>&lt;option&gt;</code>元素都有一个<code>HTMLOptionElement</code>对象表示。为便于访问数据，<code>HTMLOptionElement</code>对象添加了下列属性：</p><ul><li><code>index</code>：当前选项在options集合中的索引。</li><li><code>label</code>：当前选项的标签；等价于HTML中的label特性。</li><li><code>selected</code>：布尔值，表示当前选项是否被选中。将这个属性设置为true可以选中当前选项。</li><li><code>text</code>：选项的文本。</li><li><code>value</code>：选项的值（等价于HTML中的value特性）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> selectbox = <span class="built_in">document</span>.forms[<span class="number">0</span>].elements[<span class="string">"location"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//推荐 </span></span><br><span class="line"><span class="keyword">var</span> text = selectbox.options[<span class="number">0</span>].text; <span class="comment">//选项的文本</span></span><br><span class="line"><span class="keyword">var</span> value = selectbox.options[<span class="number">0</span>].value;  <span class="comment">//选项的值</span></span><br></pre></td></tr></table></figure><blockquote><p>选择框的<code>change</code>事件与其他表单字段的<code>change</code>事件触发的条件不一样。其他表单字段的<code>change</code>事件是在值被修改且焦点离开当前字段时触发，而选择框的<code>change</code>事件只要选中了选项就会触发。<br>在未指定<code>value</code>特性的情况下，IE8会返回空字符串，而IE9+、Safari、Firefox、Chrome和Opera则会返回与text特性相同的值。</p></blockquote><h3 id="选择选项"><a href="#选择选项" class="headerlink" title="选择选项"></a>选择选项</h3><p>对于只允许选择一项的选择框，访问选中项的最简单方式，就是使用选择框的 <code>element.selectedIndex</code> 属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> selectedOption = selectbox.options[selectbox.selectedIndex];</span><br></pre></td></tr></table></figure><p>另一种选择选项的方式，就是取得对某一项的引用，然后将其<code>element.selected</code>属性设置为true。例如，下面的代码会选中选择框中的第一项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selectbox.options[<span class="number">0</span>].selected=<span class="literal">true</span>;</span><br></pre></td></tr></table></figure><blockquote><p>与<code>element.selectedIndex</code>不同，在允许多选的选择框中设置选项的<code>element.selected</code>属性，不会取消对其他选中项的选择，因而可以动态选中任意多个项。但是，如果是在单选选择框中，修改某个选项的<code>element.selected</code>属性则会取消对其他选项的选择。需要注意的是，将<code>element.selected</code>属性设置为false对单选选择框没有影响。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSelectedOptions</span>(<span class="params">selectbox</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">  <span class="keyword">var</span> option = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = selectbox.options.length; i &lt; len; i++) &#123;</span><br><span class="line">    option = selectbox.options[i];</span><br><span class="line">    <span class="keyword">if</span> (option.selected) &#123;</span><br><span class="line">      result.push(option);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加选项"><a href="#添加选项" class="headerlink" title="添加选项"></a>添加选项</h3><p>可以使用JavaScript动态创建选项，并将它们添加到选择框中。第一种方式就是使用如下所示的DOM方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newOption = <span class="built_in">document</span>.createElement(<span class="string">"option"</span>);</span><br><span class="line">newOption.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">"Option text"</span>));</span><br><span class="line">newOption.setAttribute(<span class="string">"value"</span>, <span class="string">"Option value"</span>);</span><br><span class="line"></span><br><span class="line">selectbox.appendChild(newOption);</span><br></pre></td></tr></table></figure><p>第二种方式是使用<code>Option构造函数</code>来创建新选项，这个构造函数是DOM出现之前就有的，一直遗留到现在。<code>Option构造函数</code>接受两个参数：<code>文本（text）</code>和<code>值（value）</code>；第二个参数可选。虽然这个构造函数会创建一个<code>Object</code>的实例，但兼容DOM的浏览器会返回一个<code>&lt;option&gt;</code>元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newOption = <span class="keyword">new</span> Option(<span class="string">"Option text"</span>, <span class="string">"Option value"</span>);</span><br><span class="line">selectbox.appendChild(newOption); <span class="comment">//在 IE8 及之前版本中有问题</span></span><br></pre></td></tr></table></figure><p>使用选择框的<code>select.add()</code>方法。DOM规定这个方法接受两个参数：要添加的新选项和将位于新选项之后的选项。如果想在列表的最后添加一个选项，应该将第二个参数设置为null。在IE对<code>select.add()</code>方法的实现中，第二个参数是可选的，而且如果指定，该参数必须是新选项之后选项的索引。兼容DOM的浏览器要求必须指定第二个参数，因此要想编写跨浏览器的代码，就不能只传入一个参数。这时候，为第二个参数传入undefined，就可以在所有浏览器中都将新选项插入到列表最后了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newOption = <span class="keyword">new</span> Option(<span class="string">"Option text"</span>, <span class="string">"Option value"</span>);</span><br><span class="line">selectbox.add(newOption, <span class="literal">undefined</span>); <span class="comment">//最佳方案</span></span><br></pre></td></tr></table></figure><blockquote><p> 如果想将新选项添加到其他位置（不是最后一个），就应该使用标准的DOM技术和<code>select.insertBefore()</code>方法。</p></blockquote><h3 id="移除选项"><a href="#移除选项" class="headerlink" title="移除选项"></a>移除选项</h3><p>可以使用 DOM 的 <code>element.removeChild()</code>方法， 为其传入要移除的选项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selectbox.removeChild(selectbox.options[<span class="number">0</span>]); <span class="comment">//移除第一个选项</span></span><br></pre></td></tr></table></figure><p>可以使用选择框的 <code>select.remove(index)</code>方法。这个方法接受一个参数，即要移除选项的索引</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selectbox.remove(<span class="number">0</span>); <span class="comment">//移除第一个选项</span></span><br></pre></td></tr></table></figure><p>最后一种方式，就是将相应选项设置为 null。这种方式也是 DOM 出现之前浏览器的遗留机制。 例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selectbox.options[<span class="number">0</span>] = <span class="literal">null</span>; <span class="comment">//移除第一个选项</span></span><br></pre></td></tr></table></figure><h3 id="移动和重排选项"><a href="#移动和重排选项" class="headerlink" title="移动和重排选项"></a>移动和重排选项</h3><ul><li>移动</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> selectbox1 = <span class="built_in">document</span>.getElementById(<span class="string">"selLocations1"</span>);</span><br><span class="line"><span class="keyword">var</span> selectbox2 = <span class="built_in">document</span>.getElementById(<span class="string">"selLocations2"</span>);</span><br><span class="line"></span><br><span class="line">selectbox2.appendChild(selectbox1.options[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><ul><li>重排</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> optionToMove = selectbox.options[<span class="number">1</span>];</span><br><span class="line">selectbox.insertBefore(optionToMove, selectbox.options[optionToMove.index - <span class="number">1</span>]);</span><br></pre></td></tr></table></figure><h2 id="表单序列化"><a href="#表单序列化" class="headerlink" title="表单序列化"></a>表单序列化</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">serialize</span>(<span class="params">form</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> parts = [],</span><br><span class="line">    field = <span class="literal">null</span>,</span><br><span class="line">    i,</span><br><span class="line">    len,</span><br><span class="line">    j,</span><br><span class="line">    optLen,</span><br><span class="line">    option,</span><br><span class="line">    optValue;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>, len = form.elements.length; i &lt; len; i++) &#123;</span><br><span class="line">    field = form.elements[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (field.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"select-one"</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"select-multiple"</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (field.name.length) &#123;</span><br><span class="line">          <span class="keyword">for</span> (j = <span class="number">0</span>, optLen = field.options.length; j &lt; optLen; j++) &#123;</span><br><span class="line">            option = field.options[j];</span><br><span class="line">            <span class="keyword">if</span> (option.selected) &#123;</span><br><span class="line">              optValue = <span class="string">""</span>;</span><br><span class="line">              <span class="keyword">if</span> (option.hasAttribute) &#123;</span><br><span class="line">                optValue = (option.hasAttribute(<span class="string">"value"</span>) ? option.value : option.text);</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                optValue = (option.attributes[<span class="string">"value"</span>].specified ? option.value : option.text);</span><br><span class="line">              &#125;</span><br><span class="line">              parts.push(<span class="built_in">encodeURIComponent</span>(field.name) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(optValue));</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="literal">undefined</span>: <span class="comment">//fieldset</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"file"</span>: <span class="comment">//file input</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"submit"</span>: <span class="comment">//submit button</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"reset"</span>: <span class="comment">//reset button</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"button"</span>: <span class="comment">//custom button</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"radio"</span>: <span class="comment">//radio button</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"checkbox"</span>: <span class="comment">//checkbox</span></span><br><span class="line">        <span class="keyword">if</span> (!field.checked) &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* falls through */</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">//don't include form fields without names</span></span><br><span class="line">        <span class="keyword">if</span> (field.name.length) &#123;</span><br><span class="line">          parts.push(<span class="built_in">encodeURIComponent</span>(field.name) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(field.value));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> parts.join(<span class="string">"&amp;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面这个serialize()函数首先定义了一个名为parts的数组，用于保存将要创建的字符串的各个部分。然后，通过for循环迭代每个表单字段，并将其保存在field变量中。在获得了一个字段的引用之后，使用switch语句检测其type属性。序列化过程中最麻烦的就是<code>&lt;select&gt;</code>元素，它可能是单选框也可能是多选框。为此，需要遍历控件中的每一个选项，并在相应选项被选中的情况下向数组中添加一个值。对于单选框，只可能有一个选中项，而多选框则可能有零或多个选中项。这里的代码适用于这两种选择框，至于可选项的数量则是由浏览器控制的。在找到一个选中项之后，需要确定使用什么值。如果不存在value特性，或者虽然存在该特性，但值为空字符串，都要使用选项的文本来代替。为检查这个特性，在DOM兼容的浏览器中需要使用hasAttribute()方法，而在IE中需要使用特性的specified属性。<br>如果表单中包含<code>&lt;fieldset&gt;</code>元素，则该元素会出现在元素集合中，但没有type属性。因此，如果type属性未定义，则不需要对其进行序列化。同样，对于各种按钮以及文件输入字段也是如此（文件输入字段在表单提交过程中包含文件的内容；但是，这个字段是无法模仿的，序列化时一般都要忽略）。对于单选按钮和复选框，要检查其checked属性是否被设置为false，如果是则退出switch语句。如果checked属性为true，则继续执行default语句，即将当前字段的名称和值进行编码，然后添加到parts数组中。函数的最后一步，就是使用join()格式化整个字符串，也就是用和号来分隔每一个表单字段。</p></blockquote><h2 id="富文本编辑"><a href="#富文本编辑" class="headerlink" title="富文本编辑"></a>富文本编辑</h2><blockquote><p>就是在页面中嵌入一个包含空HTML页面的<code>iframe</code>。通过设置<code>document.designMode</code>属性，这个空白的HTML页面可以被编辑，而编辑对象则是该页面<code>&lt;body&gt;</code>元素的HTML代码。<code>document.designMode属性</code>有两个可能的值：<code>off</code>（默认值）和<code>on</code>。在设置为<code>on</code>时，整个文档都会变得可以编辑（显示插入符号）</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Blank Page for Rich Text Editing<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//<span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">"richedit"</span> <span class="attr">style</span>=<span class="string">"height:100px;width:100px;"</span> <span class="attr">src</span>=<span class="string">"blank.htm"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line">EventUtil.addHandler(window, "load", function () &#123;</span><br><span class="line">  frames["richedit"].document.designMode = "on";</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="使用element-contenteditable属性"><a href="#使用element-contenteditable属性" class="headerlink" title="使用element.contenteditable属性"></a>使用element.contenteditable属性</h3><blockquote><p>另一种编辑富文本内容的方式是使用名为<code>element.contenteditable</code>的特殊属性，这个属性也是由IE最早实现的。可以把<code>element.contenteditable</code>属性应用给页面中的任何元素，然后用户立即就可以编辑该元素。这种方法之所以受到欢迎,只要为元素设置 <code>element.contenteditable</code> 属性即可。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"editable"</span> <span class="attr">id</span>=<span class="string">"richedit"</span> <span class="attr">contenteditable</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样，元素中包含的任何文本内容就都可以编辑了，就好像这个元素变成了<code>&lt;textarea&gt;</code>元素一样。通过在这个元素上设置<code>element.contenteditable</code>属性，也能打开或关闭编辑模式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"richedit"</span>);</span><br><span class="line">div.contentEditable = <span class="string">"true"</span>;</span><br></pre></td></tr></table></figure><h3 id="document-execCommand-操作富文本"><a href="#document-execCommand-操作富文本" class="headerlink" title="document.execCommand() 操作富文本"></a>document.execCommand() 操作富文本</h3><p><code>document.execCommand()</code>方法, 这个方法可以对文档执行预定义的命令，而且可以应用大多数格式。是与富文本编辑器交互的主要方式. 可以为<code>document.execCommand(command,false,value/null)</code>方法传递3个参数：要执行的命令名称、表示浏览器是否应该为当前命令提供用户界面的一个布尔值, 执行命令必须的一个值（如果不需要值，则传递null）。为了确保跨浏览器的兼容性，第二个参数应该始终设置为false</p><p><img src="https://i.loli.net/2017/12/30/5a46fd0957c78.jpg" alt=""><br><img src="https://i.loli.net/2017/12/30/5a46fd092e3da.jpg" alt=""></p><blockquote><p>与剪贴板有关的命令在不同浏览器中的差异极大, 不过，即使不能通过<code>document.execCommand()</code>来执行这些命令，但却可以通过相应的快捷键来实现同样的操作。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转换粗体文本 </span></span><br><span class="line">frames[<span class="string">"richedit"</span>].document.execCommand(<span class="string">"bold"</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//转换斜体文本 </span></span><br><span class="line">frames[<span class="string">"richedit"</span>].document.execCommand(<span class="string">"italic"</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建指向 www.wrox.com 的链接 </span></span><br><span class="line">frames[<span class="string">"richedit"</span>].document.execCommand(<span class="string">"createlink"</span>, <span class="literal">false</span>, <span class="string">"http://www.wrox.com"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//格式化为 1 级标题 </span></span><br><span class="line">frames[<span class="string">"richedit"</span>].document.execCommand(<span class="string">"formatblock"</span>, <span class="literal">false</span>, <span class="string">"&lt;h1&gt;"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>同样的方法也适用于页面中<code>element.contenteditable</code>属性为”true”的区块，只要把对框架的引用替换成当前窗口的<code>document</code>对象即可。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转换粗体文本 </span></span><br><span class="line"><span class="built_in">document</span>.execCommand(<span class="string">"bold"</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//转换斜体文本 </span></span><br><span class="line"><span class="built_in">document</span>.execCommand(<span class="string">"italic"</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建指向 www.wrox.com 的链接 </span></span><br><span class="line"><span class="built_in">document</span>.execCommand(<span class="string">"createlink"</span>, <span class="literal">false</span>, <span class="string">"http://www.wrox.com"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//格式化为 1 级标题 </span></span><br><span class="line"><span class="built_in">document</span>.execCommand(<span class="string">"formatblock"</span>, <span class="literal">false</span>, <span class="string">"&lt;h1&gt;"</span>);</span><br></pre></td></tr></table></figure><h4 id="document-queryCommandEnabled"><a href="#document-queryCommandEnabled" class="headerlink" title="document.queryCommandEnabled()"></a>document.queryCommandEnabled()</h4><p><code>document.queryCommandEnabled(command) return boolean</code>，可以用它来检测是否可以针对当前选择的文本，或者当前插入字符所在位置执行某个命令。这个方法接收一个参数，即要检测的命令。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = frames[<span class="string">"richedit"</span>].document.queryCommandEnabled(<span class="string">"bold"</span>);</span><br></pre></td></tr></table></figure><h4 id="document-queryCommandState"><a href="#document-queryCommandState" class="headerlink" title="document.queryCommandState()"></a>document.queryCommandState()</h4><p><code>document.queryCommandState(command) return boolean</code>方法用于确定是否已将指定命令应用到了选择的文本。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isBold = frames[<span class="string">"richedit"</span>].document.queryCommandState(<span class="string">"bold"</span>);</span><br></pre></td></tr></table></figure><h4 id="document-queryCommandValue"><a href="#document-queryCommandValue" class="headerlink" title="document.queryCommandValue()"></a>document.queryCommandValue()</h4><p><code>document.queryCommandValue()</code>，用于取得执行命令时传入的值（即前面例子中传给<code>document.execCommand()</code>的第三个参数）。例如，在对一段文本应用”fontsize”命令时如果传入了7，那么下面的代码就会返回”7”：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fontSize = frames[<span class="string">"richedit"</span>].document.queryCommandValue(<span class="string">"fontsize"</span>);</span><br></pre></td></tr></table></figure><h3 id="富文本选区"><a href="#富文本选区" class="headerlink" title="富文本选区"></a>富文本选区</h3><p><code>document/frameElement.getSelection()</code>方法，可以确定实际选择的文本。HTML5 将 <code>getSelection()</code>方法纳入了标准, 这个方法是<code>window</code>对象和<code>document</code>对象的属性，调用它会返回一个表示当前选择文本的<code>Selection</code>对象, <code>Selection</code>对象有如下属性和方法:</p><blockquote><p>属性</p></blockquote><ul><li><code>selection.anchorNode</code>：选区起点所在的节点。</li><li><code>selection.anchorOffset</code>：在到达选区起点位置之前跳过的<code>selection.anchorNode</code>中的字符数量。</li><li><code>selection.focusNode</code>：选区终点所在的节点。</li><li><code>selection.focusOffset</code>：<code>selection.focusNode</code>中包含在选区之内的字符数量。</li><li><code>selection.isCollapsed</code>：布尔值，表示选区的起点和终点是否重合。</li><li><code>selection.rangeCount</code>：选区中包含的DOM范围的数量。</li></ul><blockquote><p>方法</p></blockquote><ul><li><code>selection.addRange(range)</code>：将指定的DOM范围添加到选区中。</li><li><code>selection.collapse(node,offset)</code>：将选区折叠到指定节点中的相应的文本偏移位置。</li><li><code>selection.collapseToEnd()</code>：将选区折叠到终点位置。</li><li><code>selection.collapseToStart()</code>：将选区折叠到起点位置。</li><li><code>selection.containsNode(node)</code>：确定指定的节点是否包含在选区中。</li><li><code>selection.deleteFromDocument()</code>：从文档中删除选区中的文本，与<code>document.execCommand(&quot;delete&quot;,false,null)</code>命令的结果相同。</li><li><code>selection.extend(node,offset)</code>：通过将<code>selection.focusNode</code>和<code>selection.focusOffset</code>移动到指定的值来扩展选区。</li><li><code>selection.getRangeAt(index)</code>：返回索引对应的选区中的DOM范围。</li><li><code>selection.removeAllRanges()</code>：从选区中移除所有DOM范围。实际上，这样会移除选区，因为选区中至少要有一个范围。</li><li><code>selection.reomveRange(range)</code>：从选区中移除指定的DOM范围。</li><li><code>selection.selectAllChildren(node)</code>：清除选区并选择指定节点的所有子节点。</li><li><code>selection.toString()</code>：返回选区所包含的文本内容。</li></ul><p><code>Selection</code>对象的这些方法都极为实用，它们利用了（第12章讨论过的）DOM范围来管理选区。由于可以直接操作选择文本的DOM表现，因此访问DOM范围与使用<code>document.execCommand(command,false,content/null)</code>相比，能够对富文本编辑器进行更加细化的控制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> selection = frames[<span class="string">"richedit"</span>].getSelection();</span><br><span class="line"></span><br><span class="line"><span class="comment">//取得选择的文本 </span></span><br><span class="line"><span class="keyword">var</span> selectedText = selection.toString();</span><br><span class="line"></span><br><span class="line"><span class="comment">//取得代表选区的范围 </span></span><br><span class="line"><span class="keyword">var</span> range = selection.getRangeAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//突出显示选择的文本 </span></span><br><span class="line"><span class="keyword">var</span> span = frames[<span class="string">"richedit"</span>].document.createElement(<span class="string">"span"</span>);</span><br><span class="line">span.style.backgroundColor = <span class="string">"yellow"</span>;</span><br><span class="line">range.surroundContents(span);</span><br></pre></td></tr></table></figure><blockquote><p>IE8 及 更早版本不支持DOM范围, 但可以通过它支持的<code>selection</code>对象操纵选择的文本, 详情先查阅高程p340,IE范围部分, 再查阅P442页关于IE富文本选区部分</p></blockquote><h3 id="表单与富文本"><a href="#表单与富文本" class="headerlink" title="表单与富文本"></a>表单与富文本</h3><p>由于富文本编辑是使用<code>iframe</code>而非表单控件实现的，因此从技术上说，富文本编辑器并不属于表单。换句话说，富文本编辑器中的HTML不会被自动提交给服务器，而需要我们手工来提取并提交HTML。为此，通常可以添加一个隐藏的表单字段，让它的值等于从iframe中提取出的HTML。具体来说，就是在提交表单之前，从iframe中提取出HTML，并将其插入到隐藏的字段中。下面就是通过表单的onsubmit事件处理程序实现上述操作的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(form, <span class="string">"submit"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line"></span><br><span class="line">  target.elements[<span class="string">"comments"</span>].value = frames[<span class="string">"richedit"</span>].document.body.innerHTML;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>对于使用 <code>contenteditable</code> 属性的元素，也可以执行类似操作。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(form, <span class="string">"submit"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line"></span><br><span class="line">  target.elements[<span class="string">"comments"</span>].value = <span class="built_in">document</span>.getElementById(<span class="string">"richedit"</span>).innerHTML;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;表单的基础知识&quot;&gt;&lt;a href=&quot;#表单的基础知识&quot; class=&quot;headerlink&quot; title=&quot;表单的基础知识&quot;&gt;&lt;/a&gt;表单的基础知识&lt;/h2&gt;&lt;p&gt;在HTML中，表单是由&lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;元素来表示的，而在JavaS
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正反馈系列:《JavaScript高级程序设计》事件</title>
    <link href="http://yoursite.com/2017/12/28/%E9%AB%98%E7%A8%8Bvol8-%E4%BA%8B%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/12/28/高程vol8-事件/</id>
    <published>2017-12-28T02:54:04.000Z</published>
    <updated>2018-03-21T10:23:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p>JavaScript 与 HTML 之间的交互是通过<code>事件</code>实现的。<code>事件</code>，就是文档或浏览器窗口中发生的一些特定的交互瞬间。可以使用侦听器（或处理程序）来预订事件，以便事件发生时执行相应的代码。这种在传统软件工程中被称为<code>观察员模式</code>的模型, 关于<code>观察者模式</code>的代码实现,可以看我的另一边blog: <a href="https://choteewang.github.io/2017/12/23/javascript-%E4%B8%8E-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">《javascript 与 “发布/订阅(观察者)模式》</a></p><h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2><p>想象画在一张纸上的一组同心圆。如果你把手指放在圆心上，那么你的手指指向的不是一个圆，而是纸上的所有圆。两家公司的浏览器开发团队在看待浏览器事件方面还是一致的。如果你单击了某个按钮，他们都认为单击事件不仅仅发生在按钮上。换句话说，在单击按钮的同时，你也单击了按钮的容器元素，甚至也单击了整个页面</p><blockquote><p><code>事件流</code>描述的上述过程中,从页面接收事件的顺序.<br>IE 的事件流是<code>事件冒泡流</code>，而 Netscape Communicator 的事件流是<code>事件捕获流</code></p></blockquote><h3 id="事件冒泡-event-bubbling"><a href="#事件冒泡-event-bubbling" class="headerlink" title="事件冒泡 event bubbling"></a>事件冒泡 event bubbling</h3><blockquote><p>事件触发顺序从触发对象沿DOM树向外传播,直至<code>document</code>对象,IE9、Firefox、Chrome 和 Safari 则将事件一直冒泡到 <code>window</code> 对象。</p></blockquote><p><img src="https://i.loli.net/2017/12/28/5a445c95c45a1.jpg" alt=""></p><h3 id="事件捕获-event-capturing"><a href="#事件捕获-event-capturing" class="headerlink" title="事件捕获 event capturing"></a>事件捕获 event capturing</h3><blockquote><p>事件触发顺序从<code>window</code>开始触发,沿DOM树逐级往下按顺序触发,触发对象最后触发</p></blockquote><p><img src="https://i.loli.net/2017/12/28/5a445c95ddf87.jpg" alt=""></p><blockquote><p>由于老版本的浏览器不支持，因此很少有人使用事件捕获。<strong>建议使用事件冒泡</strong>，在有特殊需要时再使用事件捕获。</p></blockquote><h3 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h3><p>“DOM2级事件”规定的事件流包括三个阶段：</p><ol><li><code>事件捕获阶段</code></li><li><code>处于目标阶段</code></li><li><code>事件冒泡阶段</code></li></ol><p><img src="https://i.loli.net/2017/12/28/5a445c95e67fe.jpg" alt=""></p><blockquote><p>在DOM事件流中，实际的目标（<code>&lt;div&gt;</code>元素）在捕获阶段不会接收到事件。这意味着在捕获阶段，事件从document到<code>&lt;html&gt;</code>再到<code>&lt;body&gt;</code>后就停止了。下一个阶段是“处于目标”阶段，于是事件在<code>&lt;div&gt;</code>上发生，并在事件处理（后面将会讨论这个概念）中被看成冒泡阶段的一部分。然后，冒泡阶段发生，事件又传播回文档。<br>实际上,当代浏览器在事件捕获阶段都可以触发事件,结果,就有两个机会在目标对象上面操作事件.</p></blockquote><h2 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h2><blockquote><p>事件处理程序的名字以”on”开头，因此 click 事件的事件处理程序就是 onclick</p></blockquote><h3 id="HTML-事件处理程序"><a href="#HTML-事件处理程序" class="headerlink" title="HTML 事件处理程序"></a>HTML 事件处理程序</h3><blockquote><p>在HTML元素中,事件可以用与相应处理程序同名的特性指定, 特性的值应该是<strong>能够执行的javascript代码</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Click Me"</span> <span class="attr">onclick</span>=<span class="string">"alert('Clicked')"</span> /&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>事件处理程序中的代码在执行时，有权访问全局作用域中的任何代码。但前提是代码已被浏览器解析完成</p><p>这样指定时间处理程序,会创建一个封装着元素属性值的函数(this.attr可以访问HTML DOM结构对应的attr特性值)。这个函数中有一个局部变量 event，也就是事件对象,通过 event 变量，可以直接访问事件对象，你不用自己定义它，也不用从函数的参数列表中读取。在这个函数内部，<strong>this 值等于事件的目标元素</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 输出 "click" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Click Me"</span> <span class="attr">onclick</span>=<span class="string">"alert(event.type)"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 输出 "Click Me" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Click Me"</span> <span class="attr">onclick</span>=<span class="string">"alert(this.value)"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这个函数内部，可以像访问局部变量一样访问 <code>document</code> 及<strong>该元素本身的成员</strong>。这个函数使用 <code>with</code> 像下面这样扩展作用域</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">with</span>(<span class="built_in">document</span>) &#123;</span><br><span class="line">    <span class="keyword">with</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">      <span class="comment">//元素属性值 </span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 输出 "Click Me" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Click Me"</span> <span class="attr">onclick</span>=<span class="string">"alert(value)"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果当前元素是一个表单输入元素，则作用域中还会包含访问表单元素（父元素）的入口，事件处理程序无需引用表单元素就能访问其他表单字段,这个函数就变成了如下所示,</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">with</span>(<span class="built_in">document</span>) &#123;</span><br><span class="line">    <span class="keyword">with</span>(<span class="keyword">this</span>.form) &#123;</span><br><span class="line">      <span class="keyword">with</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">//元素属性值 </span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Echo Username"</span> <span class="attr">onclick</span>=<span class="string">"alert(username.value)"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="DOM-0级-事件处理程序"><a href="#DOM-0级-事件处理程序" class="headerlink" title="DOM 0级 事件处理程序"></a>DOM 0级 事件处理程序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.id); <span class="comment">//"myBtn" </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>程序中<code>this</code>引用当前调用元素,可以在事件处理程序中通过 <code>this</code> 访问元素节点的任何属性和方法<br>事件处理程序会在事件流的冒泡阶段被处理。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除事件处理程序</span></span><br><span class="line"><span class="comment">// 也可以删除HTML指定的时间处理程序</span></span><br><span class="line">btn.onclick = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h3 id="DOM-2级-事件处理程序"><a href="#DOM-2级-事件处理程序" class="headerlink" title="DOM 2级 事件处理程序"></a>DOM 2级 事件处理程序</h3><h3 id="element-addEventListener-element-removeEventListener"><a href="#element-addEventListener-element-removeEventListener" class="headerlink" title="element.addEventListener(),element.removeEventListener()"></a>element.addEventListener(),element.removeEventListener()</h3><p><code>element.addEventListener(eventName,function,boolean)</code>,<code>boolean</code>为true,捕获阶段调用,<code>boolean</code>为false,冒泡阶段调用</p><blockquote><p>与 DOM0 级方法一样，这里添加的事件处理程序也是在其依附的元素的作用域中运行。<code>this</code>指向<code>element</code><br>可以添加多个事件处理程序,按顺序执行</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.id);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Hello world!"</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 先alert id,再alert 'Hello world'</span></span><br></pre></td></tr></table></figure><blockquote><p>只能使用 <code>element.removeEventListener()</code>来移除；移除时传入的参数与添加处理程序时使用的参数相同。这也意味着通过 addEventListener()添加的匿名函数将无法移除</p><p>都是将事件处理程序添加到事件流的冒泡阶段，这样可以最大限度地兼容各种浏览器。最好只在需要在事件到达目标之前截获它的时候将事件处理程序添加到捕获阶段。如果不是特别需要，我们不建议在事件捕获阶段注册事件处理程序。</p></blockquote><h3 id="IE事件处理程序"><a href="#IE事件处理程序" class="headerlink" title="IE事件处理程序"></a>IE事件处理程序</h3><h3 id="element-attachEvent-element-detachEvent"><a href="#element-attachEvent-element-detachEvent" class="headerlink" title="element.attachEvent() element.detachEvent()"></a>element.attachEvent() element.detachEvent()</h3><p><code>element.attachEvent(eventName,function)</code>,<code>element.detachEvent(event,function)</code></p><blockquote><p><code>element.attachEvent</code>与<code>element.detachEvent()</code>第一个参数的事件名是<code>onclick</code>,而不是DOM 2级中的<code>click</code><br>事件会在全局作用域中执行,<code>this</code>等于<code>window</code><br>可以添加多个事件处理程序,但执行顺序是倒序<br>用<code>element.attachEvent()</code>添加的事件可用<code>element.detachEvent()</code>移除,也要提供相同的参数才行,匿名函数不能被移除</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.attachEvent(<span class="string">"onclick"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">// true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.attachEvent(<span class="string">"onclick"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Clicked"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">btn.attachEvent(<span class="string">"onclick"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Hello world!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Hello world</span></span><br><span class="line"><span class="comment">// Clicked</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解除事件绑定</span></span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line"><span class="keyword">var</span> handler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Clicked"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">btn.attachEvent(<span class="string">"onclick"</span>, handler);</span><br><span class="line">btn.detachEvent(<span class="string">"onclick"</span>, handler);</span><br></pre></td></tr></table></figure><h3 id="跨浏览器事件处理程序"><a href="#跨浏览器事件处理程序" class="headerlink" title="跨浏览器事件处理程序"></a>跨浏览器事件处理程序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = &#123;</span><br><span class="line">  <span class="comment">// 事件绑定与事件解绑</span></span><br><span class="line">  addHandler: <span class="function"><span class="keyword">function</span> (<span class="params">element, type, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.addEventListener) &#123;</span><br><span class="line">      element.addEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) &#123;</span><br><span class="line"></span><br><span class="line">      element.attachEvent(<span class="string">"on"</span> + type, handler);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      element[<span class="string">"on"</span> + type] = handler;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  removeHandler: <span class="function"><span class="keyword">function</span> (<span class="params">element, type, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.removeEventListener) &#123;</span><br><span class="line">      element.removeEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.detachEvent) &#123;</span><br><span class="line">      element.detachEvent(<span class="string">"on"</span> + type, handler);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      element[<span class="string">"on"</span> + type] = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><blockquote><p>在触发DOM上的某个事件时，会产生一个事件对象<code>event</code>，这个对象中包含着所有与事件有关的信息。包括导致事件的元素、事件的类型以及其他与特定事件相关的信息。例如，鼠标操作导致的事件对象中，会包含鼠标位置的信息，而键盘操作导致的事件对象中，会包含与按下的键有关的信息。所有浏览器都支持event对象</p></blockquote><h3 id="DOM中的事件对象"><a href="#DOM中的事件对象" class="headerlink" title="DOM中的事件对象"></a>DOM中的事件对象</h3><blockquote><p>兼容 DOM 的浏览器会将一个 <code>event</code> 对象传入到事件处理程序中, 无论指定事件处理程序时使用什么方法（HTML特性指定事件处理程序, DOM0 级或 DOM2 级），都会传入 <code>event</code> 对象</p><p>event 对象包含与创建它的特定事件有关的属性和方法。触发的事件类型不一样，可用的属性和方法也不一样。不过，所有事件都会有下表列出的成员。</p></blockquote><table><thead><tr><th>属性/方法</th><th style="text-align:center">类型</th><th style="text-align:center">读/写</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td><code>bubbles</code></td><td style="text-align:center">Boolean</td><td style="text-align:center">只读</td><td style="text-align:center">表明事件是否冒泡</td></tr><tr><td><code>cancelable</code></td><td style="text-align:center">Boolean</td><td style="text-align:center">只读</td><td style="text-align:center">表明是否可以取消事件的默认行为</td></tr><tr><td><code>currentTarget</code></td><td style="text-align:center">Element</td><td style="text-align:center">只读</td><td style="text-align:center">事件处理程序当前正在处理事件的那个元素,与<code>this</code>的值恒等,事件处理函数的调用对象,注册对象</td></tr><tr><td><code>defaultPrevented</code></td><td style="text-align:center">Boolean</td><td style="text-align:center">只读</td><td style="text-align:center">为true表示已调用<code>event.preventDefault()</code></td></tr><tr><td><code>detail</code></td><td style="text-align:center">Integer</td><td style="text-align:center">只读</td><td style="text-align:center">与事件相关的细节信息</td></tr><tr><td><code>eventPhase</code></td><td style="text-align:center">Integer</td><td style="text-align:center">只读</td><td style="text-align:center">调用事件处理程序的阶段,1捕获2目标3冒泡</td></tr><tr><td><code>preventDefault()</code></td><td style="text-align:center">Function</td><td style="text-align:center">只读</td><td style="text-align:center">取消事件的默认行为,如果<code>event.cancelable</code>是true,可以使用此方法</td></tr><tr><td><code>stopImmediatePropagation()</code></td><td style="text-align:center">Function</td><td style="text-align:center">只读</td><td style="text-align:center">取消事件的进一步捕获或冒泡,同时阻止任何事件处理程序被调用</td></tr><tr><td><code>stopPropagation()</code></td><td style="text-align:center">Function</td><td style="text-align:center">只读</td><td style="text-align:center">取消事件的进一步捕获或冒泡,如果<code>event.bubbles</code>为true,可以使用此方法</td></tr><tr><td><code>target</code></td><td style="text-align:center">Element</td><td style="text-align:center">只读</td><td style="text-align:center">事件的目标对象,实际触发目标</td></tr><tr><td><code>trusted</code></td><td style="text-align:center">Boolean</td><td style="text-align:center">只读</td><td style="text-align:center">为true表示是浏览器生成的,为false表示是工程师用js创建的</td></tr><tr><td><code>type</code></td><td style="text-align:center">String</td><td style="text-align:center">只读</td><td style="text-align:center">被触发的事件的类型,没有on的格式</td></tr><tr><td><code>view</code></td><td style="text-align:center">AbstractView</td><td style="text-align:center">只读</td><td style="text-align:center">与事件关联的抽象视图,等同于发生事件的<code>window</code>对象</td></tr></tbody></table><blockquote><p>在事件处理程序内部,<code>this</code>的值始终等于<code>currentTarget</code>的值,也就是注册事件的元素(谁<code>.</code>出的,谁就是<code>this</code>,谁就是<code>currentTarget</code>),而<code>target</code>是事件的<code>实际触发目标</code><br>如果将事件处理程序制定给了目标元素,则<code>this</code>,<code>currentTarget</code>,<code>target</code>包含相同的值,指向同一对象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(event.currentTarget === <span class="keyword">this</span>); <span class="comment">//true </span></span><br><span class="line">  alert(event.target === <span class="keyword">this</span>); <span class="comment">//true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一个例子</span></span><br><span class="line"><span class="built_in">document</span>.body.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(event.currentTarget === <span class="built_in">document</span>.body); <span class="comment">//true </span></span><br><span class="line">  alert(<span class="keyword">this</span> === <span class="built_in">document</span>.body); <span class="comment">//true </span></span><br><span class="line">  alert(event.target === <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>)); <span class="comment">//true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>第二个例子中,当单机<code>id</code>是<code>myBtn</code>的按钮时,<code>this</code>和<code>currentTarget</code>都等于<code>document.body</code>，因为事件处理程序是注册到这个元素上的。然而，<code>target</code>元素却等于按钮元素，因为它是<code>click</code>事件真正的目标。由于按钮上并没有注册事件处理程序，结果click事件就冒泡到了<code>document.body</code>，在那里事件才得到了处理。</p></blockquote><p>在需要通过一个函数处理多个事件时,可以使用<code>event.type</code>属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line"><span class="keyword">var</span> handler = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (event.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"click"</span>:</span><br><span class="line">      alert(<span class="string">"Clicked"</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"mouseover"</span>:</span><br><span class="line">      event.target.style.backgroundColor = <span class="string">"red"</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"mouseout"</span>:</span><br><span class="line">      event.target.style.backgroundColor = <span class="string">""</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">btn.onclick = handler;</span><br><span class="line">btn.onmouseover = handler;</span><br><span class="line">btn.onmouseout = handler;</span><br></pre></td></tr></table></figure><p><code>event.cancelable</code> 属性设置为 true 的事件，可以使用 <code>event.preventDefault()</code>来取消其默认行为。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> link = <span class="built_in">document</span>.getElementById(<span class="string">"myLink"</span>);</span><br><span class="line">link.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event.preventDefault();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>event.stopPropagation()</code>方法用于立即停止事件在DOM层次中的传播，即取消进一步的事件捕获或冒泡。例如，直接添加到一个按钮的事件处理程序可以调用<code>event.stopPropagation()</code>，从而避免触发注册在<code>document.body</code>上面的事件处理程序，如下面的例子所示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Clicked"</span>);</span><br><span class="line">  event.stopPropagation();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Body clicked"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>对于这个例子而言，如果不调用<code>event.stopPropagation()</code>，就会在单击按钮时出现两个警告框。可是，由于click事件根本不会传播到<code>document.body</code>，因此就不会触发注册在这个元素上的onclick事件处理程序。</p></blockquote><p><code>event.eventPhase</code>属性，可以用来确定事件当前正位于事件流的哪个阶段。如果是在捕获阶段调用的事件处理程序，那么<code>event.eventPhase</code>等于1；如果事件处理程序处于目标对象上，则<code>event.eventPhase</code>等于2；如果是在冒泡阶段调用的事件处理程序，<code>event.eventPhase</code>等于3。这里要注意的是，尽管“处于目标”发生在冒泡阶段，但<code>event.eventPhase</code>仍然一直等于2。来看下面的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(event.eventPhase); <span class="comment">//2 </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(event.eventPhase); <span class="comment">//1 </span></span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(event.eventPhase); <span class="comment">//3 </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>当单击这个例子中的按钮时，首先执行的事件处理程序是在捕获阶段触发的添加到<code>document.body</code>中的那一个，结果会弹出一个警告框显示表示<code>event.eventPhase</code>的1。接着，会触发在按钮上注册的事件处理程序，此时的<code>event.eventPhase</code>值为2。最后一个被触发的事件处理程序，是在冒泡阶段执行的添加到<code>document.body</code>上的那一个，显示<code>event.eventPhase</code>的值为3。而当<code>event.eventPhase</code>等于2时，this、target和currentTarget始终都是相等的。<br>有在事件处理程序执行期间，<code>event</code> 对象才会存在；一旦事件处理程序执行完成，<code>event</code> 对象就会被销毁</p></blockquote><h3 id="IE-中的事件对象"><a href="#IE-中的事件对象" class="headerlink" title="IE 中的事件对象"></a>IE 中的事件对象</h3><p>与DOM中的<code>event</code>对象不同,要访问IE中的<code>event</code>对象,有几种不同的方式,取决于事件处理程序的绑定方法</p><p>在使用DOM 0级方法,添加事件处理程序时，<code>event</code> 对象作为 <code>window</code> 对象的一个属性<code>window.event</code>存在</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> event = <span class="built_in">window</span>.event;</span><br><span class="line">  alert(event.type); <span class="comment">//"click" </span></span><br><span class="line">  <span class="comment">// DOM 0级中的this指向调用元素btn,无论IE还是DOM</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果事件处理程序是使用 <code>element.attachEvent()</code>添加的，那么就会有一个 <code>event</code> 对象作为参数被传入事件处理程序函数中,但仍然可以使用<code>window.event</code>访问事件<code>event</code>对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.attachEvent(<span class="string">"onclick"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(event.type); <span class="comment">//"click" </span></span><br><span class="line">  <span class="comment">// attachEvent绑定的事件处理程序,this指向window</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>通过 HTML特性指定的事件处理程序，那么还可以通过一个名叫 <code>event</code> 的变量来访问 event 对象（与 DOM 中的事件模型相同）。再看一个例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Click Me"</span> <span class="attr">onclick</span>=<span class="string">"alert(event.type)"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>IE中的所有事件对象都会包含下表所列属性和方法</p></blockquote><table><thead><tr><th>属性/方法</th><th style="text-align:center">类型</th><th style="text-align:center">读/写</th><th>说明</th></tr></thead><tbody><tr><td>cancelBubble</td><td style="text-align:center">Boolean</td><td style="text-align:center">读/写</td><td>默认值为false，但将其设置为true就可以取消事件冒泡（与DOM中的stopPropagation()方法的作用相同）</td></tr><tr><td>returnValue</td><td style="text-align:center">Boolean</td><td style="text-align:center">读/写</td><td>默认值为true，但将其设置为false就可以取消事件的默认行为（与DOM中的preventDefault()方法的作用相同）</td></tr><tr><td>srcElement</td><td style="text-align:center">Element</td><td style="text-align:center">只读</td><td>事件的目标（与DOM中的target属性相同）</td></tr><tr><td>type</td><td style="text-align:center">String</td><td style="text-align:center">只读</td><td>被触发的事件的类型</td></tr></tbody></table><blockquote><p>因为事件处理程序的作用域是根据指定它的方式来确定的，所以不能认为 this 会始终等于事件目标。故而，最好还是使用 <code>event.srcElement</code> 比较保险。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="built_in">window</span>.event.srcElement === <span class="keyword">this</span>); <span class="comment">//true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">btn.attachEvent(<span class="string">"onclick"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(event.srcElement === <span class="keyword">this</span>); <span class="comment">//false</span></span><br><span class="line">  <span class="comment">// attachEvent()方法注册的事件处理程序this指向window</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>在第一个事件处理程序中（使用 DOM0 级方法指定的），<code>event.srcElement</code> 属性等于 <code>this</code>，但在第二个事件处理程序中，这两者的值不相同</p></blockquote><p><code>returnValue</code> 属性相当于 DOM 中的 <code>preventDefault()</code>方法，它们的作用都是取消给定事件的默认行为。只要将 <code>returnValue</code> 设置为 false，就可以阻止默认行为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> link = <span class="built_in">document</span>.getElementById(<span class="string">"myLink"</span>);</span><br><span class="line">link.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.event.returnValue = <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p><code>cancelBubble</code> 属性与 DOM 中的 <code>stopPropagation()</code>方法作用相同，都是用来停止事件冒泡的。由于 IE 不支持事件捕获，因而只能取消事件冒泡；但 <code>stopPropagatioin()</code>可以同时取消事件捕获和冒泡。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Clicked"</span>);</span><br><span class="line">  <span class="built_in">window</span>.event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Body clicked"</span>); <span class="comment">//由于取消了冒泡,不显示</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="跨浏览器的事件对象"><a href="#跨浏览器的事件对象" class="headerlink" title="跨浏览器的事件对象"></a>跨浏览器的事件对象</h3><blockquote><p>向我们的工具对象<code>EventUtil</code>中添加代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventUtil = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="comment">// 获得事件对象</span></span><br><span class="line">  getEvent: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> event ? event : <span class="built_in">window</span>.event;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  getTarget: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> event.target || event.srcElement;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 阻止浏览器默认事件</span></span><br><span class="line">  preventDefault: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.preventDefault) &#123;</span><br><span class="line">      event.preventDefault();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      event.returnValue = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 取消事件流</span></span><br><span class="line">  stopPropagation: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.stopPropagation) &#123;</span><br><span class="line">      event.stopPropagation();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>调用方式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获得事件对象</span></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取事件触发对象</span></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 阻止默认行为</span></span><br><span class="line"><span class="keyword">var</span> link = <span class="built_in">document</span>.getElementById(<span class="string">"myLink"</span>);</span><br><span class="line">link.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  EventUtil.preventDefault(event);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 阻止事件流</span></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Clicked"</span>);</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  EventUtil.stopPropagation(event);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h2><p><code>DOM 3级事件</code>规定了以下几类事件。</p><ul><li>UI（UserInterface，用户界面）事件，当用户与页面上的元素交互时触发；</li><li>焦点事件，当元素获得或失去焦点时触发；</li><li>鼠标事件，当用户通过鼠标在页面上执行操作时触发；</li><li>滚轮事件，当使用鼠标滚轮（或类似设备）时触发；</li><li>文本事件，当在文档中输入文本时触发；</li><li>键盘事件，当用户通过键盘在页面上执行操作时触发；</li><li>合成事件，当为IME（InputMethodEditor，输入法编辑器）输入字符时触发；</li><li>变动（mutation）事件，当底层DOM结构发生变化时触发。</li></ul><blockquote><p>除了这几类事件之外，HTML5 也定义了一组事件，而有些浏览器还会在 DOM 和 BOM 中实现其他专有事件。这些专有的事件一般都是根据开发人员需求定制的，没有什么规范，因此不同浏览器的实现有可能不一致。</p></blockquote><h3 id="UI事件"><a href="#UI事件" class="headerlink" title="UI事件"></a>UI事件</h3><blockquote><p>UI 事件指的是那些不一定与用户操作有关的事件</p></blockquote><ul><li><code>load</code>事件：当页面完全加载后在<code>window</code>上面触发，当所有框架都加载完毕时在<code>框架集</code>上面触发，当图像加载完毕时在<code>&lt;img&gt;</code>元素上面触发，或者当嵌入的内容加载完毕时在<code>&lt;object&gt;</code>元素上面触发。</li><li><code>unload</code>事件：当页面完全卸载后在<code>window</code>上面触发，当所有框架都卸载后在<code>框架集</code>上面触发，或者当嵌入的内容卸载完毕后在<code>&lt;object&gt;</code>元素上面触发。</li><li><code>abort</code>事件：在用户停止下载过程时，如果嵌入的内容没有加载完，则在<code>&lt;object&gt;</code>元素上面触发。</li><li><code>error</code>事件：当发生JavaScript错误时在<code>window</code>上面触发，当无法加载图像时在<code>&lt;img&gt;</code>元素上面触发，当无法加载嵌入内容时在<code>&lt;object&gt;</code>元素上面触发，或者当有一或多个框架无法加载时在框架集上面触发。</li><li><code>select</code>事件：当用户选择文本框（<code>&lt;input&gt;</code>或<code>&lt;texterea&gt;</code>）中的一或多个字符时触发。第14章将继续讨论这个事件。</li><li><code>resize</code>事件：当窗口或框架的大小变化时在<code>window</code>或<code>框架</code>上面触发。</li><li><code>scroll</code>事件：当用户滚动带滚动条的元素中的内容时，在<strong><code>该元素</code></strong>上面触发。<strong><code>&lt;body&gt;</code>元素中包含所加载页面的滚动条</strong></li></ul><h4 id="load事件"><a href="#load事件" class="headerlink" title="load事件"></a>load事件</h4><p>当页面完全加载后（包括所有图像、JavaScript 文件、CSS 文件等外部资源），就会触发 <code>window</code> 上面的 <code>load</code> 事件,两种定义 <code>onload</code> 事件处理程序的方式,第一钟是用js给window对象绑定onload事件.第二种是是为<code>&lt;body&gt;</code>元素添加一个 <code>onload</code> 特性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Loaded!"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>这里也给事件处理程序传入了一个 <code>event</code> 对象。这个 <code>event</code> 对象中不包含有关这个事件的任何附加信息，但在兼容 DOM 的浏览器中，<code>event.target</code> 属性的值会被设置为 <code>document</code>，而 IE 并不会为这个事件设置 <code>srcElement</code> 属性</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"alert('Loaded!')"</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>一般来说，在<code>window</code>上面发生的任何事件都可以在<code>&lt;body&gt;</code>元素中通过相应的特性来指定，因为在HTML中无法访问<code>window</code>元素。<strong>建议尽可能使用JavaScript方式</strong></p></blockquote><p>图像上面也可以触发 <code>load</code> 事件，无论是在 DOM 中的图像元素还是 HTML 中的图像元素。因此，可以在 HTML 中为任何图像指定 <code>onload</code> 事件处理程序</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"smile.gif"</span> <span class="attr">onload</span>=<span class="string">"alert('Image loaded.')"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在创建新的<code>&lt;img&gt;</code>元素时，可以为其指定一个事件处理程序，以便图像加载完毕后给出提示。此时，最重要的是<strong>要在指定 src 属性之前先指定事件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> image = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">  EventUtil.addHandler(image, <span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event = EventUtil.getEvent(event);</span><br><span class="line">    alert(EventUtil.getTarget(event).src);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(image);</span><br><span class="line">  image.src = <span class="string">"smile.gif"</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>首先为 <code>window</code> 指定了 <code>onload</code> 事件处理程序。原因在于，我们是想向 DOM 中添加一个新元素，所以必须确定页面已经加载完毕——如果在页面加载前操作 <code>document.body</code> 会导致错误,新图像元素不一定要从添加到文档后才开始下载，只要设置了 src 属性就会开始下载。</p></blockquote><p><code>&lt;script&gt;</code>元素也会触发 <code>load</code> 事件，以便开发人员确定动态加载的 JavaScript 文件是否加载完毕。与图像不同，只有在设置了<code>&lt;script&gt;</code>元素的 src 属性并将该元素添加到文档后，才会开始下载 JavaScript 文件。换句话说，对于<code>&lt;script&gt;</code>元素而言，指定 src 属性和指定事件处理程序的先后顺序就不重要了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">  EventUtil.addHandler(script, <span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"Loaded"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  script.src = <span class="string">"example.js"</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="unload事件"><a href="#unload事件" class="headerlink" title="unload事件"></a>unload事件</h4><p>这个事件在文档被完全卸载后触发,与 load 事件类似，也有两种指定 <code>onunload</code> 事件处理程序的方式。第一种方式是使用 JavaScript,第二种方式，也是为<code>&lt;body&gt;</code>元素添加一个特性（与 load 事件相似）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"unload"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Unloaded"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>此时生成的 <code>event</code> 对象在兼容 DOM 的浏览器中只包含 <code>target</code> 属性（值为 <code>document</code>）。IE8 及之 前版本则为这个事件对象提供了 <code>srcElement</code> 属性。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;body onunload=<span class="string">"alert('Unloaded!')"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><h4 id="resize事件"><a href="#resize事件" class="headerlink" title="resize事件"></a>resize事件</h4><p>浏览器窗口被调整到一个新的高度或宽度时，就会触发<code>resize</code>事件。这个事件在<code>window</code>上面触发，因此可以通过JavaScript或<code>&lt;body&gt;</code>元素中的<code>onresize</code>特性来指定事件处理程序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"resize"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Resized"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>与其他发生在 <code>window</code> 上的事件类似，在兼容 DOM 的浏览器中，传入事件处理程序中的 <code>event</code> 对象有一个 <code>target</code> 属性，值为 <code>document</code>；而 IE8 及之前版本则未提供任何属性。<br>浏览器窗口最小化或最大化时也会触发 <code>resize</code> 事件</p></blockquote><h4 id="scroll事件"><a href="#scroll事件" class="headerlink" title="scroll事件"></a>scroll事件</h4><blockquote><p>虽然<code>scroll</code>事件在<code>window</code>对象上触发, 但它实际表示的则是页面中元素的变化,混杂模式和旧版本浏览器可以通过<code>document.body</code>的<code>scrollLeft</code>,<code>scrollTop</code>监控这一变化,<strong>在标准模式下,所有浏览器</strong>(除safari3.1是靠document.body.scrollLeft)<strong>都会通过<code>&lt;html&gt;(document.documentElement)</code>的<code>scrollLeft</code>与<code>scrollTop</code>来反应这一变化</strong></p></blockquote><p>得到兼容代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"scroll"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.compatMode == <span class="string">"CSS1Compat"</span>) &#123; <span class="comment">//标准模式</span></span><br><span class="line">    alert(<span class="built_in">document</span>.documentElement.scrollTop);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">//混杂模式或旧浏览器</span></span><br><span class="line">    alert(<span class="built_in">document</span>.body.scrollTop);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="焦点事件"><a href="#焦点事件" class="headerlink" title="焦点事件"></a>焦点事件</h4><p>焦点事件会在页面元素获得或失去焦点时触发。利用这些事件并与 <code>document.hasFocus()</code>方法及 <code>document.activeElement</code> 属性配合,可以知晓用户在页面上的行踪,有以下几个事件</p><ul><li><code>blur</code>事件：在元素失去焦点时触发。这个事件不会冒泡；所有浏览器都支持它。</li><li><code>focus</code>事件：在元素获得焦点时触发。这个事件不会冒泡；所有浏览器都支持它。</li><li><code>focusin</code>事件：在元素获得焦点时触发。这个事件与HTML事件focus等价，但它冒泡。</li><li><code>focusout</code>事件：在元素失去焦点时触发。这个事件是HTML事件blur的通用版本。</li></ul><p>当焦点从页面中的一个元素移动到另一个元素，会依次触发下列事件：</p><ol><li><code>focusout</code>事件 在失去焦点的元素上触发；</li><li><code>focusin</code>事件 在获得焦点的元素上触发；</li><li><code>blur</code>事件 在失去焦点的元素上触发；</li><li><code>focus</code>事件 在获得焦点的元素上触发；</li></ol><blockquote><p>即使 <code>focus</code> 和 <code>blur</code> 不冒泡，也可以在捕获阶段侦听到它们。</p></blockquote><h3 id="鼠标与滚轮事件"><a href="#鼠标与滚轮事件" class="headerlink" title="鼠标与滚轮事件"></a>鼠标与滚轮事件</h3><ul><li><code>click</code>事件：在用户单击主鼠标按钮（一般是左边的按钮）或者按下回车键时触发。意味着<code>onclick</code>事件处理程序既可以通过键盘也可以通过鼠标执行。</li><li><code>dblclick</code>事件：在用户双击主鼠标按钮（一般是左边的按钮）时触发。</li><li><code>mousedown</code>事件：在用户按下了任意鼠标按钮时触发。不能通过键盘触发这个事件。</li><li><code>mouseenter</code>事件：在鼠标光标从元素外部首次移动到元素范围之内时触发。这个事件不冒泡，而且在光标移动到后代元素上不会触发。</li><li><code>mouseleave</code>事件：在位于元素上方的鼠标光标移动到元素范围之外时触发。这个事件不冒泡，而且在光标移动到后代元素上不会触发。</li><li><code>mousemove</code>事件：当鼠标指针在元素内部移动时重复地触发。不能通过键盘触发这个事件。</li><li><code>mouseout</code>事件：在鼠标指针位于一个元素上方，然后用户将其移入另一个元素时触发。又移入的另一个元素可能位于前一个元素的外部，也可能是这个元素的子元素。不能通过键盘触发这个事件。</li><li><code>mouseover</code>事件：在鼠标指针位于一个元素外部，然后用户将其首次移入另一个元素边界之内时触发。不能通过键盘触发这个事件。</li><li><code>mouseup</code>事件：在用户释放鼠标按钮时触发。不能通过键盘触发这个事件。</li></ul><blockquote><p>页面上的所有元素都支持鼠标事件。除了 <code>mouseenter</code> 和 <code>mouseleave</code>，所有鼠标事件都会<code>冒泡</code>，也可以被取消，而取消鼠标事件将会影响浏览器的默认行为。取消鼠标事件的默认行为还会影响其他事件<br><code>click</code> 和 <code>dblclick</code> 事件都会依赖于其他先行事件的触发<br>只有在同一个元素上相继触发 <code>mousedown</code> 和 <code>mouseup</code> 事件， 才会触发 <code>click</code> 事件<br>只有触发两次 <code>click</code> 事 件，才会触发一次 <code>dblclick</code> 事件</p></blockquote><p><code>mousedown</code>,<code>mouseup</code>,<code>click</code>,<code>dblclick</code>触发顺序</p><ol><li><code>mousedown</code></li><li><code>mouseup</code></li><li><code>click</code></li><li><code>mousedown</code></li><li><code>mouseup</code></li><li><code>click</code></li><li><code>dblclick</code></li></ol><h4 id="光标客户区坐标位置-event-clientX-event-clientY"><a href="#光标客户区坐标位置-event-clientX-event-clientY" class="headerlink" title="光标客户区坐标位置,event.clientX,event.clientY"></a>光标客户区坐标位置,event.clientX,event.clientY</h4><p><img src="https://i.loli.net/2017/12/28/5a445c9618b4d.jpg" alt=""></p><blockquote><p>鼠标事件都是在浏览器视口中的特定位置上发生的。这个位置信息保存在事件对象<code>event.clientX</code>和<code>event.clientY</code>属性中。它们的值表示事件发生时鼠标指针在视口中的水平和垂直坐标。</p></blockquote><h4 id="光标页面坐标位置-event-pageX-event-pageY"><a href="#光标页面坐标位置-event-pageX-event-pageY" class="headerlink" title="光标页面坐标位置 event.pageX,event.pageY"></a>光标页面坐标位置 event.pageX,event.pageY</h4><blockquote><p>页面坐标通过事件对象 <code>event.pageX</code> 和 <code>event.pageY</code> 属性，能告诉你事件是在页面中的什么位置发生的<br>在页面没有滚动的情况下，<code>pageX</code> 和 <code>pageY</code> 的值与 <code>clientX</code> 和 <code>clientY</code> 的值相等。<br>IE8 及更早版本不支持事件对象上的页面坐标, 需要兼容代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line">EventUtil.addHandler(div, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  <span class="keyword">var</span> pageX = event.pageX,</span><br><span class="line">    pageY = event.pageY;</span><br><span class="line">  <span class="keyword">if</span> (pageX === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    pageX = event.clientX + (<span class="built_in">document</span>.body.scrollLeft || <span class="built_in">document</span>.documentElement.scrollLeft);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (pageY === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    pageY = event.clientY + (<span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop);</span><br><span class="line">  &#125;</span><br><span class="line">  alert(<span class="string">"Page coordinates: "</span> + pageX + <span class="string">","</span> + pageY);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="光标屏幕坐标位置-event-screenX-event-screenY"><a href="#光标屏幕坐标位置-event-screenX-event-screenY" class="headerlink" title="光标屏幕坐标位置 event.screenX,event.screenY"></a>光标屏幕坐标位置 event.screenX,event.screenY</h4><p><img src="https://i.loli.net/2017/12/28/5a445c9619b46.jpg" alt=""></p><blockquote><p>相对于整个电脑屏幕的位置。而通过 <code>event.screenX</code> 和 <code>event.screenY</code> 属性就可以确定鼠标事件发生时鼠标指针相对于整个屏幕的坐标信息</p></blockquote><h4 id="modifier-key"><a href="#modifier-key" class="headerlink" title="modifier key"></a>modifier key</h4><blockquote><p>以下4个键都的值都是布尔值,都描述在鼠标或键盘行为中这些键是否按下了,按下返回true,否则返回false</p></blockquote><ul><li><code>event.shiftKey</code></li><li><code>event.ctrlKery</code></li><li><code>event.altKey</code></li><li><code>event.metaKey</code>,IE不支持</li></ul><h4 id="相关元素-event-relatedTarget"><a href="#相关元素-event-relatedTarget" class="headerlink" title="相关元素,event.relatedTarget"></a>相关元素,event.relatedTarget</h4><blockquote><p>下面的属性只涉及<code>mouseover</code>事件,<code>mouseout</code>事件,对于其他事件,属性是<code>null</code></p></blockquote><p><code>event.relatedTarget</code>属性,在<code>mouseover</code>事件中,<code>event.relatedTarget</code>是<strong>失去光标的元素</strong>,在<code>mouseout</code>事件中,<code>event.relatedTarget</code>是<strong>获得光标的元素</strong></p><p>IE8之前的版本不支持<code>event.relatedTarget</code>,用下面的属性代替<br><code>event.fromElement</code>代表了<code>mouseover</code>事件触发时,<strong>失去光标的元素</strong><br><code>event.toElement</code>代表了<code>mouseout</code>事件触发时,<strong>获得光标的元素</strong></p><p>针对相关元素得到兼容代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = &#123;</span><br><span class="line">  <span class="comment">//省略了其他代码</span></span><br><span class="line">  getRelatedTarget: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.relatedTarget) &#123;</span><br><span class="line">      <span class="keyword">return</span> event.relatedTarget;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.toElement) &#123;</span><br><span class="line">      <span class="keyword">return</span> event.toElement;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.fromElement) &#123;</span><br><span class="line">      <span class="keyword">return</span> event.fromElement;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//省略了其他代码</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="鼠标按钮-event-button"><a href="#鼠标按钮-event-button" class="headerlink" title="鼠标按钮 event.button"></a>鼠标按钮 event.button</h4><p><code>event.button</code>属性,只对<code>mousedown</code>事件,<code>mouseup</code>事件有效</p><blockquote><p>对于 <code>mousedown</code> 和 <code>mouseup</code> 事件来说，则在其 <code>event</code> 对象存在一个 <code>button</code> 属性，表示按下或释放的按钮。DOM 的 <code>button</code> 属性可能有如下 3 个值：<code>0</code> 表示主鼠标按钮，<code>1</code> 表示中间的鼠标按钮（鼠标滚轮按钮），<code>2</code> 表示次鼠标按钮</p><p>IE8及之前版本也提供<code>event.button</code>属性,但与<code>DOM</code>提供的值有很大差异</p></blockquote><ul><li><code>0</code>：表示没有按下按钮。</li><li><code>1</code>：表示按下了主鼠标按钮。</li><li><code>2</code>：表示按下了次鼠标按钮。</li><li><code>3</code>：表示同时按下了主、次鼠标按钮。</li><li><code>4</code>：表示按下了中间的鼠标按钮。</li><li><code>5</code>：表示同时按下了主鼠标按钮和中间的鼠标按钮。</li><li><code>6</code>：表示同时按下了次鼠标按钮和中间的鼠标按钮。</li><li><code>7</code>：表示同时按下了三个鼠标按钮。</li></ul><blockquote><p>将IE的规范转化为DOM规范,得到兼容函数,并加入<code>EventUtil</code>中</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = &#123;</span><br><span class="line">  <span class="comment">// 获取鼠标键值</span></span><br><span class="line">  getButton: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.implementation.hasFeature(<span class="string">"MouseEvents"</span>, <span class="string">"2.0"</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> event.button;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">switch</span> (event.button) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用方法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line">EventUtil.addHandler(div, <span class="string">"mousedown"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  alert(EventUtil.getButton(event));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>在使用 <code>onmouseup</code> 事件处理程序时，<code>event.button</code> 的值表示释放的是哪个按钮</p></blockquote><h4 id="更多事件信息-event-detail"><a href="#更多事件信息-event-detail" class="headerlink" title="更多事件信息,event.detail"></a>更多事件信息,event.detail</h4><blockquote><p>“DOM2 级事件”规范在 event 对象中还提供了 <code>event.detail</code> 属性，用于给出有关事件的更多信息</p></blockquote><p><code>event.detail</code>属性, 对于鼠标事件来说,表示给定位置上发生了多少次单机(一次<code>mousedown</code>与<code>mouseup</code>),<code>event.detail</code>从1开始计数,每次都会++,如果鼠标移动了位置,会置0</p><blockquote><p>这个属性不光表现元素某点上的点击数, 也会在鼠标滚轮滚动时以<code>+3</code>,<code>-3</code>两个值表示鼠标滚轮的滚动方向, 具体往后看一节</p><p>IE通过下列属性为鼠标提供了更多信息 </p></blockquote><ul><li><code>offsetX</code>：光标相对于目标元素边界的x坐标。</li><li><code>offsetY</code>：光标相对于目标元素边界的y坐标。</li><li><code>altLeft</code>：布尔值，表示是否按下了Alt键。如果altLeft的值为true，则altKey的值也为true。</li><li><code>ctrlLeft</code>：布尔值，表示是否按下了Ctrl键。如果ctrlLeft的值为true，则ctrlKey的值也为true。</li><li><code>shiftLeft</code>：布尔值，表示是否按下了Shift键。如果shiftLeft的值为true，则shiftKey的值也为true。</li></ul><h4 id="鼠标滚轮事件"><a href="#鼠标滚轮事件" class="headerlink" title="鼠标滚轮事件"></a>鼠标滚轮事件</h4><p><code>mousewheel</code> 事件。这个事件可以在任何元素上面触发，最终会冒泡到 <code>document</code>（IE8）或 <code>window</code>（IE9、Opera、 Chrome 及 Safari）</p><p><code>mousewheel</code> 事件的 <code>event</code> 对象, 除包含鼠标事件的所有标准信息外, 包含一个特殊的 <code>wheelDelta</code> 属性。当用户向前滚动鼠标滚轮时，<code>wheelDelta</code> 是 <code>120</code> 的倍数；当用 户向后滚动鼠标滚轮时，wheelDelta 是 <code>-120</code>的倍数</p><p><img src="https://i.loli.net/2017/12/28/5a445c95cea89.jpg" alt=""></p><blockquote><p>将 mousewheel 事件处理程序指定给页面中的任何元素或 <code>document</code> 对象，即可处理鼠标滚轮的交互操作</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"mousewheel"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  alert(event.wheelDelta);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>这个例子会在发生 <code>mousewheel</code> 事件时显示 <code>wheelDelta</code> 的值。多数情况下，只要知道鼠标滚轮滚动的方向就够了，而这通过检测 <code>wheelDelta</code> 的正负号就可以确定<br>在 Opera 9.5 之前的版本中，<code>wheelDelta</code> 值的正负号是颠倒的</p></blockquote><p><code>Firefox</code>支持一个名为<code>DomouseScroll</code>的类似事件,也实在鼠标滚轮滚动时触发.<code>DOMMouseScroll</code> 也被视为鼠标事件，因而包含与鼠标事件有关的所有属性,有关鼠标滚轮的信息则保存在 <code>event.detail</code> 属性中，当向前滚动鼠标滚轮时，这个属性的值是<code>-3</code> 的倍数，当向后滚动 鼠标滚轮时，这个属性的值是 <code>3</code> 的倍数</p><p>可以将 <code>DOMMouseScroll</code> 事件添加到页面中的任何元素，而且该事件会冒泡到 <code>window</code> 对象。因此，可以像下面这样针对这个事件来添加事件处理程序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"DOMMouseScroll"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  alert(event.detail);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/12/28/5a445c95e17df.jpg" alt=""></p><blockquote><p>综合两种滚动事件的特性,得到兼容代码,并放入<code>EventUtil</code>中</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventUtil = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="comment">// 得到鼠标滚动事件的event.wheelData的兼容代码</span></span><br><span class="line">  getWheelDelta: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.wheelDelta) &#123;</span><br><span class="line">      <span class="keyword">return</span> (client.engine.opera &amp;&amp; client.engine.opera &lt; <span class="number">9.5</span> ? -event.wheelDelta : event.wheelDelta);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> -event.detail * <span class="number">40</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>调用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleMouseWheel</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event = EventUtil.getEvent(event);</span><br><span class="line">    <span class="keyword">var</span> delta = EventUtil.getWheelDelta(event);</span><br><span class="line">    alert(delta);</span><br><span class="line">  &#125;</span><br><span class="line">  EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"mousewheel"</span>, handleMouseWheel);</span><br><span class="line">  EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"DOMMouseScroll"</span>, handleMouseWheel);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h4 id="触摸设备"><a href="#触摸设备" class="headerlink" title="触摸设备"></a>触摸设备</h4><blockquote><p>iOS和Android设备没有鼠标,在面向iPhone,iPod中的safari开发时,有以下几点注意</p></blockquote><ul><li>不支持dblclick事件。双击浏览器窗口会放大画面，而且没有办法改变该行为。</li><li>轻击可单击元素会触发mousemove事件。如果此操作会导致内容变化，将不再有其他事件发生；如果屏幕没有因此变化，那么会依次发生mousedown、mouseup和click事件。轻击不可单击的元素不会触发任何事件。可单击的元素是指那些单击可产生默认操作的元素（如链接），或者那些已经被指定了onclick事件处理程序的元素。</li><li>mousemove事件也会触发mouseover和mouseout事件。</li><li>两个手指放在屏幕上且页面随手指移动而滚动时会触发mousewheel和scroll事件</li></ul><h3 id="键盘与文本事件"><a href="#键盘与文本事件" class="headerlink" title="键盘与文本事件"></a>键盘与文本事件</h3><h4 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h4><ul><li><code>keydown</code>事件：当用户按下键盘上的任意键时触发，而且如果按住不放的话，会重复触发此事件。</li><li><code>keypress</code>事件：当用户按下键盘上的字符键时触发，而且如果按住不放的话，会重复触发此事件。按下Esc键也会触发这个事件。Safari3.1之前的版本也会在用户按下非字符键时触发keypress事件。</li><li><code>keyup</code>事件：当用户释放键盘上的键时触发。</li></ul><blockquote><p>所有元素都支持以上 3 个事件，但只有在文本框中才常用到。<br>只有一个文本事件 <code>textInput</code>。这个事件是对 keypress 的补充，用意是在将文本显示给用户之 前更容易拦截文本。在文本插入文本框之前会触发 textInput 事件</p></blockquote><p>用户按下字符键, 事件触发顺序, 非字符键从中忽略<code>keypress</code></p><ol><li><code>keydown</code></li><li><code>keypress</code></li><li>文本框内容发生变化</li><li>(若此时按住了键没放,将重复触发<code>keydown</code>,<code>keypress</code>)</li><li><code>keyup</code></li></ol><blockquote><p>键盘事件与鼠标事件一样,都支持<code>event</code>对象中的<code>modifier key</code>特性. 它们分别是<code>event.shiftKey</code>,<code>event.ctrlKey</code>,<code>event.altKey</code>,<code>event.metaKey</code>(IE不支持metaKey)</p></blockquote><h4 id="键码-event-keyCode"><a href="#键码-event-keyCode" class="headerlink" title="键码 event.keyCode"></a>键码 event.keyCode</h4><p><code>event.keyCode</code>属性,发生 <code>keydown</code> 和 <code>keyup</code> 事件时，<code>event</code> 对象的 <code>keyCode</code> 属性中会包含一个代码，与键盘上一个特定的键对应。对数字字母字符键，<code>keyCode</code> 属性的值与 ASCII 码中对应小写字母或数字的编码相同, 与<code>shift</code>键状态无关</p><p><img src="https://i.loli.net/2017/12/28/5a445c964a1dd.jpg" alt=""><br><img src="https://i.loli.net/2017/12/28/5a445c9613f5d.jpg" alt=""></p><blockquote><p>。在 Firefox 和 Opera 中，按分号键时 keyCode 值为 59，也就是 ASCII 中分号的编码；但 IE 和 Safari 返回 186，即键盘中按键的键码。</p></blockquote><h4 id="字符编码-event-charCode"><a href="#字符编码-event-charCode" class="headerlink" title="字符编码 event.charCode"></a>字符编码 event.charCode</h4><p>发生 <code>keypress</code> 事件意味着按下的键会影响到屏幕中文本的显示。在所有浏览器中，按下能够插入或删除字符的键都会触发 keypress 事件；IE9、Firefox、Chrome 和 Safari 的 event 对象都支持一个 <code>event.charCode</code> 属性，这个属性只有在发生 <code>keypress</code> 事件时才包含值，而且这个值是按下的那个键所代表字符的 ASCII 编码。此时的 <code>event.keyCode</code> 通常等于 0 或者也可能等于所按键的键码。IE8及之前版本和 Opera则是在 <code>event.keyCode</code> 中保存字符的 ASCII 编码。</p><p>综上,得到兼容代码,放入<code>EventUtil</code>中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = &#123;</span><br><span class="line">  <span class="comment">//省略的代码</span></span><br><span class="line">  getCharCode: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> event.charCode == <span class="string">"number"</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> event.charCode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> event.keyCode;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//省略的代码</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>在取得了字符编码之后，就可以使用 <code>String.fromCharCode()</code>将其转换成实际的字符</p></blockquote><h4 id="DOM-3级的变化"><a href="#DOM-3级的变化" class="headerlink" title="DOM 3级的变化"></a>DOM 3级的变化</h4><blockquote><p>先说结论,本章介绍的属性和防范都不建议使用</p></blockquote><p><code>event.key</code>,<code>event.char</code>属性, DOM3 级事件中的键盘事件，不再包含 <code>event.charCode</code> 属性，而是包含两个新属性：<code>event.key</code> 和 <code>event.char</code>。其中，<code>event.key</code> 属性是为了取代 <code>event.keyCode</code> 而新增的，它的值是一个字符串。在按下某个字符键时，<code>event.key</code> 的值就是相应的文本字符（如“k”或“M”）；在按下非字符键时， <code>event.key</code> 的值是相应键的名（如“Shift” 或“Down”）。而 <code>event.char</code> 属性在按下字符键时的行为与 <code>event.key</code> 相同，但在按下非字符键时值为 null。</p><p>IE9 支持 <code>event.key</code> 属性，但不支持 <code>event.char</code> 属性。Safari 5 和 Chrome 支持名为 <code>event.keyIdentifier</code> 的类似属性， 在按下非字符键（例如 <code>Shift</code>）的情况下与 <code>event.key</code> 的值相同。对于字符键，<code>event.keyIdentifier</code> 返回一个格式 类似“U+0000”的字符串，表示 Unicode 值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> textbox = <span class="built_in">document</span>.getElementById(<span class="string">"myText"</span>);</span><br><span class="line">EventUtil.addHandler(textbox, <span class="string">"keypress"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  <span class="keyword">var</span> identifier = event.key || event.keyIdentifier;</span><br><span class="line">  <span class="keyword">if</span> (identifier) &#123;</span><br><span class="line">    alert(identifier);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>由于存在跨浏览器问题，因此本书不推荐使用 <code>event.key</code>、<code>event.keyIdentifier</code> 或 <code>event.char</code>。</p></blockquote><p><code>event.location</code> 属性，这是一个数值，表示按下了什么位置上的键, IE9 支持这个属性</p><ul><li><code>0</code> 表示默认键盘</li><li><code>1</code> 表示左侧位置（例如左位的 Alt 键）</li><li><code>2</code> 表示右侧位置（例如右侧的 Shift 键）</li><li><code>3</code> 表示数字小键盘</li><li><code>4</code> 表示移动设备键盘（也就是虚拟键盘）</li><li><code>5</code> 表示手柄（如任天堂 Wii 控制器）</li></ul><p>Safari 和 Chrome 支持名为 <code>event.keyLocation</code> 的等价属性，但即有 bug——值始终是 0，除非按下了数字键盘（此时，值 为 3）；否则，不会是 1、2、4、5。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> textbox = <span class="built_in">document</span>.getElementById(<span class="string">"myText"</span>);</span><br><span class="line">EventUtil.addHandler(textbox, <span class="string">"keypress"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  <span class="keyword">var</span> loc = event.location || event.keyLocation;</span><br><span class="line">  <span class="keyword">if</span> (loc) &#123;</span><br><span class="line">    alert(loc);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>与 key 属性一样，支持 <code>event.location</code> 的浏览器也不多，所以在跨浏览器开发中不推荐使用。</p></blockquote><p><code>event.getModifierState(&#39;Shift&#39;/&#39;Control&#39;/&#39;AltGraph&#39;/&#39;Meta&#39;) return boolean</code>,如果被检测的键按下了,返回true,否则返回false</p><blockquote><p>不推荐使用, 因为<code>modifier key</code>系列可以取得类似属性,且IE9是唯一支持该方法的浏览器</p></blockquote><h4 id="textInput事件"><a href="#textInput事件" class="headerlink" title="textInput事件"></a>textInput事件</h4><p><code>textInput</code>事件, 根据规范，当用户在可编辑区域中输入字符时，就会触发这个事件。</p><blockquote><p>与<code>keypress</code>事件的不同: </p></blockquote><ol><li>任何可以获得焦点的元素都可以触发<code>keypress</code>事件，但只有可编辑区域才能触发<code>textInput</code>事件。</li><li><code>textInput``事件只会在用户按下能够输入实际字符的键时才会被触发，而</code>keypress`事件则在按下那些能够影响文本显示的键时也会触发（例如退格键）</li></ol><p><code>event.data</code>属性, 值是用户输入的字符（而非字符编码）。换句话说，用户在没有按上档键的情况下按下了 S 键，<code>event.data</code> 的值就是”s”，而如果在按住上档键时按下该键，<code>event.data</code> 的值就是”S”。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> textbox = <span class="built_in">document</span>.getElementById(<span class="string">"myText"</span>);</span><br><span class="line">EventUtil.addHandler(textbox, <span class="string">"textInput"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  alert(event.data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>event.inputMethod</code>属性，表示把文本输入到文本框中的方式,只有IE支持</p><ul><li>0，表示浏览器不确定是怎么输入的。</li><li>1，表示是使用键盘输入的。</li><li>2，表示文本是粘贴进来的。</li><li>3，表示文本是拖放进来的。</li><li>4，表示文本是使用IME输入的。</li><li>5，表示文本是通过在表单中选择某一项输入的。</li><li>6，表示文本是通过手写输入的（比如使用手写笔）。</li><li>7，表示文本是通过语音输入的。</li><li>8，表示文本是通过几种方法组合输入的。</li><li>9，表示文本是通过脚本输入的。</li></ul><h3 id="复合事件"><a href="#复合事件" class="headerlink" title="复合事件"></a>复合事件</h3><blockquote><p>复合事件（compositionevent）是DOM3级事件中新添加的一类事件，用于处理IME的输入序列。IME（InputMethodEditor，输入法编辑器）可以让用户输入在物理键盘上找不到的字符。例如，使用拉丁文键盘的用户通过IME照样能输入日文字符<br>IE9+是唯一支持的浏览器,开发中用处不大,若需要深入查阅高程p384</p></blockquote><h3 id="变动事件"><a href="#变动事件" class="headerlink" title="变动事件"></a>变动事件</h3><blockquote><p> DOM2级的变动（mutation）事件能在DOM中的某一部分发生变化时给出提示。变动事件是为XML或HTMLDOM设计的，并不特定于某种语言。DOM2级定义了如下变动事件。</p></blockquote><ul><li><code>DOMSubtreeModified</code>：在DOM结构中发生任何变化时触发。这个事件在其他任何事件触发后都会触发。</li><li><code>DOMNodeInserted</code>：在一个节点作为子节点被插入到另一个节点中时触发。</li><li><code>DOMNodeRemoved</code>：在节点从其父节点中被移除时触发。</li><li><code>DOMNodeInsertedIntoDocument</code>：在一个节点被直接插入文档或通过子树间接插入文档之后触发。这个事件在DOMNodeInserted之后触发。</li><li><code>DOMNodeRemovedFromDocument</code>：在一个节点被直接从文档中移除或通过子树间接从文档中移除之前触发。这个事件在DOMNodeRemoved之后触发。</li><li><code>DOMAttrModified</code>：在特性被修改之后触发。</li><li><code>DOMCharacterDataModified</code>：在文本节点的值发生变化时触发。</li></ul><blockquote><p>浏览器中很少使用变动事件和 HTML 事件，因为使用它们会受到一些限制, 详情查阅p385-13.4.6</p></blockquote><h3 id="HTML5-事件"><a href="#HTML5-事件" class="headerlink" title="HTML5 事件"></a>HTML5 事件</h3><h4 id="contextmenu-事件"><a href="#contextmenu-事件" class="headerlink" title="contextmenu 事件"></a>contextmenu 事件</h4><blockquote><p>此事件表示何时应该显示右键菜单, 以便取消默认的右键菜单提供自定义菜单<br><code>contextmenu</code> 事件是冒泡的，因此可以为 <code>document</code> 指定一个事件处理程序，用以处理页面中发生的所有此类事件。这个事件的目标是发生用户操作的元素<br>在所有浏览器中都可以取消这个事件： 在兼容 DOM 的浏览器中，使用 <code>event.preventDefalut()</code>；在 IE 中，将 <code>event.returnValue</code> 的值 设置为 false。<br>因为 <code>contextmenu</code> 事件属于鼠标事件，所以其事件对象中包含与光标位置有关的所有属性。通常使用 <code>contextmenu</code> 事件来显示自定义的上下文菜单，而使用 <code>onclick</code> 事件处理程序来隐藏该菜单。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDiv"</span>&gt;</span>Right click or Ctrl+click me to get a custom context menu. Click anywhere else to get the default context menu.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"myMenu"</span> <span class="attr">style</span>=<span class="string">"position:absolute;visibility:hidden;background-color:silver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.nczonline.net"</span>&gt;</span>Nicholas' site<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.wrox.com"</span>&gt;</span>Wrox site<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.yahoo.com"</span>&gt;</span>Yahoo!<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"load"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line">                </span><br><span class="line">    EventUtil.addHandler(div, <span class="string">"contextmenu"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">        event = EventUtil.getEvent(event);</span><br><span class="line">        EventUtil.preventDefault(event);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> menu = <span class="built_in">document</span>.getElementById(<span class="string">"myMenu"</span>);</span><br><span class="line">        menu.style.left = event.clientX + <span class="string">"px"</span>;</span><br><span class="line">        menu.style.top = event.clientY + <span class="string">"px"</span>;</span><br><span class="line">        menu.style.visibility = <span class="string">"visible"</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"myMenu"</span>).style.visibility = <span class="string">"hidden"</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="beforeunload-事件"><a href="#beforeunload-事件" class="headerlink" title="beforeunload 事件"></a>beforeunload 事件</h4><blockquote><p>页面关闭前弹出个对话框确认关闭,请按下面固定套路组织代码</p><p>为了显示这个弹出对话框，必须将 <code>event.returnValue</code> 的值设置为要显示给用户的字符串（对 IE 及 Fiefox 而言），同时作为函数的值返回（对 Safari 和 Chrome 而言）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"beforeunload"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  <span class="keyword">var</span> message = <span class="string">"I'm really going to miss you if you go."</span>;</span><br><span class="line">  event.returnValue = message;</span><br><span class="line">  <span class="keyword">return</span> message;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="DOMContentLoaded-事件"><a href="#DOMContentLoaded-事件" class="headerlink" title="DOMContentLoaded 事件"></a>DOMContentLoaded 事件</h4><blockquote><p><code>DOMContentLoaded</code> 事件在形成完整的 DOM 树之后就会触发， 不理会图像、JavaScript 文件、CSS 文件或其他资源是否已经下载完毕, 与<code>onload</code>事件区分<br>要处理 <code>DOMContentLoaded</code> 事件，可以为 <code>document</code> 或 <code>window</code> 添加相应的事件处理程序（尽管这个事件会冒泡到 <code>window</code>，但它的目标实际上是 <code>document</code>）。<br><code>DOMContentLoaded</code> 事件对象不会提供任何额外的信息（其 <code>target</code> 属性是 <code>document</code>）。<br>这个事件既可以添加事件处理程序，也可以执行其他 DOM 操作。这个事件始终都会在 <code>load</code> 事件之前触发。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"DOMContentLoaded"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Content loaded"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>对于不支持此事件的polyfill,无法保证在所有环境中该超时调用一定会早于 <code>load</code> 事件被触发。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//..</span></span><br><span class="line">&#125;,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h4 id="readystatechange-事件"><a href="#readystatechange-事件" class="headerlink" title="readystatechange 事件"></a>readystatechange 事件</h4><p>DOM文档中的某些部分提供了<code>readystatechange</code>事件。这个事件的目的是提供与文档或元素的加载状态有关的信息，但这个事件的行为有时候也很难预料。支持<code>readystatechange</code>事件的每个对象都有一个<code>readyState</code>属性</p><ul><li><code>uninitialized（未初始化）</code>：对象存在但尚未初始化。</li><li><code>loading（正在加载）</code>：对象正在加载数据。</li><li><code>loaded（加载完毕）</code>：对象加载数据完成。</li><li><code>interactive（交互）</code>：可以操作对象了，但还没有完全加载。</li><li><code>complete（完成）</code>：对象已经加载完毕。</li></ul><blockquote><p>并非所有对象都会经历<code>readyState</code>的这几个阶段。换句话说，如果某个阶段不适用某个对象，则该对象完全可能跳过该阶段；并没有规定哪个阶段适用于哪个对象。显然，这意味着<code>readystatechange</code>事件经常会少于4次，而<code>readyState</code>属性的值也不总是连续的。</p></blockquote><p>对于 <code>document</code> 而言，值为<code>interactive</code>的 <code>readyState</code> 会在与 <code>DOMContentLoaded</code> 大致相同的时刻触发 <code>readystatechange</code> 事件。此时，DOM 树已经加载完毕，可以安全地操作它了，因此就会进入交互<code>interactive</code>阶段。 但与此同时，图像及其他外部文件不一定可用</p><ul><li><code>uninitialized（未初始化）</code>：对象存在但尚未初始化。</li><li><code>loading（正在加载）</code>：对象正在加载数据。</li><li><code>loaded（加载完毕）</code>：对象加载数据完成。</li><li><code>interactive（交互）</code>：可以操作对象了，但还没有完全加载。</li><li><code>complete（完成）</code>：对象已经加载完毕。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"readystatechange"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.readyState == <span class="string">"interactive"</span>) &#123;</span><br><span class="line">    alert(<span class="string">"Content loaded"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>这个事件的<code>event</code>对象不会提供任何信息，也没有目标对象。在与<code>load</code>事件一起使用时，无法预测两个事件触发的先后顺序。让问题变得更复杂的是，交互阶段可能会早于也可能会晚于完成阶段出现，无法确保顺序。<br>因此，为了尽可能抢到先机，有必要<strong>同时检测交互和完成阶段</strong>，如下面的例子所示。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"readystatechange"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.readyState == <span class="string">"interactive"</span> || <span class="built_in">document</span>.readyState == <span class="string">"complete"</span>) &#123;</span><br><span class="line">    EventUtil.removeHandler(<span class="built_in">document</span>, <span class="string">"readystatechange"</span>, <span class="built_in">arguments</span>.callee);</span><br><span class="line">    alert(<span class="string">"Content loaded"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>虽然使用<code>readystatechange</code>可以十分近似地模拟<code>DOMContentLoaded</code>事件，但它们本质上还是不同的。在不同页面中，<code>load</code>事件与<code>readystatechange</code>事件并不能保证以相同的顺序触发。</p></blockquote><p><code>&lt;script&gt;</code>（在IE和Opera中）和<code>&lt;link&gt;</code>（仅IE中）元素也会触发<code>readystatechange</code>事件，可以用来确定外部的JavaScript和CSS文件是否已经加载完成。与在其他浏览器中一样，除非把动态创建的元素添加到页面中，否则浏览器不会开始下载外部资源。基于元素触发的<code>readystatechange</code>事件也存在同样的问题，即<code>readyState</code>属性无论等于<code>loaded</code>还是<code>complete</code>都可以表示资源已经可用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// script标签添加readystatechange事件</span></span><br><span class="line">  <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">  EventUtil.addHandler(script, <span class="string">"readystatechange"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event = EventUtil.getEvent(event);</span><br><span class="line">    <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line">    <span class="keyword">if</span> (target.readyState == <span class="string">"loaded"</span> || target.readyState == <span class="string">"complete"</span>) &#123;</span><br><span class="line">      EventUtil.removeHandler(target, <span class="string">"readystatechange"</span>, <span class="built_in">arguments</span>.callee);</span><br><span class="line">      alert(<span class="string">"Script Loaded"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  script.src = <span class="string">"example.js"</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// link标签添加readystatechange事件</span></span><br><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">"link"</span>);</span><br><span class="line">  link.type = <span class="string">"text/css"</span>;</span><br><span class="line">  link.rel = <span class="string">"stylesheet"</span>;</span><br><span class="line"></span><br><span class="line">  EventUtil.addHandler(link, <span class="string">"readystatechange"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event = EventUtil.getEvent(event);</span><br><span class="line">    <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (target.readyState == <span class="string">"loaded"</span> || target.readyState == <span class="string">"complete"</span>) &#123;</span><br><span class="line">      EventUtil.removeHandler(target, <span class="string">"readystatechange"</span>, <span class="built_in">arguments</span>.callee);</span><br><span class="line">      alert(<span class="string">"CSS Loaded"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  link.href = <span class="string">"example.css"</span>;</span><br><span class="line">  <span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(link);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>这个例子为新创建的<code>&lt;script&gt;</code>节点指定了一个事件处理程序。事件的目标是该节点本身，因此当触发<code>readystatechange</code>事件时，要检测目标的<code>readyState</code>属性是不是等于<code>loaded</code>或<code>complete</code>。如果进入了其中任何一个阶段，则移除事件处理程序（以防止被执行两次），并显示一个警告框。与此同时，就可以执行已经加载完毕的外部文件中的函数了。同样的编码方式也适用于通过<code>&lt;link&gt;</code>元素加载CSS文件的情况</p><p>支持readystatechange事件的浏览器有IE、Firfox4+和Opera。</p></blockquote><h4 id="pageshow-和-pagehide-事件"><a href="#pageshow-和-pagehide-事件" class="headerlink" title="pageshow 和 pagehide 事件"></a>pageshow 和 pagehide 事件</h4><p>Firefox和Opera有一个特性，名叫<code>往返缓存</code>（back-forwardcache，或bfcache），可以在用户使用浏览器的“后退”和“前进”按钮时加快页面的转换速度。这个缓存保存了DOM和JavaScript的状态实际上是将整个页面都保存在了内存里。如果页面位于bfcache中，那么再次打开该页面时就不会触发<code>load</code>事件。</p><blockquote><p>尽管由于内存中保存了整个页面的状态，不触发load事件也不应该会导致什么问题，但为了更形象地说明<code>bfcache</code>的行为，Firefox还是提供了一些新事件。<br>第一个事件就是<code>pageshow</code>事件，在页面显示时触发，无论该页面是否来自<code>bfcache</code>。在重新加载的页面中，<code>pageshow</code>会在<code>load</code>事件触发后触发；而对于<code>bfcache</code>中的页面，<code>pageshow</code>会在页面状态完全恢复的那一刻触发。另外要注意的是，虽然这个事件的目标是<code>document</code>，但必须将其事件处理程序添加到<code>window</code>。<br><code>pageshow</code> 事件的 <code>event</code> 对象还包含一个名为 <code>event.persisted</code> 的布尔值属性。 如果页面被保存在了 <code>bfcache</code> 中，则这个属性的值为 true；否则，这个属性的值为 false。通过检测 <code>event.persisted</code> 属性，就可以根据页面在 bfcache 中的状态来确定是否需要采取其他操作。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> showCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"Load fired"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"pageshow"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    showCount++;</span><br><span class="line">    alert(<span class="string">"Show has been fired "</span> + showCount + <span class="string">" times. Persisted? "</span> + event.persisted);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><blockquote><p>每当触发<code>pageshow</code>事件，showCount的值就会递增并通过警告框显示出来。如果你在离开包含以上代码的页面之后，又单击“后退”按钮返回该页面，就会看到showCount每次递增的值。这是因为该变量的状态，乃至整个页面的状态，都被保存在了内存中，当你返回这个页面时，它们的状态得到了恢复。如果你单击了浏览器的“刷新”按钮，那么showCount的值就会被重置为0，因为页面已经完全重新加载了。</p></blockquote><p>同时又<code>pagehide</code> 事件，会在浏览器卸载页面的时候触发，而且是在 <code>unload</code> 事件之前触发。与 <code>pageshow</code> 事件一样，<code>pagehide</code> 在 <code>document</code> 上面触发，但其事件处理程序必须要添加到 <code>window</code> 对象。这个事件的 <code>event</code> 对象也包含 <code>event.persisted</code> 属性.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"pagehide"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Hiding. Persisted? "</span> + event.persisted);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>可能需要在<code>pagehide</code>事件触发时根据<code>event.persisted</code>的值采取不同的操作。对于<code>pageshow</code>事件，如果页面是从<code>bfcache</code>中加载的，那么<code>event.persisted</code>的值就是true；对于<code>pagehide</code>事件，如果页面在卸载之后会被保存在<code>bfcache</code>中，那么<code>event.persisted</code>的值也会被设置为true。因此，当第一次触发<code>pageshow</code>时，<code>event.persisted</code>的值一定是false，而在第一次触发<code>pagehide</code>时，<code>event.persisted</code>就会变成true（除非页面不会被保存在<code>bfcache</code>中）。<br>指定了 <code>onunload</code> 事件处理程序的页面会被自动排除在 <code>bfcache</code> 之外，即使事件处理程序是空的。<br>IE9及之前版本不支持这两个事件。指定了onunload事件处理程序的页面会被自动排除在bfcache之外，即使事件处理程序是空的。</p></blockquote><h4 id="hashchange-事件"><a href="#hashchange-事件" class="headerlink" title="hashchange()事件"></a>hashchange()事件</h4><blockquote><p><code>URL</code>的<code>hash</code>值变化时触发<br><code>hashchange</code>应该添加给<code>window</code>对象, <code>event</code>对象包含两个属性<code>event.oldURL</code>与<code>event.newURL</code>,分别表示变化前后完整的URL，因为<code>event.oldURL</code>与<code>event.newURL</code>有兼容问题, 所以最好使用<code>location.hash</code>来确定当前的<code>hash</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(location.hash)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设备事件"><a href="#设备事件" class="headerlink" title="设备事件"></a>设备事件</h3><p>都是一些特定移动设备的事件,用处较少,详情查阅p395-13.4.8</p><h3 id="触摸与手势事件"><a href="#触摸与手势事件" class="headerlink" title="触摸与手势事件"></a>触摸与手势事件</h3><h4 id="触摸事件"><a href="#触摸事件" class="headerlink" title="触摸事件"></a>触摸事件</h4><ul><li><code>touchstart</code>：当手指触摸屏幕时触发；即使已经有一个手指放在了屏幕上也会触发。</li><li><code>touchmove</code>：当手指在屏幕上滑动时连续地触发。在这个事件发生期间，**调用<code>event.preventDefault()</code>可以阻止滚动。</li><li><code>touchend</code>：当手指从屏幕上移开时触发。</li><li><code>touchcancel</code>：当系统停止跟踪触摸时触发。关于此事件的确切触发时间，文档中没有明确说明。</li></ul><blockquote><p>上面这几个事件都会冒泡，也都可以取消。虽然这些触摸事件没有在DOM规范中定义，但它们却是以兼容DOM的方式实现的。因此，每个触摸事件的<code>event</code>对象都提供了在鼠标事件中常见的属性：<code>event.bubbles</code>、<code>event.cancelable</code>、<code>event.view</code>、<code>event.clientX</code>、<code>event.clientY</code>、<code>event.screenX</code>、<code>event.screenY</code>、<code>event.detail</code>、<code>event.altKey</code>、<code>event.shiftKey</code>、<code>event.ctrlKey</code>和<code>event.metaKey</code></p></blockquote><p>触摸事件的<code>event</code>对象除常见的DOM属性外, 触摸事件还包含下列三个用于跟踪触摸的属性:</p><ul><li><code>touches</code>：表示当前跟踪的触摸操作的<code>Touch对象</code>的数组。</li><li><code>targetTouchs</code>：特定于事件目标的<code>Touch对象</code>的数组。</li><li><code>changeTouches</code>：表示自上次触摸以来发生了什么改变的<code>Touch对象</code>的数组。</li></ul><p>每个<code>Touch对象</code>包含下列属性:</p><ul><li><code>clientX</code>：触摸目标在视口中的x坐标。</li><li><code>clientY</code>：触摸目标在视口中的y坐标。</li><li><code>identifier</code>：标识触摸的唯一ID。</li><li><code>pageX</code>：触摸目标在页面中的x坐标。</li><li><code>pageY</code>：触摸目标在页面中的y坐标。</li><li><code>screenX</code>：触摸目标在屏幕中的x坐标。</li><li><code>screenY</code>：触摸目标在屏幕中的y坐标。</li><li><code>target</code>：触摸的DOM节点目标。</li></ul><blockquote><p>使用这些属性可以跟踪用户对屏幕的触摸操作。来看下面的例子。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleTouchEvent</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//只跟踪一次触摸 </span></span><br><span class="line">  <span class="keyword">if</span> (event.touches.length == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> output = <span class="built_in">document</span>.getElementById(<span class="string">"output"</span>);</span><br><span class="line">    <span class="keyword">switch</span> (event.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"touchstart"</span>:</span><br><span class="line">        output.innerHTML = <span class="string">"Touch started ("</span> + event.touches[<span class="number">0</span>].clientX + <span class="string">","</span> + event.touches[<span class="number">0</span>].clientY + <span class="string">")"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"touchend"</span>:</span><br><span class="line">        output.innerHTML += <span class="string">"&lt;br&gt;Touch ended ("</span> + event.changedTouches[<span class="number">0</span>].clientX + <span class="string">","</span> + event.changedTouches[<span class="number">0</span>].clientY + <span class="string">")"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"touchmove"</span>:</span><br><span class="line">        event.preventDefault(); <span class="comment">//阻止滚动</span></span><br><span class="line">        output.innerHTML += <span class="string">"&lt;br&gt;Touch moved ("</span> + event.changedTouches[<span class="number">0</span>].clientX + <span class="string">","</span> + event.changedTouches[<span class="number">0</span>].clientY + <span class="string">")"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"touchstart"</span>, handleTouchEvent);</span><br><span class="line">EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"touchend"</span>, handleTouchEvent);</span><br><span class="line">EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"touchmove"</span>, handleTouchEvent);</span><br></pre></td></tr></table></figure><blockquote><p>以上代码会跟踪屏幕上发生的一次触摸操作。为简单起见，只会在有一次活动触摸操作的情况下输出信息。当<code>touchstart</code>事件发生时，会将触摸的位置信息输出到<code>&lt;div&gt;</code>元素中。当<code>touchmove</code>事件发生时，会取消其默认行为，阻止滚动（触摸移动的默认行为是滚动页面），然后输出触摸操作的变化信息。而<code>touchend</code>事件则会输出有关触摸操作的最终信息。注意，在<code>touchend</code>事件发生时，<code>touches</code>集合中就没有任何<code>Touch对象</code>了，因为不存在活动的触摸操作；此时，就必须转而使用<code>changeTouchs</code>集合。</p><p>这些事件会在文档的所有元素上面触发，因而可以分别操作页面的不同部分。在触摸屏幕上的元素时，这些事件（包括鼠标事件）发生的顺序如下：</p></blockquote><ol><li>touchstart</li><li>mouseover</li><li>mousemove（一次）</li><li>mousedown</li><li>mouseup</li><li>click</li><li>touchend</li></ol><h4 id="手势事件"><a href="#手势事件" class="headerlink" title="手势事件"></a>手势事件</h4><p>Safari还引入了一组手势事件。当两个手指触摸屏幕时就会产生手势，手势通常会改变显示项的大小，或者旋转显示项。有三个手势事件:</p><ul><li><code>gesturestart</code>：当一个手指已经按在屏幕上而另一个手指又触摸屏幕时触发。</li><li><code>gesturechange</code>：当触摸屏幕的任何一个手指的位置发生变化时触发。</li><li><code>gestureend</code>：当任何一个手指从屏幕上面移开时触发。</li></ul><blockquote><p>只有两个手指都触摸到事件的接收容器时才会触发这些事件。由于这些事件冒泡，所以将事件处理程序放在文档上也可以处理所有手势事件。此时，事件的目标就是两个手指都位于其范围内的那个元素。</p></blockquote><p>触摸事件和手势事件之间存在某种关系。当一个手指放在屏幕上时，会触发touchstart事件。如果另一个手指又放在了屏幕上，则会先触发gesturestart事件，随后触发基于该手指的touchstart事件。如果一个或两个手指在屏幕上滑动，将会触发gesturechange事件。但只要有一个手指移开，就会触发gestureend事件，紧接着又会触发基于该手指的touchend事件。</p><p>与触摸事件一样，每个手势事件的<code>event</code>对象都包含着标准的鼠标事件属性：<code>event.bubbles</code>、<code>event.cancelable</code>、<code>event.view</code>、<code>event.clientX</code>、<code>event.clientY</code>、<code>event.screenX</code>、<code>event.screenY</code>、<code>event.detail</code>、<code>event.altKey</code>、<code>event.shiftKey</code>、<code>event.ctrlKey</code>和<code>event.metaKey</code>。</p><p>此外，还包含两个额外的属性：</p><ul><li><code>event.rotation</code>属性，表示手指变化引起的旋转角度，负值表示逆时针旋转，正值表示顺时针旋转（该值从0开始）。</li><li><code>event.scale</code>属性,而<code>event.scale</code>属性表示两个手指间距离的变化情况（例如向内收缩会缩短距离）；这个值从1开始，并随距离拉大而增长，随距离缩短而减小。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleGestureEvent</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> output = <span class="built_in">document</span>.getElementById(<span class="string">"output"</span>);</span><br><span class="line">  <span class="keyword">switch</span> (event.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"gesturestart"</span>:</span><br><span class="line">      output.innerHTML = <span class="string">"Gesture started (rotation="</span> + event.rotation + <span class="string">",scale="</span> + event.scale + <span class="string">")"</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"gestureend"</span>:</span><br><span class="line">      output.innerHTML += <span class="string">"&lt;br&gt;Gesture ended (rotation="</span> + event.rotation + <span class="string">",scale="</span> + event.scale + <span class="string">")"</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"gesturechange"</span>:</span><br><span class="line">      output.innerHTML += <span class="string">"&lt;br&gt;Gesture changed (rotation="</span> + event.rotation + <span class="string">",scale="</span> + event.scale + <span class="string">")"</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"gesturestart"</span>, handleGestureEvent, <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"gestureend"</span>, handleGestureEvent, <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"gesturechange"</span>, handleGestureEvent, <span class="literal">false</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>触摸事件也会返回 <code>event.rotation</code> 和 <code>event.scale</code> 属性，但这两个属性只会在两个手指与 屏幕保持接触时才会发生变化。</p></blockquote><h2 id="内存和性能"><a href="#内存和性能" class="headerlink" title="内存和性能"></a>内存和性能</h2><h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><p>直接看代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;ul id="myLinks"&gt;</span></span><br><span class="line"><span class="comment">//   &lt;li id="goSomewhere"&gt;Go somewhere&lt;/li&gt;</span></span><br><span class="line"><span class="comment">//   &lt;li id="doSomething"&gt;Do something&lt;/li&gt;</span></span><br><span class="line"><span class="comment">//   &lt;li id="sayHi"&gt;Say hi&lt;/li&gt;</span></span><br><span class="line"><span class="comment">// &lt;/ul&gt;</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">"myLinks"</span>);</span><br><span class="line">  EventUtil.addHandler(list, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event = EventUtil.getEvent(event);</span><br><span class="line">    <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (target.id) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"doSomething"</span>:</span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">"I changed the document's title"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"goSomewhere"</span>:</span><br><span class="line">        location.href = <span class="string">"http://www.wrox.com"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"sayHi"</span>:</span><br><span class="line">        alert(<span class="string">"hi"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><blockquote><p>上述代码性能更好, 适合事件维脱的事件包括<code>click</code>,<code>mousedown</code>,<code>mouseup</code>,<code>keyup</code>,<code>keydown</code>,<code>keypress</code>, 虽然<code>mouseover</code>和<code>mouseout</code>不适合委托</p></blockquote><h3 id="移除事件处理程序"><a href="#移除事件处理程序" class="headerlink" title="移除事件处理程序"></a>移除事件处理程序</h3><p>内存中留有那些过时不用的“空事件处理程序”（danglingeventhandler），也是造成Web应用程序内存与性能问题的主要原因。</p><p>在两种情况下，可能会造成上述问题。第一种情况就是从文档中移除带有事件处理程序的元素时。这可能是通过纯粹的DOM操作，例如使用<code>element.removeChild()</code>和<code>element.replaceChild()</code>方法，但更多地是发生在使用innerHTML替换页面中某一部分的时候。如果带有事件处理程序的元素被<code>innerHTML</code>删除了，那么原来添加到元素中的事件处理程序极有可能无法被当作垃圾回收。</p><blockquote><p>在事件处理程序中删除按钮也能阻止事件冒泡。目标元素在文档中是事件冒泡的前提。</p><p>采用<code>事件委托</code>也有助于解决这个问题。如果事先知道将来有可能使用<code>innerHTML</code>替换掉页面中的某一部分，那么就可以不直接把事件处理程序添加到该部分的元素中。而通过把事件处理程序指定给较高层次的元素，同样能够处理该区域中的事件。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment">/* &lt;div id="myDiv"&gt;</span></span><br><span class="line"><span class="comment">  &lt;input type="button" value="Click Me" id="myBtn"&gt;</span></span><br><span class="line"><span class="comment">&lt;/div&gt;   */</span>&#125;</span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//先执行某些操作 </span></span><br><span class="line">  btn.onclick = <span class="literal">null</span>; <span class="comment">//移除事件处理程序 </span></span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML = <span class="string">"Processing..."</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="模拟事件"><a href="#模拟事件" class="headerlink" title="模拟事件"></a>模拟事件</h2><blockquote><p>可以使用JavaScript在任意时刻来触发特定的事件，而此时的事件就如同浏览器创建的事件一样。也就是说，这些事件该冒泡还会冒泡，而且照样能够导致浏览器执行已经指定的处理它们的事件处理程序。在测试Web应用程序，模拟触发事件是一种极其有用的技术。</p></blockquote><h3 id="DOM中的事件模拟"><a href="#DOM中的事件模拟" class="headerlink" title="DOM中的事件模拟"></a>DOM中的事件模拟</h3><ul><li><code>document.createEvent(string) return event</code> 返回的<code>event</code>是模拟事件的事件对象, 参数<code>string</code>是固定的字符串,可取值如下<ul><li><code>UIEvents</code>：一般化的UI事件。鼠标事件和键盘事件都继承自UI事件。DOM3级中是UIEvent。</li><li><code>MouseEvents</code>：一般化的鼠标事件。DOM3级中是MouseEvent。</li><li><code>MutationEvents</code>：一般化的DOM变动事件。DOM3级中是MutationEvent。</li><li><code>HTMLEvents</code>：一般化的HTML事件。没有对应的DOM3级事件（HTML事件被分散到其他类别中）。</li><li><code>KeyboardEvent</code>: 键盘事件</li><li><code>Event</code>: 通用事件</li></ul></li></ul><blockquote><p>IE9是目前唯一支持DOM3级键盘事件的浏览器。不过，在其他浏览器中，在现有方法的基础上，可以通过几种方式来模拟键盘事件。</p></blockquote><ul><li><p><code>event.initMouseEvent(...args)</code> 在创建了event对象之后，还需要使用与事件有关的信息对其进行初始化。每种类型的event对象都有一个特殊的方法，为它传入适当的数据就可以初始化该<code>event</code>对象。不同类型的这个方法的名字也不相同，具体要取决于<code>document.createEvent()</code>中使用的参数。</p></li><li><p><code>element.dispatchEvent(event)</code> 所有支持事件的DOM节点都支持这个方法。调用<code>element.dispatchEvent()</code>方法时，需要传入一个参数，即表示要触发事件的event对象。触发事件之后，该事件就跻身“官方事件”之列了，因而能够照样冒泡并引发相应事件处理程序的执行。</p></li></ul><h4 id="模拟鼠标事件"><a href="#模拟鼠标事件" class="headerlink" title="模拟鼠标事件"></a>模拟鼠标事件</h4><p>创建鼠标事件对象的方法是 为 <code>document.createEvent()</code>传入字符串<code>MouseEvents</code>。返回的<code>event</code>对象有一个名为 <code>event.initMouseEvent()</code>方法， 用于指定与该鼠标事件有关的信息。这个方法接收 15 个参数，</p><ul><li><code>type（字符串）</code>：表示要触发的事件类型，例如<code>click</code>。</li><li><code>bubbles（布尔值）</code>：表示事件是否应该冒泡。为精确地模拟鼠标事件，应该把这个参数设置为true。</li><li><code>cancelable（布尔值）</code>：表示事件是否可以取消。为精确地模拟鼠标事件，应该把这个参数设置为true。</li><li><code>view（AbstractView）</code>：与事件关联的视图。这个参数几乎总是要设置为<code>document.defaultView</code>。</li><li><code>detail（整数）</code>：与事件有关的详细信息。这个值一般只有事件处理程序使用，但通常都设置为0。</li><li><code>screenX（整数）</code>：事件相对于屏幕的X坐标。</li><li><code>screenY（整数）</code>：事件相对于屏幕的Y坐标。</li><li><code>clientX（整数）</code>：事件相对于视口的X坐标。</li><li><code>clientY（整数）</code>：事件想对于视口的Y坐标。</li><li><code>ctrlKey（布尔值）</code>：表示是否按下了Ctrl键。默认值为false。</li><li><code>altKey（布尔值）</code>：表示是否按下了Alt键。默认值为false。</li><li><code>shiftKey（布尔值）</code>：表示是否按下了Shift键。默认值为false。</li><li><code>metaKey（布尔值）</code>：表示是否按下了Meta键。默认值为false。</li><li><code>button（整数）</code>：表示按下了哪一个鼠标键。默认值为0。</li><li><code>relatedTarget（对象）</code>：表示与事件相关的对象。这个参数只在模拟<code>mouseover</code>事件或<code>mouseout</code>事件时使用。</li></ul><blockquote><p><code>event.initMouseEvent()</code>方法的这些参数是与鼠标事件的<code>event</code>对象所包含的属性一一对应的。其中，前4个参数对正确地激发事件至关重要，因为浏览器要用到这些参数；而剩下的所有参数只有在事件处理程序中才会用到。当把<code>event</code>对象传给<code>element.dispatchEvent(event)</code>方法时，这个对象的<code>event.target</code>属性会自动设置。下面，我们就通过一个例子来了解如何模拟对按钮的单击事件。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建事件对象 </span></span><br><span class="line"><span class="keyword">var</span> event = <span class="built_in">document</span>.createEvent(<span class="string">"MouseEvents"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化事件对象 </span></span><br><span class="line">event.initMouseEvent(<span class="string">"click"</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="built_in">document</span>.defaultView, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="number">0</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//触发事件 </span></span><br><span class="line">btn.dispatchEvent(event);</span><br></pre></td></tr></table></figure><h4 id="模拟键盘事件"><a href="#模拟键盘事件" class="headerlink" title="模拟键盘事件"></a>模拟键盘事件</h4><p>DOM3级规定，调用<code>document.createEvent()</code>并传入<code>KeyboardEvent</code>就可以创建一个键盘事件。返回的<code>event</code>事件对象会包含一个<code>event.initKeyEvent()</code>方法，这个方法接收下列参数。</p><ul><li><code>type（字符串）</code>：表示要触发的事件类型，如”keydown”。</li><li><code>bubbles（布尔值）</code>：表示事件是否应该冒泡。为精确模拟鼠标事件，应该设置为true。</li><li><code>cancelable（布尔值）</code>：表示事件是否可以取消。为精确模拟鼠标事件，应该设置为true。</li><li><code>view（AbstractView）</code>：与事件关联的视图。这个参数几乎总是要设置为<code>document.defaultView</code>。</li><li><code>key</code>：表示按下的键的键码。</li><li><code>location（整数）</code>：表示按下了哪里的键。0表示默认的主键盘，1表示左，2表示右，3表示数字键盘，4表示移动设备（即虚拟键盘），5表示手柄。</li><li><code>modifiers（字符串）</code>：空格分隔的修改键列表，如”Shift”。</li><li><code>repeat（整数）</code>：在一行中按了这个键多少次。由于DOM3级不提倡使用<code>keypress</code>事件，因此只能利用这种技术来模拟<code>keydown</code>和<code>keyup</code>事件。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> textbox = <span class="built_in">document</span>.getElementById(<span class="string">"myTextbox"</span>),event;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以 DOM3 级方式创建事件对象 </span></span><br><span class="line"><span class="comment">//先检测浏览器是否支持 DOM3 级事件；其他浏览器返回一个非标准的 KeyboardEvent 对象。</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.implementation.hasFeature(<span class="string">"KeyboardEvents"</span>, <span class="string">"3.0"</span>)) &#123;</span><br><span class="line">  event = <span class="built_in">document</span>.createEvent(<span class="string">"KeyboardEvent"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//初始化事件对象 </span></span><br><span class="line">  event.initKeyboardEvent(<span class="string">"keydown"</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="built_in">document</span>.defaultView, <span class="string">"a"</span>, <span class="number">0</span>, <span class="string">"Shift"</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//触发事件 </span></span><br><span class="line">textbox.dispatchEvent(event);</span><br></pre></td></tr></table></figure><h4 id="在Firefox模拟键盘事件"><a href="#在Firefox模拟键盘事件" class="headerlink" title="在Firefox模拟键盘事件"></a>在Firefox模拟键盘事件</h4><p>在Firefox中，调用<code>document.createEvent()</code>并传入<code>KeyEvents</code>就可以创建一个键盘事件。返回的<code>event</code>事件对象会包含一个<code>event.initKeyEvent()</code>方法，这个方法接受下列10个参数。</p><ul><li><code>type（字符串）</code>：表示要触发的事件类型，如”keydown”。</li><li><code>bubbles（布尔值）</code>：表示事件是否应该冒泡。为精确模拟鼠标事件，应该设置为true。</li><li><code>cancelable（布尔值）</code>：表示事件是否可以取消。为精确模拟鼠标事件，应该设置为true。</li><li><code>view（AbstractView）</code>：与事件关联的视图。这个参数几乎总是要设置为document.defaultView。</li><li><code>ctrlKey（布尔值）</code>：表示是否按下了Ctrl键。默认值为false。</li><li><code>altKey（布尔值）</code>：表示是否按下了Alt键。默认值为false。</li><li><code>shiftKey（布尔值）</code>：表示是否按下了Shift键。默认值为false。</li><li><code>metaKey（布尔值）</code>：表示是否按下了Meta键。默认值为false。</li><li><code>keyCode（整数）</code>：被按下或释放的键的键码。这个参数对keydown和keyup事件有用，默认值为0。</li><li><code>charCode（整数）</code>：通过按键生成的字符的ASCII编码。这个参数对keypress事件有用，默认值为0。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只适用于 Firefox </span></span><br><span class="line"><span class="keyword">var</span> textbox = <span class="built_in">document</span>.getElementById(<span class="string">"myTextbox"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建事件对象 </span></span><br><span class="line"><span class="keyword">var</span> event = <span class="built_in">document</span>.createEvent(<span class="string">"KeyEvents"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化事件对象 </span></span><br><span class="line">event.initKeyEvent(<span class="string">"keypress"</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="built_in">document</span>.defaultView, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="number">65</span>, <span class="number">65</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//触发事件 </span></span><br><span class="line">textbox.dispatchEvent(event);</span><br></pre></td></tr></table></figure><h4 id="在其他浏览器中模拟键盘事件"><a href="#在其他浏览器中模拟键盘事件" class="headerlink" title="在其他浏览器中模拟键盘事件"></a>在其他浏览器中模拟键盘事件</h4><p>在其他浏览器中，则需要创建一个通用的事件，然后再向事件对象中添加键盘事件特有的信息。在此必须要使用通用事件，而不能使用UI事件，因为UI事件不允许向event对象中再添加新属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在不支持DOM3的浏览器中模拟键盘事件</span></span><br><span class="line"><span class="keyword">var</span> textbox = <span class="built_in">document</span>.getElementById(<span class="string">"myTextbox"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建事件对象 </span></span><br><span class="line"><span class="keyword">var</span> event = <span class="built_in">document</span>.createEvent(<span class="string">"Events"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化事件对象 </span></span><br><span class="line">event.initEvent(type, bubbles, cancelable);</span><br><span class="line">event.view = <span class="built_in">document</span>.defaultView;</span><br><span class="line">event.altKey = <span class="literal">false</span>;</span><br><span class="line">event.ctrlKey = <span class="literal">false</span>;</span><br><span class="line">event.shiftKey = <span class="literal">false</span>;</span><br><span class="line">event.metaKey = <span class="literal">false</span>;</span><br><span class="line">event.keyCode = <span class="number">65</span>;</span><br><span class="line">event.charCode = <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//触发事件 </span></span><br><span class="line">textbox.dispatchEvent(event);</span><br></pre></td></tr></table></figure><h4 id="模拟其他事件"><a href="#模拟其他事件" class="headerlink" title="模拟其他事件"></a>模拟其他事件</h4><ul><li>模拟HTML事件</li></ul><blockquote><p>要模拟HTML事件，同样需要先创建一个<code>event</code>对象——通过<code>document.createEvent(&quot;HTMLEvents&quot;)</code>，然后再使用这个对象的<code>event.initEvent()</code>方法来初始化它即可</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> event = <span class="built_in">document</span>.createEvent(<span class="string">"HTMLEvents"</span>);</span><br><span class="line">event.initEvent(<span class="string">"focus"</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">target.dispatchEvent(event);</span><br></pre></td></tr></table></figure><ul><li>模拟变动事件: 变动事件应用太少,详情查阅高程p409</li></ul><blockquote><p>浏览器中很少使用变动事件和 HTML 事件，因为使用它们会受到一些限制。</p></blockquote><h4 id="自定义DOM事件"><a href="#自定义DOM事件" class="headerlink" title="自定义DOM事件"></a>自定义DOM事件</h4><p>DOM3级还定义了“自定义事件”。自定义事件不是由DOM原生触发的，它的目的是让开发人员创建自己的事件。要创建新的自定义事件，可以调用<code>document.createEvent(&quot;CustomEvent&quot;)</code>。返回的<code>event</code>对象有一个名为<code>event.initCustomEvent()</code>的方法，接收如下4个参数。</p><ul><li><code>type（字符串）</code>：触发的事件类型，例如”keydown”。</li><li><code>bubbles（布尔值）</code>：表示事件是否应该冒泡。</li><li><code>cancelable（布尔值）</code>：表示事件是否可以取消。</li><li><code>detail（对象）</code>：任意值，保存在event对象的detail属性中。</li></ul><blockquote><p>可以像分派其他事件一样在 DOM 中分派创建的自定义事件对象。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>),</span><br><span class="line">  event;</span><br><span class="line"></span><br><span class="line">EventUtil.addHandler(div, <span class="string">"myevent"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"DIV: "</span> + event.detail);</span><br><span class="line">&#125;);</span><br><span class="line">EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"myevent"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  alert(<span class="string">"DOCUMENT: "</span> + event.detail);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.implementation.hasFeature(<span class="string">"CustomEvents"</span>, <span class="string">"3.0"</span>)) &#123;</span><br><span class="line">  event = <span class="built_in">document</span>.createEvent(<span class="string">"CustomEvent"</span>);</span><br><span class="line">  event.initCustomEvent(<span class="string">"myevent"</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="string">"Hello world!"</span>);</span><br><span class="line">  div.dispatchEvent(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个例子创建了一个冒泡事件<code>myevent</code>。而<code>event.detail</code>的值被设置成了一个简单的字符串，然后在<code>&lt;div&gt;</code>元素和<code>document</code>上侦听这个事件。因为<code>event.initCustomEvent()</code>方法已经指定这个事件应该冒泡，所以浏览器会负责将事件向上冒泡到<code>document</code>。<br>支持自定义DOM事件的浏览器有IE9+和Firefox6+。</p></blockquote><h3 id="IE中的事件模拟"><a href="#IE中的事件模拟" class="headerlink" title="IE中的事件模拟"></a>IE中的事件模拟</h3><p>在IE8及之前版本中模拟事件有类似但不一样的方式,这部分内容应用较少,详情查看高程p410</p><h2 id="EventUtil代码"><a href="#EventUtil代码" class="headerlink" title="EventUtil代码"></a>EventUtil代码</h2><blockquote><p>附上本章总结的EventUtil代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = &#123;</span><br><span class="line">  <span class="comment">// 事件绑定</span></span><br><span class="line">  addHandler: <span class="function"><span class="keyword">function</span> (<span class="params">element, type, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.addEventListener) &#123;</span><br><span class="line">      element.addEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) &#123;</span><br><span class="line">      element.attachEvent(<span class="string">"on"</span> + type, handler);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      element[<span class="string">"on"</span> + type] = handler;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 事件解绑</span></span><br><span class="line">  removeHandler: <span class="function"><span class="keyword">function</span> (<span class="params">element, type, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.removeEventListener) &#123;</span><br><span class="line">      element.removeEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.detachEvent) &#123;</span><br><span class="line">      element.detachEvent(<span class="string">"on"</span> + type, handler);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      element[<span class="string">"on"</span> + type] = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获得事件对象</span></span><br><span class="line">  getEvent: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> event ? event : <span class="built_in">window</span>.event;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取事件触发对象</span></span><br><span class="line">  getTarget: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> event.target || event.srcElement;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 阻止浏览器默认事件</span></span><br><span class="line">  preventDefault: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.preventDefault) &#123;</span><br><span class="line">      event.preventDefault();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      event.returnValue = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 取消事件流</span></span><br><span class="line">  stopPropagation: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.stopPropagation) &#123;</span><br><span class="line">      event.stopPropagation();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取鼠标键值</span></span><br><span class="line">  getButton: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.implementation.hasFeature(<span class="string">"MouseEvents"</span>, <span class="string">"2.0"</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> event.button;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">switch</span> (event.button) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 获得mouseover,mouseout的相关元素</span></span><br><span class="line">  getRelatedTarget: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.relatedTarget) &#123;</span><br><span class="line">      <span class="keyword">return</span> event.relatedTarget;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.toElement) &#123;</span><br><span class="line">      <span class="keyword">return</span> event.toElement;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.fromElement) &#123;</span><br><span class="line">      <span class="keyword">return</span> event.fromElement;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 得到鼠标滚动事件的event.wheelData的兼容代码</span></span><br><span class="line">  getWheelDelta: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.wheelDelta) &#123;</span><br><span class="line">      <span class="keyword">return</span> (client.engine.opera &amp;&amp; client.engine.opera &lt; <span class="number">9.5</span> ? -event.wheelDelta : event.wheelDelta);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> -event.detail * <span class="number">40</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 获得按键字符编码</span></span><br><span class="line">  getCharCode: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> event.charCode == <span class="string">"number"</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> event.charCode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> event.keyCode;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 剪贴板内容获取和赋值</span></span><br><span class="line">  getClipboardText: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> clipboardData = (event.clipboardData || <span class="built_in">window</span>.clipboardData);</span><br><span class="line">    <span class="keyword">return</span> clipboardData.getData(<span class="string">"text"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  setClipboardText: <span class="function"><span class="keyword">function</span> (<span class="params">event, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.clipboardData) &#123;</span><br><span class="line">      event.clipboardData.setData(<span class="string">"text/plain"</span>, value);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.clipboardData) &#123;</span><br><span class="line">      <span class="built_in">window</span>.clipboardData.setData(<span class="string">"text"</span>, value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;事件&quot;&gt;&lt;a href=&quot;#事件&quot; class=&quot;headerlink&quot; title=&quot;事件&quot;&gt;&lt;/a&gt;事件&lt;/h1&gt;&lt;p&gt;JavaScript 与 HTML 之间的交互是通过&lt;code&gt;事件&lt;/code&gt;实现的。&lt;code&gt;事件&lt;/code&gt;，就是文档或浏览器窗
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正反馈系列:《JavaScript高级程序设计》DOM2 &amp; DOM3</title>
    <link href="http://yoursite.com/2017/12/24/%E9%AB%98%E7%A8%8Bvol7-dom2-dom3/"/>
    <id>http://yoursite.com/2017/12/24/高程vol7-dom2-dom3/</id>
    <published>2017-12-24T01:13:42.000Z</published>
    <updated>2018-03-21T10:23:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DOM变化"><a href="#DOM变化" class="headerlink" title="DOM变化"></a>DOM变化</h2><h3 id="node-isSameNode-node-isEqualNode"><a href="#node-isSameNode-node-isEqualNode" class="headerlink" title="node.isSameNode,node.isEqualNode"></a>node.isSameNode,node.isEqualNode</h3><ul><li><code>node.isSameNode(node1) return boolean</code> node与node1引用的是同一个对象,返回true</li><li><code>node.isEqualNode(node1) return boolean</code> node与node1两个节点是相同的类型,具有相等的属性(nodeName,nodeValue灯灯),且它们的attribute与childNodes属性也相等(相同位置包含相同的值),返回true</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div1 = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>); </span><br><span class="line">div1.setAttribute(<span class="string">"class"</span>, <span class="string">"box"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> div2 = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>); </span><br><span class="line">div2.setAttribute(<span class="string">"class"</span>, <span class="string">"box"</span>);</span><br><span class="line"></span><br><span class="line">alert(div1.isSameNode(div1)); <span class="comment">//true </span></span><br><span class="line">alert(div1.isEqualNode(div2)); <span class="comment">//true </span></span><br><span class="line">alert(div1.isSameNode(div2)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="element-setUserData-element-getUserData"><a href="#element-setUserData-element-getUserData" class="headerlink" title="element.setUserData(),element.getUserData()"></a>element.setUserData(),element.getUserData()</h3><ul><li><p><code>element.setUserData(key,value,callback(operation,key,value,src,dest))</code></p><ul><li><code>operation</code> 表示操作类型的数值(1复制,2导入,3删除,4重命名)</li><li><code>key</code> 数据键</li><li><code>value</code> 数据值</li><li><code>src</code> 源节点,删除节点时,src == null</li><li><code>dest</code> 目标节点, 除复制节点时, dest == null</li></ul></li></ul><blockquote><p>此方法针对DOM节点添加额外数据引入了新方法. <code>setUserData()</code>会将数据指定给节点<br><code>callback</code>将在带有数据的节点被复制,删除,重命名,或引入一个文档时被调用,用callback事先决定在上述操作发生时如何处理用户数据</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">div.setUserData(<span class="string">"name"</span>, <span class="string">"Nicholas"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">operation, key, value, src, dest</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (operation == <span class="number">1</span>) &#123;</span><br><span class="line">    dest.setUserData(key, value, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newDiv = div.cloneNode(<span class="literal">true</span>);</span><br><span class="line">alert(newDiv.getUserData(<span class="string">"name"</span>)); <span class="comment">//"Nicholas"</span></span><br></pre></td></tr></table></figure><blockquote><p>这里，先创建了一个<code>&lt;div&gt;</code>元素，然后又为它添加了一些数据（用户数据）。在使用 cloneNode() 复制这个元素时，就会调用处理函数，从而将数据自动复制到了副本节点。结果在通过副本节点调用 getUserData()时，就会返回与原始节点中包含的相同的值。</p></blockquote><ul><li><code>element.getUserData(key)</code> 取得<code>setUserData</code>输入的对应<code>value</code>值</li></ul><h3 id="frame-contentDocument-frame-contentWindow-document"><a href="#frame-contentDocument-frame-contentWindow-document" class="headerlink" title="frame.contentDocument,frame.contentWindow.document"></a>frame.contentDocument,frame.contentWindow.document</h3><p>框架和内嵌框架分别用 <code>HTMLFrameElement</code> 和 <code>HTMLIFrameElement</code> 表示，它们在 DOM2 级中都有 了一个新属性，名叫 <code>contentDocument</code>。这个属性包含一个指针，指向表示框架内容的文档对象。</p><p>由于 <code>contentDocument</code> 属性是 Document 类型的实例，因此可以像使用<code>document对象</code>一样使用它，包括所有属性和方法</p><p>IE8之前不支持<code>contentDocument</code>,用<code>contentWindow.document</code>代替(所有浏览器都支持contentWindow属性)</p><blockquote><p>兼容代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">"myIframe"</span>); </span><br><span class="line"><span class="keyword">var</span> iframeDoc = iframe.contentDocument || iframe.contentWindow.document;</span><br></pre></td></tr></table></figure><h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><h3 id="element-style特性"><a href="#element-style特性" class="headerlink" title="element.style特性"></a>element.style特性</h3><p>既可以按照css名访问css特性,也可以调用下面的属性和方法</p><ul><li><code>cssText</code>：通过它能够访问到 style 特性中的 CSS 代码,重新赋值将重写元素行内css </li><li><code>length</code>：应用给元素的 CSS 属性的数量。 </li><li><code>parentRule</code>：表示 CSS 信息的 CSSRule 对象。本节后面将讨论 CSSRule 类型。 </li><li><code>getPropertyCSSValue(propertyName)</code>：返回包含给定属性值的 CSSValue 对象。此对象两个属性分别为<code>cssText</code>,该属性与<code>getPropertyValue()</code>方法返回值相同,<code>cssValueType</code>是一个数值常量,表示值类型:0表示继承的值,1表示基本的值,2表示值列表,3表示自定义的值, </li><li><code>getPropertyPriority(propertyName)</code>：如果给定的属性使用了!important 设置，则返回 “important”；否则，返回空字符串。 </li><li><code>getPropertyValue(propertyName)</code>：返回给定属性的字符串值。 </li><li><code>item(index)</code>：返回给定位置的 CSS 属性的名称,也可以用方括号语法<code>style[i]</code>。 </li><li><code>removeProperty(propertyName)</code>：从样式中删除给定属性。 </li><li><code>setProperty(propertyName,value,priority)</code>：将给定属性设置为相应的值，并加上优先 权标志（”important”或者一个空字符串）。</li></ul><blockquote><p>CSSStyleDeclaration实例,只包含行内style定义的信息,短划线转驼峰,<code>float</code>转<code>cssFloat</code>,键值对,值是css对应的字符串,可读可写</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myDiv = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置背景颜色 </span></span><br><span class="line">myDiv.style.backgroundColor = <span class="string">"red"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//改变大小 </span></span><br><span class="line">myDiv.style.width = <span class="string">"100px"</span>; </span><br><span class="line">myDiv.style.height = <span class="string">"200px"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定边框 </span></span><br><span class="line">myDiv.style.border = <span class="string">"1px solid black"</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可读</span></span><br><span class="line">alert(myDiv.style.backgroundColor); </span><br><span class="line">alert(myDiv.style.width); </span><br><span class="line">alert(myDiv.style.height);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> prop, value, i, len;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, len = myDiv.style.length; i &lt; len; i++) &#123;</span><br><span class="line">  prop = myDiv.style[i]; <span class="comment">//或者 myDiv.style.item(i)</span></span><br><span class="line">  value = myDiv.style.getPropertyValue(prop);</span><br><span class="line">  alert(prop + <span class="string">" : "</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> prop, value, i, len;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, len = myDiv.style.length; i &lt; len; i++) &#123;</span><br><span class="line">  prop = myDiv.style[i]; <span class="comment">//或者 myDiv.style.item(i)</span></span><br><span class="line">  value = myDiv.style.getPropertyCSSValue(prop);</span><br><span class="line">  alert(prop + <span class="string">" : "</span> + value.cssText + <span class="string">" ("</span> + value.cssValueType + <span class="string">")"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实际开发中,<code>getPropertyCSSValue()</code>使用得比 <code>getPropertyValue()</code>少得多</p></blockquote><h3 id="document-defaultView-getComputedStyle"><a href="#document-defaultView-getComputedStyle" class="headerlink" title="document.defaultView.getComputedStyle()"></a>document.defaultView.getComputedStyle()</h3><p><code>document.defaultView.getComputedStyle(element,null/:after/:before) return CSSStyleDeclaration</code></p><blockquote><p>该方法将各种引入的css经一并计算,返回一个element元素的css属性键值对.只读,若要设置应通过<code>element.style</code>属性设置.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myDiv = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line"><span class="keyword">var</span> computedStyle = <span class="built_in">document</span>.defaultView.getComputedStyle(myDiv, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">alert(computedStyle.backgroundColor); <span class="comment">// "red"</span></span><br><span class="line">alert(computedStyle.width); <span class="comment">// "100px"</span></span><br><span class="line">alert(computedStyle.height); <span class="comment">// "200px"</span></span><br><span class="line">alert(computedStyle.border); <span class="comment">//"1px solid black"</span></span><br></pre></td></tr></table></figure><blockquote><p>IE不支持<code>getComputedStyle</code>方法,有一个类似概念,每个具有<code>style</code>属性的元素还有一个<code>currentStyle</code>属性</p></blockquote><p><code>element.currentStyle</code>属性,是一个与<code>getComputedStyle</code>返回值一个套路的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myDiv = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line"><span class="keyword">var</span> computedStyle = myDiv.currentStyle;</span><br><span class="line">alert(computedStyle.backgroundColor); <span class="comment">//"red"</span></span><br><span class="line">alert(computedStyle.width); <span class="comment">//"100px"</span></span><br><span class="line">alert(computedStyle.height); <span class="comment">//"200px"</span></span><br><span class="line">alert(computedStyle.border); <span class="comment">//undefined</span></span><br><span class="line">alert(computedStyle.borderLeftWidth); <span class="comment">//"1px"</span></span><br></pre></td></tr></table></figure><h3 id="操作样式表"><a href="#操作样式表" class="headerlink" title="操作样式表"></a>操作样式表</h3><blockquote><p>js除了提供了上述元素的css读写api,还提供了api可以直接操作样式表<br>这部分知识简单而又凌乱,且在开发过程中应用不广泛, 这里只做结构性介绍, 详情查阅高程p317</p></blockquote><p><code>CssStyleSheet</code>类型表示样式表,继承自<code>StyleSheet</code>,应用于文档的样式表示通过<code>document.styleSheets</code>集合表示,这是一个伪数组,有<code>length</code>属性,可以使用<code>方括号</code>语法或<code>.item(index)</code>方法来访问每一项,每一项的值都是一个<code>CssStyleSheet</code>.</p><p><code>CssRule</code>对象表示样式表中的每条规则,最常见的<code>CssRule</code>类型就是<code>CssStyleRule</code>类型(其他规则还有@import,@font-face,@page,@charset等),代表<code>css样式语句</code>,<code>CssRule</code>中的<code>style</code>属性像<code>element.style</code>属性一样存放着css键值对.</p><p><code>sheet.insertRule()</code>方法可以创建<code>css规则</code>(css语句),<code>sheet.deleteRule()</code>方法可以删除<code>css规则</code>(css语句), <strong>上述说的都不推荐在开发中使用</strong>,请替换为第10章中的<code>动态加载样式表</code>技术.</p><h3 id="元素大小"><a href="#元素大小" class="headerlink" title="元素大小"></a>元素大小</h3><h3 id="offset-dimension"><a href="#offset-dimension" class="headerlink" title="offset dimension"></a>offset dimension</h3><ul><li><code>element.offsetParent</code>属性,是一个<strong>只读</strong>属性.<ol><li>返回一个指向最近的（closest，指包含层级上的最近）包含该元素的<code>定位元素</code>。</li><li>如果没有定位的元素，则 offsetParent 为最近的 <code>table</code>, <code>table cell</code> 或<code>根元素</code>（标准模式下为 <code>html</code>；quirks 模式下为 <code>body</code>）。当元素的 style.display 设置为 <code>none</code> 时，offsetParent 返回 <code>null</code></li></ol></li><li><p><code>element.offsetWidth</code>,<code>element.offsetHeight</code>,元素水平或垂直方向上占用空间的大笑,以像素计,包括元素的高度,(可见的)水平滚动条的高度,上下边框的高度</p></li><li><p><code>element.offsetLeft</code>,<code>element.offsetTop</code>, 元素边框外部至<code>offsetParent</code>属性指向的元素<code>内边框</code>间的距离</p></li></ul><p><img src="https://i.loli.net/2017/12/24/5a3eff151e43d.jpg" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 得到元素在页面上的左偏移量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElementLeft</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> actualLeft = element.offsetLeft;</span><br><span class="line">  <span class="keyword">var</span> current = element.offsetParent;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (current !== <span class="literal">null</span>) &#123;</span><br><span class="line">    actualLeft += current.offsetLeft;</span><br><span class="line">    current = current.offsetParent;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> actualLeft;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 得到元素在页面上的上偏移量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElementTop</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> actualTop = element.offsetTop;</span><br><span class="line">  <span class="keyword">var</span> current = element.offsetParent;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (current !== <span class="literal">null</span>) &#123;</span><br><span class="line">    actualTop += current.offsetTop;</span><br><span class="line">    current = current.offsetParent;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> actualTop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>些偏移量属性都是只读的，而且每次访问它们都需要重新计算。因此，应该尽量避免重复访问这些属性；如果需要重复使用其中某些属性的值，可以将它们保存在局部变量中，以提高性能。</p></blockquote><h3 id="client-dimension"><a href="#client-dimension" class="headerlink" title="client dimension"></a>client dimension</h3><ul><li><code>element.clientWidth</code>,<code>element.clientHeight</code>: 元素的内边距+内容所占尺寸(不带边框,不带滚动条的大小)</li></ul><p><img src="https://i.loli.net/2017/12/24/5a3eff15ac240.jpg" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回浏览器视口大小(Viewport:html或body的大小)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getViewport</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.compatMode == <span class="string">"BackCompat"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      width: <span class="built_in">document</span>.body.clientWidth,</span><br><span class="line">      height: <span class="built_in">document</span>.body.clientHeight</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      width: <span class="built_in">document</span>.documentElement.clientWidth,</span><br><span class="line">      height: <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>客户区大小只读,每次访问要重新计算</p></blockquote><h3 id="scroll-dimention"><a href="#scroll-dimention" class="headerlink" title="scroll dimention"></a>scroll dimention</h3><blockquote><p>有些元素(例如html元素)即使没有执行任何代码,也嫩自动的添加滚动条,但另外一些元素,则需要通过css overflow属性进行设置才能滚动</p></blockquote><ul><li><code>element.scrollHeight</code>, 在没有滚动条的情况下,元素内容的实际高度</li><li><code>element.scrollWidth</code>, 在没有滚动条的情况下,元素内容的实际宽度</li><li><code>element.scrollLeft</code>, 被隐藏在内容区域左侧的像素数,通过设置此属性可改变滚动位置</li><li><code>element.scrollTop</code>, 被隐藏在内容区域上方的像素数,通过设置此属性可改变滚动位置</li></ul><p><img src="https://i.loli.net/2017/12/24/5a3eff1601793.jpg" alt=""><br><img src="media/15139250934130/15139549207969.jpg" alt=""></p><blockquote><p><code>&lt;html&gt;</code>元素是在Web浏览器的视口中滚动的元素(IE6之前运行在混杂模式下是<code>&lt;body&gt;</code>元素),因此,带有垂直滚动条的页面总高度是<code>document.documentElement.scrollHeight</code><br>对于不包含滚动条的视口或页面而言,<code>scrollWidth,scrollHeight</code>与<code>clientWidth,clientHeight</code>之间的关系十分不清晰,基于document.documentElement查看这些属性会发生不同浏览器的不一致性</p></blockquote><ul><li>Firefox 中这两组属性始终都是相等的，但大小代表的是文档内容区域的实际尺寸，而非视口的尺寸。 </li><li>Opera、Safari 3.1 及更高版本、Chrome 中的这两组属性是有差别的，其中 scrollWidth 和 scrollHeight 等于视口大小，而 clientWidth 和 clientHeight 等于文档内容区域的大小。</li><li>IE（在标准模式）中的这两组属性不相等，其中 scrollWidth 和 scrollHeight 等于文档内容区域的大小，而 clientWidth 和 clientHeight 等于视口大小。</li></ul><blockquote><p>所以,在确定文档的总高度时（包括基于视口的最小高度时），必须取得 scrollWidth/clientWidth 和scrollHeight/clientHeight 中的最大值，才能保证在跨浏览器的环境下得到精确的结果。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文档总高度</span></span><br><span class="line"><span class="keyword">var</span> docHeight = <span class="built_in">Math</span>.max(<span class="built_in">document</span>.documentElement.scrollHeight, <span class="built_in">document</span>.documentElement.clientHeight);</span><br><span class="line"><span class="comment">// 文档总宽度</span></span><br><span class="line"><span class="keyword">var</span> docWidth = <span class="built_in">Math</span>.max(<span class="built_in">document</span>.documentElement.scrollWidth, <span class="built_in">document</span>.documentElement.clientWidth);</span><br><span class="line"><span class="comment">// 如果是ie,上面代码需要用document.body代替document.documentElement</span></span><br></pre></td></tr></table></figure><h3 id="element-getBoundingClientRect"><a href="#element-getBoundingClientRect" class="headerlink" title="element.getBoundingClientRect()"></a>element.getBoundingClientRect()</h3><p><code>element.getBoundingClientRect() return rectObj</code></p><blockquote><p>rectObj包含4个属性, <code>left</code>,<code>top</code>,<code>right</code>,<code>bottom</code>,分别表示了下图的距离</p></blockquote><p><img src="https://i.loli.net/2017/12/24/5a3eff15e39d5.png" alt="rect"></p><blockquote><p>IE8以及更早版本中,位于(0,0)处元素的位置会返回(2,2),需要做浏览器兼容,当浏览器是IE时,要从测量值里<code>-2</code>,再减去视口(html标签)的<code>scrollTop</code>,防止调用这个函数时窗口被滚动了.</p><p>完整兼容代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElementLeft</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> actualLeft = element.offsetLeft;</span><br><span class="line">  <span class="keyword">var</span> current = element.offsetParent;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (current !== <span class="literal">null</span>) &#123;</span><br><span class="line">    actualLeft += current.offsetLeft;</span><br><span class="line">    current = current.offsetParent;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> actualLeft;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElementTop</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> actualTop = element.offsetTop;</span><br><span class="line">  <span class="keyword">var</span> current = element.offsetParent;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (current !== <span class="literal">null</span>) &#123;</span><br><span class="line">    actualTop += current.offsetTop;</span><br><span class="line">    current = current.offsetParent;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> actualTop;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getBoundingClientRect兼容代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBoundingClientRect</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line">  <span class="keyword">var</span> scrollLeft = <span class="built_in">document</span>.documentElement.scrollLeft;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (element.getBoundingClientRect) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">arguments</span>.callee.offset != <span class="string">"number"</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> temp = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">      temp.style.cssText = <span class="string">"position:absolute;left:0;top:0;"</span>;</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(temp);</span><br><span class="line">      <span class="built_in">arguments</span>.callee.offset = -temp.getBoundingClientRect().top - scrollTop;</span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(temp);</span><br><span class="line">      temp = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> rect = element.getBoundingClientRect();</span><br><span class="line">    <span class="keyword">var</span> offset = <span class="built_in">arguments</span>.callee.offset;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      left: rect.left + offset,</span><br><span class="line">      right: rect.right + offset,</span><br><span class="line">      top: rect.top + offset,</span><br><span class="line">      bottom: rect.bottom + offset</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> actualLeft = getElementLeft(element);</span><br><span class="line">    <span class="keyword">var</span> actualTop = getElementTop(element);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      left: actualLeft - scrollLeft,</span><br><span class="line">      right: actualLeft + element.offsetWidth - scrollLeft,</span><br><span class="line">      top: actualTop - scrollTop,</span><br><span class="line">      bottom: actualTop + element.offsetHeight - scrollTop</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><blockquote><p>下面两个遍历方法不用深入,因为ES6的Iterator方法已经很成熟了,若要深入详情查询高程p328</p></blockquote><h3 id="NodeIterator类型"><a href="#NodeIterator类型" class="headerlink" title="NodeIterator类型"></a>NodeIterator类型</h3><p><code>document.createNodeIterator(root,whatToshow,filter,entityReferenceExpansion) return nodeIterator</code></p><ul><li><code>root</code>,搜索起始节点</li><li><code>whatToShow</code> 可以用按位或操作符来组合多个选项,比如<code>NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_TEXT</code><ul><li><code>NodeFilter.SHOW_ALL</code>：显示所有类型的节点。</li><li><code>NodeFilter.SHOW_ELEMENT</code>：显示元素节点。</li><li><code>NodeFilter.SHOW_TEXT</code>：显示文本节点。</li><li><code>NodeFilter.SHOW_COMMENT</code>：显示注释节点。</li><li><code>NodeFilter.SHOW_DOCUMENT_TYPE</code>：显示文档类型节点。</li></ul></li><li><code>filter</code> 是一个只有一个方法<code>acceptNode()</code>的对象,或一个类似<code>acceptNode()</code>的匿名函数,或 <code>null</code><ul><li><code>acceptNode(node)</code>,若返回需要的节点,该方法返回<code>NodeFilter.FILTER_ACCEPT</code>,否则返回<code>NodeFilter.FILTER_SKIP</code></li></ul></li><li><code>entityReferExpansion</code>, false即可,这个参数在html页面中没有用</li><li><code>nodeIterator</code>,主要有两个方法,用于前进一步或后退一步<ul><li><code>nodeIterator.nextNode()</code> 前进一步,前进到方向上最后一个节点返回<code>null</code></li><li><code>nodeIterator.previousNode()</code> 后退一步,后退到方向上最后一个节点返回<code>null</code></li></ul></li></ul><blockquote><p>两个例子</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历div中所有元素</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span><br><span class="line"><span class="keyword">var</span> iterator = <span class="built_in">document</span>.createNodeIterator(div, NodeFilter.SHOW_ELEMENT, <span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">var</span> node = iterator.nextNode();</span><br><span class="line"><span class="keyword">while</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">  alert(node.tagName); <span class="comment">//输出标签名</span></span><br><span class="line">  node = iterator.nextNode();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span><br><span class="line"><span class="keyword">var</span> filter = <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> node.tagName.toLowerCase() == <span class="string">"li"</span> ?</span><br><span class="line">    NodeFilter.FILTER_ACCEPT :</span><br><span class="line">    NodeFilter.FILTER_SKIP;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iterator = <span class="built_in">document</span>.createNodeIterator(div, NodeFilter.SHOW_ELEMENT, filter, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">var</span> node = iterator.nextNode();</span><br><span class="line"><span class="keyword">while</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">  alert(node.tagName);<span class="comment">//输出标签名</span></span><br><span class="line">  node = iterator.nextNode();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TreeWalker类型"><a href="#TreeWalker类型" class="headerlink" title="TreeWalker类型"></a>TreeWalker类型</h3><blockquote><p><code>NodeIterator</code>更高级的版本,返回的实例除了<code>nextNode()</code>和<code>previousNode()</code>外,还提供了不同方向上遍历DOM结构的方法</p></blockquote><p><code>document.createTreeWalker(root,whatToshow,filter,entityReferenceExpansion) return treeWalker</code>,四个参数与<code>NodeIterator</code>中相同,返回值<code>treeWalker</code>还扩展下面的方法</p><ul><li><code>parentNode()</code>：遍历到当前节点的父节点； </li><li><code>firstChild()</code>：遍历到当前节点的第一个子节点； </li><li><code>lastChild()</code>：遍历到当前节点的最后一个子节点； </li><li><code>nextSibling()</code>：遍历到当前节点的下一个同辈节点； </li><li><code>previousSibling()</code>：遍历到当前节点的上一个同辈节点。</li></ul><blockquote><p><code>filter</code>与<code>NodeIterator</code>有些小差异,增加了返回值<code>NodeFilter.FILTER_REJECT</code>,返回这个值代表跳过整个相应节点及该节点整个子树,而<code>NodeFilter.FILTER_SKIP</code>则只跳过相应节点<br>返回对象<code>treeWalker</code>还有一个属性<code>currentNode</code>,表示任何遍历方法在上一次便利中返回的节点,通过这个属性可以修改遍历继续进行的起点,如下例</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* &lt;div id="div1"&gt;</span></span><br><span class="line"><span class="comment">    &lt;p&gt;</span></span><br><span class="line"><span class="comment">      &lt;b&gt;Hello&lt;/b&gt; world!&lt;/p&gt;</span></span><br><span class="line"><span class="comment">    &lt;ul&gt;</span></span><br><span class="line"><span class="comment">      &lt;li&gt;List item 1&lt;/li&gt;</span></span><br><span class="line"><span class="comment">      &lt;li&gt;List item 2&lt;/li&gt;</span></span><br><span class="line"><span class="comment">      &lt;li&gt;List item 3&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">&lt;/div&gt; */</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span><br><span class="line"><span class="keyword">var</span> walker = <span class="built_in">document</span>.createTreeWalker(div, NodeFilter.SHOW_ELEMENT, <span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">walker.firstChild();<span class="comment">//转到&lt;p&gt;</span></span><br><span class="line">walker.nextSibling(); <span class="comment">//转到&lt;ul&gt;</span></span><br><span class="line"><span class="keyword">var</span> node = walker.firstChild();</span><br><span class="line"><span class="keyword">while</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="comment">//转到第一个&lt;li&gt;</span></span><br><span class="line">  alert(node.tagName);</span><br><span class="line">  node = walker.nextSibling();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> node = walker.nextNode();</span><br><span class="line">alert(node === walker.currentNode);<span class="comment">//true </span></span><br><span class="line">walker.currentNode = <span class="built_in">document</span>.body;<span class="comment">//修改起点</span></span><br></pre></td></tr></table></figure><blockquote><p>IE不支持<code>TreeWalker</code></p></blockquote><h2 id="范围-富文本编辑器基础"><a href="#范围-富文本编辑器基础" class="headerlink" title="范围(富文本编辑器基础)"></a>范围(富文本编辑器基础)</h2><h3 id="DOM中的范围"><a href="#DOM中的范围" class="headerlink" title="DOM中的范围"></a>DOM中的范围</h3><p>DOM2 级在 Document 类型中定义了 <code>createRange()</code>方法。在兼容 DOM 的浏览器中，这个方法属于 <code>document对象</code></p><h3 id="document-createRange"><a href="#document-createRange" class="headerlink" title="document.createRange()"></a>document.createRange()</h3><p><code>document.createRange() return range</code> ,返回的<code>range</code>对象代表一个DOM选中范围,有如下属性</p><ul><li><code>startContainer</code>：包含范围起点的节点（即选区中第一个节点的父节点）。 </li><li><code>startOffset</code>：范围在 startContainer 中起点的偏移量。如果 startContainer 是文本节点、注释节点或 CDATA 节点，那么 startOffset 就是范围起点之前跳过的字符数量。否则，startOffset 就是范围中第一个子节点的索引。 </li><li><code>endContainer</code>：包含范围终点的节点（即选区中最后一个节点的父节点）。 </li><li><code>endOffset</code>：范围在 endContainer 中终点的偏移量（与 startOffset 遵循相同的取值规则)。 </li><li><code>commonAncestorContainer</code>：startContainer 和 endContainer 共同的祖先节点在文档树 中位置最深的那个。</li></ul><h3 id="range对象-基础方法"><a href="#range对象-基础方法" class="headerlink" title="range对象,基础方法"></a>range对象,基础方法</h3><ul><li><code>range.selectNode(node)</code>,选择整个节点，包括其子节点；</li><li><code>range.selectNodeContents(node)</code>,只选择节点的子节点</li></ul><blockquote><p>下面几个方法用的比较少</p></blockquote><ul><li><code>setStartBefore(refNode)</code>：将范围的起点设置在refNode之前，因此refNode也就是范围选区中的第一个子节点。同时会将startContainer属性设置为refNode.parentNode，将startOffset属性设置为refNode在其父节点的childNodes集合中的索引。</li><li><code>setStartAfter(refNode)</code>：将范围的起点设置在refNode之后，因此refNode也就不在范围之内了，其下一个同辈节点才是范围选区中的第一个子节点。同时会将startContainer属性设置为refNode.parentNode，将startOffset属性设置为refNode在其父节点的childNodes集合中的索引加1。</li><li><code>setEndBefore(refNode)</code>：将范围的终点设置在refNode之前，因此refNode也就不在范围之内了，其上一个同辈节点才是范围选区中的最后一个子节点。同时会将endContainer属性设置为refNode.parentNode，将endOffset属性设置为refNode在其父节点的childNodes集合中的索引。</li><li><code>setEndAfter(refNode)</code>：将范围的终点设置在refNode之后，因此refNode也就是范围选区中的最后一个子节点。同时会将endContainer属性设置为refNode.parentNode，将endOffset属性设置为refNode在其父节点的childNodes集合中的索引加1。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 示例通用HTML代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">b</span>&gt;</span> world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> range1 = <span class="built_in">document</span>.createRange();</span><br><span class="line">range2 = <span class="built_in">document</span>.createRange();</span><br><span class="line">p1 = <span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>);</span><br><span class="line">range1.selectNode(p1);</span><br><span class="line">range2.selectNodeContents(p1);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/12/24/5a3eff15e74db.jpg" alt=""></p><blockquote><p>在调用selectNode()时，startContainer、endContainer和commonAncestorContainer都等于传入节点的父节点，也就是这个例子中的document.body。而startOffset属性等于给定节点在其父节点的childNodes集合中的索引（在这个例子中是1——因为兼容DOM的浏览器将空格算作一个文本节点），endOffset等于startOffset加1（因为只选择了一个节点）。<br>在调用selectNodeContents()时，startContainer、endContainer和commonAncestorContainer等于传入的节点，即这个例子中的</p><p>元素。而startOffset属性始终等于0，因为范围从给定节点的第一个子节点开始。最后，endOffset等于子节点的数量（node.childNodes.length），在这个例子中是2。</p></blockquote><h3 id="range-setStart-range-setEnd-实现DOM复杂选择"><a href="#range-setStart-range-setEnd-实现DOM复杂选择" class="headerlink" title="range.setStart(),range.setEnd()实现DOM复杂选择"></a>range.setStart(),range.setEnd()实现DOM复杂选择</h3><ul><li><code>range.setStart(node,offset)</code>,<code>range.setEnd(node,offset)</code></li></ul><blockquote><p>对<code>setStart()</code>来说，参照节点会变成<code>startContainer</code>，而偏移量值会变成<code>startOffset</code>。对于<code>setEnd()</code>来说，参照节点会变成<code>endContainer</code>，而偏移量值会变成<code>endOffset</code>。<br>使用这两个方法来模仿 <code>selectNode()</code>和 <code>selectNodeContents()</code>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> range1 = <span class="built_in">document</span>.createRange();</span><br><span class="line">range2 = <span class="built_in">document</span>.createRange();</span><br><span class="line">p1 = <span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>);</span><br><span class="line">p1Index = <span class="number">-1</span>;</span><br><span class="line">i, len;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, len = p1.parentNode.childNodes.length; i &lt; len; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (p1.parentNode.childNodes[i] == p1) &#123;</span><br><span class="line">    p1Index = i;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">range1.setStart(p1.parentNode, p1Index);</span><br><span class="line">range1.setEnd(p1.parentNode, p1Index + <span class="number">1</span>);</span><br><span class="line">range2.setStart(p1, <span class="number">0</span>);</span><br><span class="line">range2.setEnd(p1, p1.childNodes.length);</span><br></pre></td></tr></table></figure><blockquote><p>模仿 selectNode()和 selectNodeContents()并不是 setStart() 和 setEnd()的主要用途，它们更胜一筹的地方在于能够选择节点的一部分。<br>假设你只想选择前面 HTML 示例代码中从”Hello”的”llo”到”world!”的”o”</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>);</span><br><span class="line">helloNode = p1.firstChild.firstChild;</span><br><span class="line">worldNode = p1.lastChild;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> range = <span class="built_in">document</span>.createRange();</span><br><span class="line">range.setStart(helloNode, <span class="number">2</span>);</span><br><span class="line">range.setEnd(worldNode, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/12/24/5a3eff15d4607.jpg" alt=""></p><h3 id="操作DOM范围中的内容"><a href="#操作DOM范围中的内容" class="headerlink" title="操作DOM范围中的内容"></a>操作DOM范围中的内容</h3><blockquote><p>在创建范围时，内部会为这个范围创建一个文档片段，范围所属的全部节点都在这个文档片段中。文档片段中范围内容的格式必须正确有效。在前面的例子中，创建的选区分别开始和结束于两个文本节点的内部(标签不闭合)，因此不能算是格式良好的DOM结构，也就无法通过DOM来表示。范围知道自身缺少哪些开标签和闭标签，它能够重新构建有效的DOM结构</p><p>范围经过计算知道选区中缺少一个开始的<code>&lt;b&gt;</code>标签，因此就会在后台动态加 入一个该标签，同时还会在前面加入一个表示结束的<code>&lt;/b&gt;</code>标签以结束”He”,文本节点”world!”也被拆分为两个文本节点，一个包含”wo”，另一个包含”rld!”<br>创建了范围之后，就可以使用方法对范围的内容进行操作了（表示范围的内部文档片段中的所有节点，都只是指向文档中相应节点的指针）</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 修改后的dom如下所示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>He<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>llo<span class="tag">&lt;/<span class="name">b</span>&gt;</span> world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/12/24/5a3eff15be6c8.jpg" alt=""></p><h3 id="range-deleteContents"><a href="#range-deleteContents" class="headerlink" title="range.deleteContents()"></a>range.deleteContents()</h3><p><code>range.deleteContents()</code> 删除文档范围中包含的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>);</span><br><span class="line">helloNode = p1.firstChild.firstChild;</span><br><span class="line">worldNode = p1.lastChild;</span><br><span class="line">range = <span class="built_in">document</span>.createRange();</span><br><span class="line">range.setStart(helloNode, <span class="number">2</span>);</span><br><span class="line">range.setEnd(worldNode, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">range.deleteContents();</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- deleteContents()执行前 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>He<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>llo<span class="tag">&lt;/<span class="name">b</span>&gt;</span> world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- deleteContents()执行后 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>He<span class="tag">&lt;/<span class="name">b</span>&gt;</span>rld!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>范围选区在修改底层 DOM 结构时能够保证格式良好，因此即使内容被删除了，最终的 DOM 结构依旧是格式良好的</p></blockquote><h3 id="range-extractContents"><a href="#range-extractContents" class="headerlink" title="range.extractContents()"></a>range.extractContents()</h3><p><code>range.extractContents() return rangeFragment</code></p><blockquote><p>与<code>range.deleteContents()</code>的区别是<code>range.extractContents()</code>会返回范围的文档片段,利用这个返回值可以实现再插入</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>);</span><br><span class="line"></span><br><span class="line">helloNode = p1.firstChild.firstChild;</span><br><span class="line">worldNode = p1.lastChild;</span><br><span class="line">range = <span class="built_in">document</span>.createRange();</span><br><span class="line"></span><br><span class="line">range.setStart(helloNode, <span class="number">2</span>);</span><br><span class="line">range.setEnd(worldNode, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fragment = range.extractContents();</span><br><span class="line">p1.parentNode.appendChild(fragment);</span><br></pre></td></tr></table></figure><blockquote><p>我们将提取出来的文档片段添加到了文档<body>元素的末尾。（记住，在将文档片段传入 appendChild()方法中时，添加到文档中的只是片段的子节点，而非片段本身</body></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- p1.parentNode.appendChild(range.extarctContents())后 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>He<span class="tag">&lt;/<span class="name">b</span>&gt;</span>rld!<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;<span class="name">b</span>&gt;</span>llo<span class="tag">&lt;/<span class="name">b</span>&gt;</span> wo</span><br></pre></td></tr></table></figure><h3 id="range-cloneContents"><a href="#range-cloneContents" class="headerlink" title="range.cloneContents()"></a>range.cloneContents()</h3><p><code>range.cloneConents() return rangeFragment</code> </p><blockquote><p> <code>range.cloneContents()</code>创建范围对象的一个副本，然后在文档的其他地方插入该副本。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>),</span><br><span class="line">  helloNode = p1.firstChild.firstChild,</span><br><span class="line">  worldNode = p1.lastChild,</span><br><span class="line">  range = <span class="built_in">document</span>.createRange();</span><br><span class="line"></span><br><span class="line">range.setStart(helloNode, <span class="number">2</span>);</span><br><span class="line">range.setEnd(worldNode, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fragment = range.cloneContents();</span><br><span class="line">p1.parentNode.appendChild(fragment);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- p1.parentNode.appendChild(range.cloneContents())后 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">b</span>&gt;</span> world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;<span class="name">b</span>&gt;</span>llo<span class="tag">&lt;/<span class="name">b</span>&gt;</span> wo</span><br></pre></td></tr></table></figure><blockquote><p>在调用上面介绍的方法之前，拆分的节点并不会产生格式良好的文档片段(只创建<code>range</code>后,html结构不会改变,调用改变dom的这三个方法后才会变)。换句话说，原始的 HTML 在 DOM 被修改之前会始终保持不变</p></blockquote><h3 id="插入DOM范围中的内容"><a href="#插入DOM范围中的内容" class="headerlink" title="插入DOM范围中的内容"></a>插入DOM范围中的内容</h3><h3 id="range-insertNode"><a href="#range-insertNode" class="headerlink" title="range.insertNode()"></a>range.insertNode()</h3><p><code>range.insertNode(node)</code> 向范围选区的开始出插入一个节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要插入的html &lt;span style="color: red"&gt;Inserted text&lt;/span&gt;</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>),</span><br><span class="line">helloNode = p1.firstChild.firstChild,</span><br><span class="line">worldNode = p1.lastChild,</span><br><span class="line">range = <span class="built_in">document</span>.createRange();</span><br><span class="line"></span><br><span class="line">range.setStart(helloNode, <span class="number">2</span>);</span><br><span class="line">range.setEnd(worldNode, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> span = <span class="built_in">document</span>.createElement(<span class="string">"span"</span>);</span><br><span class="line">span.style.color = <span class="string">"red"</span>;</span><br><span class="line">span.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">"Inserted text"</span>));</span><br><span class="line">range.insertNode(span);</span><br><span class="line"><span class="comment">// &lt;p id="p1"&gt;&lt;b&gt;He&lt;span style="color: red"&gt;Inserted text&lt;/span&gt;llo&lt;/b&gt; world&lt;/p&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>&lt;span&gt;</code>正好被插入到了”Hello”中的”llo”前面，而该位置就是范围选区的开始位置。还要注意的是，由于这里没有使用上一节介绍的方法，结果原始的 HTML 并没有添加或删除<code>&lt;b&gt;</code>元素</p></blockquote><h3 id="range-surroundContents"><a href="#range-surroundContents" class="headerlink" title="range.surroundContents()"></a>range.surroundContents()</h3><p><code>range.surroundContents(node)</code> <code>node</code>即环绕范围内容的节点,在环绕范围插入内容时， 后台会执行下列步骤</p><ol><li>提取出范围中的内容（类似执行 <code>range.extractContent()</code>） </li><li>将给定节点插入到文档中原来范围所在的位置上</li><li>将文档片段的内容添加到给定节点中</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>);</span><br><span class="line"></span><br><span class="line">helloNode = p1.firstChild.firstChild;</span><br><span class="line">worldNode = p1.lastChild;</span><br><span class="line">range = <span class="built_in">document</span>.createRange();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为了插入&lt;span&gt;，范围必须包含整个 DOM 选区（不能仅仅包含选中的 DOM 节点）</span></span><br><span class="line">range.selectNode(helloNode);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> span = <span class="built_in">document</span>.createElement(<span class="string">"span"</span>);</span><br><span class="line">span.style.backgroundColor = <span class="string">"yellow"</span>;</span><br><span class="line">range.surroundContents(span);</span><br><span class="line"><span class="comment">// &lt;p&gt;&lt;b&gt;&lt;span style="background-color:yellow"&gt;Hello&lt;/span&gt;&lt;/b&gt; world!&lt;/p&gt;</span></span><br></pre></td></tr></table></figure><h3 id="折叠DOM范围"><a href="#折叠DOM范围" class="headerlink" title="折叠DOM范围"></a>折叠DOM范围</h3><p><code>折叠范围</code>，就是指范围中未选择文档的任何部分,其位置会落在文档中的两个部分之间，可能是范围选区的开始位置，也可能是结束位置</p><h3 id="range-collapse"><a href="#range-collapse" class="headerlink" title="range.collapse()"></a>range.collapse()</h3><p><code>range.collapse(boolean) return boolean</code>,<code>boolean</code>为ture时,折叠到起点,<code>boolean</code>为false时,折叠刀终点,并在操作后返回对应的boolean值.</p><p><img src="https://i.loli.net/2017/12/24/5a3eff16429ca.jpg" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">range.collapse(<span class="literal">true</span>); <span class="comment">//折叠到起点 </span></span><br><span class="line">alert(range.collapsed); <span class="comment">//输出 true</span></span><br></pre></td></tr></table></figure><blockquote><p>检测某个范围是否处于折叠状态，可以帮我们确定范围中的两个节点是否紧密相邻。例如，对于下面的 HTML 代码</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span>Paragraph 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p2"</span>&gt;</span>Paragraph 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>),</span><br><span class="line">  p2 = <span class="built_in">document</span>.getElementById(<span class="string">"p2"</span>),</span><br><span class="line">  range = <span class="built_in">document</span>.createRange();</span><br><span class="line">range.setStartAfter(p1);</span><br><span class="line">range.setEndBefore(p2);</span><br><span class="line">alert(range.collapsed); <span class="comment">//输出 true</span></span><br></pre></td></tr></table></figure><h3 id="range-compareBoundaryPoints-比较DOM范围"><a href="#range-compareBoundaryPoints-比较DOM范围" class="headerlink" title="range.compareBoundaryPoints() 比较DOM范围"></a>range.compareBoundaryPoints() 比较DOM范围</h3><p><code>range.compareBoundaryPoting(value,range1) return -1/0/1</code></p><blockquote><p>确定这些范围是否有公共的边界（起点或终点）。这个方法接受两个参数：表示比较方式的常量值<code>value</code>和要比较的范围,常量<code>value</code>可取值如下</p></blockquote><ul><li><code>Range.START_TO_START(0)</code>：比较第一个范围和第二个范围的起点；</li><li><code>Range.START_TO_END(1)</code>：比较第一个范围的起点和第二个范围的终点；</li><li><code>Range.END_TO_END(2)</code>：比较第一个范围和第二个范围的终点；</li><li><code>Range.END_TO_START(3)</code>：比较第一个范围的终点和第一个范围的起点。</li></ul><blockquote><p><code>compareBoundaryPoints()</code>方法可能的返回值如下：如果第一个范围中的点位于第二个范围中的点之前，返回<code>-1</code>；如果两个点相等，返回 <code>0</code>；如果第一个范围中的点位于第二个范围中的点之后，返回<code>1</code>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> range1 = <span class="built_in">document</span>.createRange();</span><br><span class="line"><span class="keyword">var</span> range2 = <span class="built_in">document</span>.createRange();</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>);</span><br><span class="line"></span><br><span class="line">range1.selectNodeContents(p1);</span><br><span class="line">range2.selectNodeContents(p1);</span><br><span class="line">range2.setEndBefore(p1.lastChild);</span><br><span class="line"></span><br><span class="line">alert(range1.compareBoundaryPoints(Range.START_TO_START, range2));<span class="comment">//0</span></span><br><span class="line">alert(range1.compareBoundaryPoints(Range.END_TO_END, range2));<span class="comment">//1</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/12/24/5a3eff1672113.jpg" alt=""></p><h3 id="range-cloneRange-复制DOM范围"><a href="#range-cloneRange-复制DOM范围" class="headerlink" title="range.cloneRange() 复制DOM范围"></a>range.cloneRange() 复制DOM范围</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">range.cloneRange() <span class="keyword">return</span> newRange;</span><br></pre></td></tr></table></figure><blockquote><p>新创建的范围与原来的范围包含相同的属性,而修改它的端点不会影响原来的范围</p></blockquote><h3 id="range-detach-清理DOM范围"><a href="#range-detach-清理DOM范围" class="headerlink" title="range.detach() 清理DOM范围"></a>range.detach() 清理DOM范围</h3><p><code>range.detach()</code> 接触对<code>range</code>的引用,从创建范围的文档中分离,进行回收.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">range.detach() <span class="comment">//从文档中分离</span></span><br><span class="line">range = <span class="literal">null</span> <span class="comment">//不主动调用,垃圾机制也会回收内存</span></span><br></pre></td></tr></table></figure><h3 id="IE8及更早版本中的范围"><a href="#IE8及更早版本中的范围" class="headerlink" title="IE8及更早版本中的范围"></a>IE8及更早版本中的范围</h3><blockquote><p>此部分内容由于IE8及之前更早版本的IE浏览器的逐步淘汰有些过时,毕竟IE9之后的版本都支持DOM范围,需要用到时再去翻阅高程p340</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;DOM变化&quot;&gt;&lt;a href=&quot;#DOM变化&quot; class=&quot;headerlink&quot; title=&quot;DOM变化&quot;&gt;&lt;/a&gt;DOM变化&lt;/h2&gt;&lt;h3 id=&quot;node-isSameNode-node-isEqualNode&quot;&gt;&lt;a href=&quot;#node-isSa
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>javascript 与 &quot;发布/订阅(观察者)模式&quot;</title>
    <link href="http://yoursite.com/2017/12/23/javascript-%E4%B8%8E-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/12/23/javascript-与-发布订阅设计模式/</id>
    <published>2017-12-23T13:05:44.000Z</published>
    <updated>2017-12-23T13:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="发布-订阅-观察者-模式"><a href="#发布-订阅-观察者-模式" class="headerlink" title="发布/订阅(观察者)模式"></a>发布/订阅(观察者)模式</h3><p><code>发布/订阅模式</code>又称<code>观察者模式</code>,是一种<code>设计模式</code>, 它定义了对象间的一种一对多的关系，让多个观察者对象同时监听某一个主题对象，当一个对象发生改变时，所有依赖于它的对象都将得到通知。</p><p>js中<code>事件</code>的实现方式是<code>发布/订阅</code>模式, <code>redux</code>的实现原理也依赖了<code>发布/订阅</code>模式. </p><p>其实伪代码看过不少次了, 决定自己动手写一下. 此篇blog作为学习的<code>正反馈</code>. </p><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><blockquote><p><code>sneakersMerchant</code>卖<code>篮球鞋</code>,<br><code>chotee</code>觉得可以,收藏了<code>sneakersMerchant</code>.<br><code>wang</code>觉得ok,也收藏了<code>sneakersMerchant</code>.<br><code>sneakersMerchant</code>一上新(<code>trigger</code>),就会通知所有收藏的用户们(<code>listener</code>)</p></blockquote><p>数据模型抽象如下</p><ul><li><code>发布者</code>: <code>商家</code>,Obj</li><li><code>listener</code>: <code>收藏的用户们</code>,Array</li></ul><h3 id="实现基本功能"><a href="#实现基本功能" class="headerlink" title="实现基本功能"></a>实现基本功能</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sneakersMerchant = &#123; <span class="comment">//publisher</span></span><br><span class="line">  listener: [], <span class="comment">//订阅者方法数组</span></span><br><span class="line">  addListener(listenerFuction) &#123; </span><br><span class="line">    <span class="keyword">this</span>.listener.push(listenerFuction)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//trigger发生时,将listener数组中的每个方法用publisher的上下文和trigger的参数调用</span></span><br><span class="line">  trigger(...args) &#123; </span><br><span class="line">    <span class="keyword">this</span>.listener.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">v,i</span>) </span>&#123;</span><br><span class="line">      v.apply(<span class="keyword">this</span>,args)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chotee = &#123; <span class="comment">//listener1</span></span><br><span class="line">  listen(model,size) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`chotee看到了颜色是<span class="subst">$&#123;model&#125;</span>`</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`chotee看到了尺寸是<span class="subst">$&#123;size&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wang = &#123; <span class="comment">//listener2</span></span><br><span class="line">  listen(model,size) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`wang看到了颜色是<span class="subst">$&#123;model&#125;</span>`</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`wang看到了尺寸是<span class="subst">$&#123;size&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sneakersMerchant.addListener(chotee.listen)</span><br><span class="line">sneakersMerchant.addListener(wang.listen)</span><br><span class="line">sneakersMerchant.trigger(<span class="string">'aj3'</span>,<span class="string">'42'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>输出结果:<br>chotee看到了颜色是aj3<br>chotee看到了尺寸是42<br>wang看到了颜色是aj3<br>wang看到了尺寸是42</p></blockquote><h3 id="实现按key名订阅"><a href="#实现按key名订阅" class="headerlink" title="实现按key名订阅"></a>实现按key名订阅</h3><blockquote><p>至此,我们已经实现了一个基本功能,当<code>sneakersMerchant</code>有鞋发布时,每个<code>listener</code>都会被推送<br>但是,比如<code>chotee</code>只喜欢<code>model</code>型号是”aj3”的球鞋,<code>wang</code>只喜欢<code>model</code>型号是”aj11”的球鞋,所以需要改进一个可以按<code>key</code>订阅的功能</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sneakersMerchant = &#123; <span class="comment">//publisher</span></span><br><span class="line">  listener: [], <span class="comment">//订阅者方法数组</span></span><br><span class="line">  addListener(key,listenerFuction) &#123;</span><br><span class="line">    <span class="comment">// 如果listener数组中不存在key项,设置key项为一个空数组</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.listener[key])&#123;</span><br><span class="line">      <span class="keyword">this</span>.listener[key] = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果有key项,给key项数组添加一个listener </span></span><br><span class="line">    <span class="keyword">this</span>.listener[key].push(listenerFuction)</span><br><span class="line">  &#125;,</span><br><span class="line">  trigger(key, ...args) &#123;</span><br><span class="line">    <span class="comment">//如果listener数组中不存在key项或key项的数组为空,返回</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.listener[key]||<span class="keyword">this</span>.listener[key].length===<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果有key项, 调用key项中的方法,这时可以传入key</span></span><br><span class="line">    <span class="keyword">this</span>.listener[key].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">v,i</span>) </span>&#123;</span><br><span class="line">      v.call(<span class="keyword">this</span>,key, ...args)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chotee = &#123; <span class="comment">//listener1</span></span><br><span class="line">  listen(model,size) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`chotee看到了颜色是<span class="subst">$&#123;model&#125;</span>`</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`chotee看到了尺寸是<span class="subst">$&#123;size&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wang = &#123; <span class="comment">//listener2</span></span><br><span class="line">  listen(model,size) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`wang看到了颜色是<span class="subst">$&#123;model&#125;</span>`</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`wang看到了尺寸是<span class="subst">$&#123;size&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sneakersMerchant.addListener(<span class="string">'aj3'</span>,chotee.listen)</span><br><span class="line">sneakersMerchant.addListener(<span class="string">'aj11'</span>,wang.listen)</span><br><span class="line">sneakersMerchant.trigger(<span class="string">'aj3'</span>,<span class="string">'42'</span>)</span><br><span class="line"><span class="comment">// chotee看到了颜色是aj3</span></span><br><span class="line"><span class="comment">// chotee看到了尺寸是42</span></span><br><span class="line">sneakersMerchant.trigger(<span class="string">'aj11'</span>,<span class="string">'44'</span>)</span><br><span class="line"><span class="comment">// wang看到了颜色是aj11</span></span><br><span class="line"><span class="comment">// wang看到了尺寸是44</span></span><br></pre></td></tr></table></figure><h3 id="封装-注入"><a href="#封装-注入" class="headerlink" title="封装,注入"></a>封装,注入</h3><blockquote><p>我们注意到其实sneakersMerchant中的逻辑与<code>卖球鞋</code>本身没有直接联系, 事实上它代表了所有的<code>发布/订阅</code>逻辑, 不仅可以<code>卖球鞋</code>,还可以<code>卖切糕</code>,可以扩展到任何对象上, 让被扩展的对象拥有<code>发布/订阅</code>逻辑和功能呢,实现<code>注入(injection)</code><br>所以,我们对代码进行改造和封装,将刚才的<code>sneakerMerchant</code>更名为<code>pub_sub_util</code>,并定义一个<code>pub_sub_injection</code>函数,用来对任何对象传入<code>pub_sub_util</code>的逻辑,进行功能注入</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pub_sub_util = &#123; </span><br><span class="line">  listener: [], </span><br><span class="line">  addListener(key,listenerFuction) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.listener[key])&#123;</span><br><span class="line">      <span class="keyword">this</span>.listener[key] = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.listener[key].push(listenerFuction)</span><br><span class="line">  &#125;,</span><br><span class="line">  trigger(key, ...args) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.listener[key]||<span class="keyword">this</span>.listener[key].length===<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.listener[key].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">v,i</span>) </span>&#123;</span><br><span class="line">      v.call(<span class="keyword">this</span>,key, ...args)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义工具函数,进行 发布/订阅 功能注入</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pub_sub_injection</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> pub_sub_util)&#123;</span><br><span class="line">    obj[key] = pub_sub_util[key]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj <span class="comment">// for 链式调用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给任意对象调用工具函数,注入发布/订阅功能</span></span><br><span class="line"><span class="keyword">let</span> sneakersMerchant = &#123;&#125;</span><br><span class="line">sneakersMerchant = pub_sub_injection(sneakersMerchant)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chotee = &#123; <span class="comment">//listener1</span></span><br><span class="line">  listen(model,size) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`chotee看到了颜色是<span class="subst">$&#123;model&#125;</span>`</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`chotee看到了尺寸是<span class="subst">$&#123;size&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wang = &#123; <span class="comment">//listener2</span></span><br><span class="line">  listen(model,size) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`wang看到了颜色是<span class="subst">$&#123;model&#125;</span>`</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`wang看到了尺寸是<span class="subst">$&#123;size&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sneakersMerchant.addListener(<span class="string">'aj3'</span>,chotee.listen)</span><br><span class="line">sneakersMerchant.addListener(<span class="string">'aj11'</span>,wang.listen)</span><br><span class="line">sneakersMerchant.trigger(<span class="string">'aj3'</span>,<span class="string">'42'</span>)</span><br><span class="line"><span class="comment">// chotee看到了颜色是aj3</span></span><br><span class="line"><span class="comment">// chotee看到了尺寸是42</span></span><br><span class="line">sneakersMerchant.trigger(<span class="string">'aj11'</span>,<span class="string">'44'</span>)</span><br><span class="line"><span class="comment">//wang看到了颜色是aj11</span></span><br><span class="line"><span class="comment">//wang看到了尺寸是44</span></span><br></pre></td></tr></table></figure><h3 id="如何退订"><a href="#如何退订" class="headerlink" title="如何退订?"></a>如何退订?</h3><blockquote><p><code>chotee</code>从<code>sneakersMerchant</code>那里买到了莆田货, 于是要退订订阅, 总会发生这样的事, 于是要给工具对象中加一个<code>removeListener</code>方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pub_sub_util = &#123;</span><br><span class="line">  listener: [],</span><br><span class="line">  addListener(key, listenerFuction) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.listener[key]) &#123;</span><br><span class="line">      <span class="keyword">this</span>.listener[key] = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.listener[key].push(listenerFuction)</span><br><span class="line">  &#125;,</span><br><span class="line">  trigger(key, ...args) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.listener[key] || <span class="keyword">this</span>.listener[key].length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.listener[key].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">v, i</span>) </span>&#123;</span><br><span class="line">      v.call(<span class="keyword">this</span>, key, ...args)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//增加退订功能</span></span><br><span class="line">  removeListener(key, fn) &#123;</span><br><span class="line">    <span class="keyword">let</span> listenerKey = <span class="keyword">this</span>.listener[key]</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果listener数组中还没有key项,返回</span></span><br><span class="line">    <span class="keyword">if</span> (!listenerKey) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果没传第二个参数,意思是要删除整个key项</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">      listenerKey = []</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 删除listener数组key项中对应的函数</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      listenerKey.some(<span class="function"><span class="keyword">function</span> (<span class="params">v, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(v===fn)&#123;</span><br><span class="line">          listenerKey.splice(i,<span class="number">1</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义工具函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pub_sub_injection</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> pub_sub_util) &#123;</span><br><span class="line">    obj[key] = pub_sub_util[key]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj <span class="comment">// for 链式调用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给任意对象调用工具函数,注入发布/订阅功能</span></span><br><span class="line"><span class="keyword">let</span> sneakersMerchant = &#123;&#125;</span><br><span class="line">sneakersMerchant = pub_sub_injection(sneakersMerchant)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chotee = &#123; <span class="comment">//listener1</span></span><br><span class="line">  listen(model, size) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`chotee看到了颜色是<span class="subst">$&#123;model&#125;</span>`</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`chotee看到了尺寸是<span class="subst">$&#123;size&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wang = &#123; <span class="comment">//listener2</span></span><br><span class="line">  listen(model, size) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`wang看到了颜色是<span class="subst">$&#123;model&#125;</span>`</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`wang看到了尺寸是<span class="subst">$&#123;size&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">sneakersMerchant.addListener(<span class="string">'aj3'</span>, chotee.listen)</span><br><span class="line">sneakersMerchant.addListener(<span class="string">'aj11'</span>, wang.listen)</span><br><span class="line">sneakersMerchant.trigger(<span class="string">'aj3'</span>, <span class="string">'42'</span>)</span><br><span class="line"><span class="comment">// chotee看到了颜色是aj3</span></span><br><span class="line"><span class="comment">// chotee看到了尺寸是42</span></span><br><span class="line">sneakersMerchant.trigger(<span class="string">'aj11'</span>, <span class="string">'44'</span>)</span><br><span class="line"><span class="comment">//wang看到了颜色是aj11</span></span><br><span class="line"><span class="comment">//wang看到了尺寸是44</span></span><br><span class="line">sneakersMerchant.removelistener(<span class="string">'aj3'</span>, chotee.listen)</span><br><span class="line">sneakersMerchant.trigger(<span class="string">'aj3'</span>, <span class="string">'42'</span>)</span><br><span class="line"><span class="comment">//什么都没发生</span></span><br></pre></td></tr></table></figure><h3 id="全局事件对象"><a href="#全局事件对象" class="headerlink" title="全局事件对象"></a>全局事件对象</h3><blockquote><p>至此,我们已经完成了大部分<code>发布/订阅</code>的功能,但为了让我们的代码更有<code>bigger</code>,我们应该向更优秀的代码组织方式靠拢</p><p>虽然现在经过我们<code>注入</code>的对象上,已经具备了自己的<code>发布/订阅</code>逻辑,但这还不够好.<br>更好的方式是用<code>闭包</code>来创建一个<code>全局事件对象</code>,这个对象,对外暴露<code>发布/订阅</code>逻辑的<code>接口</code>,这些<code>接口</code>用来操作<code>闭包</code>中的<code>listener</code>数据<br>改造后的代码如下:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pubEvent = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> listener = &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> addListener = <span class="function"><span class="keyword">function</span> (<span class="params">key, listenerFuction</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!listener[key]) &#123;</span><br><span class="line">      listener[key] = []</span><br><span class="line">    &#125;</span><br><span class="line">    listener[key].push(listenerFuction)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> trigger = <span class="function"><span class="keyword">function</span> (<span class="params">key, args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!listener[key] || listener[key].length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    listener[key].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">v, i</span>) </span>&#123;</span><br><span class="line">      v.call(<span class="literal">null</span>, &#123; key, ...args &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> removeListener = <span class="function"><span class="keyword">function</span> (<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> listenerKey = listener[key]</span><br><span class="line">    <span class="keyword">if</span> (!listenerKey) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">      listenerKey = []</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      listenerKey.some(<span class="function"><span class="keyword">function</span> (<span class="params">v, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (v === fn) &#123;</span><br><span class="line">          listenerKey.splice(i, <span class="number">1</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    addListener,</span><br><span class="line">    trigger,</span><br><span class="line">    removeListener</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chotee = &#123; <span class="comment">//listener1</span></span><br><span class="line">  listen(&#123; key, size &#125;) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`chotee看到了颜色是<span class="subst">$&#123;key&#125;</span>`</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`chotee看到了尺寸是<span class="subst">$&#123;size&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wang = &#123; <span class="comment">//listener2</span></span><br><span class="line">  listen(&#123; key, size &#125;) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`wang看到了颜色是<span class="subst">$&#123;key&#125;</span>`</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`wang看到了尺寸是<span class="subst">$&#123;size&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pubEvent.addListener(<span class="string">'aj3'</span>, chotee.listen)</span><br><span class="line">pubEvent.addListener(<span class="string">'aj11'</span>, wang.listen)</span><br><span class="line">pubEvent.trigger(<span class="string">'aj3'</span>, &#123;<span class="attr">size</span>:<span class="number">42</span>&#125;)</span><br><span class="line"><span class="comment">// chotee看到了颜色是aj3</span></span><br><span class="line"><span class="comment">// chotee看到了尺寸是42</span></span><br><span class="line">pubEvent.trigger(<span class="string">'aj11'</span>, &#123;<span class="attr">size</span>:<span class="number">44</span>&#125;)</span><br><span class="line"><span class="comment">//wang看到了颜色是aj11</span></span><br><span class="line"><span class="comment">//wang看到了尺寸是44</span></span><br><span class="line">pubEvent.removeListener(<span class="string">'aj3'</span>, chotee.listen)</span><br><span class="line">pubEvent.trigger(<span class="string">'aj3'</span>, <span class="string">'42'</span>)</span><br><span class="line"><span class="comment">//什么都没发生</span></span><br></pre></td></tr></table></figure><h3 id="模块通信"><a href="#模块通信" class="headerlink" title="模块通信"></a>模块通信</h3><blockquote><p>为了更深刻的理解,参数是如何从<code>publisher</code>传递给<code>listener</code>的, 我们来做一个小案例<br>比如页面上有一个按钮,每次点击此按钮后,div中显示此按钮被点击的次数</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>点我加1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"dv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- polyfill here --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- pubEvent.js中放入我们自己写的代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"pubEvent.js"</span>&gt;</span><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"click.js"</span>&gt;</span><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"show.js"</span>&gt;</span><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// click.js</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(count); <span class="comment">// </span></span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    count++</span><br><span class="line">    <span class="comment">// 触发"countAdd"自定义事件</span></span><br><span class="line">    pubEvent.trigger(<span class="string">'countAdd'</span>,&#123;count&#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// show.js</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 注册"countAdd"事件</span></span><br><span class="line">  pubEvent.addListener(<span class="string">'countAdd'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'dv'</span>).innerHTML = data.count</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/12/23/5a3e54dd0e967.jpg" alt=""></p><blockquote><p><code>count</code>本来是<code>click.js</code>闭包中的私有变量,通过<code>pubEvent.trigger(&#39;countAdd&#39;,{count})</code>传递入<code>trigger</code>的函数体内,<code>trigger</code>的函数体内又调用了<code>listener</code>中的回调函数,回调函数通过<code>data</code>对象接收<code>count</code>和<code>key</code>的值.再在回调函数中向页面进行输出</p><p>最后我们抽离出<code>pubEvent.js</code>,可以在平时的工作学习中作为全局<code>发布/订阅工具函数</code>使用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pubEvent = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> listener = &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> addListener = <span class="function"><span class="keyword">function</span> (<span class="params">key, listenerFuction</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!listener[key]) &#123;</span><br><span class="line">      listener[key] = []</span><br><span class="line">    &#125;</span><br><span class="line">    listener[key].push(listenerFuction)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> trigger = <span class="function"><span class="keyword">function</span> (<span class="params">key, args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!listener[key] || listener[key].length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    listener[key].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">v, i</span>) </span>&#123;</span><br><span class="line">      v.call(<span class="literal">null</span>, &#123; key, ...args &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> removeListener = <span class="function"><span class="keyword">function</span> (<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> listenerKey = listener[key]</span><br><span class="line">    <span class="keyword">if</span> (!listenerKey) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">      listenerKey = []</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      listenerKey.some(<span class="function"><span class="keyword">function</span> (<span class="params">v, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (v === fn) &#123;</span><br><span class="line">          listenerKey.splice(i, <span class="number">1</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    addListener,</span><br><span class="line">    trigger,</span><br><span class="line">    removeListener</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;发布-订阅-观察者-模式&quot;&gt;&lt;a href=&quot;#发布-订阅-观察者-模式&quot; class=&quot;headerlink&quot; title=&quot;发布/订阅(观察者)模式&quot;&gt;&lt;/a&gt;发布/订阅(观察者)模式&lt;/h3&gt;&lt;p&gt;&lt;code&gt;发布/订阅模式&lt;/code&gt;又称&lt;code&gt;观察
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正反馈系列:《JavaScript高级程序设计》DOM 扩展</title>
    <link href="http://yoursite.com/2017/12/22/%E9%AB%98%E7%A8%8Bvol6-11%E7%AB%A0-dom%E6%89%A9%E5%B1%95/"/>
    <id>http://yoursite.com/2017/12/22/高程vol6-11章-dom扩展/</id>
    <published>2017-12-22T06:20:00.000Z</published>
    <updated>2018-03-21T10:23:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="选择符API"><a href="#选择符API" class="headerlink" title="选择符API"></a>选择符API</h2><ul><li><code>document/element.querySelector() return node</code></li><li><code>document/element.querySelectorAll() return NodeListSnapShot</code></li></ul><blockquote><p>返回的NodeList可以调用.item(index)方法,或使用方括号法,访问伪数组中的元素<br>第一个方法在没找到匹配元素时会 return null,第二个会return一个空NodeList<br>返回的数据只是NodeList<code>快照</code>,不会动态更新,性能好,看下面例子</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;div&gt;1&lt;/div&gt;</span></span><br><span class="line"><span class="comment">//&lt;div&gt;2&lt;/div&gt;</span></span><br><span class="line"><span class="comment">//&lt;div&gt;3&lt;/div&gt;</span></span><br><span class="line">&lt;script id=<span class="string">"tag"</span>&gt;</span><br><span class="line">  <span class="keyword">var</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(divs); <span class="comment">//3个元素</span></span><br><span class="line">  <span class="keyword">var</span> tag = <span class="built_in">document</span>.getElementById(<span class="string">'tag'</span>)</span><br><span class="line">  <span class="keyword">var</span> insert = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">  insert.innerHTML = <span class="number">4</span></span><br><span class="line">  <span class="built_in">document</span>.body.insertBefore(insert,tag) </span><br><span class="line">  <span class="built_in">console</span>.log(divs); <span class="comment">//3个元素</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>element.matchesSelector(selector) return boolean</code> </li></ul><blockquote><p>测试某个元素是否会被<code>querySelector,querySelectorAll</code>选中,截止到2011年,大多数的浏览器中都没有支持中国方法,如果要使用,先能力检测</p></blockquote><h2 id="元素遍历"><a href="#元素遍历" class="headerlink" title="元素遍历"></a>元素遍历</h2><blockquote><p><code>element</code>增加了5个新属性</p></blockquote><ul><li><code>childElementCount</code>：返回子元素（不包括文本节点和注释）的个数。</li><li><code>firstElementChild</code>：指向第一个子元素；firstChild 的元素版。</li><li><code>lastElementChild</code>：指向最后一个子元素；lastChild 的元素版。</li><li><code>previousElementSibling</code>：指向前一个同辈元素；previousSibling 的元素版。</li><li><code>nextElementSibling</code>：指向后一个同辈元素；nextSibling 的元素版。</li></ul><blockquote><p>遍历子元素代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i, len, child = element.firstElementChild;</span><br><span class="line"><span class="keyword">while</span>(child != element.lastElementChild)&#123; </span><br><span class="line">    processChild(child); <span class="comment">//已知其是元素 </span></span><br><span class="line">    child = child.nextElementSibling; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h2><h3 id="element-getElementsByClassName"><a href="#element-getElementsByClassName" class="headerlink" title="element.getElementsByClassName()"></a>element.getElementsByClassName()</h3><p><code>document/element.getElementsByClassName(classString) return NodeList</code></p><blockquote><p><code>classString</code>可以是<code>&quot;username current&quot;</code>这种格式, 顺序无所谓</p></blockquote><h3 id="element-classList属性"><a href="#element-classList属性" class="headerlink" title="element.classList属性"></a>element.classList属性</h3><blockquote><p>演示传统的js操作element的class特性的方式:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> classNames = element.className.split(<span class="regexp">/\s+/</span>)</span><br><span class="line"></span><br><span class="line">classNames = classNames.some(<span class="function"><span class="keyword">function</span> (<span class="params">v,i,arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(v === <span class="string">'deleteValue'</span>)&#123;</span><br><span class="line">    arr.splice(i,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">element.className = classNames.join(<span class="string">' '</span>)</span><br></pre></td></tr></table></figure><blockquote><p>上述方法太麻烦,所以HTML5给每个元素新增了<code>classList</code>属性,该属性是新集合类型<code>DOMTokenList</code>实例,与其他DOM集合类似,<code>DOMTokenList</code>有<code>length</code>属性,可以使用<code>.item()</code>方法和方括号语法,还增加了下列方法</p></blockquote><ul><li><code>add(value)</code>：将给定的字符串值添加到列表中。如果值已经存在，就不添加了。 </li><li><code>contains(value) return boolean</code>：表示列表中是否存在给定的值，如果存在则返回 true，否则返回 false。 </li><li><code>remove(value)</code>：从列表中删除给定的字符串。 </li><li><code>toggle(value)</code>：如果列表中已经存在给定的值，删除它；如果列表中没有给定的值，添加它。</li></ul><p>至此,前面那些代码一行代码搞定<code>element.classList.remove(&quot;deleteValue&quot;)</code>    </p><h3 id="焦点管理"><a href="#焦点管理" class="headerlink" title="焦点管理"></a>焦点管理</h3><blockquote><p>一个元素若想获得焦点,有两种方式</p><ol><li>被用户tab键切中</li><li>调用<code>element.focus()</code>方法</li><li>页面加载后<code>document.body</code>默认获得焦点</li></ol></blockquote><ul><li><code>document.activeElement</code>属性,始终会引用DOM中获得了焦点的元素</li><li><code>document.hasFocus() return boolean</code> 这个方法用于确认文档是否获得了焦点(文档内的元素获得了焦点,文档也算获得了焦点)</li></ul><h3 id="HTMLDocument的变化"><a href="#HTMLDocument的变化" class="headerlink" title="HTMLDocument的变化"></a>HTMLDocument的变化</h3><ul><li><code>document.readyState</code>属性,两个可能的值<code>loading,complete</code>,分别表示正在加载,和加载完成</li><li><code>document.compatMode</code>属性,标准模式时值为<code>CSS1Compat</code>,混杂模式时值为<code>BackCompat</code></li><li><code>document.head</code>属性,引用<code>&lt;head&gt;</code>标签</li></ul><h3 id="字符集属性"><a href="#字符集属性" class="headerlink" title="字符集属性"></a>字符集属性</h3><ul><li><code>document.charset</code>属性, 表示文档中实际可使用字符集,可直接设置以修改</li><li><code>document.defaultCharset</code>属性, ，表示根据默认浏览器及操作系统的设置，当前文档默认的字符集应该是什么</li></ul><h3 id="自定义数据属性"><a href="#自定义数据属性" class="headerlink" title="自定义数据属性"></a>自定义数据属性</h3><blockquote><p>HTML5规定可以给元素添加自定义特性,格式是<code>data-attrName</code><br>同时元素上添加<code>element.dataset</code>属性,属性的值是<code>DOMStringMap</code> 的一个实例，也就是一个名值对儿的映射。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;div id="ctw" data-chotee="choteewang"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="keyword">var</span> ctw = <span class="built_in">document</span>.getElementById(<span class="string">'ctw'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(ctw.dataset.chotee); <span class="comment">// choteewang</span></span><br><span class="line">ctw.dataset.chotee = <span class="string">'another chotee'</span></span><br><span class="line"><span class="built_in">console</span>.log(ctw.dataset.chotee); <span class="comment">// another chotee</span></span><br></pre></td></tr></table></figure><h3 id="插入标记"><a href="#插入标记" class="headerlink" title="插入标记"></a>插入标记</h3><ul><li><code>element.innerHTML</code>属性. 关于用innerHTML在DOM结构中插入新的Script标签,可能达不到预期效果,详情见高程p298</li><li><code>element.outerHTML</code>属性. 连同调用元素(自己)的HTML代码一同返回或设置</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  &lt;div id="content"&gt;</span></span><br><span class="line"><span class="comment">    &lt;p&gt;This is a</span></span><br><span class="line"><span class="comment">      &lt;strong&gt;paragraph&lt;/strong&gt; with a list following it.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">    &lt;ul&gt;</span></span><br><span class="line"><span class="comment">      &lt;li&gt;Item 1&lt;/li&gt;</span></span><br><span class="line"><span class="comment">      &lt;li&gt;Item 2&lt;/li&gt;</span></span><br><span class="line"><span class="comment">      &lt;li&gt;Item 3&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">  &lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;input type="button" value="Get OuterHtml" onclick="getOuterHTML()"&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOuterHTML</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"content"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(div.outerHTML); <span class="comment">//works in IE, Safari, and Opera</span></span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">/* 返回结果</span></span><br><span class="line"><span class="comment">  &lt;div id="content"&gt;</span></span><br><span class="line"><span class="comment">    &lt;p&gt;This is a</span></span><br><span class="line"><span class="comment">      &lt;strong&gt;paragraph&lt;/strong&gt; with a list following it.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">    &lt;ul&gt;</span></span><br><span class="line"><span class="comment">      &lt;li&gt;Item 1&lt;/li&gt;</span></span><br><span class="line"><span class="comment">      &lt;li&gt;Item 2&lt;/li&gt;</span></span><br><span class="line"><span class="comment">      &lt;li&gt;Item 3&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">  &lt;/div&gt;</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><ul><li><code>element.insertAdjacentHTML(description,innerHTML)</code>方法,<code>description</code>有以下几种形式<ul><li><code>beforebegin</code>，作为前一个同辈元素插入； </li><li><code>afterbegin</code>，作为第一个子元素插入； </li><li><code>beforeend</code>，作为最后一个子元素插入； </li><li><code>afterend</code>，作为后一个同辈元素插入;</li></ul></li></ul><blockquote><p>调用本节的方法,有性能问题,原理是用<code>innerHTML</code>将元素移动出DOM结构并没有让该元素的js对象从内存中释放.<br>所以最好减少<code>innerHTML</code>的读写次数,比如先对一个字符串进行反复操作,最后一次性将字符串赋值给<code>innerHTML</code></p></blockquote><h3 id="element-scrollIntoView"><a href="#element-scrollIntoView" class="headerlink" title="element.scrollIntoView()"></a>element.scrollIntoView()</h3><p><code>element.scrollIntoView(true/false)</code></p><blockquote><p>scrollIntoView()可以在所有 HTML 元素上调用, 参数为<code>true</code>或<code>空</code>时,窗口滚动 之后会让调用元素的顶部与视口顶部尽可能平齐<br>参数为<code>false</code>时,调用元素会尽可能全部 出现在视口中，（可能的话，调用元素的底部会与视口顶部平齐。）不过顶部不一定平齐<br>为元素设置焦点也会导致浏览器滚动并显示出元素</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//让元素可见 </span></span><br><span class="line"><span class="built_in">document</span>.forms[<span class="number">0</span>].scrollIntoView();</span><br></pre></td></tr></table></figure><h2 id="专有扩展"><a href="#专有扩展" class="headerlink" title="专有扩展"></a>专有扩展</h2><h3 id="文档模式"><a href="#文档模式" class="headerlink" title="文档模式"></a>文档模式</h3><blockquote><p>IE8引入了”文档模式(document mode)”概念, 页面的文档模式决定了可以使用什么js api或css,或怎样对待文档类型doctype<br>要强制浏览器以某种模式渲染页面，可以使用 HTTP 头部信息 X-UA-Compatible，或通过等价的 <code>&lt;meta&gt;</code>标签来设置：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这里的IEVersion是被替换掉的不同的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=IEVersion"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>具体文档模式取值详情查阅高程p289</p><h3 id="element-children属性"><a href="#element-children属性" class="headerlink" title="element.children属性"></a>element.children属性</h3><blockquote><p>这个属性是<code>HTMLCollection</code>实例, 与<code>element.childNodes</code>的区别是只有元素节点.</p></blockquote><h3 id="element-contains"><a href="#element-contains" class="headerlink" title="element.contains()"></a>element.contains()</h3><p><code>element.contains(node) return boolean</code> </p><blockquote><p>如果node是element的后代节点,return true</p></blockquote><h3 id="element-compareDocumentPosition"><a href="#element-compareDocumentPosition" class="headerlink" title="element.compareDocumentPosition()"></a>element.compareDocumentPosition()</h3><p><code>element.compareDocumentPostion(node) return number</code></p><blockquote><p>number 如下定义,由于16的二进制形式是’10000’,与’1,2,4,8’任意一个数字进行<code>按位与</code>操作得到的数字都是0,但与自身<code>按位与</code>得到的数字不是0,所以用<code>!!(number &amp; 16)</code>可以获得与<code>element.contains()</code>方法一样的真值.</p></blockquote><table><thead><tr><th style="text-align:center">number</th><th style="text-align:center">node相对于element的节点关系</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">无关</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">居前</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">居后</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">包含</td></tr><tr><td style="text-align:center">16</td><td style="text-align:center">被包含</td></tr></tbody></table><blockquote><p>所以得到一个兼容函数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">contains</span>(<span class="params">refNode, otherNode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> refNode.contains == <span class="string">"function"</span> &amp;&amp;</span><br><span class="line">    (!client.engine.webkit || client.engine.webkit &gt;= <span class="number">522</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> refNode.contains(otherNode);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> refNode.compareDocumentPosition == <span class="string">"function"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> !!(refNode.compareDocumentPosition(otherNode) &amp; <span class="number">16</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> node = otherNode.parentNode;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (node === refNode) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        node = node.parentNode;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (node !== <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入文本"><a href="#插入文本" class="headerlink" title="插入文本"></a>插入文本</h3><ul><li><code>element.innerText</code>属性.</li></ul><blockquote><p>读取时由浅入深,将文档树的文本拼接,在写入时,删除所有子节点,插入包含相应文本值的文本节点,只会生成一个文本节点<br>设置<code>innerText</code>属性时会对HTML语法字符(小于号,大于号,引号,句号)进行编码</p></blockquote><ul><li><code>element.textContent</code>属性</li></ul><blockquote><p>与innerText的区别是,<code>textContent</code>会返回行内样式和脚本的代码,不过也不一定,浏览器不统一</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInnerText</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">typeof</span> element.textContent == <span class="string">"string"</span>) ? </span><br><span class="line">        element.textContent : element.innerText;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setInnerText</span>(<span class="params">element, text</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> element.textContent == <span class="string">"string"</span>)&#123;</span><br><span class="line">        element.textContent = text;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        element.innerText = text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>element.outerText</code>属性,不建议使用<blockquote><p>读取时与innerText返回值相同,写入时用文本节点替换掉调用它的元素节点(自己)</p></blockquote></li></ul><h3 id="滚动"><a href="#滚动" class="headerlink" title="滚动"></a>滚动</h3><ul><li><code>element.scrollIntoViewIfNeeded(boolean)</code>：只在当前元素在视口中不可见的情况下，才滚动浏览器窗口或容器元素，最终让它可见。如果当前元素在视口中可见，这个方法什么也不做。如果将可选的 <code>boolean</code> 参数设置为 true，则表示尽量将元素显示在视口中部（垂直方向）。Safari 和 Chrome 实现了这个方法。 </li><li><code>element.scrollByLines(lineCount)</code>：将元素的内容滚动指定的行高，lineCount 值可以是正值，也可以是负值。Safari 和 Chrome 实现了这个方法。 </li><li><code>element.scrollByPages(pageCount)</code>：将元素的内容滚动指定的页面高度，具体高度由元素的高度决定。Safari 和 Chrome 实现了这个方法。</li></ul><blockquote><p>希望大家要注意的是，<code>scrollIntoView()</code>和 <code>scrollIntoViewIfNeeded()</code>的作用对象是元素的 容器，而 <code>scrollByLines()</code>和 <code>scrollByPages()</code>影响的则是元素自身<br>由于 <code>element.scrollIntoView()</code>是唯一一个所有浏览器都支持的方法，因此还是这个方法最常用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在当前元素不可见的时候，让它进入浏览器的视口 </span></span><br><span class="line"><span class="built_in">document</span>.images[<span class="number">0</span>].scrollIntoViewIfNeeded();</span><br><span class="line"></span><br><span class="line"><span class="comment">//将页面主体往回滚动 1 页 </span></span><br><span class="line"><span class="built_in">document</span>.body.scrollByPages(<span class="number">-1</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;选择符API&quot;&gt;&lt;a href=&quot;#选择符API&quot; class=&quot;headerlink&quot; title=&quot;选择符API&quot;&gt;&lt;/a&gt;选择符API&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;document/element.querySelector() return no
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正反馈系列:《JavaScript高级程序设计》DOM 1级</title>
    <link href="http://yoursite.com/2017/12/22/%E9%AB%98%E7%A8%8Bvol5-10%E7%AB%A0-dom1/"/>
    <id>http://yoursite.com/2017/12/22/高程vol5-10章-dom1/</id>
    <published>2017-12-21T20:50:41.000Z</published>
    <updated>2018-03-21T10:23:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>本章主要讨论<code>DOM 1级规范</code></p><h2 id="节点层次"><a href="#节点层次" class="headerlink" title="节点层次"></a>节点层次</h2><h2 id="Node类型"><a href="#Node类型" class="headerlink" title="Node类型"></a>Node类型</h2><blockquote><p>javascript中所有的节点都继承自<code>Node</code>类型,因此所有节点类型都共享着相同的基本属性和方法</p><p>节点类型由在Node类型中定义的12个数值常量来表示,任何节点类型必居其一</p></blockquote><ul><li>Node.ELEMENT_NODE(1)； //元素节点,1</li><li>Node.ATTRIBUTE_NODE(2)； //特性节点,2</li><li>Node.TEXT_NODE(3)； //文本节点3</li><li>Node.CDATA_SECTION_NODE(4)；</li><li>Node.ENTITY_REFERENCE_NODE(5)； </li><li>Node.ENTITY_NODE(6)； </li><li>Node.PROCESSING_INSTRUCTION_NODE(7)； </li><li>Node.COMMENT_NODE(8)；</li><li>Node.DOCUMENT_NODE(9)； </li><li>Node.DOCUMENT_TYPE_NODE(10)； </li><li>Node.DOCUMENT_FRAGMENT_NODE(11)； </li><li>Node.NOTATION_NODE(12)。</li></ul><h3 id="node-nodeType-node-nodeName-node-nodeValue"><a href="#node-nodeType-node-nodeName-node-nodeValue" class="headerlink" title="node.nodeType,node.nodeName,node.nodeValue"></a>node.nodeType,node.nodeName,node.nodeValue</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IE的节点是COM实现的,所以在IE中无效</span></span><br><span class="line"><span class="keyword">if</span> (someNode.nodeType == Node.ELEMENT_NODE) &#123;</span><br><span class="line">  alert(<span class="string">"Node is an element."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (someNode.nodeType == <span class="number">1</span>) &#123; </span><br><span class="line">  <span class="comment">//适用于所有浏览器 alert("Node is an element."); </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">nodeType</th><th style="text-align:center">nodeName</th><th style="text-align:center">nodeValue</th></tr></thead><tbody><tr><td style="text-align:center">element</td><td style="text-align:center">1</td><td style="text-align:center">标签名</td><td style="text-align:center">null</td></tr><tr><td style="text-align:center">attribute</td><td style="text-align:center">2</td><td style="text-align:center">特性名</td><td style="text-align:center">特性值</td></tr><tr><td style="text-align:center">text</td><td style="text-align:center">3</td><td style="text-align:center">#text</td><td style="text-align:center">文本值</td></tr></tbody></table><h3 id="node-childNodes属性-NodeList对象"><a href="#node-childNodes属性-NodeList对象" class="headerlink" title="node.childNodes属性,NodeList对象"></a>node.childNodes属性,NodeList对象</h3><p><img src="https://i.loli.net/2017/12/22/5a3c1e6eacf0d.jpg" alt=""></p><blockquote><p>每个节点都有一个<code>childNodes</code>属性,其中保存着一个<code>NodeList</code>对象,对象里面装着node的子节点, <code>NodeList</code>是伪数组,用于保存一组有序节点,可以通过为止来访问这些节点,有<code>length</code>属性.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以通过方括号,或item()方法访问childNodes中保存的NodeList对象(伪数组)</span></span><br><span class="line"><span class="keyword">var</span> firstChild = someNode.childNodes[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> secondChild = someNode.childNodes.item(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> count = someNode.childNodes.length;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将NodeList转化为数组</span></span><br><span class="line"><span class="keyword">var</span> arrayOfNodes = <span class="built_in">Array</span>.prototype.slice.call(someNode.childNodes,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//IE浏览器将NodeList(IE中是一个COM对象)转化为数组</span></span><br><span class="line"><span class="comment">//导致错误后手动转化数组,怪癖检测</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertToArray</span>(<span class="params">nodes</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> array = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    array = <span class="built_in">Array</span>.prototype.slice.call(nodes, <span class="number">0</span>); <span class="comment">//针对非 IE 浏览器 </span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">    array = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = nodes.length; i &lt; len; i++) &#123;</span><br><span class="line">      array.push(nodes[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="node-parentNode属性"><a href="#node-parentNode属性" class="headerlink" title="node.parentNode属性"></a>node.parentNode属性</h3><blockquote><p>指向父节点,一个childNodes列表中的所有节点都有相同的父节点</p></blockquote><h3 id="node-previousSibling-node-nextSibling"><a href="#node-previousSibling-node-nextSibling" class="headerlink" title="node.previousSibling,node.nextSibling"></a>node.previousSibling,node.nextSibling</h3><blockquote><p>childNodes列表中的每个节点相互之间是同胞节点,列表第一个节点的previousSibling和列表最后一个节点的nextSibling的值是null</p></blockquote><h3 id="node-firstChild-node-lastChild"><a href="#node-firstChild-node-lastChild" class="headerlink" title="node.firstChild,node.lastChild"></a>node.firstChild,node.lastChild</h3><blockquote><p>分别指向childNodes列表的第一个子节点和最后一个子节点,没有则为null</p></blockquote><h3 id="node-hasChildNodes"><a href="#node-hasChildNodes" class="headerlink" title="node.hasChildNodes()"></a>node.hasChildNodes()</h3><p><code>node.hasChildNodes() return boolean</code></p><blockquote><p>此方法在node包含1到多个子节点的情况下返回true</p></blockquote><h3 id="node-ownerDocument属性"><a href="#node-ownerDocument属性" class="headerlink" title="node.ownerDocument属性"></a>node.ownerDocument属性</h3><blockquote><p>该属性指向node所在文档的文档节点<code>&lt;html&gt;</code></p></blockquote><h3 id="node-appendChild"><a href="#node-appendChild" class="headerlink" title="node.appendChild()"></a>node.appendChild()</h3><p><code>node.appendChild(node1),return node1</code></p><blockquote><p>在node节点的childNodes列表最后增加一个节点node1,并返回node1<br>若node1已经是文档的一部分了,则变为剪切</p></blockquote><h3 id="node-insertBefore"><a href="#node-insertBefore" class="headerlink" title="node.insertBefore()"></a>node.insertBefore()</h3><p><code>node.insertBefore(node1[,node2]) return node1</code></p><blockquote><p>将node1插入到node的childNodes子节点列表的node2之前,作为node2的previousSibiling,若node2为null,则和appendChild()执行同样操作,插入到childNodes尾部</p></blockquote><h3 id="node-replaceChild"><a href="#node-replaceChild" class="headerlink" title="node.replaceChild()"></a>node.replaceChild()</h3><p><code>node.replaceChild(node1,node2) return node2</code></p><blockquote><p>将node1放入到node的childNotes列表中的note2处替换掉node2,将node2返回</p></blockquote><h3 id="node-removeChild"><a href="#node-removeChild" class="headerlink" title="node.removeChild()"></a>node.removeChild()</h3><p><code>node.removeChild(node1) return node1</code></p><blockquote><p>将node1从node的childNotes列表中移除,并返回</p></blockquote><h3 id="node-cloneNode"><a href="#node-cloneNode" class="headerlink" title="node.cloneNode()"></a>node.cloneNode()</h3><p><code>node.cloneNode(boolean) return nodeCopy</code></p><blockquote><p>复制node节点,并返回复制的节点副本<br>boolean为true深复制(复制节点以及整个子节点树),为false浅复制(只复制节点本身),复制后返回的节点副本没有被插入文档,需手动将其插入文档某个位置<br>不复制事件,只复制特性</p></blockquote><h2 id="Document-类型"><a href="#Document-类型" class="headerlink" title="Document 类型"></a>Document 类型</h2><blockquote><p>JavaScript 通过 Document 类型表示文档.<br>document 对象是 HTMLDocument（继承 自 Document 类型）的一个实例，表示整个 HTML 页面。<br>document 对象是 window 对象的一个属性，因此可以将其作为全局对象来访问</p></blockquote><h3 id="document对象的基本属性"><a href="#document对象的基本属性" class="headerlink" title="document对象的基本属性"></a>document对象的基本属性</h3><ul><li><code>nodeType</code> : 9</li><li><code>nodeName</code> : #document</li><li><code>nodeValue</code> : null</li><li><code>parentNode</code> : null</li><li><code>ownerDocument</code> : null</li><li><code>documentElement</code> : <code>&lt;html&gt;</code></li><li><code>body</code> : <code>&lt;body&gt;</code></li><li><code>childNodes</code>列表 : 包含<html>的子节点列表</html></li><li><code>doctype</code>: DocumentType_NODE(10)类型,就是&lt;!DOCTYPE&gt;</li><li>（最多一个）、Element（最多一个）、ProcessingInstruction 或 Comment</li></ul><h3 id="document-documentElement属性"><a href="#document-documentElement属性" class="headerlink" title="document.documentElement属性"></a>document.documentElement属性</h3><blockquote><p>该属性指向<html>元素</html></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> html = <span class="built_in">document</span>.documentElement; <span class="comment">//取得对&lt;html&gt;的引用</span></span><br><span class="line">alert(html === <span class="built_in">document</span>.childNodes[<span class="number">0</span>]); <span class="comment">//true</span></span><br><span class="line">alert(html === <span class="built_in">document</span>.firstChild); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="document-body"><a href="#document-body" class="headerlink" title="document.body"></a>document.body</h3><blockquote><p>该属性指向<code>&lt;body&gt;</code>元素</p></blockquote><h3 id="document-doctype"><a href="#document-doctype" class="headerlink" title="document.doctype"></a>document.doctype</h3><blockquote><p>DocumentType_NODE(10)类型<br>该属性指向<code>&lt;!DOCTYPE&gt;</code></p></blockquote><h3 id="document-title"><a href="#document-title" class="headerlink" title="document.title"></a>document.title</h3><blockquote><p>当前页面标题,修改会反应在浏览器标题栏中</p></blockquote><h3 id="document-URL-document-domain-document-referrer"><a href="#document-URL-document-domain-document-referrer" class="headerlink" title="document.URL,document.domain,document.referrer"></a>document.URL,document.domain,document.referrer</h3><blockquote><p>URL属性包含页面完整URL ‘<a href="http://www.wrox.com/WileyCDA/" target="_blank" rel="noopener">http://www.wrox.com/WileyCDA/</a>‘<br>domain只包含页面的域名 ‘www.wrox.com’<br>referrer保存链接到当前页面的那个页面URL,若无来源,可能是空字符串<br>这三个信息都存在于HTTP请求的头部,只不过这些属性让我们可以用js访问它们</p></blockquote><h3 id="document-getElementsByTagName"><a href="#document-getElementsByTagName" class="headerlink" title="document.getElementsByTagName()"></a>document.getElementsByTagName()</h3><p><code>document.getElementsByTagName() return HTMLCollection</code></p><blockquote><p>HTMLCollection对象是一个动态集合,与NodeList非常类似,可以用<code>.item(index)</code>方法来访问其中的项, 有<code>length</code>属性<br>HTMLCollection有<code>.namedItem()</code>方法,使用这个方法可以通过元素<code>name</code>特性取得集合中的项<br>对有<code>name</code>特性的项,可以用方括号语法访问,与下例<code>.namedItem()</code>作用相同.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;img src="myimage.gif" name="myImage"&gt;</span></span><br><span class="line"><span class="keyword">var</span> images = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>);</span><br><span class="line">alert(images.length);</span><br><span class="line">alert(images[<span class="number">0</span>].src);</span><br><span class="line">alert(images.item(<span class="number">0</span>).src);</span><br><span class="line"><span class="keyword">var</span> myImage = images[<span class="string">"myImage"</span>]; <span class="comment">//返回与下一行一样的结果</span></span><br><span class="line"><span class="keyword">var</span> myImage = images.namedItem(<span class="string">"myImage"</span>); <span class="comment">// 返回与上一行一样的结果</span></span><br><span class="line"><span class="keyword">var</span> allElements = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"*"</span>);<span class="comment">//返回页面所有元素</span></span><br></pre></td></tr></table></figure><p>对 <code>HTMLCollection</code> 而言，我们可以向方括号中传入数值或字符串形式的索引值。在后台，对数值索引就会调用 <code>item()</code>，而对字符串索引就会调用 <code>namedItem()</code>。</p><h3 id="document-getElementsbyName"><a href="#document-getElementsbyName" class="headerlink" title="document.getElementsbyName()"></a>document.getElementsbyName()</h3><p><code>document.getElementsbyName() return HTMLCollection</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"red"</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">id</span>=<span class="string">"colorRed"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"colorRed"</span>&gt;</span>Red<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"green"</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">id</span>=<span class="string">"colorGreen"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"colorGreen"</span>&gt;</span>Green<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"blue"</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">id</span>=<span class="string">"colorBlue"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"colorBlue"</span>&gt;</span>Blue<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下述代码只能选中被选中的input单选框</span></span><br><span class="line"><span class="comment">// 因为返回的HTMLCollection调用了.namedItem('color'),只会选择第一项</span></span><br><span class="line"><span class="comment">// 因为每项name特性都相同</span></span><br><span class="line"><span class="built_in">document</span>.getElementsbyName(<span class="string">'color'</span>)</span><br></pre></td></tr></table></figure><h3 id="特殊集合"><a href="#特殊集合" class="headerlink" title="特殊集合"></a>特殊集合</h3><ul><li><code>document.anchors</code>，包含文档中所有带 name 特性的<code>&lt;a&gt;</code>元素； </li><li><code>document.forms</code>，包含文档中所有的<code>&lt;form&gt;</code>元素，与 document.getElementsByTagName(“form”) 得到的结果相同； </li><li><code>document.images</code>，包含文档中所有的<code>&lt;img&gt;</code>元素，与 document.getElementsByTagName (“img”)得到的结果相同； </li><li><code>document.links</code>，包含文档中所有带 href 特性的<code>&lt;a&gt;</code>元素。</li></ul><h3 id="其他简单方法"><a href="#其他简单方法" class="headerlink" title="其他简单方法"></a>其他简单方法</h3><ul><li><code>document.getElementbyId()</code></li><li><code>document.write()</code> 重写文档内容</li><li><code>document.writeln()</code> 重写文档内容,结尾加’\n’</li><li><code>document.open()</code> 打开文档输出流</li><li><code>document.close()</code> 关闭文档输出流</li></ul><h2 id="Element类型"><a href="#Element类型" class="headerlink" title="Element类型"></a>Element类型</h2><h3 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h3><ul><li><code>nodeType</code> : 1</li><li><code>nodeName</code> : 标签名</li><li><code>nodeValue</code> : null</li><li><code>nodeName</code> : <code>tagName</code></li><li><code>tagName</code> : <code>nodeName</code></li></ul><h3 id="HTML元素"><a href="#HTML元素" class="headerlink" title="HTML元素"></a>HTML元素</h3><blockquote><p>所有 HTML 元素都由 HTMLElement 类型表示，不是直接通过这个类型，也是通过它的子类型来表示。HTMLElement 类型直接继承自 Element 并添加了一些属性。添加的这些属性分别对应于每个 HTML 元素中都存在的下列标准特性。</p></blockquote><h3 id="HTML元素-基本属性"><a href="#HTML元素-基本属性" class="headerlink" title="HTML元素 基本属性"></a>HTML元素 基本属性</h3><ul><li><code>id</code></li><li><code>title</code> : 附加信息说明,工具条提示</li><li><code>lang</code> : 语言编码,很少使用</li><li><code>dir</code> : 语言方向,值为<code>ltr</code>,<code>rtl</code>(left to right, right to left)</li><li><code>className</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;div id="myDiv" class="bd" title="Body text" lang="en" dir="ltr"&gt;&lt;/div&gt; </span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line">alert(div.id); <span class="comment">//"myDiv"" </span></span><br><span class="line">alert(div.className); <span class="comment">//"bd" </span></span><br><span class="line">alert(div.title); <span class="comment">//"Body text" </span></span><br><span class="line">alert(div.lang); <span class="comment">//"en" </span></span><br><span class="line">alert(div.dir); <span class="comment">//"ltr"</span></span><br></pre></td></tr></table></figure><h3 id="取得特性"><a href="#取得特性" class="headerlink" title="取得特性"></a>取得特性</h3><blockquote><p>注意:若要获得class值,attr位置应该是<code>class</code>,而不是<code>className</code><br>根据HTML5规范,自定义特性应该加上<code>data</code>前缀,以便验证<br>两类用getAttribute获取达不到预期的特性:<code>style</code>* 和<code>onclick等事件</code><br>setAttribute设置的特姓名会转为小写</p></blockquote><ul><li><code>htmlElement.getAttribute(attr) return string</code> </li><li><code>htmlElement.setAttribute(attr,value)</code> </li><li><code>htmlElement.removeAttribute(attr)</code></li></ul><p>不过，像下面这样为 DOM 元素添加一个自定义的属性，该属性不会自动成为元素的特性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">div.mycolor = <span class="string">"red"</span>; </span><br><span class="line">alert(div.getAttribute(<span class="string">"mycolor"</span>)); <span class="comment">//null（IE 除外）</span></span><br></pre></td></tr></table></figure><h3 id="attributes属性"><a href="#attributes属性" class="headerlink" title="attributes属性"></a>attributes属性</h3><p>Element 类型是使用 <code>attributes</code> 属性的唯一一个 DOM 节点类型。<code>attributes</code> 属性中包含一个<code>NamedNodeMap</code>，与 <code>NodeList</code> 类似，也是一个“动态”的集合。元素的每一个特性都由一个 <code>Attr 节点</code>表示，每个节点都保存在 <code>NamedNodeMap</code> 对象中。<code>NamedNodeMap</code> 对象拥有下列方法。</p><ul><li><code>getNamedItem(name) return nodeName</code>：返回 <code>nodeName</code> 属性等于 <code>name</code> 的节点； </li><li><code>removeNamedItem(name)</code>：从列表中移除 <code>nodeName</code> 属性等于 <code>name</code> 的节点； </li><li><code>setNamedItem(node)</code>：向列表中添加节点，以节点的 <code>nodeName</code> 属性为索引； </li><li><code>item(pos)</code>：返回位于数字 pos 位置处的节点。</li></ul><blockquote><p>看一些例子</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等同于var id = element.id</span></span><br><span class="line"><span class="keyword">var</span> id = element.attributes.getNamedItem(<span class="string">"id"</span>).nodeValue;</span><br><span class="line"><span class="keyword">var</span> id = element.attributes[<span class="string">"id"</span>].nodeValue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于element.id = 'someOtherId'</span></span><br><span class="line">element.attributes[<span class="string">"id"</span>].nodeValue = <span class="string">"someOtherId"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> oldAttr = element.attributes.removeNamedItem(<span class="string">"id"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// setNamedItem极其没用</span></span><br><span class="line">element.attributes.setNamedItem(newAttrNode);</span><br></pre></td></tr></table></figure><h3 id="document-createElement"><a href="#document-createElement" class="headerlink" title="document.createElement()"></a>document.createElement()</h3><p><code>document.createElement(tagName) return HTMLElement</code></p><blockquote><p>创建元素的同时,也为元素设置了ownerDocument属性<br>返回的HTMLElenment未添加入文档树,需要手动添加</p></blockquote><h3 id="HTMLElement-getElementsByTagName"><a href="#HTMLElement-getElementsByTagName" class="headerlink" title="HTMLElement.getElementsByTagName()"></a>HTMLElement.getElementsByTagName()</h3><blockquote><p>像Document一样,HTMLElement同样支持此方法</p></blockquote><h2 id="Text类型"><a href="#Text类型" class="headerlink" title="Text类型"></a>Text类型</h2><h3 id="基本属性-1"><a href="#基本属性-1" class="headerlink" title="基本属性"></a>基本属性</h3><ul><li><code>nodeType</code> : 3</li><li><code>nodeName</code> : “#text”</li><li><code>nodeValue</code> : 节点所包含文本</li><li><code>parentNode</code> : 一个Element</li><li>没有子节点</li><li><code>data</code> : == <code>nodeValue</code></li><li><code>appendData(text)</code>：将 text 添加到节点的末尾。</li><li><code>deleteData(offset, count)</code>：从 offset 指定的位置开始删除 count 个字符。</li><li><code>insertData(offset, text)</code>：在 offset 指定的位置插入 text。</li><li><code>replaceData(offset, count, text)</code>：用 text 替换从 offset 指定的位置开始到 offset+ count 为止处的文本。</li><li><code>splitText(offset)</code>：从 offset 指定的位置将当前文本节点分成两个文本节点。</li><li><code>substringData(offset, count)</code>：提取从 offset 指定的位置开始到 offset+count 为止 处的字符串。</li><li><code>length</code>: nodeValue.length 或 data.length中也保存着同样的值</li></ul><blockquote><p>用js修改文本节点的值后,其会经过html或xml编码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出结果是"Some &amp;lt;strong&amp;gt;other&amp;lt;/strong&amp;gt; message" </span></span><br><span class="line">div.firstChild.nodeValue = <span class="string">"Some &lt;strong&gt;other&lt;/strong&gt; message"</span>;</span><br></pre></td></tr></table></figure><h3 id="document-createTextNode"><a href="#document-createTextNode" class="headerlink" title="document.createTextNode()"></a>document.createTextNode()</h3><p><code>document.createTextNode() return textNode</code> </p><blockquote><p>创建文本节点,要经过html编码,未插入文档,需要手动插入</p></blockquote><h3 id="node-normalize"><a href="#node-normalize" class="headerlink" title="node.normalize()"></a>node.normalize()</h3><blockquote><p>这个方法唯一的作用就是处理文档树中的文本节点。由于解析器的实现或 DOM 操作等原因，可能会出现文本节点不包含文本，或者接连出现两个文本节点的情况。当在某个节点上调用这个方法时，就会在该节点的后代节点中查找上述两种情况。如果找到了空文本节点，则删除它；如果找到相邻的文本节点，则将它们合并为一个文本节点<br>结果节点的 nodeValue 等于将合并前每个文本节点的 nodeValue 值拼接起来的值。</p></blockquote><h3 id="textNode-splitText"><a href="#textNode-splitText" class="headerlink" title="textNode.splitText()"></a>textNode.splitText()</h3><p><code>textNode.splitText(startPos) return nodeElement</code></p><blockquote><p>Text 类型提供了一个作用与 normalize()相反的方法：splitText()。这个方法会将一个文本节点分成两个文本节点，即按照指定的位置分割 nodeValue 值。原来的文本节点将包含从开始到指定位置之前的内容，新文本节点将包含剩下的文本。这个方法会返回一个新文本节点，该节点与原节点的 parentNode 相同。<br>经过splitText处理的文本节点, 分离后的两个文本节点都将留在html结构中.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">element.className = <span class="string">"message"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> textNode = <span class="built_in">document</span>.createTextNode(<span class="string">"Hello world!"</span>);</span><br><span class="line">element.appendChild(textNode);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(element);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newNode = element.firstChild.splitText(<span class="number">5</span>);</span><br><span class="line">alert(element.firstChild.nodeValue);  <span class="comment">//"Hello"</span></span><br><span class="line">alert(newNode.nodeValue);             <span class="comment">//"world!"</span></span><br><span class="line">alert(element.childNodes.length);     <span class="comment">//2</span></span><br></pre></td></tr></table></figure><h2 id="Comment类型"><a href="#Comment类型" class="headerlink" title="Comment类型"></a>Comment类型</h2><ul><li><code>nodeType</code> : 8</li><li><code>nodeName</code> : “#comment”</li><li><code>nodeValue</code> : 注释内容</li><li><code>parentNode</code> : 可能是Document或Element</li><li>没有子节点</li><li><code>data</code> : == <code>nodeValue</code></li><li><code>appendData(text)</code>：将 text 添加到节点的末尾。</li><li><code>deleteData(offset, count)</code>：从 offset 指定的位置开始删除 count 个字符。</li><li><code>insertData(offset, text)</code>：在 offset 指定的位置插入 text。</li><li><code>replaceData(offset, count, text)</code>：用 text 替换从 offset 指定的位置开始到 offset+ count 为止处的文本。</li><li><code>splitText(offset)</code>：从 offset 指定的位置将当前文本节点分成两个文本节点。</li><li><code>substringData(offset, count)</code>：提取从 offset 指定的位置开始到 offset+count 为止 处的字符串。</li><li><code>length</code>: nodeValue.length 或 data.length中也保存着同样的值</li></ul><blockquote><p>与Text类型继承自同样的基类,拥有除splitText()外所有字符换操作方法. 与Text类型类似, 也可以通过nodeValue或data属性来取得注释内容</p></blockquote><ul><li><code>document.createComment(commentContent) return commentNode</code> 创建注释节点</li></ul><h2 id="其他类型"><a href="#其他类型" class="headerlink" title="其他类型"></a>其他类型</h2><h3 id="CDATASection类型"><a href="#CDATASection类型" class="headerlink" title="CDATASection类型"></a>CDATASection类型</h3><p>只针对XML文档,详情见高程P274</p><h3 id="DocumentType类型"><a href="#DocumentType类型" class="headerlink" title="DocumentType类型"></a>DocumentType类型</h3><p>这个对象保存在document.doctype中,只有一个name属性保存文档类型的名称(‘html’),详情见高程p274</p><h3 id="DocumentFragment类型"><a href="#DocumentFragment类型" class="headerlink" title="DocumentFragment类型"></a>DocumentFragment类型</h3><p>相当于一个后备”仓库”,用来存放将来可能会用到的节点,避免浏览器反复渲染,用的不多,详情见高程p275</p><h3 id="Attr类型"><a href="#Attr类型" class="headerlink" title="Attr类型"></a>Attr类型</h3><p>特性节点,但不建议用里面的api,使用getAttribute,setAttribute,removeAttribute远比其方便,详情见高程p276</p><h2 id="DOM-操作技术"><a href="#DOM-操作技术" class="headerlink" title="DOM 操作技术"></a>DOM 操作技术</h2><h3 id="动态脚本"><a href="#动态脚本" class="headerlink" title="动态脚本"></a>动态脚本</h3><blockquote><p>指页面加载时不存在,需要时再加载入html结构的script</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// url外部引入方式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">  script.type = <span class="string">'text/javascript'</span></span><br><span class="line">  script.src = url</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(script)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传递代码字符串,行内执行方式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">  script.type = <span class="string">'text/javascript'</span></span><br><span class="line">  script.appendChild(<span class="built_in">document</span>.createTextNode(code))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>代码会在IE中报错,原因是IE不允许DOM访问script标签的子节点,<br>解决办法是使用<code>script</code>元素的<code>text</code>属性来指定代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">    script.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">    script.text = <span class="string">"function sayHi()&#123;alert('hi');&#125;"</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>综合上述,得到向下兼容IE7的代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScriptString</span>(<span class="params">code</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">    script.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        script.appendChild(<span class="built_in">document</span>.createTextNode(code));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ex)&#123;</span><br><span class="line">        script.text = code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addScript</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    loadScriptString(<span class="string">"function sayHi()&#123;alert('hi');&#125;"</span>);</span><br><span class="line">    sayHi();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态样式"><a href="#动态样式" class="headerlink" title="动态样式"></a>动态样式</h3><blockquote><p>link标签最佳实践是放在head标签内,让html结构没加载时就开始加载css.若放在body标签内,可能会出现本来没样式的结构突然又有了样式的”闪屏”</p><p>动态样式基本套路和动态脚本一样,直接上代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadStyles</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">'link'</span>)</span><br><span class="line">  link.rel=<span class="string">"stylesheet"</span></span><br><span class="line">  link.type=<span class="string">'css'</span></span><br><span class="line">  link.href=url</span><br><span class="line">  <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(link)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>解决IE的问题是访问元素的styleSheet属性的属性cssText,其接受css代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadStyleString</span>(<span class="params">css</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> style = <span class="built_in">document</span>.createElement(<span class="string">"style"</span>);</span><br><span class="line">    style.type = <span class="string">"text/css"</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        style.appendChild(<span class="built_in">document</span>.createTextNode(css));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ex)&#123;</span><br><span class="line">        style.styleSheet.cssText = css;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>];</span><br><span class="line">    head.appendChild(style);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addStyle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    loadStyleString(<span class="string">"body&#123;background-color:red&#125;"</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="操作表格"><a href="#操作表格" class="headerlink" title="操作表格"></a>操作表格</h3><blockquote><p>js为表格操作添加了一些api</p></blockquote><ul><li><code>&lt;table&gt;</code><ul><li>caption：保存着对<caption>元素（如果有）的指针。 </caption></li><li>tBodies：是一个<tbody>元素的 HTMLCollection。 </tbody></li><li>tFoot：保存着对<tfoot>元素（如果有）的指针。 </tfoot></li><li>tHead：保存着对<thead>元素（如果有）的指针。 </thead></li><li>rows：是一个表格中所有行的 HTMLCollection。 </li><li>createTHead()：创建<thead>元素，将其放到表格中，返回引用。 </thead></li><li>createTFoot()：创建<tfoot>元素，将其放到表格中，返回引用。 </tfoot></li><li>createCaption()：创建<caption>元素，将其放到表格中，返回引用。 </caption></li><li>deleteTHead()：删除<thead>元素。 </thead></li><li>deleteTFoot()：删除<tfoot>元素。 </tfoot></li><li>deleteCaption()：删除<caption>元素。 </caption></li><li>deleteRow(pos)：删除指定位置的行。 </li><li>insertRow(pos)：向 rows 集合中的指定位置插入一行。 </li></ul></li><li><code>&lt;tbody&gt;</code><ul><li>rows：保存着<tbody>元素中行的 HTMLCollection。 </tbody></li><li>deleteRow(pos)：删除指定位置的行。 </li><li>insertRow(pos)：向 rows 集合中的指定位置插入一行，返回对新插入行的引用。   </li></ul></li><li><code>&lt;tr&gt;</code><ul><li>cells：保存着<tr>元素中单元格的 HTMLCollection。 </tr></li><li>deleteCell(pos)：删除指定位置的单元格。</li><li>insertCell(pos)：向 cells 集合中的指定位置插入一个单元格，返回对新插入单元格的引用。</li></ul></li></ul><h3 id="使用NodeList"><a href="#使用NodeList" class="headerlink" title="使用NodeList"></a>使用NodeList</h3><blockquote><p>NodeList及其近亲NamedNodeMap和HTMLCollection都是动态的,每当文档结构发生变化,它们都会得到更新</p></blockquote><p>看一个无限循环的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> divs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>), i, div;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; divs.length; i++)&#123; </span><br><span class="line">    div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>); </span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决方法如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> divs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>), i, len, div;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>, len=divs.length; i &lt; len; i++)&#123; </span><br><span class="line">    div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>); </span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本章主要讨论&lt;code&gt;DOM 1级规范&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;节点层次&quot;&gt;&lt;a href=&quot;#节点层次&quot; class=&quot;headerlink&quot; title=&quot;节点层次&quot;&gt;&lt;/a&gt;节点层次&lt;/h2&gt;&lt;h2 id=&quot;Node类型&quot;&gt;&lt;a href=&quot;#Node
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正反馈系列:《JavaScript高级程序设计》BOM &amp; 客户端检测</title>
    <link href="http://yoursite.com/2017/12/21/%E9%AB%98%E7%A8%8Bvol4-89%E7%AB%A0-bom-ua/"/>
    <id>http://yoursite.com/2017/12/21/高程vol4-89章-bom-ua/</id>
    <published>2017-12-21T03:56:09.000Z</published>
    <updated>2018-03-21T10:23:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BOM-第八章"><a href="#BOM-第八章" class="headerlink" title="BOM(第八章)"></a>BOM(第八章)</h1><h2 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h2><p>全局变量不能通过<code>delete</code>操作符删除([[Configurable]]为false),而<code>window</code>对象上的属性可以</p><p><code>location</code>与<code>naviagator</code>是<code>window</code>的属性</p><h3 id="窗口关系与框架"><a href="#窗口关系与框架" class="headerlink" title="窗口关系与框架"></a>窗口关系与框架</h3><p>涉及<code>framset</code>,<code>frame</code>标签,和<code>window</code>对象中的<code>window.top</code>,<code>window.parent</code>等,用的不多,需要用时查阅p194</p><h3 id="窗口位置"><a href="#窗口位置" class="headerlink" title="窗口位置"></a>窗口位置</h3><blockquote><p>不同浏览器情况杂乱特殊,建议使用时查阅高程p197<br>表示窗口相对于屏幕左边和上边的位置,但下述值所表达的位置基点有小差异,具体参阅高程p197</p></blockquote><ul><li><code>window.screenLeft</code>,<code>window.screenTop</code> IE,Safari,Opera,Chrome</li><li><code>window.screenX</code>,<code>window.screenY</code>, FireFox,Safari,Chrome</li></ul><p>兼容代码:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> leftPos = (<span class="keyword">typeof</span> <span class="built_in">window</span>.screenLeft == <span class="string">"number"</span>) ? </span><br><span class="line">                  <span class="built_in">window</span>.screenLeft : <span class="built_in">window</span>.screenX;</span><br><span class="line"><span class="keyword">var</span> topPos = (<span class="keyword">typeof</span> <span class="built_in">window</span>.screenTop == <span class="string">"number"</span>) ? </span><br><span class="line">                  <span class="built_in">window</span>.screenTop : <span class="built_in">window</span>.screenY;</span><br><span class="line"></span><br><span class="line">alert(<span class="string">"Left: "</span> + leftPos);</span><br><span class="line">alert(<span class="string">"Top: "</span> + topPos);</span><br></pre></td></tr></table></figure></p><h4 id="window-moveTo-window-moveBy"><a href="#window-moveTo-window-moveBy" class="headerlink" title="window.moveTo(),window.moveBy()"></a>window.moveTo(),window.moveBy()</h4><blockquote><p>这两个方法不适用于框架,且只对最外层(frameset那节的概念)的window对象使用</p></blockquote><p><code>window.moveTo(newLeftPos,newTopPos),window.moveBy(leftMove,TopMove)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将窗口移动到屏幕左上角 </span></span><br><span class="line"><span class="built_in">window</span>.moveTo(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将窗向下移动 100 像素</span></span><br><span class="line"><span class="built_in">window</span>.moveBy(<span class="number">0</span>,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将窗口移动到(200,300) </span></span><br><span class="line"><span class="built_in">window</span>.moveTo(<span class="number">200</span>,<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将窗口向左移动 50 像素 </span></span><br><span class="line"><span class="built_in">window</span>.moveBy(<span class="number">-50</span>,<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="窗口大小"><a href="#窗口大小" class="headerlink" title="窗口大小"></a>窗口大小</h3><blockquote><p>不同浏览器情况杂乱特殊,建议使用时查阅高程p198</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取得可视区域大小</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getClient</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    width: <span class="built_in">window</span>.innerWidth || <span class="built_in">document</span>.documentElement.clientWidth || <span class="built_in">document</span>.body.clientWidth || <span class="number">0</span>,</span><br><span class="line">    height: <span class="built_in">window</span>.innerHeight || <span class="built_in">document</span>.documentElement.clientHeight || <span class="built_in">document</span>.body.clientHeight || <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 作者版本</span></span><br><span class="line"><span class="keyword">var</span> pageWidth = <span class="built_in">window</span>.innerWidth,</span><br><span class="line">    pageHeight = <span class="built_in">window</span>.innerHeight;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> pageWidth != <span class="string">"number"</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.compatMode == <span class="string">"CSS1Compat"</span>)&#123;</span><br><span class="line">        pageWidth = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line">        pageHeight = <span class="built_in">document</span>.documentElement.clientHeight;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        pageWidth = <span class="built_in">document</span>.body.clientWidth;</span><br><span class="line">        pageHeight = <span class="built_in">document</span>.body.clientHeight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(<span class="string">"Width: "</span> + pageWidth);</span><br><span class="line">alert(<span class="string">"Height: "</span> + pageHeight);</span><br></pre></td></tr></table></figure><h4 id="window-resizeTo-window-resizeBy"><a href="#window-resizeTo-window-resizeBy" class="headerlink" title="window.resizeTo(),window.resizeBy()"></a>window.resizeTo(),window.resizeBy()</h4><blockquote><p>这两个方法同样不适用于框架，而只能对最外层的 window 对象使用。</p></blockquote><p><code>window.resizeTo(newWidth,newHeight)</code>,<code>window.resizeBy(modifyWidth,modifyHeight)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调整到 100×100 </span></span><br><span class="line"><span class="built_in">window</span>.resizeTo(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调整到 200×150 </span></span><br><span class="line"><span class="built_in">window</span>.resizeBy(<span class="number">100</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调整到 300×300 </span></span><br><span class="line"><span class="built_in">window</span>.resizeTo(<span class="number">300</span>, <span class="number">300</span>);</span><br></pre></td></tr></table></figure><h3 id="导航和打开窗口"><a href="#导航和打开窗口" class="headerlink" title="导航和打开窗口"></a>导航和打开窗口</h3><h4 id="window-open"><a href="#window-open" class="headerlink" title="window.open()"></a>window.open()</h4><p><code>window.open(url[,windowTarget,propString,boolean]),return newWindowObj</code></p><ul><li><code>windowTarget</code> 已有窗口或框架的名称,或特殊窗口名称<code>_self,_parent,_top,_blank</code></li><li><code>propString</code> 若windowTarget不是一个已存在窗口或框架,会根据propString打开一个新窗口或标签页.若没有第三个参数,会打开默认设置(各种栏)的新浏览器窗口或标签页,不打开新窗口时会忽略第三个参数<br><img src="https://i.loli.net/2017/12/21/5a3b3061a28de.jpg" alt=""></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//等同于&lt; a href="http://www.wrox.com" target="topFrame"&gt;&lt;/a&gt; </span></span><br><span class="line"><span class="built_in">window</span>.open(<span class="string">"http://www.wrox.com/"</span>, <span class="string">"topFrame"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开一个新的可以调整大小的窗口，窗口初始大小为 400×400 像素，并且距屏幕上沿 和左边各 10 像素</span></span><br><span class="line"><span class="built_in">window</span>.open(<span class="string">"http://www.wrox.com/"</span>,<span class="string">"wroxWindow"</span>, <span class="string">"height=400,width=400,top=10,left=10,resizable=yes"</span>);</span><br></pre></td></tr></table></figure><p>window.open()返回一个指向新窗口的引用,可以调整大小或移动位置(主浏览器窗口不被允许),也可以像操作其他窗口一样操作新打开的窗口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wroxWin = <span class="built_in">window</span>.open(<span class="string">"http://www.wrox.com/"</span>,<span class="string">"wroxWindow"</span>, <span class="string">"height=400,width=400,top=10,left=10,resizable=yes"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调整大小 </span></span><br><span class="line">wroxWin.resizeTo(<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//移动位置 </span></span><br><span class="line">wroxWin.moveTo(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 close()方法关闭窗口。</span></span><br><span class="line">wroxWin.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭后,wroxWin的引用依然存在,可以检测其close属性</span></span><br><span class="line">alert(wroxWin.closed);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>新创建的 window 对象有一个 opener 属性，其中保存着打开它的原始窗口对象。这个属性只在弹出窗口中的最外层 window 对象（top）中有定义，而且指向调用 window.open()的窗口或框架。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wroxWin = <span class="built_in">window</span>.open(<span class="string">"http://www.wrox.com/"</span>,<span class="string">"wroxWindow"</span>, <span class="string">"height=400,width=400,top=10,left=10,resizable=yes"</span>);</span><br><span class="line"></span><br><span class="line">alert(wroxWin.opener == <span class="built_in">window</span>);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在chrome中,将opner属性设置为null,即表示单独进程中运行新标签页(无法与打开它的window对象进行通信)</span></span><br><span class="line"><span class="comment">// 标签页之间联系一旦被切断, 没有办法恢复</span></span><br><span class="line"><span class="comment">// wroxWin.opener = null;</span></span><br></pre></td></tr></table></figure><h3 id="setTimeout-与-setInterval"><a href="#setTimeout-与-setInterval" class="headerlink" title="setTimeout() 与 setInterval"></a>setTimeout() 与 setInterval</h3><blockquote><p>time参数代表的时隔多少秒后将要执行的string或function放入js任务队列<br>function内部的this在非严格模式下指向<code>window</code>,严格模式<code>undefined</code><br>在开发中尽量使用setTimeout模拟setInterval,这是最佳实践,原因是setInterval的后一个interval有可能先于前一个Interval完成</p></blockquote><p><code>setTimeout(string/function,time),return id</code><br><code>clearTimeout(id)</code></p><p><code>setInterval(string/function,time) return id</code><br><code>clearInterval(id)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// setTimeout 模拟 setInterval, 最佳实践</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> max = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">incrementNumber</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    num++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//if the max has not been reached, set another timeout</span></span><br><span class="line">    <span class="keyword">if</span> (num &lt; max) &#123;</span><br><span class="line">        setTimeout(incrementNumber, <span class="number">500</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">"Done"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setTimeout(incrementNumber, <span class="number">500</span>);</span><br></pre></td></tr></table></figure><h2 id="系统对话框"><a href="#系统对话框" class="headerlink" title="系统对话框"></a>系统对话框</h2><blockquote><p>系统对话框都是同步和模态的: 显示对话框时代码停止,关掉对话框时代码执行</p></blockquote><h4 id="alert"><a href="#alert" class="headerlink" title="alert()"></a>alert()</h4><h4 id="confirm"><a href="#confirm" class="headerlink" title="confirm()"></a>confirm()</h4><p><code>confirm(…) return boolean</code></p><h4 id="promopt"><a href="#promopt" class="headerlink" title="promopt()"></a>promopt()</h4><p><code>prompt(hint,placeholder) return inputValue</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = prompt(<span class="string">"What is your name? "</span>, <span class="string">""</span>); </span><br><span class="line"><span class="keyword">if</span> (result !== <span class="literal">null</span>) &#123; </span><br><span class="line">    alert(<span class="string">"Welcome, "</span> + result); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="window-print-window-find"><a href="#window-print-window-find" class="headerlink" title="window.print(),window.find()"></a>window.print(),window.find()</h4><p>显示打印对话框,显示查找对话框</p><h2 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h2><p>既是window的属性,又是document的属性,<code>window.loacation === document.location //true</code>,</p><h3 id="location属性"><a href="#location属性" class="headerlink" title="location属性"></a>location属性</h3><p><img src="https://i.loli.net/2017/12/21/5a3b3061f2634.jpg" alt=""></p><ul><li><code>location.hash</code> ‘#contents’</li><li><code>location.host</code> ‘www.wrox.com:80’</li><li><code>location.hostname</code> ‘www.wrox.com’</li><li><code>location.protocol</code> ‘http:’</li><li><code>location.port</code> ’80’</li><li><code>location.href</code> ‘<a href="http://www.wrox.com/?q=javascripts&amp;qq=qq&amp;qqq=qqq" target="_blank" rel="noopener">http://www.wrox.com/?q=javascripts&amp;qq=qq&amp;qqq=qqq</a>‘ == location.toString()</li><li><code>location.pathname</code> ‘/path’</li><li><code>location.search</code> ‘?q=javascripts&amp;qq=qq&amp;qqq=qqq’</li></ul><h3 id="查询字符串参数"><a href="#查询字符串参数" class="headerlink" title="查询字符串参数"></a>查询字符串参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getQueryStringArgs</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//get query string without the initial ?</span></span><br><span class="line">  <span class="keyword">var</span> qs = (location.search.length &gt; <span class="number">0</span> ? location.search.substring(<span class="number">1</span>) : <span class="string">""</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//object to hold data</span></span><br><span class="line">    args = &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get individual items</span></span><br><span class="line">    items = qs.length ? qs.split(<span class="string">"&amp;"</span>) : [],</span><br><span class="line">    item = <span class="literal">null</span>,</span><br><span class="line">    name = <span class="literal">null</span>,</span><br><span class="line">    value = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//used in for loop</span></span><br><span class="line">    i = <span class="number">0</span>,</span><br><span class="line">    len = items.length;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//assign each item onto the args object</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    item = items[i].split(<span class="string">"="</span>);</span><br><span class="line">    name = <span class="built_in">decodeURIComponent</span>(item[<span class="number">0</span>]);</span><br><span class="line">    value = <span class="built_in">decodeURIComponent</span>(item[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (name.length) &#123;</span><br><span class="line">      args[name] = value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="位置操作"><a href="#位置操作" class="headerlink" title="位置操作"></a>位置操作</h3><h4 id="location-assign-url"><a href="#location-assign-url" class="headerlink" title="location.assign(url)"></a>location.assign(url)</h4><blockquote><p>立刻打开url,并新增一条历史纪录<br>若给location.href或window.location赋值一个url值,也会立刻以该值为参数调用location.assign方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面三行代码效果相同</span></span><br><span class="line"><span class="built_in">window</span>.location = <span class="string">"http://www.wrox.com"</span>; </span><br><span class="line">location.href = <span class="string">"http://www.wrox.com"</span>; <span class="comment">//最常用</span></span><br><span class="line">location.assign(<span class="string">"http://www.wrox.com"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>修改location的其他属性也会立刻改变当前加载页面(<code>hash,search,port,hostname,pathname,port</code>)<br>每次修改location属性(<code>hash</code>除外),页面都会以新url重新加载,生成一个历史记录</p></blockquote><h4 id="location-replace-url"><a href="#location-replace-url" class="headerlink" title="location.replace(url)"></a>location.replace(url)</h4><p>按url加载页面,<strong>但不生成新的历史纪录</strong></p><h4 id="location-reload-boolean"><a href="#location-reload-boolean" class="headerlink" title="location.reload(boolean)"></a>location.reload(boolean)</h4><blockquote><p>纯刷新,boolean为false或不传boolean,允许从缓存中重载,boolean为true,从服务器重新加载</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">location.reload(); <span class="comment">//重新加载（有可能从缓存中加载）</span></span><br><span class="line">location.reload(<span class="literal">true</span>); <span class="comment">//重新加载（从服务器重新加载）</span></span><br></pre></td></tr></table></figure><h2 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h2><p><img src="https://i.loli.net/2017/12/21/5a3b3084465e3.jpg" alt=""><br><img src="https://i.loli.net/2017/12/21/5a3b3062108ee.jpg" alt=""></p><h3 id="检测插件"><a href="#检测插件" class="headerlink" title="检测插件"></a>检测插件</h3><p>非IE浏览器通过navigator.plugins数组实现,IE浏览器通过COM对象实现,简单而又有特定套路,详情查阅高程p211</p><h3 id="注册处理程序"><a href="#注册处理程序" class="headerlink" title="注册处理程序"></a>注册处理程序</h3><p>html5提供了registerContentHandler()和 registerProtocolHandler() 两个API,为指定mime类型或协议类型指定特定的网站应用程序(web application)作为处理特定资源的默认方式</p><p>简单而又套路,详情查阅高程p213</p><h2 id="screen对象"><a href="#screen对象" class="headerlink" title="screen对象"></a>screen对象</h2><blockquote><p>用处不大, 需要时查阅高程p214</p></blockquote><p>JavaScript 中有几个对象在编程中用处不大，而 screen 对象就是其中之一。screen 对象基本上只用来表明客户端的能力，其中包括浏览器窗口外部的显示器的信息，如像素宽度和高度等。每个浏览器中的 screen 对象都包含着各不相同的属性，下表列出了所有属性及支持相应属性的浏览器。</p><p><img src="https://i.loli.net/2017/12/21/5a3b30843dffe.jpg" alt=""><br><img src="https://i.loli.net/2017/12/21/5a3b306219bdd.jpg" alt=""></p><h2 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h2><blockquote><p>当页面的 URL 改变时，就会生成一条历史记录</p></blockquote><h4 id="history-go"><a href="#history-go" class="headerlink" title="history.go()"></a>history.go()</h4><p><code>history.go( num / string )</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后退一页 </span></span><br><span class="line">history.go(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//前进一页 </span></span><br><span class="line">history.go(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//前进两页 </span></span><br><span class="line">history.go(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>也可以给 go()方法传递一个字符串参数，此时浏览器会跳转到历史记录中包含该字符串的第一个位置.可能后退，也可能前进，具体要看哪个位置最近。如果历史记录中不包含该字符串，那么这个方法什么也不做</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跳转到最近的 wrox.com 页面 </span></span><br><span class="line">history.go(<span class="string">"wrox.com"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//跳转到最近的 nczonline.net 页面 </span></span><br><span class="line">history.go(<span class="string">"nczonline.net"</span>);</span><br></pre></td></tr></table></figure><h4 id="history-back-history-foward"><a href="#history-back-history-foward" class="headerlink" title="history.back(),history.foward()"></a>history.back(),history.foward()</h4><p>相当于history.go(-1)和history.go(1)</p><h4 id="history-length"><a href="#history-length" class="headerlink" title="history.length"></a>history.length</h4><blockquote><p>除了上述几个方法外，history 对象还有一个 length 属性，保存着历史记录的数量。这个数量包括所有历史记录即所有向后和向前的记录。对于加载到窗口、标签页或框架中的第一个页面而言，history.length 等于 0。通过像下面这样测试该属性的值，可以确定用户是否一开始就打开了你的页面。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (history.length == <span class="number">0</span>)&#123; </span><br><span class="line">    <span class="comment">//这应该是用户打开窗口后的第一个页面 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="客户端检测-第九章"><a href="#客户端检测-第九章" class="headerlink" title="客户端检测(第九章)"></a>客户端检测(第九章)</h1><h2 id="能力检测"><a href="#能力检测" class="headerlink" title="能力检测"></a>能力检测</h2><blockquote><p>基本模式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (object.propertyInQuestion)&#123; </span><br><span class="line">    <span class="comment">//使用 object.propertyInQuestion </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="尽量使用typeof进行能力检测"><a href="#尽量使用typeof进行能力检测" class="headerlink" title="尽量使用typeof进行能力检测"></a>尽量使用typeof进行能力检测</h3><blockquote><p>因为有些需要检测的东西是<code>object</code>而不是<code>function</code>,是前者时虽然能力检测返回true,但调用就会出错.<br>所以用<code>if(typeof xxxx === &quot;function&quot;)</code>,更严谨些<br>但IE会将有些存在的方法用typeof检测后返回字符串<code>unknown</code>,所以这里推荐一个更严谨的函数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用来检测object对象上的property特性是否存在</span></span><br><span class="line"><span class="comment">//作者：Peter Michaux </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isHostMethod</span>(<span class="params">object, property</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> t = <span class="keyword">typeof</span> object[property];</span><br><span class="line">  <span class="keyword">return</span> t==<span class="string">'function'</span> || (!!(t==<span class="string">'object'</span> &amp;&amp; object[property])) || t==<span class="string">'unknown'</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何使用能力检测"><a href="#如何使用能力检测" class="headerlink" title="如何使用能力检测"></a>如何使用能力检测</h3><blockquote><p>根据浏览器不同将能力组合起来是更可取的方式。如果你知道自己的应用程序需要使用某些特定的浏览器特性，那么最好是一次性检测所有相关特性，而不要分别检测。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//确定浏览器是否支持 Netscape 风格的插件 </span></span><br><span class="line"><span class="keyword">var</span> hasNSPlugins = !!(navigator.plugins &amp;&amp; navigator.plugins.length);</span><br><span class="line"></span><br><span class="line"><span class="comment">//确定浏览器是否具有 DOM1 级规定的能力 </span></span><br><span class="line"><span class="keyword">var</span> hasDOM1 = !!(<span class="built_in">document</span>.getElementById &amp;&amp; <span class="built_in">document</span>.createElement &amp;&amp; <span class="built_in">document</span>.getElementsByTagName);</span><br></pre></td></tr></table></figure><blockquote><p>在实际开发中，应该将能力检测作为确定下一步解决方案的依据，而不是用它来 判断用户使用的是什么浏览器。</p></blockquote><h2 id="怪癖检测"><a href="#怪癖检测" class="headerlink" title="怪癖检测"></a>怪癖检测</h2><p>与<code>能力检测</code>确认浏览器支持什么能力不同，<code>怪癖检测</code>是想要知道浏览器存在什么缺陷（“怪癖”也就是 bug）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检测内容:IE8或更早版本中存在一个bug:</span></span><br><span class="line"><span class="comment">//是否:与[[Enumerable]]标记为false的某个原型属性同名的属性,无法forin到</span></span><br><span class="line"><span class="keyword">var</span> hasDontEnumQuirk = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = &#123;</span><br><span class="line">    toString: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prop == <span class="string">"toString"</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//检测内容: safari 3之前版本的一个bug:</span></span><br><span class="line"><span class="comment">//是否会枚举[[Enumerable]]标记为false的属性</span></span><br><span class="line"><span class="keyword">var</span> hasEnumShadowsQuirk = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = &#123;</span><br><span class="line">    toString: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prop == <span class="string">"toString"</span>) &#123;</span><br><span class="line">      count++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (count &gt; <span class="number">1</span>);</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">alert(hasDontEnumQuirk);</span><br><span class="line">alert(hasEnumShadowsQuirk);</span><br></pre></td></tr></table></figure><h2 id="navigator-userAgent-用户代理检测"><a href="#navigator-userAgent-用户代理检测" class="headerlink" title="navigator.userAgent 用户代理检测"></a>navigator.userAgent 用户代理检测</h2><blockquote><p><code>用户代理检测</code>通过检测用户代理字符串来确定实际使用的浏览器,优先级应排在<code>能力检测</code>和<code>怪癖检测</code>之后. 因为<code>navigator.userAgent</code>字符串因为历史原因很混乱,而且还将会混乱下去.<br>。在每一次 HTTP 请求过程中，用户代理字符串是作为响应首部发送的，而且该字符串可以通过 JavaScript 的 <code>navigator.userAgent</code> 属性访问<br>确切知道浏览器的名字和版本号不如确切知道它使用的是什么呈现引擎,我们要编写的脚本将主要检测五大呈现引擎：IE、Gecko、WebKit、KHTML 和 Opera。<br>检测脚本模型伪代码如下所示:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义模式:</span></span><br><span class="line"><span class="keyword">var</span> client = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> engine = &#123;</span><br><span class="line">    <span class="comment">//每个引擎属性默认为0,</span></span><br><span class="line">    <span class="comment">//如果检测到了哪个呈现引擎,就以浮点数值形式将该引擎版本号写入相应属性</span></span><br><span class="line">    ie:<span class="number">0</span>,</span><br><span class="line">    gecko:<span class="number">0</span>,</span><br><span class="line">    webkit:<span class="number">0</span>,</span><br><span class="line">    khtml:<span class="number">0</span>,</span><br><span class="line">    opera:<span class="number">0</span>,</span><br><span class="line">    <span class="comment">//具体版本号</span></span><br><span class="line">    ver:<span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...检测代码,用来根据检测结果改变engine对象中的属性值</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    engine:engine</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用模式:</span></span><br><span class="line"><span class="keyword">if</span>(client.engine.ie)&#123;<span class="comment">//如果是IE,client.ie的值应大于0</span></span><br><span class="line">  <span class="comment">//...针对IE的代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(client.engine.gecko&gt;<span class="number">1.5</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(client.engine.ver === <span class="string">"1.8.1"</span>)&#123;</span><br><span class="line">    <span class="comment">//针对某个具体版本执行某些操作</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完善检测代码"><a href="#完善检测代码" class="headerlink" title="完善检测代码"></a>完善检测代码</h3><blockquote><p>检测代码的完善逻辑跟浏览器发展历史进程等有关,不必深入,详情见高程p230-&gt;章节结尾<br>作者给出了完整代码client.js,知道检测机制和调用方式(上述)后,应该直接拿来使用.</p></blockquote><h3 id="client-js"><a href="#client-js" class="headerlink" title="client.js"></a>client.js</h3><blockquote><p>《js高程》中用户代理检测,完整代码,使用方式见上述</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> client = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//rendering engines</span></span><br><span class="line">  <span class="keyword">var</span> engine = &#123;</span><br><span class="line">    ie: <span class="number">0</span>,</span><br><span class="line">    gecko: <span class="number">0</span>,</span><br><span class="line">    webkit: <span class="number">0</span>,</span><br><span class="line">    khtml: <span class="number">0</span>,</span><br><span class="line">    opera: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//complete version</span></span><br><span class="line">    ver: <span class="literal">null</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//browsers</span></span><br><span class="line">  <span class="keyword">var</span> browser = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//browsers</span></span><br><span class="line">    ie: <span class="number">0</span>,</span><br><span class="line">    firefox: <span class="number">0</span>,</span><br><span class="line">    safari: <span class="number">0</span>,</span><br><span class="line">    konq: <span class="number">0</span>,</span><br><span class="line">    opera: <span class="number">0</span>,</span><br><span class="line">    chrome: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//specific version</span></span><br><span class="line">    ver: <span class="literal">null</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//platform/device/OS</span></span><br><span class="line">  <span class="keyword">var</span> system = &#123;</span><br><span class="line">    win: <span class="literal">false</span>,</span><br><span class="line">    mac: <span class="literal">false</span>,</span><br><span class="line">    x11: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mobile devices</span></span><br><span class="line">    iphone: <span class="literal">false</span>,</span><br><span class="line">    ipod: <span class="literal">false</span>,</span><br><span class="line">    ipad: <span class="literal">false</span>,</span><br><span class="line">    ios: <span class="literal">false</span>,</span><br><span class="line">    android: <span class="literal">false</span>,</span><br><span class="line">    nokiaN: <span class="literal">false</span>,</span><br><span class="line">    winMobile: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//game systems</span></span><br><span class="line">    wii: <span class="literal">false</span>,</span><br><span class="line">    ps: <span class="literal">false</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//detect rendering engines/browsers</span></span><br><span class="line">  <span class="keyword">var</span> ua = navigator.userAgent;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.opera) &#123;</span><br><span class="line">    engine.ver = browser.ver = <span class="built_in">window</span>.opera.version();</span><br><span class="line">    engine.opera = browser.opera = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/AppleWebKit\/(\S+)/</span>.test(ua)) &#123;</span><br><span class="line">    engine.ver = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</span><br><span class="line">    engine.webkit = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//figure out if it's Chrome or Safari</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/Chrome\/(\S+)/</span>.test(ua)) &#123;</span><br><span class="line">      browser.ver = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</span><br><span class="line">      browser.chrome = <span class="built_in">parseFloat</span>(browser.ver);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/Version\/(\S+)/</span>.test(ua)) &#123;</span><br><span class="line">      browser.ver = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</span><br><span class="line">      browser.safari = <span class="built_in">parseFloat</span>(browser.ver);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//approximate version</span></span><br><span class="line">      <span class="keyword">var</span> safariVersion = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (engine.webkit &lt; <span class="number">100</span>) &#123;</span><br><span class="line">        safariVersion = <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (engine.webkit &lt; <span class="number">312</span>) &#123;</span><br><span class="line">        safariVersion = <span class="number">1.2</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (engine.webkit &lt; <span class="number">412</span>) &#123;</span><br><span class="line">        safariVersion = <span class="number">1.3</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        safariVersion = <span class="number">2</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      browser.safari = browser.ver = safariVersion;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/KHTML\/(\S+)/</span>.test(ua) || <span class="regexp">/Konqueror\/([^;]+)/</span>.test(ua)) &#123;</span><br><span class="line">    engine.ver = browser.ver = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</span><br><span class="line">    engine.khtml = browser.konq = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/rv:([^\)]+)\) Gecko\/\d&#123;8&#125;/</span>.test(ua)) &#123;</span><br><span class="line">    engine.ver = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</span><br><span class="line">    engine.gecko = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//determine if it's Firefox</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/Firefox\/(\S+)/</span>.test(ua)) &#123;</span><br><span class="line">      browser.ver = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</span><br><span class="line">      browser.firefox = <span class="built_in">parseFloat</span>(browser.ver);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/MSIE ([^;]+)/</span>.test(ua)) &#123;</span><br><span class="line">    engine.ver = browser.ver = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</span><br><span class="line">    engine.ie = browser.ie = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//detect browsers</span></span><br><span class="line">  browser.ie = engine.ie;</span><br><span class="line">  browser.opera = engine.opera;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//detect platform</span></span><br><span class="line">  <span class="keyword">var</span> p = navigator.platform;</span><br><span class="line">  system.win = p.indexOf(<span class="string">"Win"</span>) == <span class="number">0</span>;</span><br><span class="line">  system.mac = p.indexOf(<span class="string">"Mac"</span>) == <span class="number">0</span>;</span><br><span class="line">  system.x11 = (p == <span class="string">"X11"</span>) || (p.indexOf(<span class="string">"Linux"</span>) == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//detect windows operating systems</span></span><br><span class="line">  <span class="keyword">if</span> (system.win) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/Win(?:dows )?([^do]&#123;2&#125;)\s?(\d+\.\d+)?/</span>.test(ua)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">RegExp</span>[<span class="string">"$1"</span>] == <span class="string">"NT"</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="built_in">RegExp</span>[<span class="string">"$2"</span>]) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">"5.0"</span>:</span><br><span class="line">            system.win = <span class="string">"2000"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">"5.1"</span>:</span><br><span class="line">            system.win = <span class="string">"XP"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">"6.0"</span>:</span><br><span class="line">            system.win = <span class="string">"Vista"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">"6.1"</span>:</span><br><span class="line">            system.win = <span class="string">"7"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">            system.win = <span class="string">"NT"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">RegExp</span>[<span class="string">"$1"</span>] == <span class="string">"9x"</span>) &#123;</span><br><span class="line">        system.win = <span class="string">"ME"</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        system.win = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//mobile devices</span></span><br><span class="line">  system.iphone = ua.indexOf(<span class="string">"iPhone"</span>) &gt; <span class="number">-1</span>;</span><br><span class="line">  system.ipod = ua.indexOf(<span class="string">"iPod"</span>) &gt; <span class="number">-1</span>;</span><br><span class="line">  system.ipad = ua.indexOf(<span class="string">"iPad"</span>) &gt; <span class="number">-1</span>;</span><br><span class="line">  system.nokiaN = ua.indexOf(<span class="string">"NokiaN"</span>) &gt; <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//windows mobile</span></span><br><span class="line">  <span class="keyword">if</span> (system.win == <span class="string">"CE"</span>) &#123;</span><br><span class="line">    system.winMobile = system.win;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (system.win == <span class="string">"Ph"</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/Windows Phone OS (\d+.\d+)/</span>.test(ua)) &#123;;</span><br><span class="line">      system.win = <span class="string">"Phone"</span>;</span><br><span class="line">      system.winMobile = <span class="built_in">parseFloat</span>(<span class="built_in">RegExp</span>[<span class="string">"$1"</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//determine iOS version</span></span><br><span class="line">  <span class="keyword">if</span> (system.mac &amp;&amp; ua.indexOf(<span class="string">"Mobile"</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/CPU (?:iPhone )?OS (\d+_\d+)/</span>.test(ua)) &#123;</span><br><span class="line">      system.ios = <span class="built_in">parseFloat</span>(<span class="built_in">RegExp</span>.$<span class="number">1.</span>replace(<span class="string">"_"</span>, <span class="string">"."</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      system.ios = <span class="number">2</span>; <span class="comment">//can't really detect - so guess</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//determine Android version</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/Android (\d+\.\d+)/</span>.test(ua)) &#123;</span><br><span class="line">    system.android = <span class="built_in">parseFloat</span>(<span class="built_in">RegExp</span>.$<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//gaming systems</span></span><br><span class="line">  system.wii = ua.indexOf(<span class="string">"Wii"</span>) &gt; <span class="number">-1</span>;</span><br><span class="line">  system.ps = <span class="regexp">/playstation/i</span>.test(ua);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//return it</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    engine: engine,</span><br><span class="line">    browser: browser,</span><br><span class="line">    system: system</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;BOM-第八章&quot;&gt;&lt;a href=&quot;#BOM-第八章&quot; class=&quot;headerlink&quot; title=&quot;BOM(第八章)&quot;&gt;&lt;/a&gt;BOM(第八章)&lt;/h1&gt;&lt;h2 id=&quot;window对象&quot;&gt;&lt;a href=&quot;#window对象&quot; class=&quot;header
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正反馈系列:《ECMAScript 6 入门》- vol.1</title>
    <link href="http://yoursite.com/2017/12/21/es6-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-vol1/"/>
    <id>http://yoursite.com/2017/12/21/es6-读书笔记-vol1/</id>
    <published>2017-12-21T00:38:07.000Z</published>
    <updated>2018-03-21T10:23:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="let-amp-const-取消全局属性挂载"><a href="#let-amp-const-取消全局属性挂载" class="headerlink" title="let &amp; const 取消全局属性挂载"></a>let &amp; const 取消全局属性挂载</h3><p><code>let</code>,<code>const</code>,<code>class</code>都不会挂载在全局属性<code>global(window)</code>下.</p><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><h3 id="交换变量值"><a href="#交换变量值" class="headerlink" title="交换变量值"></a>交换变量值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">[x, y] = [y, x];</span><br></pre></td></tr></table></figure><h3 id="函数返回多个值"><a href="#函数返回多个值" class="headerlink" title="函数返回多个值"></a>函数返回多个值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回一个数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> [a, b, c] = example();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    foo: <span class="number">1</span>,</span><br><span class="line">    bar: <span class="number">2</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = example();</span><br></pre></td></tr></table></figure><h3 id="函数参数的定义"><a href="#函数参数的定义" class="headerlink" title="函数参数的定义"></a>函数参数的定义</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数是一组有次序的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">[x, y, z]</span>) </span>&#123; ... &#125;</span><br><span class="line">f([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数是一组无次序的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">&#123;x, y, z&#125;</span>) </span>&#123; ... &#125;</span><br><span class="line">f(&#123;<span class="attr">z</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">x</span>: <span class="number">1</span>&#125;);</span><br></pre></td></tr></table></figure><h3 id="提取json数据"><a href="#提取json数据" class="headerlink" title="提取json数据"></a>提取json数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jsonData = &#123;</span><br><span class="line">  id: <span class="number">42</span>,</span><br><span class="line">  status: <span class="string">"OK"</span>,</span><br><span class="line">  data: [<span class="number">867</span>, <span class="number">5309</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; id, status, <span class="attr">data</span>: number &#125; = jsonData;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(id, status, number);</span><br><span class="line"><span class="comment">// 42, "OK", [867, 5309]</span></span><br></pre></td></tr></table></figure><h3 id="函数参数默认值"><a href="#函数参数默认值" class="headerlink" title="函数参数默认值"></a>函数参数默认值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">jQuery.ajax = <span class="function"><span class="keyword">function</span> (<span class="params">url, &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">  async = true,</span></span></span><br><span class="line"><span class="function"><span class="params">  beforeSend = function (</span>) </span>&#123;&#125;,</span><br><span class="line">  cache = <span class="literal">true</span>,</span><br><span class="line">  complete = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  crossDomain = <span class="literal">false</span>,</span><br><span class="line">  global = <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// ... more config</span></span><br><span class="line">&#125;) &#123;</span><br><span class="line">  <span class="comment">// ... do stuff</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="遍历Map结构"><a href="#遍历Map结构" class="headerlink" title="遍历Map结构"></a>遍历Map结构</h3><p>任何部署了 Iterator 接口的对象，都可以用<code>for...of</code>循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">'first'</span>, <span class="string">'hello'</span>);</span><br><span class="line">map.set(<span class="string">'second'</span>, <span class="string">'world'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">" is "</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// first is hello</span></span><br><span class="line"><span class="comment">// second is world</span></span><br></pre></td></tr></table></figure><p>如果只想获取键名，或者只想获取键值，可以写成下面这样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取键名</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取键值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [,value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="string-includes-str-：返回布尔值，表示是否找到了参数字符串。"><a href="#string-includes-str-：返回布尔值，表示是否找到了参数字符串。" class="headerlink" title="string.includes(str)：返回布尔值，表示是否找到了参数字符串。"></a>string.includes(str)：返回布尔值，表示是否找到了参数字符串。</h3><h3 id="string-startsWith-str-：返回布尔值，表示参数字符串是否在原字符串的头部。"><a href="#string-startsWith-str-：返回布尔值，表示参数字符串是否在原字符串的头部。" class="headerlink" title="string.startsWith(str)：返回布尔值，表示参数字符串是否在原字符串的头部。"></a>string.startsWith(str)：返回布尔值，表示参数字符串是否在原字符串的头部。</h3><h3 id="string-endsWith-str-：返回布尔值，表示参数字符串是否在原字符串的尾部。"><a href="#string-endsWith-str-：返回布尔值，表示参数字符串是否在原字符串的尾部。" class="headerlink" title="string.endsWith(str)：返回布尔值，表示参数字符串是否在原字符串的尾部。"></a>string.endsWith(str)：返回布尔值，表示参数字符串是否在原字符串的尾部。</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">'Hello world!'</span>;</span><br><span class="line"></span><br><span class="line">s.startsWith(<span class="string">'Hello'</span>) <span class="comment">// true</span></span><br><span class="line">s.endsWith(<span class="string">'!'</span>) <span class="comment">// true</span></span><br><span class="line">s.includes(<span class="string">'o'</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="string-repeat-number-return-new-str"><a href="#string-repeat-number-return-new-str" class="headerlink" title="string.repeat(number) return new str"></a>string.repeat(number) return new str</h3><p>返回一个新字符串表示将原字符串重复n次</p><h3 id="string-padStart-num-str-padEnd-return-new-str"><a href="#string-padStart-num-str-padEnd-return-new-str" class="headerlink" title="string.padStart(num,str).padEnd return new str."></a>string.padStart(num,str).padEnd return new str.</h3><p>如果某个字符串不够指定长度，会在头部或尾部补全。<code>padStart()</code>用于头部补全，<code>padEnd()</code>用于尾部补全。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'x'</span>.padStart(<span class="number">5</span>, <span class="string">'ab'</span>) <span class="comment">// 'ababx'</span></span><br><span class="line"><span class="string">'x'</span>.padStart(<span class="number">4</span>, <span class="string">'ab'</span>) <span class="comment">// 'abax'</span></span><br><span class="line"></span><br><span class="line"><span class="string">'x'</span>.padEnd(<span class="number">5</span>, <span class="string">'ab'</span>) <span class="comment">// 'xabab'</span></span><br><span class="line"><span class="string">'x'</span>.padEnd(<span class="number">4</span>, <span class="string">'ab'</span>) <span class="comment">// 'xaba'</span></span><br></pre></td></tr></table></figure><p>如果原字符串的长度，等于或大于指定的最小长度，则返回原字符串。</p><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><p>模板字符串的大括号内部，就是执行 JavaScript 代码，如果大括号中的值不是字符串，将按照一般的规则转为字符串。比如，大括号中是一个对象，将默认调用对象的toString方法,模板字符串之中还能调用函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="string">`<span class="subst">$&#123;x&#125;</span> + <span class="subst">$&#123;y&#125;</span> = <span class="subst">$&#123;x + y&#125;</span>`</span></span><br><span class="line"><span class="comment">// "1 + 2 = 3"</span></span><br><span class="line"></span><br><span class="line"><span class="string">`<span class="subst">$&#123;x&#125;</span> + <span class="subst">$&#123;y * <span class="number">2</span>&#125;</span> = <span class="subst">$&#123;x + y * <span class="number">2</span>&#125;</span>`</span></span><br><span class="line"><span class="comment">// "1 + 4 = 5"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="string">`<span class="subst">$&#123;obj.x + obj.y&#125;</span>`</span></span><br><span class="line"><span class="comment">// "3"</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"Hello World"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">`foo <span class="subst">$&#123;fn()&#125;</span> bar`</span></span><br><span class="line"><span class="comment">// foo Hello World bar</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 可以嵌套</span></span><br><span class="line"><span class="keyword">const</span> tmpl = <span class="function"><span class="params">addrs</span> =&gt;</span> <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;table&gt;</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;addrs.map(addr =&gt; <span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    &lt;tr&gt;&lt;td&gt;<span class="subst">$&#123;addr.first&#125;</span>&lt;/td&gt;&lt;/tr&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    &lt;tr&gt;&lt;td&gt;<span class="subst">$&#123;addr.last&#125;</span>&lt;/td&gt;&lt;/tr&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  `</span>).join(<span class="string">''</span>)&#125;</span></span></span><br><span class="line"><span class="string">  &lt;/table&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h2><h3 id="构造函数创建正则实例的改变"><a href="#构造函数创建正则实例的改变" class="headerlink" title="构造函数创建正则实例的改变"></a>构造函数创建正则实例的改变</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 允许第一个参数是正则时,用第二个参数添加修饰符</span></span><br><span class="line"><span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/xyz/</span>, <span class="string">'i'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用这种方式会产生修饰符覆盖</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/abc/ig</span>, <span class="string">'i'</span>).flags <span class="comment">//i</span></span><br></pre></td></tr></table></figure><h3 id="字符串的正则方法"><a href="#字符串的正则方法" class="headerlink" title="字符串的正则方法"></a>字符串的正则方法</h3><p>字符串对象共有 4 个方法，可以使用正则表达式：<code>match()</code>、<code>replace()</code>、<code>search()</code>和<code>split()</code>。</p><p>ES6 将这 4 个方法，在语言内部全部调用<code>RegExp</code>的实例方法，从而做到所有与正则相关的方法，全都定义在<code>RegExp</code>对象上。</p><ul><li><code>String.prototype.match</code> 调用 <code>RegExp.prototype[Symbol.match]</code></li><li><code>String.prototype.replace</code> 调用 <code>RegExp.prototype[Symbol.replace]</code></li><li><code>String.prototype.search</code> 调用 <code>RegExp.prototype[Symbol.search]</code></li><li><code>String.prototype.split</code> 调用 <code>RegExp.prototype[Symbol.split]</code></li></ul><h3 id="u修饰符"><a href="#u修饰符" class="headerlink" title="u修饰符"></a>u修饰符</h3><p>ES6 对正则表达式添加了<code>u</code>修饰符，含义为“Unicode 模式”，用来正确处理大于<code>\uFFFF</code>的 Unicode 字符。也就是说，会正确处理四个字节的 UTF-16 编码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/^\uD83D/u.test(<span class="string">'\uD83D\uDC2A'</span>) <span class="comment">// false</span></span><br><span class="line">/^\uD83D/.test(<span class="string">'\uD83D\uDC2A'</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><hr><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数默认值"><a href="#函数默认值" class="headerlink" title="函数默认值"></a>函数默认值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">&#123;x, y = <span class="number">5</span>&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(&#123;&#125;) <span class="comment">// undefined 5</span></span><br><span class="line">foo(&#123;<span class="attr">x</span>: <span class="number">1</span>&#125;) <span class="comment">// 1 5</span></span><br><span class="line">foo(&#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;) <span class="comment">// 1 2</span></span><br><span class="line">foo() <span class="comment">// TypeError: Cannot read property 'x' of undefined</span></span><br></pre></td></tr></table></figure><p>上面代码只使用了对象的解构赋值默认值，没有使用函数参数的默认值。只有当函数<code>foo</code>的参数是一个对象时，变量<code>x</code>和<code>y</code>才会通过解构赋值生成。如果函数<code>foo</code>调用时没提供参数，变量<code>x</code>和<code>y</code>就不会生成，从而报错。通过提供函数参数的默认值，就可以避免这种情况。改进方法如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">&#123;x, y = <span class="number">5</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo() <span class="comment">// undefined 5</span></span><br></pre></td></tr></table></figure><p>作为练习，请问下面两种写法有什么差别？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">m1</span>(<span class="params">&#123;x = <span class="number">0</span>, y = <span class="number">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [x, y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">m2</span>(<span class="params">&#123;x, y&#125; = &#123; x: <span class="number">0</span>, y: <span class="number">0</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [x, y];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数没有参数的情况</span></span><br><span class="line">m1() <span class="comment">// [0, 0]</span></span><br><span class="line">m2() <span class="comment">// [0, 0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// x 和 y 都有值的情况</span></span><br><span class="line">m1(&#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span>&#125;) <span class="comment">// [3, 8]</span></span><br><span class="line">m2(&#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span>&#125;) <span class="comment">// [3, 8]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// x 有值，y 无值的情况</span></span><br><span class="line">m1(&#123;<span class="attr">x</span>: <span class="number">3</span>&#125;) <span class="comment">// [3, 0]</span></span><br><span class="line">m2(&#123;<span class="attr">x</span>: <span class="number">3</span>&#125;) <span class="comment">// [3, undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// x 和 y 都无值的情况</span></span><br><span class="line">m1(&#123;&#125;) <span class="comment">// [0, 0];</span></span><br><span class="line">m2(&#123;&#125;) <span class="comment">// [undefined, undefined]</span></span><br><span class="line"></span><br><span class="line">m1(&#123;<span class="attr">z</span>: <span class="number">3</span>&#125;) <span class="comment">// [0, 0]</span></span><br><span class="line">m2(&#123;<span class="attr">z</span>: <span class="number">3</span>&#125;) <span class="comment">// [undefined, undefined]</span></span><br></pre></td></tr></table></figure><h3 id="默认值作用域"><a href="#默认值作用域" class="headerlink" title="默认值作用域"></a>默认值作用域</h3><p>一旦设置了参数的默认值，函数进行声明初始化时，参数会形成一个单独的作用域（context）。等到初始化结束，这个作用域就会消失。这种语法行为，在不设置参数默认值时，是不会出现的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y = x</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="number">2</span>) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">y = x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f() <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>参数是函数时也遵守类似规则, 直接上例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="string">'outer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">func = (</span>) =&gt; <span class="title">foo</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> foo = <span class="string">'inner'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(func());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar(); <span class="comment">// outer</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">func = (</span>) =&gt; <span class="title">foo</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> foo = <span class="string">'inner'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(func());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar() <span class="comment">// ReferenceError: foo is not defined</span></span><br></pre></td></tr></table></figure><h3 id="name属性返回函数的函数名"><a href="#name属性返回函数的函数名" class="headerlink" title="name属性返回函数的函数名"></a>name属性返回函数的函数名</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">foo.name <span class="comment">// "foo"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">foo.name <span class="comment">// "foo(es6),空字符串(es5)"</span></span><br></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>箭头函数有几个使用注意点。</p><p>（1）函数体内的<code>this</code>对象，就是定义时所在的对象，而不是使用时所在的对象。由于箭头函数没有自己的this，所以当然也就不能用call()、apply()、bind()这些方法去改变this的指向。</p><p>（2）不可以当作构造函数，也就是说，不可以使用<code>new</code>命令，否则会抛出一个错误。</p><p>（3）不可以使用<code>arguments</code>对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</p><p>（4）不可以使用<code>yield</code>命令，因此箭头函数不能用作 Generator 函数。</p><h3 id="reduce函数-arr-reduce-callback-initialValue"><a href="#reduce函数-arr-reduce-callback-initialValue" class="headerlink" title="reduce函数 arr.reduce(callback[, initialValue])"></a>reduce函数 arr.reduce(callback[, initialValue])</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> total = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].reduce(<span class="function"><span class="keyword">function</span>(<span class="params">sum, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sum + value;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// total is 6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> flattened = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a.concat(b);</span><br><span class="line">&#125;, []);</span><br><span class="line"><span class="comment">// flattened is [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>下面是一个管道机制的例子,前一个函数的输出是最后一个函数的输入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pipeline = <span class="function">(<span class="params">...funcs</span>) =&gt;</span></span><br><span class="line">  val =&gt; funcs.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b(a), val);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> plus1 = <span class="function"><span class="params">a</span> =&gt;</span> a + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> mult2 = <span class="function"><span class="params">a</span> =&gt;</span> a * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> addThenMult = pipeline(plus1, mult2);</span><br><span class="line"></span><br><span class="line">addThenMult(<span class="number">5</span>)</span><br><span class="line"><span class="comment">// 12</span></span><br></pre></td></tr></table></figure><p>如果觉得上面的写法可读性比较差，也可以采用下面的写法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> plus1 = <span class="function"><span class="params">a</span> =&gt;</span> a + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> mult2 = <span class="function"><span class="params">a</span> =&gt;</span> a * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">mult2(plus1(<span class="number">5</span>))</span><br><span class="line"><span class="comment">// 12</span></span><br></pre></td></tr></table></figure><hr><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="…替代apply"><a href="#…替代apply" class="headerlink" title="…替代apply"></a>…替代apply</h3><p>下面是扩展运算符取代<code>apply</code>方法的一个实际的例子，应用<code>Math.max</code>方法，简化求出一个数组最大元素的写法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5 的写法</span></span><br><span class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, [<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 的写法</span></span><br><span class="line"><span class="built_in">Math</span>.max(...[<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">Math</span>.max(<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>);</span><br></pre></td></tr></table></figure><h3 id="深拷贝数组"><a href="#深拷贝数组" class="headerlink" title="深拷贝数组"></a>深拷贝数组</h3><p>扩展运算符提供了复制数组的简便写法, 不引用数组地址, 真实的复制一个数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">const</span> a2 = [...a1];</span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">const</span> [...a2] = a1;</span><br></pre></td></tr></table></figure><h3 id="字符串与数组"><a href="#字符串与数组" class="headerlink" title="字符串与数组"></a>字符串与数组</h3><p>返回字符串长度的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">length</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [...str].length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="伪数组或任何Iterator接口的对象转化为数组"><a href="#伪数组或任何Iterator接口的对象转化为数组" class="headerlink" title="伪数组或任何Iterator接口的对象转化为数组"></a>伪数组或任何Iterator接口的对象转化为数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nodeList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>);</span><br><span class="line"><span class="keyword">let</span> array = [...nodeList];</span><br></pre></td></tr></table></figure><h3 id="map-amp-set-generator函数转化为数组"><a href="#map-amp-set-generator函数转化为数组" class="headerlink" title="map&amp;set,generator函数转化为数组"></a>map&amp;set,generator函数转化为数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="number">1</span>, <span class="string">'one'</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="string">'two'</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="string">'three'</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [...map.keys()]; <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> go = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">[...go()] <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>上面代码中，变量<code>go</code>是一个 Generator 函数，执行后返回的是一个遍历器对象，对这个遍历器对象执行扩展运算符，就会将内部遍历得到的值，转为一个数组。</p><h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h3><p><code>Array.from</code>方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）(伪数组)和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">    <span class="string">'0'</span>: <span class="string">'a'</span>,</span><br><span class="line">    <span class="string">'1'</span>: <span class="string">'b'</span>,</span><br><span class="line">    <span class="string">'2'</span>: <span class="string">'c'</span>,</span><br><span class="line">    length: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5的写法</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [].slice.call(arrayLike); <span class="comment">// ['a', 'b', 'c']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6的写法</span></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="built_in">Array</span>.from(arrayLike); <span class="comment">// ['a', 'b', 'c']</span></span><br></pre></td></tr></table></figure><p>只要是部署了 Iterator 接口的数据结构，<code>Array.from</code>都能将其转为数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(<span class="string">'hello'</span>)</span><br><span class="line"><span class="comment">// ['h', 'e', 'l', 'l', 'o']</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> namesSet = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'a'</span>, <span class="string">'b'</span>])</span><br><span class="line"><span class="built_in">Array</span>.from(namesSet) <span class="comment">// ['a', 'b']</span></span><br></pre></td></tr></table></figure><p><code>Array.from</code>还可以接受第二个参数，作用类似于数组的<code>map</code>方法，用来对每个元素进行处理，将处理后的值放入返回的数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(arrayLike, x =&gt; x * x);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">Array</span>.from(arrayLike).map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], (x) =&gt; x * x)</span><br><span class="line"><span class="comment">// [1, 4, 9]</span></span><br></pre></td></tr></table></figure><h3 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>) <span class="comment">// [3,11,8]</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>) <span class="comment">// [3]</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>).length <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p><code>Array.of</code>基本上可以用来替代<code>Array()</code>或<code>new Array()</code>，并且不存在由于参数不同而导致的重载。它的行为非常统一。</p><p><code>Array.of</code>总是返回参数值组成的数组。如果没有参数，就返回一个空数组。</p><p><code>Array.of</code>方法可以用下面的代码模拟实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ArrayOf</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [].slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="arr-find-amp-findIndex"><a href="#arr-find-amp-findIndex" class="headerlink" title="arr.find() &amp; findIndex()"></a>arr.find() &amp; findIndex()</h3><p>用来代替indexOf</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>].find(<span class="function">(<span class="params">n</span>) =&gt;</span> n &lt; <span class="number">0</span>)</span><br><span class="line"><span class="comment">// -5</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="arr-fill-value-start-end"><a href="#arr-fill-value-start-end" class="headerlink" title="arr.fill(value[,start,end])"></a>arr.fill(value[,start,end])</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">7</span>)</span><br><span class="line"><span class="comment">// [7, 7, 7]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>).fill(<span class="number">7</span>)</span><br><span class="line"><span class="comment">// [7, 7, 7]</span></span><br><span class="line"></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// ['a', 7, 'c']</span></span><br></pre></td></tr></table></figure><h3 id="arr-entries-，keys-和values"><a href="#arr-entries-，keys-和values" class="headerlink" title="arr.entries()，keys()和values()"></a>arr.entries()，keys()和values()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> elem <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 'a'</span></span><br><span class="line"><span class="comment">// 'b'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, elem] <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index, elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 "a"</span></span><br><span class="line"><span class="comment">// 1 "b"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果不使用for...of循环，可以手动调用遍历器对象的next方法，进行遍历。</span></span><br><span class="line"><span class="keyword">let</span> letter = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">let</span> entries = letter.entries();</span><br><span class="line"><span class="built_in">console</span>.log(entries.next().value); <span class="comment">// [0, 'a']</span></span><br><span class="line"><span class="built_in">console</span>.log(entries.next().value); <span class="comment">// [1, 'b']</span></span><br><span class="line"><span class="built_in">console</span>.log(entries.next().value); <span class="comment">// [2, 'c']</span></span><br></pre></td></tr></table></figure><h3 id="arr-includes"><a href="#arr-includes" class="headerlink" title="arr.includes()"></a>arr.includes()</h3><p><code>Array.prototype.includes</code>方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的<code>includes</code>方法类似</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>)     <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">4</span>)     <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="literal">NaN</span>].includes(<span class="literal">NaN</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>该方法的第二个参数表示搜索的起始位置，默认为<code>0</code>。如果第二个参数为负数，则表示倒数的位置，如果这时它大于数组长度（比如第二个参数为<code>-4</code>，但数组长度为<code>3</code>），则会重置为从<code>0</code>开始。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">3</span>);  <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">-1</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>另外，Map 和 Set 数据结构有一个<code>has</code>方法，需要注意与<code>includes</code>区分。</p><ul><li>Map 结构的<code>has</code>方法，是用来查找键名的，比如<code>Map.prototype.has(key)</code>、<code>WeakMap.prototype.has(key)</code>、<code>Reflect.has(target, propertyKey)</code>。</li><li>Set 结构的<code>has</code>方法，是用来查找值的，比如<code>Set.prototype.has(value)</code>、<code>WeakSet.prototype.has(value)</code>。</li></ul><hr><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="getter与setter的简写表示"><a href="#getter与setter的简写表示" class="headerlink" title="getter与setter的简写表示"></a>getter与setter的简写表示</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">const</span> cart = &#123;</span><br><span class="line">  _wheels: <span class="number">4</span>,</span><br><span class="line"></span><br><span class="line">  get wheels () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._wheels;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  set wheels (value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value &lt; <span class="keyword">this</span>._wheels) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'数值太小了！'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>._wheels = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Object-is-var1-var2"><a href="#Object-is-var1-var2" class="headerlink" title="Object.is(var1,var2)"></a>Object.is(var1,var2)</h3><p><code>Object.is(var1,var2) return boolean</code></p><p><code>Object.is</code>用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致,不一致的地方见下面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">0</span> === <span class="number">-0</span> <span class="comment">//true</span></span><br><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.is(+<span class="number">0</span>, <span class="number">-0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source1 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> source2 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(target, source1, source2);</span><br><span class="line">target <span class="comment">// &#123;a:1, b:2, c:3&#125;</span></span><br></pre></td></tr></table></figure><p><code>Object.assign</code>方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。</p><p><code>Object.assign</code>方法的第一个参数是目标对象，后面的参数都是源对象。</p><p>注意，如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。</p><p><code>Object.assign</code>拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（<code>enumerable: false</code>）。</p><p>对于这种嵌套的对象，一旦遇到同名属性，<code>Object.assign</code>的处理方法是替换，而不是添加。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="string">'c'</span>, <span class="attr">d</span>: <span class="string">'e'</span> &#125; &#125;</span><br><span class="line"><span class="keyword">const</span> source = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="string">'hello'</span> &#125; &#125;</span><br><span class="line"><span class="built_in">Object</span>.assign(target, source)</span><br><span class="line"><span class="comment">// &#123; a: &#123; b: 'hello' &#125; &#125;</span></span><br></pre></td></tr></table></figure><ol><li>为对象添加属性</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.assign(<span class="keyword">this</span>, &#123;x, y&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>为对象添加方法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(SomeClass.prototype, &#123;</span><br><span class="line">  someMethod(arg1, arg2) &#123;</span><br><span class="line">    ···</span><br><span class="line">  &#125;,</span><br><span class="line">  anotherMethod() &#123;</span><br><span class="line">    ···</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于下面的写法</span></span><br><span class="line">SomeClass.prototype.someMethod = <span class="function"><span class="keyword">function</span> (<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">  ···</span><br><span class="line">&#125;;</span><br><span class="line">SomeClass.prototype.anotherMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  ···</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>克隆对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不保证继承链的拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">origin</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, origin);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保持继承链的拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">origin</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> originProto = <span class="built_in">Object</span>.getPrototypeOf(origin);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(<span class="built_in">Object</span>.create(originProto), origin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>合并多个对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> merge =</span><br><span class="line">  (target, ...sources) =&gt; <span class="built_in">Object</span>.assign(target, ...sources);</span><br></pre></td></tr></table></figure><ol><li>为属性指定默认值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> DEFAULTS = &#123;</span><br><span class="line">  logLevel: <span class="number">0</span>,</span><br><span class="line">  outputFormat: <span class="string">'html'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processContent</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  options = <span class="built_in">Object</span>.assign(&#123;&#125;, DEFAULTS, options);</span><br><span class="line">  <span class="built_in">console</span>.log(options);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="属性的可枚举和遍历"><a href="#属性的可枚举和遍历" class="headerlink" title="属性的可枚举和遍历"></a>属性的可枚举和遍历</h3><p>对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为。<code>Object.getOwnPropertyDescriptor</code>方法可以获取该属性的描述对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">foo</span>: <span class="number">123</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, <span class="string">'foo'</span>)</span><br><span class="line"><span class="comment">//  &#123;</span></span><br><span class="line"><span class="comment">//    value: 123,</span></span><br><span class="line"><span class="comment">//    writable: true,</span></span><br><span class="line"><span class="comment">//    enumerable: true,</span></span><br><span class="line"><span class="comment">//    configurable: true</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br></pre></td></tr></table></figure><p>描述对象的<code>enumerable</code>属性，称为”可枚举性“，如果该属性为<code>false</code>，就表示某些操作会忽略当前属性。</p><p>目前，有四个操作会忽略<code>enumerable</code>为<code>false</code>的属性。</p><ul><li><code>for...in</code>循环：只遍历对象自身的和继承的可枚举的属性。</li><li><code>Object.keys()</code>：返回对象自身的所有可枚举的属性的键名。</li><li><code>JSON.stringify()</code>：只串行化对象自身的可枚举的属性。</li><li><code>Object.assign()</code>： 忽略<code>enumerable</code>为<code>false</code>的属性，只拷贝对象自身的可枚举的属性。</li></ul><p>这四个操作之中，前三个是 ES5 就有的，最后一个<code>Object.assign()</code>是 ES6 新增的。其中，只有<code>for...in</code>会返回继承的属性，其他三个方法都会忽略继承的属性，只处理对象自身的属性。实际上，引入“可枚举”（<code>enumerable</code>）这个概念的最初目的，就是让某些属性可以规避掉<code>for...in</code>操作，不然所有内部属性和方法都会被遍历到。比如，对象原型的<code>toString</code>方法，以及数组的<code>length</code>属性，就通过“可枚举性”，从而避免被<code>for...in</code>遍历到。</p><p>总的来说，操作中引入继承的属性会让问题复杂化，大多数时候，我们只关心对象自身的属性。所以，尽量不要用<code>for...in</code>循环，而用<code>Object.keys()</code>代替。</p><p>ES6 一共有 5 种方法可以遍历对象的属性。</p><p><strong>（1）for…in</strong></p><p><code>for...in</code>循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。</p><p><strong>（2）Object.keys(obj)</strong></p><p><code>Object.keys</code>返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名。</p><p><strong>（3）Object.getOwnPropertyNames(obj)</strong></p><p><code>Object.getOwnPropertyNames</code>返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名。</p><p><strong>（4）Object.getOwnPropertySymbols(obj)</strong></p><p><code>Object.getOwnPropertySymbols</code>返回一个数组，包含对象自身的所有 Symbol 属性的键名。</p><p><strong>（5）Reflect.ownKeys(obj)</strong></p><p><code>Reflect.ownKeys</code>返回一个数组，包含对象自身的所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举。</p><p>以上的 5 种方法遍历对象的键名，都遵守同样的属性遍历的次序规则。</p><ul><li>首先遍历所有数值键，按照数值升序排列。</li><li>其次遍历所有字符串键，按照加入时间升序排列。</li><li>最后遍历所有 Symbol 键，按照加入时间升序排列。</li></ul><h3 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors()"></a>Object.getOwnPropertyDescriptors()</h3><p>前面说过，<code>Object.getOwnPropertyDescriptor</code>方法会返回某个对象属性的描述对象（descriptor）。ES2017 引入了<code>Object.getOwnPropertyDescriptors(多个s)</code>方法，返回指定对象所有自身属性（非继承属性）的描述对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  foo: <span class="number">123</span>,</span><br><span class="line">  get bar() &#123; <span class="keyword">return</span> <span class="string">'abc'</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptors(obj)</span><br><span class="line"><span class="comment">// &#123; foo:</span></span><br><span class="line"><span class="comment">//    &#123; value: 123,</span></span><br><span class="line"><span class="comment">//      writable: true,</span></span><br><span class="line"><span class="comment">//      enumerable: true,</span></span><br><span class="line"><span class="comment">//      configurable: true &#125;,</span></span><br><span class="line"><span class="comment">//   bar:</span></span><br><span class="line"><span class="comment">//    &#123; get: [Function: get bar],</span></span><br><span class="line"><span class="comment">//      set: undefined,</span></span><br><span class="line"><span class="comment">//      enumerable: true,</span></span><br><span class="line"><span class="comment">//      configurable: true &#125; &#125;</span></span><br></pre></td></tr></table></figure><p>该方法的引入目的，主要是为了解决<code>Object.assign()</code>无法正确拷贝<code>get</code>属性和<code>set</code>属性的问题。</p><h3 id="Object-setPrototypeOf-obj-prototype"><a href="#Object-setPrototypeOf-obj-prototype" class="headerlink" title="Object.setPrototypeOf(obj,prototype)"></a>Object.setPrototypeOf(obj,prototype)</h3><p>与obj.<strong>proto</strong>作用相同,用来设置一个对象的prototype对象(.<strong>proto</strong>,[[prototype]]),返回参数对象本身</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, prototype)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置空对象</span></span><br><span class="line"><span class="keyword">const</span> o = <span class="built_in">Object</span>.setPrototypeOf(&#123;&#125;, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h3 id="Object-getPrototypeOf-obj"><a href="#Object-getPrototypeOf-obj" class="headerlink" title="Object.getPrototypeOf(obj)"></a>Object.getPrototypeOf(obj)</h3><p><code>Object.getPrototypeOf(obj) return prototype</code></p><p>读取一个对象的原型对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getPrototypeOf(obj)</span><br></pre></td></tr></table></figure><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><p>指向当前对象的原型对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> proto = &#123;</span><br><span class="line">  foo: <span class="string">'hello'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  find() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.foo;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, proto);</span><br><span class="line">obj.find() <span class="comment">// "hello"</span></span><br></pre></td></tr></table></figure><p>super关键字表示原型对象时,只能用在es6简写法里,其他都会报错</p><p>JavaScript 引擎内部，<code>super.foo</code>等同于<code>Object.getPrototypeOf(this).foo</code>（属性）或<code>Object.getPrototypeOf(this).foo.call(this)</code>（方法）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> proto = &#123;</span><br><span class="line">  x: <span class="string">'hello'</span>,</span><br><span class="line">  foo() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  x: <span class="string">'world'</span>,</span><br><span class="line">  foo() &#123;</span><br><span class="line">    <span class="keyword">super</span>.foo();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, proto);</span><br><span class="line"></span><br><span class="line">obj.foo() <span class="comment">// "world"</span></span><br></pre></td></tr></table></figure><h3 id="Object-keys-obj-Object-values-obj-Object-entries-obj-return-arr"><a href="#Object-keys-obj-Object-values-obj-Object-entries-obj-return-arr" class="headerlink" title="Object.keys(obj),Object.values(obj),Object.entries(obj) return arr"></a>Object.keys(obj),Object.values(obj),Object.entries(obj) return arr</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 都只返回自身的,不返回继承的</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.keys(obj)</span><br><span class="line"><span class="comment">// ["foo", "baz"]</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.values(obj)</span><br><span class="line"><span class="comment">// ["bar", 42]</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.entries(obj)</span><br><span class="line"><span class="comment">// [ ["foo", "bar"], ["baz", 42] ]</span></span><br></pre></td></tr></table></figure><p><code>Object.entries</code>方法的另一个用处是，将对象转为真正的<code>Map</code>结构。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(<span class="built_in">Object</span>.entries(obj));</span><br><span class="line">map <span class="comment">// Map &#123; foo: "bar", baz: 42 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="对象的扩展运算符"><a href="#对象的扩展运算符" class="headerlink" title="对象的扩展运算符"></a>对象的扩展运算符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; x, y, ...z &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;;</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 2</span></span><br><span class="line">z <span class="comment">// &#123; a: 3, b: 4 &#125;</span></span><br></pre></td></tr></table></figure><p>下面代码中，变量<code>x</code>是单纯的解构赋值，所以可以读取对象<code>o</code>继承的属性；变量<code>y</code>和<code>z</code>是扩展运算符的解构赋值，只能读取对象<code>o</code>自身的属性，所以变量<code>z</code>可以赋值成功，变量<code>y</code>取不到值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = <span class="built_in">Object</span>.create(&#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;);</span><br><span class="line">o.z = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; x, ...&#123; y, z &#125; &#125; = o;</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// undefined</span></span><br><span class="line">z <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="es6克隆对象的三种写法"><a href="#es6克隆对象的三种写法" class="headerlink" title="es6克隆对象的三种写法"></a>es6克隆对象的三种写法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">const</span> clone1 = &#123;</span><br><span class="line">  __proto__: <span class="built_in">Object</span>.getPrototypeOf(obj),</span><br><span class="line">  ...obj</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">const</span> clone2 = <span class="built_in">Object</span>.assign(</span><br><span class="line">  <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.getPrototypeOf(obj)),</span><br><span class="line">  obj</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法三</span></span><br><span class="line"><span class="keyword">const</span> clone3 = <span class="built_in">Object</span>.create(</span><br><span class="line">  <span class="built_in">Object</span>.getPrototypeOf(obj),</span><br><span class="line">  <span class="built_in">Object</span>.getOwnPropertyDescriptors(obj)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>如果用户自定义的属性，放在扩展运算符后面，则扩展运算符内部的同名属性会被覆盖掉</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> aWithOverrides = &#123; ...a, <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> aWithOverrides = &#123; ...a, ...&#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125; &#125;;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>, y = <span class="number">2</span>, aWithOverrides = &#123; ...a, x, y &#125;;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> aWithOverrides = <span class="built_in">Object</span>.assign(&#123;&#125;, a, &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="Null传导运算符"><a href="#Null传导运算符" class="headerlink" title="Null传导运算符"></a>Null传导运算符</h3><p>为了防止null.a 或 undefined.a报错,还只是提案</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果 a 是 null 或 undefined, 返回 undefined</span></span><br><span class="line"><span class="comment">// 否则返回 a.b.c().d</span></span><br><span class="line">a?.b.c().d</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 a 是 null 或 undefined，下面的语句不产生任何效果</span></span><br><span class="line"><span class="comment">// 否则执行 a.b = 42</span></span><br><span class="line">a?.b = <span class="number">42</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 a 是 null 或 undefined，下面的语句不产生任何效果</span></span><br><span class="line"><span class="keyword">delete</span> a?.b</span><br></pre></td></tr></table></figure><hr><h2 id="Class-extends-类继承"><a href="#Class-extends-类继承" class="headerlink" title="Class extends 类继承"></a>Class extends 类继承</h2><h3 id="new-target属性"><a href="#new-target属性" class="headerlink" title="new.target属性"></a>new.target属性</h3><p><code>new</code>是从构造函数生成实例对象的命令。ES6 为<code>new</code>命令引入了一个<code>new.target</code>属性，该属性一般用在构造函数之中，返回<code>new</code>命令作用于的那个构造函数。如果构造函数不是通过<code>new</code>命令调用的，<code>new.target</code>会返回<code>undefined</code>，因此这个属性可以用来确定构造函数是怎么调用的。</p><p>Class 内部调用<code>new.target</code>，返回当前 Class。</p><p>需要注意的是，子类继承父类时，<code>new.target</code>会返回子类。</p><h3 id="super-1"><a href="#super-1" class="headerlink" title="super()"></a>super()</h3><p>super作为函数调用时,代表父类的构造函数. ES6要求, 子类的构造函数必须执行一次<code>super</code>函数</p><p>super只能用在子类的constructor中,相当于执行了<code>Father.prototype.constructor.call(this)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span>.target.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> A() <span class="comment">// A</span></span><br><span class="line"><span class="keyword">new</span> B() <span class="comment">// B</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>new.target</code>指向当前正在执行的函数。可以看到，在<code>super()</code>执行时，它指向的是子类<code>B</code>的构造函数，而不是父类<code>A</code>的构造函数。也就是说，<code>super()</code>内部的<code>this</code>指向的是<code>B</code>。</p><h3 id="super-2"><a href="#super-2" class="headerlink" title="super"></a>super</h3><p>第二种情况，<code>super</code>作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。</p><p>ES6 规定，通过<code>super</code>调用父类的方法时，方法内部的<code>this</code>指向子类。</p><p>由于<code>this</code>指向子类，所以如果通过<code>super</code>对某个属性赋值，这时<code>super</code>就是<code>this</code>，赋值的属性会变成子类实例的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.x = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">super</span>.x = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">super</span>.x); <span class="comment">// undefined</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x); <span class="comment">// 3</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> B();</span><br></pre></td></tr></table></figure><p>上面代码中，<code>super.x</code>赋值为<code>3</code>，这时等同于对<code>this.x</code>赋值为<code>3</code>。而当读取<code>super.x</code>的时候，读的是<code>A.prototype.x</code>，所以返回<code>undefined</code>。</p><p>如果<code>super</code>作为对象，用在静态方法之中，这时<code>super</code>将指向父类，而不是父类的原型对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> myMethod(msg) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'static'</span>, msg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  myMethod(msg) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'instance'</span>, msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> myMethod(msg) &#123;</span><br><span class="line">    <span class="keyword">super</span>.myMethod(msg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  myMethod(msg) &#123;</span><br><span class="line">    <span class="keyword">super</span>.myMethod(msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.myMethod(<span class="number">1</span>); <span class="comment">// static 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> Child();</span><br><span class="line">child.myMethod(<span class="number">2</span>); <span class="comment">// instance 2</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>super</code>在静态方法之中指向父类，在普通方法之中指向父类的原型对象。</p><h3 id="类的Prototype属性和proto属性"><a href="#类的Prototype属性和proto属性" class="headerlink" title="类的Prototype属性和proto属性"></a>类的Prototype属性和<strong>proto</strong>属性</h3><p>大多数浏览器的 ES5 实现之中，每一个对象都有<code>__proto__</code>属性，指向对应的构造函数的<code>prototype</code>属性。Class 作为构造函数的语法糖，同时有<code>prototype</code>属性和<code>__proto__</code>属性，因此同时存在两条继承链。</p><p>（1）子类的<code>__proto__</code>属性，表示构造函数的继承，总是指向父类。</p><p>（2）子类<code>prototype</code>属性的<code>__proto__</code>属性，表示方法的继承，总是指向父类的<code>prototype</code>属性。</p><p><img src="https://i.loli.net/2017/12/21/5a3b0244c9ed5.jpg" alt=""></p><p>上面的图代表class Son extends Father 的继承关系</p><h2 id="ES6严格模式"><a href="#ES6严格模式" class="headerlink" title="ES6严格模式"></a>ES6严格模式</h2><ul><li>变量必须声明后再使用</li><li>函数的参数不能有同名属性，否则报错</li><li>不能使用<code>with</code>语句</li><li>不能对只读属性赋值，否则报错</li><li>不能使用前缀 0 表示八进制数，否则报错</li><li>不能删除不可删除的属性，否则报错</li><li>不能删除变量<code>delete prop</code>，会报错，只能删除属性<code>delete global[prop]</code></li><li><code>eval</code>不会在它的外层作用域引入变量</li><li><code>eval</code>和<code>arguments</code>不能被重新赋值</li><li><code>arguments</code>不会自动反映函数参数的变化</li><li>不能使用<code>arguments.callee</code></li><li>不能使用<code>arguments.caller</code></li><li>禁止<code>this</code>指向全局对象</li><li>不能使用<code>fn.caller</code>和<code>fn.arguments</code>获取函数调用的堆栈</li><li>增加了保留字（比如<code>protected</code>、<code>static</code>和<code>interface</code>）</li><li>顶层<code>this</code>属于undefined,不应该在顶层使用this</li></ul><h2 id="Async"><a href="#Async" class="headerlink" title="Async"></a>Async</h2><h3 id="async-与其他异步处理方法的比较"><a href="#async-与其他异步处理方法的比较" class="headerlink" title="async 与其他异步处理方法的比较"></a>async 与其他异步处理方法的比较</h3><p>我们通过一个例子，来看 async 函数与 Promise、Generator 函数的比较。</p><p>假定某个 DOM 元素上面，部署了一系列的动画，前一个动画结束，才能开始后一个。如果当中有一个动画出错，就不再往下执行，返回上一个成功执行的动画的返回值。</p><p>首先是 Promise 的写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chainAnimationsPromise</span>(<span class="params">elem, animations</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 变量ret用来保存上一个动画的返回值</span></span><br><span class="line">  <span class="keyword">let</span> ret = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 新建一个空的Promise</span></span><br><span class="line">  <span class="keyword">let</span> p = <span class="built_in">Promise</span>.resolve();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用then方法，添加所有动画</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> anim <span class="keyword">of</span> animations) &#123;</span><br><span class="line">    p = p.then(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">      ret = val;</span><br><span class="line">      <span class="keyword">return</span> anim(elem);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回一个部署了错误捕捉机制的Promise</span></span><br><span class="line">  <span class="keyword">return</span> p.catch(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 忽略错误，继续执行 */</span></span><br><span class="line">  &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然 Promise 的写法比回调函数的写法大大改进，但是一眼看上去，代码完全都是 Promise 的 API（<code>then</code>、<code>catch</code>等等），操作本身的语义反而不容易看出来。</p><p>接着是 Generator 函数的写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chainAnimationsGenerator</span>(<span class="params">elem, animations</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> spawn(<span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ret = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> anim <span class="keyword">of</span> animations) &#123;</span><br><span class="line">        ret = <span class="keyword">yield</span> anim(elem);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">      <span class="comment">/* 忽略错误，继续执行 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码使用 Generator 函数遍历了每个动画，语义比 Promise 写法更清晰，用户定义的操作全部都出现在<code>spawn</code>函数的内部。这个写法的问题在于，必须有一个任务运行器，自动执行 Generator 函数，上面代码的<code>spawn</code>函数就是自动执行器，它返回一个 Promise 对象，而且必须保证<code>yield</code>语句后面的表达式，必须返回一个 Promise。</p><p>最后是 async 函数的写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">chainAnimationsAsync</span>(<span class="params">elem, animations</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ret = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> anim <span class="keyword">of</span> animations) &#123;</span><br><span class="line">      ret = <span class="keyword">await</span> anim(elem);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    <span class="comment">/* 忽略错误，继续执行 */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 Async 函数的实现最简洁，最符合语义，几乎没有语义不相关的代码。它将 Generator 写法中的自动执行器，改在语言层面提供，不暴露给用户，因此代码量最少。如果使用 Generator 写法，自动执行器需要用户自己提供。</p><h3 id="实例：按顺序完成异步操作"><a href="#实例：按顺序完成异步操作" class="headerlink" title="实例：按顺序完成异步操作"></a>实例：按顺序完成异步操作</h3><p>实际开发中，经常遇到一组异步操作，需要按照顺序完成。比如，依次远程读取一组 URL，然后按照读取的顺序输出结果。</p><p>Promise 的写法如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logInOrder</span>(<span class="params">urls</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 远程读取所有URL</span></span><br><span class="line">  <span class="keyword">const</span> textPromises = urls.map(<span class="function"><span class="params">url</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fetch(url).then(<span class="function"><span class="params">response</span> =&gt;</span> response.text());</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 按次序输出</span></span><br><span class="line">  textPromises.reduce(<span class="function">(<span class="params">chain, textPromise</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> chain.then(<span class="function"><span class="params">()</span> =&gt;</span> textPromise)</span><br><span class="line">      .then(<span class="function"><span class="params">text</span> =&gt;</span> <span class="built_in">console</span>.log(text));</span><br><span class="line">  &#125;, <span class="built_in">Promise</span>.resolve());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码使用<code>fetch</code>方法，同时远程读取一组 URL。每个<code>fetch</code>操作都返回一个 Promise 对象，放入<code>textPromises</code>数组。然后，<code>reduce</code>方法依次处理每个 Promise 对象，然后使用<code>then</code>，将所有 Promise 对象连起来，因此就可以依次输出结果。</p><p>这种写法不太直观，可读性比较差。下面是 async 函数实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">logInOrder</span>(<span class="params">urls</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> url <span class="keyword">of</span> urls) &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(url);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">await</span> response.text());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码确实大大简化，问题是所有远程操作都是继发。只有前一个 URL 返回结果，才会去读取下一个 URL，这样做效率很差，非常浪费时间。我们需要的是并发发出远程请求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">logInOrder</span>(<span class="params">urls</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 并发读取远程URL</span></span><br><span class="line">  <span class="keyword">const</span> textPromises = urls.map(<span class="keyword">async</span> url =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(url);</span><br><span class="line">    <span class="keyword">return</span> response.text();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 按次序输出</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> textPromise <span class="keyword">of</span> textPromises) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">await</span> textPromise);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，虽然<code>map</code>方法的参数是<code>async</code>函数，但它是并发执行的，因为只有<code>async</code>函数内部是继发执行，外部不受影响。后面的<code>for..of</code>循环内部使用了<code>await</code>，因此实现了按顺序输出。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;let-amp-const-取消全局属性挂载&quot;&gt;&lt;a href=&quot;#let-amp-const-取消全局属性挂载&quot; class=&quot;headerlink&quot; title=&quot;let &amp;amp; const 取消全局属性挂载&quot;&gt;&lt;/a&gt;let &amp;amp; const 取消
      
    
    </summary>
    
    
  </entry>
  
</feed>
