<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>choteewang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-06T09:37:39.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>choteewang@qq.com</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vuex 03 : 代码拆分 &amp; mapAnything</title>
    <link href="http://yoursite.com/2017/12/06/12-Vuex-03/"/>
    <id>http://yoursite.com/2017/12/06/12-Vuex-03/</id>
    <published>2017-12-06T08:06:45.000Z</published>
    <updated>2017-12-06T09:37:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="12-Vuex-03-代码拆分-amp-mapAnything"><a href="#12-Vuex-03-代码拆分-amp-mapAnything" class="headerlink" title="12-Vuex-03 : 代码拆分 &amp; mapAnything"></a>12-Vuex-03 : 代码拆分 &amp; mapAnything</h1><h3 id="mapActions-mapGetters-mapMutations"><a href="#mapActions-mapGetters-mapMutations" class="headerlink" title="mapActions,mapGetters,mapMutations"></a>mapActions,mapGetters,mapMutations</h3><p>map系列函数能帮我们用更简洁的语法将store.actions,mutations,getters绑定到组件中, 是很好的语法糖. 这里以<code>mapGetters</code>举例,剩下剩下两个也是一个套路.</p><p><code>mapGetters</code> 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性, 可以向方法中传一个数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  computed: &#123;</span><br><span class="line">  <span class="comment">// 使用对象展开运算符将 getter 混入 computed 对象中</span></span><br><span class="line">    ...mapGetters([</span><br><span class="line">      <span class="string">'doneTodosCount'</span>,</span><br><span class="line">      <span class="string">'anotherGetter'</span>,</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你想将一个 getter 属性另取一个名字，使用对象形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mapGetters(&#123;</span><br><span class="line">  <span class="comment">// 映射 `this.doneCount` 为 `store.getters.doneTodosCount`</span></span><br><span class="line">  doneCount: <span class="string">'doneTodosCount'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>回到本例,我们可以修改代码为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  ...mapGetters([<span class="string">"oddOrEven"</span>])</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  ...mapActions([<span class="string">"increment"</span>, <span class="string">"decrement"</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件拆分"><a href="#文件拆分" class="headerlink" title="文件拆分"></a>文件拆分</h3><p>接下来将文件拆分:</p><ol><li>将所有与store相关的方法移到store.js中, </li><li>将Counter组件提出称为单文件组件Counter.vue</li><li>将store.js与Counter.vue一起import进入口文件index.js,并在入口的根实例中绑定store</li></ol><p>测试一下,完成! 下面是分文件的完整代码</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><hr><h3 id="store-js"><a href="#store-js" class="headerlink" title="store.js"></a>store.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用常量替代字符串</span></span><br><span class="line"><span class="keyword">const</span> INCREMENT = <span class="string">'INCREMENT'</span></span><br><span class="line"><span class="keyword">const</span> DECREMENT = <span class="string">'DECREMENT'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  count: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  <span class="comment">// getter方法的第一个参数是state,第二个参数是getters对象</span></span><br><span class="line">  oddOrEven(state) &#123;</span><br><span class="line">    <span class="keyword">return</span> state.count % <span class="number">2</span> === <span class="number">0</span> ? <span class="string">'even'</span> : <span class="string">'odd'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="comment">// ES6计算属性写法,来命名函数名,payload是组件内部提交的&#123;type:string,step:string&#125;的对象</span></span><br><span class="line">  [INCREMENT](state, payload) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state.count += payload.step</span><br><span class="line">  &#125;,</span><br><span class="line">  [DECREMENT](state, payload) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state.count -= payload.step</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="comment">// 用action将mutation包一层,把触发mutation的逻辑写在action中</span></span><br><span class="line">  increment(&#123; commit &#125;) &#123;</span><br><span class="line">    <span class="comment">// 对象风格提交方式提交mutation, 与Redux统一</span></span><br><span class="line">    commit(&#123; <span class="attr">type</span>: INCREMENT, <span class="attr">step</span>: <span class="number">1</span> &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// action可以是异步的,可以用Promise包装</span></span><br><span class="line">  decrement(&#123; commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        commit(&#123; <span class="attr">type</span>: DECREMENT, <span class="attr">step</span>: <span class="number">1</span> &#125;)</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;, <span class="number">3000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  getters,</span><br><span class="line">  mutations,</span><br><span class="line">  actions</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Counter-vue"><a href="#Counter-vue" class="headerlink" title="Counter.vue"></a>Counter.vue</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; $store.state.count &#125;&#125; is &#123;&#123; oddOrEven &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button v-on:click="increment"&gt; + &lt;/</span>button&gt;</span><br><span class="line">    &lt;button v-on:click=<span class="string">"decrement"</span>&gt; - (Async) &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">import Vue from "vue";</span></span><br><span class="line"><span class="regexp">import &#123; mapActions, mapGetters &#125; from "vuex";</span></span><br><span class="line"><span class="regexp">export default Vue.component("Counter", &#123;</span></span><br><span class="line"><span class="regexp">  computed: &#123;</span></span><br><span class="line"><span class="regexp">    ...mapGetters(["oddOrEven"])</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  methods: &#123;</span></span><br><span class="line"><span class="regexp">    ...mapActions(["increment", "decrement"])</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Counter <span class="keyword">from</span> <span class="string">'./Counter'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  store,</span><br><span class="line">  template: <span class="string">'&lt;Counter/&gt;'</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><p>至此, 我们已经完成了一个具备大多数Vuex功能的counter, 当然Vuex可以做的事比这个例子更多, 比如Module模块分割和路径管理等. 但都是在这个基础上进行改动的. 相信看文档与实际项目结合,接受的会很快</p><p>其实Flux架构的大体思路都差不多, 单向数据流, 视图触发<code>dispatch</code>一个<code>action</code>, 从而修改<code>store</code>中的<code>state</code>, View层监视到<code>state</code>的修改从而更新数据触发渲染. 不管是Vuex还是Redux都是一个套路. 希望从这几篇blog的总结中, 我自己可以有收获!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;12-Vuex-03-代码拆分-amp-mapAnything&quot;&gt;&lt;a href=&quot;#12-Vuex-03-代码拆分-amp-mapAnything&quot; class=&quot;headerlink&quot; title=&quot;12-Vuex-03 : 代码拆分 &amp;amp; mapAny
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vuex 02 : 基于Getter, Mutation, Action,继续改造Demo</title>
    <link href="http://yoursite.com/2017/12/06/11-vuex-02/"/>
    <id>http://yoursite.com/2017/12/06/11-vuex-02/</id>
    <published>2017-12-06T00:25:08.000Z</published>
    <updated>2017-12-06T09:37:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="11-Vuex-02-Getter-Mutation-Action"><a href="#11-Vuex-02-Getter-Mutation-Action" class="headerlink" title="11-Vuex 02 : Getter, Mutation, Action"></a>11-Vuex 02 : Getter, Mutation, Action</h1><p>经过上篇的旅程, 已经可以做出一个有Vuex基本功能的Counter了. 为了让Counter的逻辑更完善, 今天引入Getter, Mutation, Action 来继续优化代码</p><h3 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h3><p>Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</p><p>在本例中,将count是奇书还是偶数的逻辑写在getter中.</p><p>Getter接收<code>state</code>作为第一个参数,</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getters:&#123;</span><br><span class="line">  <span class="comment">// getter方法的第一个参数是state,第二个参数是getters对象</span></span><br><span class="line">  oddOrEven(state)&#123;</span><br><span class="line">    <span class="keyword">return</span> state.count % <span class="number">2</span> === <span class="number">0</span> ? <span class="string">'even'</span> : <span class="string">'odd'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组件内部的写法,这里getter会暴露为Store.getters对象, 同时getter也接收getters对象本身作为第二个参数, 这样可以接受其他getter</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">  count()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.count</span><br><span class="line">  &#125;,</span><br><span class="line">  oddOrEven()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$store.getters.oddOrEven</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h3><p>在Vuex里,提交状态需要用到<code>mutation</code>与<code>action</code>,<code>action</code>更像在mutation外面包了一层, 类似Redux中的<code>action creater</code>产生<code>action</code>一样, 在Vuex里, <code>mutation</code>只保留最原始的逻辑, 操作state中的数据, 其他commit mutation的逻辑和异步操作交给<code>action</code>去处理.</p><p>所以,异步和其他逻辑处理交给<code>action</code>,所以<code>mutation</code>必须是同步的</p><p><code>mutation</code>的类型最好用常量去代替, 这点也与Redux等Flux架构相统一, 可以使用ES6的计算属性优化常量作为函数名的写法.</p><p>提交mutation的唯一方式是<code>store.commit(mutation)</code>,这里可以在<code>commit mutation</code>时附加提交数据<code>payload</code>,习惯写成对象的提交方式如<code>{type:INCREMENT,step:1}</code>,这个对象在store定义时的<code>mutation</code>方法中是第二个参数, 写成<code>payload</code>是很好的社区规范.这里用step来定义 counter 加减的跨度</p><p>总结一下,如下改写mutation:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> INCREMENT = <span class="string">'INCREMENT'</span></span><br><span class="line"><span class="keyword">const</span> DECREMENT = <span class="string">'DECREMENT'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">mutations:&#123;</span><br><span class="line">  <span class="comment">// ES6计算属性写法,来命名函数名,payload是组件内部提交的&#123;type:string,step:string&#125;的对象</span></span><br><span class="line">  [INCREMENT](state,payload)&#123;</span><br><span class="line">    <span class="keyword">this</span>.state.count += payload.step</span><br><span class="line">  &#125;,</span><br><span class="line">  [DECREMENT](state,payload)&#123;</span><br><span class="line">    <span class="keyword">this</span>.state.count -= payload.step</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在组件内提交时</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$store.commit(&#123;<span class="attr">type</span>:INCREMENT,<span class="attr">step</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><p><code>action</code>是在<code>mutation</code>外包的一层方法, 用来定义触发<code>commit mutation</code>的逻辑, 更主要的是异步逻辑.</p><p>Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 <code>context.commit</code> 提交一个 mutation，或者通过 <code>context.state</code> 和 <code>context.getters</code> 来获取 state 和 getters</p><p>实践中，我们会经常用到 ES6的解构赋值来简化代码（特别是我们需要调用 <code>commit</code> 很多次的时候</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  increment (&#123; commit &#125;) &#123;</span><br><span class="line">    commit(<span class="string">'increment'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Action 通过 store.dispatch 方法触发：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(<span class="string">'increment'</span>)</span><br></pre></td></tr></table></figure><p>Action 通常是异步的，那么如何知道 action 什么时候结束呢？更重要的是，我们如何才能组合多个 action，以处理更加复杂的异步流程？</p><p>首先，你需要明白 <code>store.dispatch</code> 可以处理被触发的 action 的处理函数返回的 Promise，并且 <code>store.dispatch</code> 仍旧返回 Promise：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  actionA (&#123; commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        commit(<span class="string">'someMutation'</span>)</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以现在在dispatch时可以:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(<span class="string">'actionA'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在另一个action内也可以:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  actionB (&#123; dispatch, commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> dispatch(<span class="string">'actionA'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      commit(<span class="string">'someOtherMutation'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回到本例,将提交mutation的逻辑全部移入action,将做减法的逻辑改成异步,1秒以后执行,代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store配置内</span></span><br><span class="line">actions:&#123;</span><br><span class="line">    <span class="comment">// 用action将mutation包一层,把触发mutation的逻辑写在action中</span></span><br><span class="line">    [INCREMENT](&#123;commit&#125;)&#123;</span><br><span class="line">      <span class="comment">// 对象风格提交方式提交mutation, 与Redux统一</span></span><br><span class="line">      commit(&#123;<span class="attr">type</span>:INCREMENT,<span class="attr">step</span>:<span class="number">1</span>&#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// action可以是异步的,可以用Promise包装</span></span><br><span class="line">    [DECREMENT](&#123;commit&#125;)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          commit(&#123;<span class="attr">type</span>:DECREMENT,<span class="attr">step</span>:<span class="number">1</span>&#125;)</span><br><span class="line">          resolve()</span><br><span class="line">        &#125;, <span class="number">3000</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 组件methods内</span></span><br><span class="line">methods:&#123;</span><br><span class="line">  increment()&#123;</span><br><span class="line">    <span class="keyword">this</span>.$store.dispatch(INCREMENT) </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//store.dispatch可以处理被触发的action的处理函数返回的promiste,dispatch仍旧返回Promise</span></span><br><span class="line">  decrement()&#123;</span><br><span class="line">    <span class="keyword">this</span>.$store.dispatch(DECREMENT).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="string">'Async deduct works!'</span>)&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://i.loli.net/2017/12/06/5a27a4aade6b2.jpg" alt=""></p><h3 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用常量替代字符串</span></span><br><span class="line"><span class="keyword">const</span> INCREMENT = <span class="string">'INCREMENT'</span></span><br><span class="line"><span class="keyword">const</span> DECREMENT = <span class="string">'DECREMENT'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state:&#123;</span><br><span class="line">    count:<span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  getters:&#123;</span><br><span class="line">    <span class="comment">// getter方法的第一个参数是state,第二个参数是getters对象</span></span><br><span class="line">    oddOrEven(state)&#123;</span><br><span class="line">      <span class="keyword">return</span> state.count % <span class="number">2</span> === <span class="number">0</span> ? <span class="string">'even'</span> : <span class="string">'odd'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations:&#123;</span><br><span class="line">    <span class="comment">// ES6计算属性写法,来命名函数名,payload是组件内部提交的&#123;type:string,step:string&#125;的对象</span></span><br><span class="line">    [INCREMENT](state,payload)&#123;</span><br><span class="line">      <span class="keyword">this</span>.state.count += payload.step</span><br><span class="line">    &#125;,</span><br><span class="line">    [DECREMENT](state,payload)&#123;</span><br><span class="line">      <span class="keyword">this</span>.state.count -= payload.step</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions:&#123;</span><br><span class="line">    <span class="comment">// 用action将mutation包一层,把触发mutation的逻辑写在action中</span></span><br><span class="line">    [INCREMENT](&#123;commit&#125;)&#123;</span><br><span class="line">      <span class="comment">// 对象风格提交方式提交mutation, 与Redux统一</span></span><br><span class="line">      commit(&#123;<span class="attr">type</span>:INCREMENT,<span class="attr">step</span>:<span class="number">1</span>&#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// action可以是异步的,可以用Promise包装</span></span><br><span class="line">    [DECREMENT](&#123;commit&#125;)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          commit(&#123;<span class="attr">type</span>:DECREMENT,<span class="attr">step</span>:<span class="number">1</span>&#125;)</span><br><span class="line">          resolve()</span><br><span class="line">        &#125;, <span class="number">3000</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Counter = &#123;</span><br><span class="line">  template:<span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;&#123;&#123; count &#125;&#125; is &#123;&#123; oddOrEven &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;button v-on:click="increment"&gt; + &lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;button v-on:click="decrement"&gt; - (Async) &lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  computed:&#123;</span><br><span class="line">    count()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.count</span><br><span class="line">    &#125;,</span><br><span class="line">    oddOrEven()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.getters.oddOrEven</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    increment()&#123;</span><br><span class="line">      <span class="keyword">this</span>.$store.dispatch(INCREMENT) </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//store.dispatch可以处理被触发的action的处理函数返回的promiste,dispatch仍旧返回Promise</span></span><br><span class="line">    decrement()&#123;</span><br><span class="line">      <span class="keyword">this</span>.$store.dispatch(DECREMENT).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="string">'Async deduct works!'</span>)&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  store,</span><br><span class="line">  template: <span class="string">'&lt;Counter/&gt;'</span>,</span><br><span class="line">  components: &#123; Counter &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>现在, 我们已经完成了一个符合Vuex规范的Counter, 其可以完美的运行和异步处理数据, 下一次将会对代码进行拆分解耦, 并在组件内部优化action与getter的部署代码</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;11-Vuex-02-Getter-Mutation-Action&quot;&gt;&lt;a href=&quot;#11-Vuex-02-Getter-Mutation-Action&quot; class=&quot;headerlink&quot; title=&quot;11-Vuex 02 : Getter, Mutat
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vuex 01 : 入门</title>
    <link href="http://yoursite.com/2017/12/05/10-vuex-01/"/>
    <id>http://yoursite.com/2017/12/05/10-vuex-01/</id>
    <published>2017-12-05T00:18:36.000Z</published>
    <updated>2017-12-06T09:37:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为之前学习了Redux, 这次学Vuex就快速多了, 总的来说思路是一样的, 都是用闭包实现了对一些数据的维护, 再用从闭包return出去的方法操作这些数据, 或获得此时闭包数据的snapshot. </p><h3 id="Vuex-安装"><a href="#Vuex-安装" class="headerlink" title="Vuex 安装"></a>Vuex 安装</h3><p>在一个模块化的打包系统中，您必须显式地通过 <code>Vue.use()</code> 来安装 Vuex：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br></pre></td></tr></table></figure><p>当使用script标签引入时, 不需要以上过程.</p><h3 id="什么是状态管理-单向数据流的意义"><a href="#什么是状态管理-单向数据流的意义" class="headerlink" title="什么是状态管理? 单向数据流的意义"></a>什么是状态管理? 单向数据流的意义</h3><p><img src="https://i.loli.net/2017/12/05/5a25e7c210411.jpg" alt=""></p><p>状态自管理应用包含以下几个部分：</p><ul><li><strong>state</strong>，驱动应用的数据源；</li><li><strong>view</strong>，以声明方式将 <strong>state</strong> 映射到视图；</li><li><strong>actions</strong>，响应在 <strong>view</strong> 上的用户输入导致的状态变化。</li></ul><p>简单来说, 就是app维护一个State库, 将很多组件需要共同使用的状态存储在这个库中, 上图的动作可以分解为几个步骤.</p><ol><li><p>需要使用到其中状态数据的组件, 通过<code>State</code>向其传递的<code>props</code>向<code>View</code>层展示数据, </p></li><li><p>在View层操作数据之后, 通过<code>dispatch</code>相应的<code>action</code>修改<code>state</code>中维护的闭包数据,</p></li><li><p>闭包中的数据改变后, 在<code>dispatch</code>方法中, 操作数据得到个更新后的<code>State</code>后, 调用<code>listener</code>数组中的方法, 通知<code>View</code>层更新数据, 这里回到步骤1, <code>View</code>层再次请求<code>State</code>向其传递的<code>props</code></p></li></ol><p>与<strong>后台API接口</strong>结合后, 用vuex官网更形象更具体的图来描述这个过程</p><p><img src="https://i.loli.net/2017/12/06/5a27396e59fd9.png" alt=""></p><h3 id="Vuex-Counter-最初形态"><a href="#Vuex-Counter-最初形态" class="headerlink" title="Vuex Counter 最初形态"></a>Vuex Counter 最初形态</h3><p>具体上简单的代码来实现以下刚才说的东西</p><p>我们采用vue-cli构建,首先来写一个最简单的vue计数器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Counter = &#123;</span><br><span class="line">  template:<span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;&#123;&#123; count &#125;&#125; is &#123;&#123; oddOrEven &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;button v-on:click="Increase"&gt; + &lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;button v-on:click="Decrease"&gt; - (Async) &lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  data()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count:<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed:&#123;</span><br><span class="line">    oddOrEven()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.count % <span class="number">2</span> === <span class="number">0</span> ? <span class="string">'even'</span> : <span class="string">'odd'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    Increase()&#123;</span><br><span class="line">      <span class="keyword">this</span>.count ++</span><br><span class="line">    &#125;,</span><br><span class="line">    Decrease()&#123;</span><br><span class="line">      <span class="keyword">this</span>.count--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  template: <span class="string">'&lt;Counter/&gt;'</span>,</span><br><span class="line">  components: &#123; Counter &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/12/06/5a27396e6a067.jpg" alt=""></p><p>此时的计数器是完全没有应用状态管理技术的, 虽然引入了vuex.js, 但没有使用, 计数的count完全来自组件内部的data对象.下面要一步步的把他改造成应用状态管理vuex的组件</p><h3 id="创建store-在组件内部引入store-state和store-commit-实现最简单的vuex功能"><a href="#创建store-在组件内部引入store-state和store-commit-实现最简单的vuex功能" class="headerlink" title="创建store,在组件内部引入store.state和store.commit,实现最简单的vuex功能"></a>创建store,在组件内部引入store.state和store.commit,实现最简单的vuex功能</h3><p><code>store</code>就是一个仓库, 是一个容器, 是一个闭包, <code>store</code>中维护者组件中需要的<code>state</code>数据, 和触发这些数据更改的方法</p><p><code>store</code>的存储状态应该是响应式的, 所以最佳实践是<code>store.state</code>中的状态数据通过计算属性返回</p><p>在Vue组件中, 不能直接改变<code>store.state</code>, 只能<code>store.commit(相应的mutation)</code>来改变数据</p><p><code>mutations</code>对象中的键对应的是函数, 其第一个参数是<code>state</code>,在组件内部的<code>methods</code>中,可以在方法内部调用<code>store.commit(mutation)</code>来对应触发<code>store</code>中定义的<code>mutation</code>, 从而修改<code>store.state</code>中的数据</p><p><code>mutation</code>有点像<code>Redux</code>中的<code>action</code>, 不带异步的<code>action</code>, 但不是<code>action creater</code>, 在Vuex中, 有<code>Action</code>更像Redux中的<code>action creater</code>, 这个会在后面进行讨论</p><p>下面把之前的Counter代码修改一下, 让它具备基本的Vuex功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"><span class="comment">// 在构建中使用Vuex中间件</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state:&#123;</span><br><span class="line">    count:<span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations:&#123;</span><br><span class="line">    <span class="comment">// mutation的第一个参数对应store.state</span></span><br><span class="line">    increment(state)&#123;</span><br><span class="line">      <span class="keyword">this</span>.state.count++</span><br><span class="line">    &#125;,</span><br><span class="line">    decrement(state)&#123;</span><br><span class="line">      <span class="keyword">this</span>.state.count--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Counter = &#123;</span><br><span class="line">  template:<span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;&#123;&#123; count &#125;&#125; is &#123;&#123; oddOrEven &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;button v-on:click="increment"&gt; + &lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;button v-on:click="decrement"&gt; - (Async) &lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  computed:&#123;</span><br><span class="line">    count()&#123;</span><br><span class="line">      <span class="comment">// 由于要保证store.state数据的响应式, 用计算属性返回state中的数据值</span></span><br><span class="line">      <span class="keyword">return</span> store.state.count</span><br><span class="line">    &#125;,</span><br><span class="line">    oddOrEven()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.count % <span class="number">2</span> === <span class="number">0</span> ? <span class="string">'even'</span> : <span class="string">'odd'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    increment()&#123;</span><br><span class="line">      <span class="comment">// store.commit('对应的mutation名称'),这是提交mutation的方法</span></span><br><span class="line">      store.commit(<span class="string">'increment'</span>) </span><br><span class="line">    &#125;,</span><br><span class="line">    decrement()&#123;</span><br><span class="line">      store.commit(<span class="string">'decrement'</span>) </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  template: <span class="string">'&lt;Counter/&gt;'</span>,</span><br><span class="line">  components: &#123; Counter &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="根组件注入store-mapState辅助函数生成计算属性"><a href="#根组件注入store-mapState辅助函数生成计算属性" class="headerlink" title="根组件注入store, mapState辅助函数生成计算属性"></a>根组件注入store, mapState辅助函数生成计算属性</h3><p>继续改进代码.Vuex 通过 <code>store</code> 选项，提供了一种机制将状态从根组件“注入”到每一个子组件中（需调用 <code>Vue.use(Vuex)</code>）：</p><p>通过在根实例中注册 <code>store</code> 选项，该 <code>store</code> 实例会注入到根组件下的所有子组件中，且子组件能通过 <code>this.$store</code>访问到。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state:&#123;</span><br><span class="line">    count:<span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations:&#123;</span><br><span class="line">    increment(state)&#123;</span><br><span class="line">      <span class="keyword">this</span>.state.count++</span><br><span class="line">    &#125;,</span><br><span class="line">    decrement(state)&#123;</span><br><span class="line">      <span class="keyword">this</span>.state.count--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Counter = &#123;</span><br><span class="line">  template:<span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;&#123;&#123; count &#125;&#125; is &#123;&#123; oddOrEven &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;button v-on:click="increment"&gt; + &lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;button v-on:click="decrement"&gt; - (Async) &lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  computed:&#123;</span><br><span class="line">    count()&#123;</span><br><span class="line">      <span class="comment">// 这里因为根组件注入了store, 可以访问到this.$store对象了.</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.count</span><br><span class="line">    &#125;,</span><br><span class="line">    oddOrEven()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.count % <span class="number">2</span> === <span class="number">0</span> ? <span class="string">'even'</span> : <span class="string">'odd'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    increment()&#123;</span><br><span class="line">      <span class="keyword">this</span>.$store.commit(<span class="string">'increment'</span>) </span><br><span class="line">    &#125;,</span><br><span class="line">    decrement()&#123;</span><br><span class="line">      <span class="keyword">this</span>.$store.commit(<span class="string">'decrement'</span>) </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  <span class="comment">// 根组件处注入store, 子组件全部可以访问store中的状态数据</span></span><br><span class="line">  store,</span><br><span class="line">  template: <span class="string">'&lt;Counter/&gt;'</span>,</span><br><span class="line">  components: &#123; Counter &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>至此, 根组件已经注入了在状态仓库store, this.$store在Vue组件内部可访问, 组件和视图间的数据传递和更新用Vuex实现.</p><p>下一篇, 主要说说关于computed属性中的Getter与和methods中的Mutation的改造.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;因为之前学习了Redux, 这次学Vuex就快速多了, 总的来说思路是一样的, 都是用闭包实现了对一些数据的维护, 再用从闭包return出去的方法操作这些数据, 或获得此时闭包数据的snapshot. &lt;/p&gt;
&lt;h3 id=&quot;Vuex-安装&quot;&gt;&lt;a href=&quot;#Vue
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React高阶组件(1):Intro</title>
    <link href="http://yoursite.com/2017/11/20/9-React%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B61%20:%20Intro/"/>
    <id>http://yoursite.com/2017/11/20/9-React高阶组件1 : Intro/</id>
    <published>2017-11-20T00:03:53.000Z</published>
    <updated>2017-11-20T08:43:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引子-高阶函数"><a href="#引子-高阶函数" class="headerlink" title="引子,高阶函数"></a>引子,高阶函数</h3><p>收函数作为输入，或者输出另一个函数的一类函数，被称作高阶函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello chotee'</span>)  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wrapped</span>(<span class="params"> fn </span>) </span>&#123; </span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'wrapped'</span>)</span><br><span class="line">    fn()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">hello = wrapped(hello)</span><br><span class="line"></span><br><span class="line">hello() <span class="comment">// wrapped hello chotee</span></span><br></pre></td></tr></table></figure><p>容易出现混淆的一点是: 虽然在hello = wrapped(hello) 这句话执行之后, hello这个变量指向的函数发生了变化, 但传入wrapped闭包内部的hello却仍然是最初定义的hello, 并没有被改写. </p><p>原因是进入wrapped内部执行后, 形参fn重新指向了最初hello定义时所指向的地址, 且wrapped运行完成后由于闭包形成, 这个地址不会被释放. 所以虽然hello重新被赋值, 但传入的函数在闭包内部却不会随着赋值操作发生改变.</p><h3 id="简单的React高阶组件"><a href="#简单的React高阶组件" class="headerlink" title="简单的React高阶组件"></a>简单的React高阶组件</h3><p>高阶组件的定义类似高阶函数, 它描述的便是接受React组件作为输入，输出一个新的React组件的组件。</p><p>实现一个withHeader的高阶组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通React组件Hello</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;这是Hello组件&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 定义一个包裹函数,参数是传入的'要被包裹的组件',return一个'包裹着参数组件的高阶组件'</span></span><br><span class="line"><span class="regexp">function withHeader(Component) &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    class HOC extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">      render() &#123;</span></span><br><span class="line"><span class="regexp">        return (</span></span><br><span class="line"><span class="regexp">          &lt;div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;h1&gt;wrapped Header&lt;/</span>h1&gt;</span><br><span class="line">            &lt;Component &#123;...this.props&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Component</span>&gt;</span></span></span><br><span class="line">          &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 被withHeader包裹后的组件高阶组件HelloWithHeader</span></span><br><span class="line"><span class="regexp">const HelloWithHeader = withHeader(Hello)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;HelloWithHeader&gt;&lt;/</span>HelloWithHeader&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('root'));</span></span><br></pre></td></tr></table></figure><ul><li>渲染结果</li></ul><p><img src="https://i.loli.net/2017/11/20/5a12442bbf77d.png" alt="Jietu20171120-105321"></p><ul><li>dom结构<br><img src="https://i.loli.net/2017/11/20/5a124442cdf6c.png" alt="Jietu20171120-105501"></li></ul><h3 id="关于上述代码的对象展开语法的注意点"><a href="#关于上述代码的对象展开语法的注意点" class="headerlink" title="关于上述代码的对象展开语法的注意点"></a>关于上述代码的对象展开语法的注意点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;WrappedComponent &#123;...this.props&#125;/&gt;</span><br><span class="line"><span class="comment">// is equivalent to</span></span><br><span class="line">React.createElement(WrappedComponent, <span class="keyword">this</span>.props, <span class="literal">null</span>)</span><br></pre></td></tr></table></figure><h3 id="ES7-装饰器写法"><a href="#ES7-装饰器写法" class="headerlink" title="ES7 装饰器写法"></a>ES7 装饰器写法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里省略了和上面例子一模一样的withHeader函数的定义代码</span></span><br><span class="line"></span><br><span class="line">@withHeader <span class="comment">// @ withHeader 等同于写了 Hello = withHeader(Hello)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;这是Hello组件&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;Hello&gt;&lt;/</span>Hello&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('root')); /</span><span class="regexp">/得到与上面同样结果</span></span><br></pre></td></tr></table></figure><h3 id="柯里化-组件参数"><a href="#柯里化-组件参数" class="headerlink" title="柯里化,组件参数"></a>柯里化,组件参数</h3><blockquote><p>柯里化 Curry<br>概念: 只传递函数的一部分参数来调用它,让它返回一个函数去处理剩下的参数<br>函数签名:func(params)(otherParams)<br>应用: 在React里,通过柯里化,通过传入不同的参数得到不同的高阶组件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需求:在刚才的例子里, 在h1标签里输出传入的参数title,以这个需求改造withHeader</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">withHeader</span>(<span class="params">title</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">Component</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="class"><span class="keyword">class</span> <span class="title">HOC</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        render() &#123;</span><br><span class="line">          <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">              &lt;h1&gt;&#123;<span class="string">`包裹的是一个名字叫<span class="subst">$&#123;title&#125;</span>的组件`</span>&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">              &lt;Component &#123;...this.props&#125;&gt;&lt;/</span>Component&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">          )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 注意这里为了区分特意传入了小写'h'开头的'hello'参数</span></span><br><span class="line"><span class="regexp">@withHeader('hello')</span></span><br><span class="line"><span class="regexp">class Hello extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;这是Hello组件&lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Hello&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Hello</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('root'))</span></span><br></pre></td></tr></table></figure><ul><li><p>渲染结果<br><img src="https://i.loli.net/2017/11/20/5a12502b3ffe1.png" alt="Jietu20171120-114530"></p></li><li><p>使用ES6写法可以更加简洁</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> withHeader = <span class="function">(<span class="params">title</span>) =&gt;</span> (Component) =&gt; (</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">HOC</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;h1&gt;&#123;<span class="string">`包裹的是一个名字叫<span class="subst">$&#123;title&#125;</span>的组件`</span>&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Component &#123;...this.props&#125;&gt;&lt;/</span>Component&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;)</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="属性代理"><a href="#属性代理" class="headerlink" title="属性代理"></a>属性代理</h3><p>高阶组件有两种常见的使用方式,第一种是属性代理,第二种是反向继承,直接上属性代理的示例代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将被包裹组件的props和新生成的props一起传递给被包裹的组件,称之为属性代理</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">withHeader</span>(<span class="params">Component</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">HOC</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">      render() &#123;</span><br><span class="line">        <span class="keyword">const</span> newProps = &#123;</span><br><span class="line">          test : <span class="string">'HOC'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">            &lt;h1&gt;wrapped Header&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">            &lt;Component &#123;...newProps &#125; &#123;...this.props&#125; &gt;&lt;/</span>Component&gt;</span><br><span class="line">          &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">@withHeader</span></span><br><span class="line"><span class="regexp">class Hello extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;这是Hello组件&lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Hello&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Hello</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('root'))</span></span><br></pre></td></tr></table></figure><h3 id="反向继承"><a href="#反向继承" class="headerlink" title="反向继承"></a>反向继承</h3><p>这种方式返回的React组件继承了被传入的组件，所以它能够访问到的区域、权限更多，相比属性代理方式，它更像打入组织内部，对其进行修改。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">withHeader</span>(<span class="params">Component</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">HOC</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">      componentDidMount() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'这是高阶组件额外的生命周期'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      render() &#123;</span><br><span class="line">        <span class="comment">// super([arguments]),调用父类的构造函数</span></span><br><span class="line">        <span class="comment">// super.xxx,调用父类上的xxx方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.render() </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@withHeader</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;这是Hello组件&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;Hello&gt;&lt;/</span>Hello&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('root'))</span></span><br></pre></td></tr></table></figure><h3 id="REFERENCE"><a href="#REFERENCE" class="headerlink" title="REFERENCE"></a>REFERENCE</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/28138664" target="_blank" rel="external">深入浅出React高阶组件</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;引子-高阶函数&quot;&gt;&lt;a href=&quot;#引子-高阶函数&quot; class=&quot;headerlink&quot; title=&quot;引子,高阶函数&quot;&gt;&lt;/a&gt;引子,高阶函数&lt;/h3&gt;&lt;p&gt;收函数作为输入，或者输出另一个函数的一类函数，被称作高阶函数&lt;/p&gt;
&lt;figure class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>由 &quot;对象深拷贝&quot; 引发的思考</title>
    <link href="http://yoursite.com/2017/11/15/8-%E7%94%B1%22%E5%AF%B9%E8%B1%A1%E6%B7%B1%E6%8B%B7%E8%B4%9D%22%E5%BC%95%E5%8F%91%E7%9A%84%E5%B0%9D%E8%AF%95/"/>
    <id>http://yoursite.com/2017/11/15/8-由&quot;对象深拷贝&quot;引发的尝试/</id>
    <published>2017-11-15T00:03:53.000Z</published>
    <updated>2017-11-20T02:13:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="今天做什么"><a href="#今天做什么" class="headerlink" title="今天做什么?"></a>今天做什么?</h3><p>今天在用到<code>Object.assign</code>方法时,发现这个方法进行的是对象的浅拷贝. 借此契机复习一下浅拷贝与深拷贝的知识, 解决一些实际问题.</p><h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h3><p>  首先说下<code>Object.assign</code>方法,这是一个es6方法, 可以用来合并对象,直接上代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">  a: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> b = &#123;</span><br><span class="line">  a: <span class="number">2</span>,</span><br><span class="line">  b: &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> c = <span class="built_in">Object</span>.assign(a, b)</span><br><span class="line"><span class="built_in">console</span>.log(c) <span class="comment">// &#123; a:2,b:&#123;a:1,b:2&#125; &#125;</span></span><br></pre></td></tr></table></figure><p>但是在上述代码下面再加一行,将b对象b属性中a的值由1改成3,再打印c的值,得:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b.b.a = <span class="number">3</span></span><br><span class="line"><span class="built_in">console</span>.log(c) <span class="comment">// &#123; a:2,b:&#123;a:3,b:2&#125; &#125;</span></span><br></pre></td></tr></table></figure><p>可见,Object.assign中的拷贝,是浅拷贝. </p><h3 id="什么是浅拷贝"><a href="#什么是浅拷贝" class="headerlink" title="什么是浅拷贝?"></a>什么是浅拷贝?</h3><p>即在给对象赋值时 (比如本例中<code>Object.assign</code>方法要给对象c的b属性赋值为<code>b.b</code>的值<code>{a:1,b:2}</code>) , </p><p>只将另一个对象 (本例中的<code>b.b</code>)在内存栈中的引用传递了过去,并没有在堆中开辟新的空间用来存储一个新的对象<code>c.b</code>的值),</p><p>所以在后面例子中当<code>b.b</code>中的属性a改变时, 由于<code>c.b</code>与<code>b.b</code>指向了堆中的同一个地址, 导致<code>c.b.a</code>也发生了改变.</p><h3 id="什么是深拷贝"><a href="#什么是深拷贝" class="headerlink" title="什么是深拷贝?"></a>什么是深拷贝?</h3><p>给对象赋值时,在堆中开辟新的空间用来存储对象的数据,形成新的地址传给栈,将要赋的值复制过来放在新的空间中. 这就是深拷贝</p><h3 id="浅拷贝的代码实现"><a href="#浅拷贝的代码实现" class="headerlink" title="浅拷贝的代码实现"></a>浅拷贝的代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>:<span class="number">1</span>, <span class="attr">arr</span>: [<span class="number">2</span>,<span class="number">3</span>] &#125;;</span><br><span class="line"><span class="keyword">var</span> shallowObj = shallowCopy(obj); <span class="comment">// &#123;a:1,arr[2:3]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shallowCopy</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(prop)) &#123;</span><br><span class="line">      result[prop] = obj[prop];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">shallowObj.arr[<span class="number">1</span>] = <span class="number">5</span>;</span><br><span class="line">obj.arr[<span class="number">1</span>]   <span class="comment">// = 5</span></span><br></pre></td></tr></table></figure><p>浅复制只会将对象的各个属性进行依次复制，并不会进行递归复制，而 JavaScript 存储对象都是存地址的，所以浅复制会导致 obj.arr 和 shallowObj.arr 指向同一块内存地址，大概的示意图如下。</p><p><img src="https://pic4.zhimg.com/50/v2-39761dfd012733879e0d100ec260a5d7_hd.jpg" alt="enter image description here"></p><p>而深复制则不同，它不仅将原对象的各个属性逐个复制出去，而且将原对象各个属性所包含的对象也依次采用深复制的方法递归复制到新对象上。这就不会存在上面 obj 和 shallowObj 的 arr 属性指向同一个对象的问题。</p><p><img src="https://pic1.zhimg.com/50/6604224933c95787764d941432a1f968_hd.jpg" alt="enter image description here"></p><h3 id="深拷贝的代码实现"><a href="#深拷贝的代码实现" class="headerlink" title="深拷贝的代码实现"></a>深拷贝的代码实现</h3><p>简单的说就是”遇到复制对象就递归,一直到拷贝值,才进行拷贝”,因为进行对象属性的赋值运算时,会在堆内自动开辟空间存储值,从而实现深拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>:<span class="number">1</span>, <span class="attr">arr</span>: [<span class="number">2</span>,<span class="number">3</span>] &#125;;</span><br><span class="line"><span class="keyword">var</span> deepObj = deepCopy(obj);</span><br><span class="line"></span><br><span class="line">deepObj.arr[<span class="number">1</span>] = <span class="number">5</span>;</span><br><span class="line">obj.arr[<span class="number">1</span>]   <span class="comment">// = 3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">obj, start</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  start = start || &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(i)) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (obj[i] <span class="keyword">instanceof</span> <span class="built_in">Function</span>) &#123;</span><br><span class="line">        start[i] = obj[i]</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj[i] <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">        start[i] = (obj[i] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) ? []:&#123;&#125;</span><br><span class="line">        deepCopy(obj[i], start[i])</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        start[i] = obj[i]</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> start</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一道面试题"><a href="#一道面试题" class="headerlink" title="一道面试题"></a>一道面试题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: &#123;</span><br><span class="line">    a: <span class="number">22</span>,</span><br><span class="line">    b: <span class="number">33</span>,</span><br><span class="line">    c: <span class="number">44</span></span><br><span class="line">  &#125;,</span><br><span class="line">  c: <span class="number">55</span>,</span><br><span class="line">  d: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  e: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  a: <span class="number">2</span>,</span><br><span class="line">  b: &#123;</span><br><span class="line">    a: <span class="number">33</span>,</span><br><span class="line">    c: &#123;</span><br><span class="line">      a: <span class="number">44</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  e: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写一个方法,合并对象obj1,与obj2,要求输出</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   a: 2,</span></span><br><span class="line"><span class="comment">//   b: &#123;</span></span><br><span class="line"><span class="comment">//     a: 33,</span></span><br><span class="line"><span class="comment">//     b: 33,</span></span><br><span class="line"><span class="comment">//     c: &#123;</span></span><br><span class="line"><span class="comment">//       a: 44</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">//   c: 55,</span></span><br><span class="line"><span class="comment">//   d: function () &#123;</span></span><br><span class="line"><span class="comment">//     return false</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   e: [1, 3, 5, 4, 5]</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>上面这个面试题,比深拷贝复杂一点, 仔细分析需求, 发现在要拷贝的属性与原对象属性重名,且类型一样时,需要保留原对象属性的未修改字段,那么需要对前面的算法做一些修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeObj</span>(<span class="params">obj, start</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  start = start || &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(i)) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (obj[i] <span class="keyword">instanceof</span> <span class="built_in">Function</span>) &#123;</span><br><span class="line">        start[i] = obj[i]</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj[i] <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line"></span><br><span class="line">        start[i] = (obj[i] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) ?</span><br><span class="line">          <span class="comment">/* 如果原对象的[i]属性也是数组,则将原对象[i]属性对</span></span><br><span class="line"><span class="comment">          应的数组传入,否则传入一个空数组 */</span></span><br><span class="line">          ((start[i] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) ? start[i] : []) :</span><br><span class="line">          <span class="comment">/* 如果原对象的[i]属性也是对象,则将原对象[i]属性</span></span><br><span class="line"><span class="comment">          对应的对象传入,否则传入一个空对象 */</span></span><br><span class="line">          ((start[i] <span class="keyword">instanceof</span> <span class="built_in">Object</span>) ? start[i] : &#123;&#125;)</span><br><span class="line">        deepCopy(obj[i], start[i])</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        start[i] = obj[i]</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> start</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mergeObj(obj1,obj2))</span><br></pre></td></tr></table></figure><h3 id="黑科技JSON直接进行深拷贝对象"><a href="#黑科技JSON直接进行深拷贝对象" class="headerlink" title="黑科技JSON直接进行深拷贝对象"></a>黑科技JSON直接进行深拷贝对象</h3><p>其实不涉及复杂的需求时,将一个对象深拷贝最简单的方式是用JSON.stringify直接转为字符串,然后用JSON.parse直接创建一个字面量对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  a: <span class="number">2</span>,</span><br><span class="line">  b: &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj)))</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;今天做什么&quot;&gt;&lt;a href=&quot;#今天做什么&quot; class=&quot;headerlink&quot; title=&quot;今天做什么?&quot;&gt;&lt;/a&gt;今天做什么?&lt;/h3&gt;&lt;p&gt;今天在用到&lt;code&gt;Object.assign&lt;/code&gt;方法时,发现这个方法进行的是对象的浅拷贝. 借此契
      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Redux 6: React Router 4 + Redux 数据流 模拟注册登录</title>
    <link href="http://yoursite.com/2017/11/14/7-React%20Router%204%20+%20Redux%20%E6%95%B0%E6%8D%AE%E6%B5%81%20%E6%A8%A1%E6%8B%9F%E6%B3%A8%E5%86%8C%E7%99%BB%E5%BD%95/"/>
    <id>http://yoursite.com/2017/11/14/7-React Router 4 + Redux 数据流 模拟注册登录/</id>
    <published>2017-11-14T00:03:53.000Z</published>
    <updated>2017-11-14T01:47:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-Router-4-Redux-数据流-模拟注册登录"><a href="#React-Router-4-Redux-数据流-模拟注册登录" class="headerlink" title="React Router 4 + Redux 数据流 模拟注册登录"></a>React Router 4 + Redux 数据流 模拟注册登录</h1><h2 id="BEFORE"><a href="#BEFORE" class="headerlink" title="BEFORE"></a>BEFORE</h2><p>在Redux学习的三篇学习笔记之后,加上React-Router 4的学习,模拟了一个注册登录+计数器的Redux数据流</p><h2 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js Provider,路由,根组件挂载处</span></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;BrowserRouter&gt;</span><br><span class="line">      &#123;<span class="comment">/* Switch:命中第一个路由后不再继续跳转 */</span>&#125;</span><br><span class="line">      &lt;Switch&gt;</span><br><span class="line">        &#123;<span class="comment">/* Route匹配路由跳转路径与组件间的关系,exact开启精确匹配,不再继续向下查找 */</span>&#125;</span><br><span class="line">        &lt;Route path='/login' exact component=&#123;Auth&#125;&gt;&lt;/Route&gt;</span><br><span class="line">        &lt;Route path='/dashboard' component=&#123;DashBoard&#125;&gt;&lt;/Route&gt;</span><br><span class="line">        &#123;<span class="comment">/* Redirect发起重定向 */</span>&#125;</span><br><span class="line">        &lt;Redirect to='/dashboard'&gt;&lt;/Redirect&gt;</span><br><span class="line">      &lt;/Switch&gt;</span><br><span class="line">    &lt;/BrowserRouter&gt;</span><br><span class="line">  &lt;/Provider&gt;,</span><br><span class="line">  document.getElementById(<span class="string">'root'</span>));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Auth.redux.js</span></span><br><span class="line"><span class="comment">// 权限登录的reducer与action creater</span></span><br><span class="line"><span class="comment">// isAuth代表是否登录</span></span><br><span class="line"><span class="keyword">const</span> LOGIN = <span class="string">'LOGIN'</span></span><br><span class="line"><span class="keyword">const</span> LOGOUT = <span class="string">'LOGOUT'</span></span><br><span class="line"><span class="comment">//reducer</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> AuthReducer = <span class="function">(<span class="params">state = &#123; isAuth: <span class="literal">false</span>, user: <span class="string">'choteewang'</span> &#125;, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> LOGIN:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">isAuth</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    <span class="keyword">case</span> LOGOUT:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">isAuth</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//action creater</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> login = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: LOGIN &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> logout = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: LOGOUT &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//myRedux.js</span></span><br><span class="line"><span class="keyword">const</span> INCREASE = <span class="string">'increase'</span></span><br><span class="line"><span class="keyword">const</span> DECREASE = <span class="string">'decrease'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> reducer = <span class="function">(<span class="params">state  = <span class="number">0</span>, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'increase'</span>:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'decrease'</span>:</span><br><span class="line">      <span class="keyword">return</span> state - <span class="number">1</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> onIncrease = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: INCREASE &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> onDecrease = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: DECREASE &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> onIncreaseAsync = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      dispatch(onIncrease())</span><br><span class="line">    &#125;,<span class="number">3000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//reducer.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; reducer &#125; <span class="keyword">from</span> <span class="string">'./myRedux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AuthReducer &#125; <span class="keyword">from</span> <span class="string">'./Auth.redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="comment">// 利用combineReducers合并两个Reducer</span></span><br><span class="line"><span class="comment">// 变为store中的state对象包裹2个reducer定义的state小对象的数据结构&#123;counter:&#123;&#125;,AutuReducer:&#123;&#125;&#125;</span></span><br><span class="line"><span class="comment">// 这里要注意改键名,防止之前使用小state的组件访问根组件state时key名发生错误</span></span><br><span class="line"><span class="comment">// 所以最佳实践是reducer要起名要有语义</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> combineReducers(&#123;<span class="attr">counter</span>:reducer, <span class="attr">AuthReducer</span>:AuthReducer&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Auth.js</span></span><br><span class="line"><span class="keyword">import</span> React from <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; from <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123;login&#125; from <span class="string">'./Auth.redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Redirect&#125; from <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Auth</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    const redirect = &lt;Redirect to='/dashboard'&gt;&lt;/Redirect&gt;</span><br><span class="line">    <span class="keyword">const</span> login = (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;您没登录,请登录&lt;/h3&gt;</span><br><span class="line">        &lt;button onClick=&#123;this.props.login&#125;&gt;点我模拟登录&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 若登录了,则跳转到dashboard页面,若没登录,显示登录页面</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.isAuth ? redirect : login</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> Auth = connect(</span><br><span class="line">  (state) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isAuth:state.AuthReducer.isAuth,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;login&#125;</span><br><span class="line">)(Auth)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dashboard.js</span></span><br><span class="line"><span class="keyword">import</span> React from <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; from <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123;login&#125; from <span class="string">'./Auth.redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Redirect&#125; from <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Auth</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    const redirect = &lt;Redirect to='/dashboard'&gt;&lt;/Redirect&gt;</span><br><span class="line">    <span class="keyword">const</span> login = (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;您没登录,请登录&lt;/h3&gt;</span><br><span class="line">        &lt;button onClick=&#123;this.props.login&#125;&gt;点我模拟登录&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 若登录了,则跳转到dashboard页面,若没登录,显示登录页面</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.isAuth ? redirect : login</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> Auth = connect(</span><br><span class="line">  (state) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isAuth:state.AuthReducer.isAuth,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;login&#125;</span><br><span class="line">)(Auth)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> React from <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; from <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123;login&#125; from <span class="string">'./Auth.redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Redirect&#125; from <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Auth</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    const redirect = &lt;Redirect to='/dashboard'&gt;&lt;/Redirect&gt;</span><br><span class="line">    <span class="keyword">const</span> login = (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;您没登录,请登录&lt;/h3&gt;</span><br><span class="line">        &lt;button onClick=&#123;this.props.login&#125;&gt;点我模拟登录&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 若登录了,则跳转到dashboard页面,若没登录,显示登录页面</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.isAuth ? redirect : login</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> Auth = connect(</span><br><span class="line">  (state) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isAuth:state.AuthReducer.isAuth,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;login&#125;</span><br><span class="line">)(Auth)</span><br></pre></td></tr></table></figure><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://i.loli.net/2017/11/14/5a0a34278b587.png" alt="Jietu20171112-085631"></p><p><img src="https://i.loli.net/2017/11/14/5a0a343ce1d95.png" alt="Jietu20171112-085643"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;React-Router-4-Redux-数据流-模拟注册登录&quot;&gt;&lt;a href=&quot;#React-Router-4-Redux-数据流-模拟注册登录&quot; class=&quot;headerlink&quot; title=&quot;React Router 4 + Redux 数据流 模拟注
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Redux 5: 使用axios 配合redux 实现 异步请求的Redux数据流</title>
    <link href="http://yoursite.com/2017/11/14/6-%E4%BD%BF%E7%94%A8axios%E9%85%8D%E5%90%88Redux%E5%AE%9E%E7%8E%B0%20%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%E5%90%8E%E5%8F%B0%E6%95%B0%E6%8D%AE%E7%9A%84Redux%E6%95%B0%E6%8D%AE%E6%B5%81/"/>
    <id>http://yoursite.com/2017/11/14/6-使用axios配合Redux实现 异步请求后台数据的Redux数据流/</id>
    <published>2017-11-14T00:02:52.000Z</published>
    <updated>2017-11-14T00:40:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置知识-axios-API"><a href="#前置知识-axios-API" class="headerlink" title="前置知识 axios API"></a>前置知识 axios API</h2><p><a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="external">axios API</a></p><h2 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Express Server Code</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建express服务</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.get(<span class="string">'/data'</span>,(req,res) =&gt; &#123;</span><br><span class="line">  res.json(&#123;<span class="attr">hobby</span>:<span class="string">"basketball"</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3001</span>,() =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'chotee server'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="package-json-配置proxy字段-解决跨域问题"><a href="#package-json-配置proxy字段-解决跨域问题" class="headerlink" title="package.json 配置proxy字段,解决跨域问题"></a>package.json 配置proxy字段,解决跨域问题</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"proxy":"http://localhost:3001"</span><br></pre></td></tr></table></figure><h3 id="Auth-redux-js"><a href="#Auth-redux-js" class="headerlink" title="Auth.redux.js"></a>Auth.redux.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 权限登录的AuthReducer与action creater</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">const</span> LOGIN = <span class="string">'LOGIN'</span></span><br><span class="line"><span class="keyword">const</span> LOGOUT = <span class="string">'LOGOUT'</span></span><br><span class="line"><span class="keyword">const</span> GETUSERDATA = <span class="string">'GETUSERDATA'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//initState</span></span><br><span class="line"><span class="keyword">const</span> initState = &#123;</span><br><span class="line">  name: <span class="string">'choteewang'</span>,</span><br><span class="line">  isAuth: <span class="literal">false</span>,</span><br><span class="line">  hobby: <span class="string">'football'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//reducer</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> AuthReducer = <span class="function">(<span class="params">state = initState, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> LOGIN:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">isAuth</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    <span class="keyword">case</span> LOGOUT:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">isAuth</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    <span class="keyword">case</span> GETUSERDATA:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">hobby</span>: action.payload &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//action creater</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增支持异步请求的action creater, 返回一个函数,函数参数是store.dispatch与store.getState</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getUserData = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 在return出的函数内进行异步请求</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">    axios.get(<span class="string">'/data'</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res)</span><br><span class="line">      <span class="comment">// res是axios的响应数据,格式见下面图</span></span><br><span class="line">      <span class="keyword">if</span> (res.status === <span class="number">200</span>) &#123;</span><br><span class="line">        dispatch(getuserdataAsync(res.data.hobby))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getuserdataAsync = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="attr">type</span>: GETUSERDATA, <span class="attr">payload</span>: data&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> login = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: LOGIN &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> logout = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: LOGOUT &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/11/14/5a0a3b5b0874e.png" alt="Jietu20171114-083933"></p><h3 id="Auth-js-对应路由-login"><a href="#Auth-js-对应路由-login" class="headerlink" title="Auth.js 对应路由/login"></a>Auth.js 对应路由/login</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123; login, getUserData &#125; <span class="keyword">from</span> <span class="string">'./Auth.redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Redirect &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Auth</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="comment">// 组件mount完成后发起异步请求,这里的getUserData是经过react-thunk中间件处理的action creater</span></span><br><span class="line">    <span class="keyword">this</span>.props.getUserData()</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> redirect = <span class="xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">'/dashboard'</span>&gt;</span><span class="tag">&lt;/<span class="name">Redirect</span>&gt;</span></span></span><br><span class="line">    <span class="keyword">const</span> login = (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p&gt;&#123;<span class="string">`我叫<span class="subst">$&#123;<span class="keyword">this</span>.props.name&#125;</span>,我的爱好是<span class="subst">$&#123;<span class="keyword">this</span>.props.hobby&#125;</span>`</span>&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;h3&gt;您没登录,请登录&lt;/</span>h3&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.props.login&#125;&gt;点我模拟登录&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 若登录了,则跳转到dashboard页面,若没登录,显示登录页面</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.isAuth ? redirect : login</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Auth = connect(</span><br><span class="line">  <span class="comment">//引入AuthReducer的字段给Auth的UI组件作为参数</span></span><br><span class="line">  (state) =&gt; state.AuthReducer,</span><br><span class="line">  <span class="comment">// 拿到getUserData的actionCreater</span></span><br><span class="line">  &#123; login, getUserData &#125;</span><br><span class="line">)(Auth)</span><br></pre></td></tr></table></figure><h3 id="config-js-设置全局拦截器"><a href="#config-js-设置全局拦截器" class="headerlink" title="config.js 设置全局拦截器"></a>config.js 设置全局拦截器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置全局拦截器的config.js,在根组件页面index.js页面引入</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Toast &#125; <span class="keyword">from</span> <span class="string">'antd-mobile'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">  Toast.loading(<span class="string">'请求中'</span>, <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    Toast.hide()</span><br><span class="line">  &#125;, <span class="number">5000</span>);</span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://i.loli.net/2017/11/14/5a0a32dfd3da7.png" alt="Jietu20171112-111033"></p><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://github.com/choteewang/BLOG-NOTE/tree/master/Demos/axios+redux_demo" target="_blank" rel="external">https://github.com/choteewang/BLOG-NOTE/tree/master/Demos/axios+redux_demo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前置知识-axios-API&quot;&gt;&lt;a href=&quot;#前置知识-axios-API&quot; class=&quot;headerlink&quot; title=&quot;前置知识 axios API&quot;&gt;&lt;/a&gt;前置知识 axios API&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.k
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Redux 4 :关于combineReducers生成的数据结构</title>
    <link href="http://yoursite.com/2017/11/14/5-%E5%85%B3%E4%BA%8EcombineReducers%E7%94%9F%E6%88%90%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2017/11/14/5-关于combineReducers生成的数据结构/</id>
    <published>2017-11-13T23:33:50.000Z</published>
    <updated>2017-11-14T00:22:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>reducer太多后,要将所有reducer合成为一个,使用combineReducers方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// myReducer.js</span></span><br><span class="line"><span class="keyword">const</span> INCREASE = <span class="string">'increase'</span></span><br><span class="line"><span class="keyword">const</span> DECREASE = <span class="string">'decrease'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> reducer = <span class="function">(<span class="params">state  = <span class="number">0</span>, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'increase'</span>:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'decrease'</span>:</span><br><span class="line">      <span class="keyword">return</span> state - <span class="number">1</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> onIncrease = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: INCREASE &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> onDecrease = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: DECREASE &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> onIncreaseAsync = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      dispatch(onIncrease())</span><br><span class="line">    &#125;,<span class="number">3000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Auth.reducer.js</span></span><br><span class="line"><span class="comment">// 权限登录的reducer与action creater</span></span><br><span class="line"><span class="comment">// isAuth代表是否登录</span></span><br><span class="line"><span class="keyword">const</span> LOGIN = <span class="string">'LOGIN'</span></span><br><span class="line"><span class="keyword">const</span> LOGOUT = <span class="string">'LOGOUT'</span></span><br><span class="line"><span class="comment">//reducer</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> AuthReducer = <span class="function">(<span class="params">state = &#123; isAuth: <span class="literal">false</span>, user: <span class="string">'choteewang'</span> &#125;, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> LOGIN:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">isAuth</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    <span class="keyword">case</span> LOGOUT:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">isAuth</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//action creater</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> login = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: LOGIN &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> logout = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: LOGOUT &#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reducers.js</span></span><br><span class="line"><span class="comment">// 利用combineReducers合并两个Reducer</span></span><br><span class="line"><span class="comment">// 变为store中的state对象包裹2个reducer定义的state小对象的数据结构&#123;counter:&#123;&#125;,AutuReducer:&#123;&#125;&#125;</span></span><br><span class="line"><span class="comment">// 这里要注意改键名,防止之前使用小state的组件访问根组件state时key名发生错误</span></span><br><span class="line"><span class="comment">// 所以最佳实践是reducer要起名要有语义</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> combineReducers(&#123;<span class="attr">counter</span>:reducer, <span class="attr">AuthReducer</span>:AuthReducer&#125;)</span><br></pre></td></tr></table></figure><p><code>根组件挂载store后拿到的store.getState()</code> 可以清晰的看到数据结构<br><img src="https://i.loli.net/2017/11/14/5a0a2b3033179.png" alt="Jietu20171112-080243"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;reducer太多后,要将所有reducer合成为一个,使用combineReducers方法&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Redux 3: react-redux继续改造Redux数据流</title>
    <link href="http://yoursite.com/2017/11/13/4-react-redux%E7%BB%A7%E7%BB%AD%E6%94%B9%E9%80%A0redux%E6%95%B0%E6%8D%AE%E6%B5%81/"/>
    <id>http://yoursite.com/2017/11/13/4-react-redux继续改造redux数据流/</id>
    <published>2017-11-13T14:23:52.000Z</published>
    <updated>2017-11-14T00:22:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><p>React-Redux 将所有组件分成两大类：UI 组件（presentational component）和容器组件（container component）。</p><h3 id="UI-组件"><a href="#UI-组件" class="headerlink" title="UI 组件"></a>UI 组件</h3><ul><li>只负责 UI 的呈现，不带有任何业务逻辑</li><li>没有状态（即不使用this.state这个变量）</li><li>所有数据都由参数（this.props）提供</li><li>不使用任何 Redux 的 API<h3 id="容器组件"><a href="#容器组件" class="headerlink" title="容器组件"></a>容器组件</h3></li><li>负责管理数据和业务逻辑，不负责 UI 的呈现</li><li>带有内部状态</li><li>使用 Redux 的 API</li></ul><p>UI 组件负责 UI 的呈现，容器组件负责管理数据和逻辑。<br>将组件拆分成下面的结构：外面是一个容器组件，里面包了一个UI 组件。前者负责与外部的通信，将数据传给后者，由后者渲染出视图。<br>React-Redux 规定，所有的 UI 组件都由用户提供，容器组件则是由 React-Redux 自动生成。也就是说，用户负责视觉层，状态管理则是全部交给它。</p><p><code>下面是将已模块化拆分的,支持异步的redux数据流, 继续改造为react-redux的代码</code></p><h2 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//myRedux.js 代码保持不变</span></span><br><span class="line"><span class="keyword">const</span> INCREASE = <span class="string">'increase'</span></span><br><span class="line"><span class="keyword">const</span> DECREASE = <span class="string">'decrease'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> reducer = <span class="function">(<span class="params">state = <span class="number">0</span>, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'increase'</span>:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'decrease'</span>:</span><br><span class="line">      <span class="keyword">return</span> state - <span class="number">1</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> onIncrease = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: INCREASE &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> onDecrease = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: DECREASE &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> onIncreaseAsync = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      dispatch(onIncrease())</span><br><span class="line">    &#125;,<span class="number">3000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js 根节点挂载处</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="comment">// applyMiddleware用来处理异步中间件thunk,compose用来将chrome插件与react-thunk按固定顺序连接起来</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore , applyMiddleware ,compose &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="comment">// 为了在根组件页面定义store并传入,需要将reducer引入</span></span><br><span class="line"><span class="keyword">import</span> &#123; reducer &#125; <span class="keyword">from</span> <span class="string">'./myRedux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//chrome插件redux-devtools github文档规定的插件声明方式</span></span><br><span class="line"><span class="keyword">const</span> composeEnhancers = <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;</span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer,composeEnhancers(applyMiddleware(thunk)))</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除subcribe和listener,把ReactDOM.renden重写</span></span><br><span class="line"><span class="comment">//const unsubscribe = store.subscribe(listener)</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="comment">//根组件外套一层Provider传入Store</span></span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;App/&gt;</span><br><span class="line">  &lt;<span class="regexp">/Provider&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('root'));</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//App.js, UI组件定义处 与 包裹UI的容器组件生成处</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; from <span class="string">'react'</span>;</span><br><span class="line"><span class="comment">// 引入react-redux的connect函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; from <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="comment">// 引入所有Action Creator</span></span><br><span class="line"><span class="keyword">import</span> &#123; onIncrease, onDecrease, onIncreaseAsync &#125; from <span class="string">'./myRedux'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//UI组件,只用来做数据展示和分发,将来可以抽离出去</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppUI</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&#123;this.props.count&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"increase"</span> onClick=&#123;<span class="keyword">this</span>.props.onIncrease&#125; /&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"decrease"</span> onClick=&#123;<span class="keyword">this</span>.props.onDecrease&#125; /&gt;</span><br><span class="line">        &#123;&lt;input type=<span class="string">"button"</span> value=<span class="string">"increaseAsync"</span> onClick=&#123;<span class="keyword">this</span>.props.onIncreaseAsync&#125; /&gt;&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//mapStateToProps是一个函数,返回一个对象,key对应UI组件上的参数名称,"值"应该是state或算出state的方法的调用</span></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = (state) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    count: state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//mapDispatchToProps是一个对象,key对应UI组件对应的参数名称,"值"对应传入的actionCreater</span></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = &#123;</span><br><span class="line">  onIncrease, onDecrease, onIncreaseAsync</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用connect函数生成包裹UI组件的容器组件</span></span><br><span class="line"><span class="keyword">const</span> App = connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(AppUI)</span><br><span class="line">export <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/11/13/5a099fedeaa9e.png" alt="Jietu20171111-033033_iutjibikf"></p><h2 id="REFERENCE"><a href="#REFERENCE" class="headerlink" title="REFERENCE"></a>REFERENCE</h2><p><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html" target="_blank" rel="external">阮一峰 Redux 3</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;TODO&quot;&gt;&lt;a href=&quot;#TODO&quot; class=&quot;headerlink&quot; title=&quot;TODO&quot;&gt;&lt;/a&gt;TODO&lt;/h2&gt;&lt;p&gt;React-Redux 将所有组件分成两大类：UI 组件（presentational component）和容器组件（co
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Redux 2: Redux模块的抽离,Action Creator,异步支持的实现(redux-thunk)</title>
    <link href="http://yoursite.com/2017/11/13/3-Redux-2-Redux%E6%A8%A1%E5%9D%97%E7%9A%84%E6%8A%BD%E7%A6%BB-Action-Creator-%E5%BC%82%E6%AD%A5%E6%94%AF%E6%8C%81%E7%9A%84%E5%AE%9E%E7%8E%B0-redux-thunk/"/>
    <id>http://yoursite.com/2017/11/13/3-Redux-2-Redux模块的抽离-Action-Creator-异步支持的实现-redux-thunk/</id>
    <published>2017-11-13T13:23:52.000Z</published>
    <updated>2017-11-14T00:23:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><p><a href="./redux的实现原理(发布订阅模式,闭包">上一篇redux的总结</a>.md)中,写了一个小的Counter Demo, 但是代码耦合度太高, 在复杂项目中组织代码难度增加, 且无法进行异步redux操作, 这篇总结中, 将代码以模块化思想解耦合, 并让redux可以支持异步操作.</p><p>需要用到redux-thunk这个库,这个库的作用是让store.dispatch接受以函数作为参数,从而从函数参数中拿到dispatch与getState执行异步操作, 最底层的原理可以移步阮一峰博客redux第二篇,这里只做代码实现,和详细注释</p><h2 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Index.js : 根组件挂载处</span></span><br><span class="line"><span class="keyword">import</span> App from <span class="string">'./App'</span>;</span><br><span class="line"><span class="keyword">import</span> React from <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM from <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="comment">// 引入redux-thunk,使dispatch可以接受一个函数作为参数,从而支持applyMiddleware的中间件处理</span></span><br><span class="line"><span class="keyword">import</span> thunk from <span class="string">'redux-thunk'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; from <span class="string">'redux'</span></span><br><span class="line"><span class="comment">// 引入自己抽离的actionCreater与reducer模块</span></span><br><span class="line"><span class="keyword">import</span> &#123; onIncrease, onDecrease, onIncreaseAsync,reducer &#125; from <span class="string">'./myRedux'</span>;</span><br><span class="line"><span class="comment">// 在根组件的挂载处挂载store与reducer,actionCreater控制整个app的redux数据流</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer,applyMiddleware(thunk))</span><br><span class="line"><span class="keyword">const</span> unsubscribe = store.subscribe(listener)</span><br><span class="line"></span><br><span class="line"><span class="function">function <span class="title">listener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ReactDOM.render(</span><br><span class="line">    &lt;App</span><br><span class="line">      <span class="comment">//将store和actionCreater传入组件内部</span></span><br><span class="line">      store=&#123;store&#125;</span><br><span class="line">      onIncrease=&#123;onIncrease&#125;</span><br><span class="line">      onDecrease=&#123;onDecrease&#125;</span><br><span class="line">      onIncreaseAsync=&#123;onIncreaseAsync&#125;</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;/App&gt;,</span><br><span class="line">    document.getElementById(<span class="string">'root'</span>));</span><br><span class="line">&#125;</span><br><span class="line">listener()</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.js : UI组件定义处</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; from <span class="string">'react'</span>;</span><br><span class="line"><span class="comment">// App就是上篇文章的Counter,不同的是它是一个UI组件,只负责UI的展示和数据流的分派</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// store与ActionCreater从根组件挂载处index.js处拿到</span></span><br><span class="line">    <span class="keyword">const</span> store = <span class="keyword">this</span>.props.store</span><br><span class="line">    <span class="keyword">const</span> onIncrease = <span class="keyword">this</span>.props.onIncrease</span><br><span class="line">    <span class="keyword">const</span> onDecrease = <span class="keyword">this</span>.props.onDecrease</span><br><span class="line">    <span class="keyword">const</span> onIncreaseAsync = <span class="keyword">this</span>.props.onIncreaseAsync</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&#123;store.getState()&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"increase"</span> onClick=&#123;() =&gt; &#123; store.dispatch(onIncrease()) &#125;&#125; /&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"decrease"</span> onClick=&#123;() =&gt; &#123; store.dispatch(onDecrease()) &#125;&#125; /&gt;</span><br><span class="line">        &#123;<span class="comment">/* 添加异步操作UI */</span>&#125;</span><br><span class="line">        &#123;&lt;input type=<span class="string">"button"</span> value=<span class="string">"increaseAsync"</span> onClick=&#123;() =&gt; &#123; store.dispatch(onIncreaseAsync()) &#125;&#125; /&gt;&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">export <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// myRedux.js</span></span><br><span class="line"><span class="comment">// 将actionCreater与reducer抽离成一个单独的js模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义action.type对应的常量,防止后期频繁修改</span></span><br><span class="line"><span class="keyword">const</span> INCREASE = <span class="string">'increase'</span></span><br><span class="line"><span class="keyword">const</span> DECREASE = <span class="string">'decrease'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> reducer = <span class="function">(<span class="params">state = <span class="number">0</span>, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'increase'</span>:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'decrease'</span>:</span><br><span class="line">      <span class="keyword">return</span> state - <span class="number">1</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为了不频繁写action,创建actionCreater方法,自动生成action</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> onIncrease = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: INCREASE &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> onDecrease = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: DECREASE &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// redux异步的解决方案:写出返回函数的actionCreator，使用reduxThunk中间件改造dispatch使函数可以作为其参数。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义异步的actionCreater,返回一个函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> onIncreaseAsync = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 这里return出的方法参数是dispatch与getState,后续applyMiddleWare方法会将store.dispatch与store.getState传入</span></span><br><span class="line">  <span class="comment">// 这里return出的方法是一个中间件方法,applyMiddleWare会在这个方法执行之前发一个action,执行之后再发一个action,从而实现异步处理.</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      dispatch(onIncrease())</span><br><span class="line">    &#125;,<span class="number">3000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/11/13/5a099c902645b.png" alt="Jietu20171111-033033"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html" target="_blank" rel="external">阮一峰 redux(2)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;TODO&quot;&gt;&lt;a href=&quot;#TODO&quot; class=&quot;headerlink&quot; title=&quot;TODO&quot;&gt;&lt;/a&gt;TODO&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;./redux的实现原理(发布订阅模式,闭包&quot;&gt;上一篇redux的总结&lt;/a&gt;.md)中,写了一个小的Co
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Redux 1: Redux的实现原理(发布订阅模式,闭包)</title>
    <link href="http://yoursite.com/2017/11/13/2-redux%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F-%E9%97%AD%E5%8C%85/"/>
    <id>http://yoursite.com/2017/11/13/2-redux的实现原理-发布订阅模式-闭包/</id>
    <published>2017-11-13T12:57:01.000Z</published>
    <updated>2017-11-14T00:21:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置知识-发布订阅者模式"><a href="#前置知识-发布订阅者模式" class="headerlink" title="前置知识:发布订阅者模式"></a>前置知识:发布订阅者模式</h2><p><a href="https://www.cnblogs.com/tugenhua0707/p/4687947.html" target="_blank" rel="external">发布订阅者模式_阅读</a></p><h2 id="createStore的实现-闭包-发布订阅模式"><a href="#createStore的实现-闭包-发布订阅模式" class="headerlink" title="createStore的实现,闭包,发布订阅模式"></a>createStore的实现,闭包,发布订阅模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> createStore = <span class="function">(<span class="params">reducer</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 闭包内要操作的数据,state是数据,listeners是发布订阅模式的订阅数组</span></span><br><span class="line">  <span class="keyword">let</span> state;</span><br><span class="line">  <span class="keyword">let</span> listeners = [];</span><br><span class="line">  <span class="comment">// 通过getState返回state的值</span></span><br><span class="line">  <span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> state;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//通过dispatch的参数接收action对象</span></span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// 将action对象传入reducer更新state</span></span><br><span class="line">    state = reducer(state, action);</span><br><span class="line">    <span class="comment">// 一旦state被更新,订阅数组中的所有listener方法被执行</span></span><br><span class="line">    listeners.forEach(<span class="function"><span class="params">listener</span> =&gt;</span> listener());</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 通过subscribe的参数接收listener方法</span></span><br><span class="line">  <span class="keyword">const</span> subscribe = <span class="function">(<span class="params">listener</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// 将listner方法放入订阅数组listeners</span></span><br><span class="line">    listeners.push(listener);</span><br><span class="line">    <span class="comment">// 同时return一个方法形成闭包,这个方法用来从订阅数组listeners中删除掉listener方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      listeners = listeners.filter(<span class="function"><span class="params">l</span> =&gt;</span> l !== listener);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 执行一次dispatch,形成最初的state数据</span></span><br><span class="line">  dispatch(&#123;&#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 将getState, dispatch, subscribe方法向外return,形成闭包</span></span><br><span class="line">  <span class="keyword">return</span> &#123; getState, dispatch, subscribe &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="最基础的Redux数据流"><a href="#最基础的Redux数据流" class="headerlink" title="最基础的Redux数据流"></a>最基础的Redux数据流</h2><p><img src="https://i.loli.net/2017/11/13/5a099379e0660.png" alt="Jietu20171110-094632"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React from <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM from <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="comment">// 从redux中拿到createStore函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; from <span class="string">"redux"</span>;</span><br><span class="line"><span class="comment">// ui组件,只有props从外界接收数据并展示,让redux帮我们处理state数据的传递</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&#123;this.props.count&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"Increase"</span> onClick=&#123;<span class="keyword">this</span>.props.onIncrease&#125; /&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"Decrease"</span> onClick=&#123;<span class="keyword">this</span>.props.onDecrease&#125; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reducer,在createStore形成的闭包内部处理state的过滤器,</span></span><br><span class="line"><span class="comment">// 在createStore形成的闭包内部 使用state=reducer(state,action)实现,return的值重新赋值给state</span></span><br><span class="line"><span class="keyword">const</span> reducer = (state = <span class="number">0</span>, action) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'increase'</span>:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'decrease'</span>:</span><br><span class="line">      <span class="keyword">return</span> state - <span class="number">1</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// store是createStore闭包的返回值,是一个对象,结构是&#123;getState,dispatch,subscribe&#125;,</span></span><br><span class="line"><span class="comment">// createStore通过参数传入的reducer形成state的生成规则</span></span><br><span class="line"><span class="comment">// createStore方法还可以接受第二个参数，表示整个应用的state的初始状态,会覆盖reducer函数中的默认初始值</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer)</span><br><span class="line"><span class="comment">// 通过store.subscribe(listener)方法拿到的listener函数进行订阅发布者模式监听,只要state的值变化,订阅数组listenrs中的所有listener方法就会被执行</span></span><br><span class="line"><span class="keyword">const</span> unsubscribe = store.subscribe(listener)</span><br><span class="line"><span class="comment">// store.subscribe的返回值是一个方法unsubscribe(),可以从订阅数组listeners中移除listener方法,取消监听</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这是subscribe调用的listener方法,state的值改变后会被调用,内部让其自动执行渲染函数更新UI组件Counter</span></span><br><span class="line"><span class="function">function <span class="title">listener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ReactDOM.render(</span><br><span class="line">    &lt;Counter</span><br><span class="line">      <span class="comment">// 新生成的state值可以通过store.getState()方法得到闭包快照</span></span><br><span class="line">      count=&#123;store.getState()&#125;</span><br><span class="line">      <span class="comment">// 通过store.dispatch(action)方法拿到action对象传入reducer参数更新state值,state=reducer(state,action)</span></span><br><span class="line">      <span class="comment">// action 是一个对象。其中的type属性是必须的，表示 Action 的名称。其他属性可以自由设置</span></span><br><span class="line">      onIncrease=&#123;() =&gt; &#123; store.dispatch(&#123; type: <span class="string">'increase'</span> &#125;) &#125;&#125;</span><br><span class="line">      onDecrease=&#123;() =&gt; &#123; store.dispatch(&#123; type: <span class="string">'decrease'</span> &#125;) &#125;&#125;</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;/Counter&gt;,</span><br><span class="line">    document.getElementById(<span class="string">'root'</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 首次进入页面先渲染一次页面</span></span><br><span class="line">listener()</span><br></pre></td></tr></table></figure><p><img src="https://ooo.0o0.ooo/2017/11/13/5a0993bd51d99.png" alt="Jietu20171110-082736"></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html" target="_blank" rel="external">阮一峰 redux (1)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前置知识-发布订阅者模式&quot;&gt;&lt;a href=&quot;#前置知识-发布订阅者模式&quot; class=&quot;headerlink&quot; title=&quot;前置知识:发布订阅者模式&quot;&gt;&lt;/a&gt;前置知识:发布订阅者模式&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>gulp构建 es6运行在browser端 自动化工作流</title>
    <link href="http://yoursite.com/2017/11/10/1-gulp%E6%9E%84%E5%BB%BAes6%E8%BF%90%E8%A1%8C%E5%9C%A8browser%E7%AB%AF%E7%9A%84work%20flow/"/>
    <id>http://yoursite.com/2017/11/10/1-gulp构建es6运行在browser端的work flow/</id>
    <published>2017-11-10T14:23:52.000Z</published>
    <updated>2017-11-14T00:21:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="用来做什么"><a href="#用来做什么" class="headerlink" title="用来做什么?"></a>用来做什么?</h3><p>1.支持监视前端页面js,css,ejs模板文件热更新,babel语法自动转换,自动刷新浏览器页面,</p><p>2.支持后台静态资源的处理,js文件的压缩打包,更新静态css与ejs模板文件,也可以在express端构建逻辑mock数据</p><hr><h3 id="项目自动化构建思路"><a href="#项目自动化构建思路" class="headerlink" title="项目自动化构建思路"></a>项目自动化构建思路</h3><p><img src="https://ooo.0o0.ooo/2017/11/14/5a0a30c88f806.png" alt="1"></p><h3 id="自动化构建逻辑"><a href="#自动化构建逻辑" class="headerlink" title="自动化构建逻辑"></a>自动化构建逻辑</h3><ol><li>若app文件夹(前端静. 态页面)资源发生改变 -&gt;</li><li>调用browser.js脚本 -&gt;</li><li>browser.js运行script脚本 -&gt;</li><li>将新的js文件打包后写入server目录public目录下 -&gt;</li><li>此行为触发server.js监听到服务端js静态资源文件被修改 -&gt;</li><li>执行服务器重启重新渲染页面 -&gt;</li><li>前台看到浏览器热更新<h3 id="构建目录结构-安装服务端脚手架工具"><a href="#构建目录结构-安装服务端脚手架工具" class="headerlink" title="构建目录结构,安装服务端脚手架工具"></a>构建目录结构,安装服务端脚手架工具</h3></li><li>创建项目目录 <code>app</code>(放置静态页面资源),<code>server</code>(用express脚手架初始化,将来放入热更新后的静态资源),<code>tasks</code>放置所有上述过程的脚本文件</li><li>初始化服务端express<pre><code>`npm install -g express-generator`  //安装express脚手架`express -e .` //使用express脚手架命令,初始化脚手架,-e代表使用ejs模板引擎</code></pre></li><li>在根目录创建 .babelrc文件,此为babel转码器</li><li>在根目录创建<code>gulpfile.js</code>, 若用es6语法写gulpfile文件就创建<code>gulpfile.babel.js</code></li></ol><hr><h2 id="gulp工作流代码构建流程"><a href="#gulp工作流代码构建流程" class="headerlink" title="gulp工作流代码构建流程"></a>gulp工作流代码构建流程</h2><h3 id="args-js-–处理命令行参数"><a href="#args-js-–处理命令行参数" class="headerlink" title="args.js –处理命令行参数"></a>args.js –处理命令行参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> yargs <span class="keyword">from</span> <span class="string">'yargs'</span>; <span class="comment">//处理命令行参数的包</span></span><br><span class="line"><span class="comment">//区分开发环境和线上环境</span></span><br><span class="line"><span class="keyword">const</span> args = yargs  </span><br><span class="line">  <span class="comment">//提取--production参数</span></span><br><span class="line">  .option(<span class="string">'production'</span>,&#123; </span><br><span class="line">    boolean:<span class="literal">true</span>,<span class="comment">//选项是布尔类型</span></span><br><span class="line">    <span class="keyword">default</span>:<span class="literal">false</span>,<span class="comment">//默认是false</span></span><br><span class="line">    describe:<span class="string">'min all scripts'</span> <span class="comment">//只是给人看的描述</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">//用来监听文件改变的选项</span></span><br><span class="line">  .option(<span class="string">'watch'</span>,&#123;</span><br><span class="line">    boolean:<span class="literal">true</span>,</span><br><span class="line">    <span class="keyword">default</span>:<span class="literal">false</span>,</span><br><span class="line">    describe:<span class="string">'watch all files'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">//要不要输出命令行详细监视的日志</span></span><br><span class="line">  .option(<span class="string">'verbose'</span>,&#123;</span><br><span class="line">    boolean:<span class="literal">true</span>,</span><br><span class="line">    <span class="keyword">default</span>:<span class="literal">false</span>,</span><br><span class="line">    describe:<span class="string">'log'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">//强制生成sourcemaps映射</span></span><br><span class="line">  .option(<span class="string">'sourcemaps'</span>,&#123;</span><br><span class="line">    describe:<span class="string">'force the creation of sroucemaps'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">//端口号</span></span><br><span class="line">  .option(<span class="string">'port'</span>,&#123;</span><br><span class="line">    string:<span class="literal">true</span>,</span><br><span class="line">    <span class="keyword">default</span>:<span class="number">8080</span>,</span><br><span class="line">    describe:<span class="string">'server port'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">//表示把输入的命令以字符串的方式进行解析</span></span><br><span class="line">  .argv</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> args;</span><br></pre></td></tr></table></figure><h3 id="script-js-–处理js"><a href="#script-js-–处理js" class="headerlink" title="script.js –处理js"></a>script.js –处理js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gulp <span class="keyword">from</span> <span class="string">'gulp'</span>;</span><br><span class="line"><span class="keyword">import</span> gulpif <span class="keyword">from</span> <span class="string">'gulp-if'</span>; <span class="comment">//gulp语句中做if判断</span></span><br><span class="line"><span class="keyword">import</span> concat <span class="keyword">from</span> <span class="string">'gulp-concat'</span>; <span class="comment">//gulp中处理文件拼接</span></span><br><span class="line"><span class="keyword">import</span> webpack <span class="keyword">from</span> <span class="string">'webpack'</span>;</span><br><span class="line"><span class="keyword">import</span> gulpWebpack <span class="keyword">from</span> <span class="string">'webpack-stream'</span>; <span class="comment">//支持webpack在gulp stream中的功能</span></span><br><span class="line"><span class="keyword">import</span> named <span class="keyword">from</span> <span class="string">'vinyl-named'</span>; <span class="comment">//保证webpack生成的文件名能够和原文件对上</span></span><br><span class="line"><span class="keyword">import</span> livereload <span class="keyword">from</span> <span class="string">'gulp-livereload'</span>; <span class="comment">//浏览器热更新</span></span><br><span class="line"><span class="keyword">import</span> plumber <span class="keyword">from</span> <span class="string">'gulp-plumber'</span>; <span class="comment">//处理文件信息流</span></span><br><span class="line"><span class="keyword">import</span> rename <span class="keyword">from</span> <span class="string">'gulp-rename'</span>; <span class="comment">//对文件重命名</span></span><br><span class="line"><span class="keyword">import</span> uglify <span class="keyword">from</span> <span class="string">'gulp-uglify'</span>; <span class="comment">//压缩js</span></span><br><span class="line"><span class="keyword">import</span> &#123;log, colors&#125; <span class="keyword">from</span> <span class="string">'gulp-util'</span>; <span class="comment">//命令行工具包,log与色彩输出</span></span><br><span class="line"><span class="keyword">import</span> args <span class="keyword">from</span> <span class="string">'./util/args'</span>; <span class="comment">//刚自己写的对命令行参数进行解析的包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为了集中处理项目js文件抛出异常引起gulp流出现问题,需用plumber统一处理错误</span></span><br><span class="line">gulp.task(<span class="string">'scripts'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src([<span class="string">'app/js/index.js'</span>])</span><br><span class="line">    .pipe(plumber(&#123;<span class="attr">errorHandle</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;&#125;))</span><br><span class="line">    .pipe(named())</span><br><span class="line">    .pipe(gulpWebpack(&#123;</span><br><span class="line">      <span class="built_in">module</span>: &#123;</span><br><span class="line">        loaders: [</span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            loader: <span class="string">'babel-loader'</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;), <span class="literal">null</span>, (err, stats) =&gt; &#123;</span><br><span class="line">      log(<span class="string">`Finished '<span class="subst">$&#123;colors.cyan(<span class="string">'scripts'</span>)&#125;</span>'`</span>, stats.toString(&#123;<span class="attr">chunks</span>: <span class="literal">false</span>&#125;))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//gulp处理完的js指定写入路径,api:gulp.dest</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">'server/public/js'</span>))</span><br><span class="line">    <span class="comment">//js文件重命名为cp.min.js,还没压缩,只是复制一份</span></span><br><span class="line">    .pipe(rename(&#123;<span class="attr">basename</span>: <span class="string">'cp'</span>, <span class="attr">extname</span>: <span class="string">'.min.js'</span>&#125;))</span><br><span class="line">    <span class="comment">// 压缩</span></span><br><span class="line">    .pipe(uglify(&#123;</span><br><span class="line">      compress: &#123;</span><br><span class="line">        properties: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      output: &#123;</span><br><span class="line">        <span class="string">'quote_keys'</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;))</span><br><span class="line">    <span class="comment">// 把压缩后的文件放入服务器目录</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">'server/public/js'</span>))</span><br><span class="line">    <span class="comment">// 使用gulpif监视命令行传入的参数,若有--watch,则执行热更新</span></span><br><span class="line">    .pipe(gulpif(args.watch, livereload()))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="pages-js-–处理后台页面模板"><a href="#pages-js-–处理后台页面模板" class="headerlink" title="pages.js –处理后台页面模板"></a>pages.js –处理后台页面模板</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gulp <span class="keyword">from</span> <span class="string">'gulp'</span>;</span><br><span class="line"><span class="keyword">import</span> gulpif <span class="keyword">from</span> <span class="string">'gulp-if'</span>;</span><br><span class="line"><span class="keyword">import</span> livereload <span class="keyword">from</span> <span class="string">'gulp-livereload'</span>;</span><br><span class="line"><span class="keyword">import</span> args <span class="keyword">from</span> <span class="string">'./util/args'</span>;</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'pages'</span>,()=&gt;&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'app/**/*.ejs'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'server'</span>)) <span class="comment">//文件被写入的路径是以所给的相对路径根据所给的目标目录计算而来。类似的，相对路径也可以根据所给的 base 来计算。这里实际写到的路径是server下的/**/*.ejs,即server/views/*.ejs</span></span><br><span class="line">    .pipe(gulpif(args.watch,livereload()))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="css-js-–处理css"><a href="#css-js-–处理css" class="headerlink" title="css.js –处理css"></a>css.js –处理css</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gulp <span class="keyword">from</span> <span class="string">'gulp'</span>;</span><br><span class="line"><span class="keyword">import</span> gulpif <span class="keyword">from</span> <span class="string">'gulp-if'</span>;</span><br><span class="line"><span class="keyword">import</span> livereload <span class="keyword">from</span> <span class="string">'gulp-livereload'</span>;</span><br><span class="line"><span class="keyword">import</span> args <span class="keyword">from</span> <span class="string">'./util/args'</span>;</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'css'</span>,()=&gt;&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'app/**/*.css'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'server/public'</span>))</span><br><span class="line">    <span class="comment">//文件被写入的路径是以所给的相对路径根据所给的目标目录计算而来。类似的，相对路径也可以根据所给的 base 来计算。这里实际写到的路径是server下的/**/*.css,即server/public/css/*.css</span></span><br><span class="line">    .pipe(gulpif(args.watch,livereload()))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="server-js-–处理服务端热重启"><a href="#server-js-–处理服务端热重启" class="headerlink" title="server.js –处理服务端热重启"></a>server.js –处理服务端热重启</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gulp <span class="keyword">from</span> <span class="string">'gulp'</span>;</span><br><span class="line"><span class="keyword">import</span> gulpif <span class="keyword">from</span> <span class="string">'gulp-if'</span>;</span><br><span class="line"><span class="keyword">import</span> liveserver <span class="keyword">from</span> <span class="string">'gulp-live-server'</span>; <span class="comment">//启动gulp服务器的包</span></span><br><span class="line"><span class="keyword">import</span> args <span class="keyword">from</span> <span class="string">'./util/args'</span>;</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'serve'</span>,(cb)=&gt;&#123;</span><br><span class="line">  <span class="comment">//如果没在监听,直接运行回调函数</span></span><br><span class="line">  <span class="keyword">if</span>(!args.watch) <span class="keyword">return</span> cb(); </span><br><span class="line">  <span class="comment">//启动express脚手架默认的服务器脚本</span></span><br><span class="line">  <span class="keyword">const</span> server = liveserver.new([<span class="string">'--harmony'</span>,<span class="string">'server/bin/www'</span>]); </span><br><span class="line">  server.start();</span><br><span class="line">  <span class="comment">//监听server目录下的js文件和ejs模板文件,通知服务器哪些文件改变了</span></span><br><span class="line">  gulp.watch([<span class="string">'server/public/**/*.js'</span>,<span class="string">'server/views/**/*.ejs'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">file</span>)</span>&#123;</span><br><span class="line">    server.notify.apply(server,[file]);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">//监视服务器路由及入口文件的改变,进行服务器重启</span></span><br><span class="line">  gulp.watch([<span class="string">'server/routes/**/*.js'</span>,<span class="string">'server/app.js'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    server.start.bind(server)()</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="browser-js-–监视前端文件改变-触发热更新"><a href="#browser-js-–监视前端文件改变-触发热更新" class="headerlink" title="browser.js –监视前端文件改变,触发热更新"></a>browser.js –监视前端文件改变,触发热更新</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gulp <span class="keyword">from</span> <span class="string">'gulp'</span>;</span><br><span class="line"><span class="keyword">import</span> gulpif <span class="keyword">from</span> <span class="string">'gulp-if'</span>;</span><br><span class="line"><span class="keyword">import</span> gutil <span class="keyword">from</span> <span class="string">'gulp-util'</span>;</span><br><span class="line"><span class="keyword">import</span> args <span class="keyword">from</span> <span class="string">'./util/args'</span>;</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'browser'</span>,(cb)=&gt;&#123;</span><br><span class="line">  <span class="keyword">if</span>(!args.watch) <span class="keyword">return</span> cb();<span class="comment">//若没监听,则直接执行回调</span></span><br><span class="line">  gulp.watch(<span class="string">'app/**/*.js'</span>,[<span class="string">'scripts'</span>]);<span class="comment">//若js文件发生改变,则调用刚才创建的scripts脚本</span></span><br><span class="line">  gulp.watch(<span class="string">'app/**/*.ejs'</span>,[<span class="string">'pages'</span>]); <span class="comment">//同上</span></span><br><span class="line">  gulp.watch(<span class="string">'app/**/*.css'</span>,[<span class="string">'css'</span>]); <span class="comment">//同上</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="clean-js-–处理服务器清除旧文件"><a href="#clean-js-–处理服务器清除旧文件" class="headerlink" title="clean.js –处理服务器清除旧文件"></a>clean.js –处理服务器清除旧文件</h3><p>每次服务器监听到静态资源文件的改变, 会触发重启, 用新的静态资源去render页面,此时需要删除旧的静态资源文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gulp <span class="keyword">from</span> <span class="string">'gulp'</span>;</span><br><span class="line"><span class="keyword">import</span> del <span class="keyword">from</span> <span class="string">'del'</span>;</span><br><span class="line"><span class="keyword">import</span> args <span class="keyword">from</span> <span class="string">'./util/args'</span>;</span><br><span class="line"><span class="comment">//清除服务端的静态资源文件和模板文件</span></span><br><span class="line">gulp.task(<span class="string">'clean'</span>,()=&gt;&#123;</span><br><span class="line">  <span class="keyword">return</span> del([<span class="string">'server/public'</span>,<span class="string">'server/views'</span>])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="build-js-–处理所有gulp文件运行关联顺序"><a href="#build-js-–处理所有gulp文件运行关联顺序" class="headerlink" title="build.js –处理所有gulp文件运行关联顺序"></a>build.js –处理所有gulp文件运行关联顺序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gulp <span class="keyword">from</span> <span class="string">'gulp'</span>;</span><br><span class="line"><span class="keyword">import</span> gulpSequence <span class="keyword">from</span> <span class="string">'gulp-sequence'</span>; <span class="comment">//处理文件关联关系和先后顺序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//先clean,再css,再pages,再编译js,最后一个数组说明数组里的任务都放在前面四个任务执行过一次之后再执行,且serve端更新一定 在 browser静态资源改变之后 </span></span><br><span class="line">gulp.task(<span class="string">'build'</span>,gulpSequence(<span class="string">'clean'</span>,<span class="string">'css'</span>,<span class="string">'pages'</span>,<span class="string">'scripts'</span>,[<span class="string">'browser'</span>,<span class="string">'serve'</span>]));</span><br></pre></td></tr></table></figure><h3 id="default-js-–gulp工作流默认入口"><a href="#default-js-–gulp工作流默认入口" class="headerlink" title="default.js –gulp工作流默认入口"></a>default.js –gulp工作流默认入口</h3><p>gulp在无命令行参数时会优先运行defalut.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gulp <span class="keyword">from</span> <span class="string">'gulp'</span>;</span><br><span class="line">gulp.task(<span class="string">'default'</span>,[<span class="string">'build'</span>]);</span><br></pre></td></tr></table></figure></p><h3 id="gulpfile-babel-js-–gulp程序入口"><a href="#gulpfile-babel-js-–gulp程序入口" class="headerlink" title="gulpfile.babel.js –gulp程序入口"></a>gulpfile.babel.js –gulp程序入口</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requireDir <span class="keyword">from</span> <span class="string">'require-dir'</span>;<span class="comment">//需要运行某一文件夹的gulp任务</span></span><br><span class="line">requireDir(<span class="string">'./tasks'</span>); <span class="comment">//放入tasks目录</span></span><br></pre></td></tr></table></figure><h3 id="编辑-babelrc"><a href="#编辑-babelrc" class="headerlink" title="编辑.babelrc"></a>编辑.babelrc</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>:[<span class="string">"env"</span>,<span class="string">"stage-0"</span>],</span><br><span class="line">  <span class="attr">"plugins"</span>:[<span class="string">"transform-decorators-legacy"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="给express脚手架添加热更新中间件"><a href="#给express脚手架添加热更新中间件" class="headerlink" title="给express脚手架添加热更新中间件"></a>给express脚手架添加热更新中间件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在处理路由前,express优先处理静态资源,若在这个static方法定义的目录中没有找到req.url对应的静态资源,则调用Next()方法传入下一个中间件,最终会传递到路由中间件上</span></span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'public'</span>)));</span><br><span class="line"><span class="comment">//一定要再静态资源设置之后使用热更新中间件,此插件的安装要再最外层项目目录下的依赖安装,而不是server目录的依赖</span></span><br><span class="line">app.use(<span class="built_in">require</span>(<span class="string">'connect-livereload'</span>)());</span><br></pre></td></tr></table></figure><h3 id="gulp程序启动"><a href="#gulp程序启动" class="headerlink" title="gulp程序启动"></a>gulp程序启动</h3><p><code>gulp --watch</code><br>在app/public/js下写一个简单的js,再在app/public/css下写一个chotee.css,例如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chotee</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'chotee 啊,成功!'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ct1 = <span class="keyword">new</span> Chotee</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.innerHTML = ct1.name;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在app/views/目录下的index.ejs模板中引入<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/css/chotee.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  hello chotee</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/index.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>打开浏览器访问localhost:3000端口(express脚手架默认端口), 看到<br><img src="https://i.loli.net/2017/11/14/5a0a30b96f6c1.png" alt="2"></p><p>成功! 此时再去修改js文件,模板文件,热更新文件,成功</p><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址:"></a>源码地址:</h2><p><a href="https://github.com/choteewang/gulp-es6-work-flow" target="_blank" rel="external">https://github.com/choteewang/gulp-es6-work-flow</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;用来做什么&quot;&gt;&lt;a href=&quot;#用来做什么&quot; class=&quot;headerlink&quot; title=&quot;用来做什么?&quot;&gt;&lt;/a&gt;用来做什么?&lt;/h3&gt;&lt;p&gt;1.支持监视前端页面js,css,ejs模板文件热更新,babel语法自动转换,自动刷新浏览器页面,&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React,AntDesign 实现一个电影网站</title>
    <link href="http://yoursite.com/2017/11/09/0-React,AntDesign%20%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%94%B5%E5%BD%B1%E7%BD%91%E7%AB%99/"/>
    <id>http://yoursite.com/2017/11/09/0-React,AntDesign 实现一个电影网站/</id>
    <published>2017-11-09T00:25:52.000Z</published>
    <updated>2017-11-14T01:13:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ooo.0o0.ooo/2017/11/14/5a0a42c594cd5.png" alt="Jietu20171108-184502"></p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://i.loli.net/2017/11/14/5a0a42d1837f7.png" alt="Jietu20171108-184517"></h2><h3 id="HOW-TO-USE"><a href="#HOW-TO-USE" class="headerlink" title="HOW TO USE?"></a>HOW TO USE?</h3><ol><li>open terminal in rootfolder</li><li>run ‘npm install’</li><li>open termianl in ‘react-movie-server’ folder</li><li>run ‘nodemon app.js’</li><li>open termianl in ‘react-movie-front’ folder</li><li>run ‘npm run dev’</li><li>if browser can’t open automatically, type ‘127.0.0.1:3000’ &amp; enter</li></ol><hr><h3 id="TECHNIQUES"><a href="#TECHNIQUES" class="headerlink" title="TECHNIQUES"></a>TECHNIQUES</h3><ul><li>React</li><li>Ant Design</li><li>Fetch API</li><li>Full ES6 syntax cover</li><li>Promise handle fetch async</li><li>React Router 4.0+</li><li>Node.js + Express Server handle CORS &amp; data fetching</li><li>Webpack</li></ul><hr><h3 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h3><h2 id="https-github-com-choteewang-react-movie-intro"><a href="#https-github-com-choteewang-react-movie-intro" class="headerlink" title="https://github.com/choteewang/react-movie-intro"></a><a href="https://github.com/choteewang/react-movie-intro" target="_blank" rel="external">https://github.com/choteewang/react-movie-intro</a></h2><h3 id="SUMMARY"><a href="#SUMMARY" class="headerlink" title="SUMMARY"></a>SUMMARY</h3><ul><li>Node.js设置CORS跨域</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在Node.js中设置允许跨域请求数据</span></span><br><span class="line"><span class="comment">// 这里指浏览器端localhost:3000端口运行的前端 向 localhost:3001运行的服务端进行ajax请求时的跨域处理</span></span><br><span class="line">app.use(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 设置请求头为允许跨域</span></span><br><span class="line">  res.header(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">  <span class="comment">// 设置服务器支持的所有头信息字段</span></span><br><span class="line">  res.header(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Content-Type,Content-Length, Authorization, Accept,X-Requested-With"</span>);</span><br><span class="line">  <span class="comment">// 设置服务器支持的所有跨域请求的方法</span></span><br><span class="line">  res.header(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"POST,GET"</span>);</span><br><span class="line">  <span class="comment">// next()方法表示进入下一个路由</span></span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>Promise + Fetch API 封装</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模块导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  getmovielist: <span class="function">(<span class="params">type</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> url = <span class="string">'http://127.0.0.1:3001/getmovielist?type='</span> + type</span><br><span class="line">    <span class="comment">// fetch API https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API </span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">      fetch(url).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// fetch(url)拿到一个promise对象,对象的resolve方法中传入的data是一个response对象.</span></span><br><span class="line">        <span class="keyword">return</span> response.json();</span><br><span class="line">      &#125;).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 此response对象上有各种方法,.json方法返回一个响应的json格式的Promise对象,再then一次可以拿到此json对象的data</span></span><br><span class="line">        resolve(data)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)   </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//外层调用</span></span><br><span class="line"><span class="keyword">import</span> GetMovie <span class="keyword">from</span> <span class="string">''</span></span><br><span class="line">   </span><br><span class="line">   GetMovie.getmovielist(<span class="keyword">this</span>.state.type).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">       movieList: data.subjects,</span><br><span class="line">       isLoading: <span class="literal">false</span></span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><ul><li>MovieList组件,主要业务逻辑</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Spin, Alert,Rate &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"><span class="comment">// 导入自定义模块GetMovie</span></span><br><span class="line"><span class="keyword">import</span> GetMovie <span class="keyword">from</span> <span class="string">'../services/GetMovie'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'../css/movieList.css'</span></span><br><span class="line"><span class="comment">// https://api.douban.com/v2/movie/in_theaters</span></span><br><span class="line"><span class="comment">// https://api.douban.com/v2/movie/coming_soon</span></span><br><span class="line"><span class="comment">// https://api.douban.com/v2/movie/top250</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">About</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// constructor</span></span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      type: <span class="keyword">this</span>.props.match.params.type,</span><br><span class="line">      movieList: [],</span><br><span class="line">      isLoading: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// render</span></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;div&gt;</span><br><span class="line">      &#123;this.renderMovieList()&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// renderMovieList</span></span><br><span class="line">  renderMovieList = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.isLoading) &#123;</span><br><span class="line">      <span class="keyword">return</span> &lt;Spin tip="加载中..."&gt;</span><br><span class="line">        &lt;Alert</span><br><span class="line">          message="正在加载豆瓣API电影列表"</span><br><span class="line">          description="请耐心等待."</span><br><span class="line">          type="info"</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/Spin&gt;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      return &lt;div style=&#123;&#123; display:'flex',flexWrap:'wrap',textAlign:'center'&#125;&#125;&gt;</span><br><span class="line">        &#123;this.state.movieList.map((value, index) =&gt; &#123;</span><br><span class="line">          return &lt;div className="movielist" key=&#123;index&#125; style=&#123;&#123;border:'1px solid #ddd',margin:'5px',padding:'8px 5px',width:'180px',height:'260px',cursor:'pointer'&#125;&#125; onClick=&#123; ()=&gt;&#123;</span><br><span class="line">            this.toDetail(value.id)</span><br><span class="line">          &#125;&#125;&gt;</span><br><span class="line">            &lt;img src=&#123;value.images.medium&#125; alt=&#123;value.tittle&#125; width="100" height="140" /&gt;</span><br><span class="line">            &lt;h5&gt;&#123;value.title&#125;&lt;/h5&gt;</span><br><span class="line">            &lt;p&gt;&lt;strong&gt;电影类型：&lt;/strong&gt;&#123;value.genres.map((value,index) =&gt; &#123;</span><br><span class="line">              return &lt;span key=&#123;index&#125; style=&#123;&#123; padding:'2px',background:'#bbb',marginRight:'2px',color:'#fff'&#125;&#125;&gt;&#123;value&#125;&lt;/span&gt;</span><br><span class="line">            &#125;)&#125;&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;&lt;strong&gt;上映年份：&lt;/strong&gt;&#123;value.year&#125;年&lt;/p&gt;</span><br><span class="line">            &lt;div&gt;&lt;strong&gt;评分：&lt;/strong&gt;&lt;Rate disabled defaultValue=&#123;value.rating.average / 2&#125; /&gt;&lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &#125;)&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // cwrp</span><br><span class="line">  componentWillReceiveProps(nextProps) &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      type: nextProps.match.params.type,</span><br><span class="line">      isLoading:true</span><br><span class="line">    &#125;,this.getMovieListByType)</span><br><span class="line">  &#125;</span><br><span class="line">  // cdm</span><br><span class="line">  // 这里需要获取电影列表的原因是,若是从1级路由重定向到in_theaters时,不会进入cwrp,不会去拿数据</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    this.getMovieListByType()</span><br><span class="line">  &#125;</span><br><span class="line">  // getMovieListByType</span><br><span class="line">  getMovieListByType = () =&gt; &#123;</span><br><span class="line">    GetMovie.getmovielist(this.state.type).then((data) =&gt; &#123;</span><br><span class="line">      this.setState(&#123;</span><br><span class="line">        movieList: data.subjects,</span><br><span class="line">        isLoading: false</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  // toDetail</span><br><span class="line">  toDetail = (id) =&gt; &#123;</span><br><span class="line">    this.props.history.push('/movie/detail/' + id)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/11/14/5a0a42c594cd5.png&quot; alt=&quot;Jietu20171108-184502&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基于Node.js,Express,MongoDB的支持多用户登录,markdown字符串转换的留言板</title>
    <link href="http://yoursite.com/2017/11/08/-1-%E5%9F%BA%E4%BA%8ENode.js,Express,MongoDB%E7%9A%84%E6%94%AF%E6%8C%81%E5%A4%9A%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95,markdown%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E7%9A%84%E7%95%99%E8%A8%80%E6%9D%BF/"/>
    <id>http://yoursite.com/2017/11/08/-1-基于Node.js,Express,MongoDB的支持多用户登录,markdown字符串转换的留言板/</id>
    <published>2017-11-08T15:25:52.000Z</published>
    <updated>2017-11-14T01:12:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><ul><li>后端<ul><li>Node.js</li><li>Express </li><li>MongoDB </li><li>mongoose </li><li>nunjucks </li><li>bodyParser </li><li>session </li><li>marked </li></ul></li><li>前端<ul><li>bootstrap </li><li>jQuery</li></ul></li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>MVC结构分层,公共部分的抽象提取,数据与逻辑的分离</li><li>ES6语法全覆盖,异步API Promise化</li><li>服务端session的业务逻辑实现</li><li>Express中间件思路统一处理404与业务逻辑error</li></ul><h3 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h3><p><a href="https://github.com/choteewang/express_guest" target="_blank" rel="external">https://github.com/choteewang/express_guest</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;技术栈&quot;&gt;&lt;a href=&quot;#技术栈&quot; class=&quot;headerlink&quot; title=&quot;技术栈&quot;&gt;&lt;/a&gt;技术栈&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;后端&lt;ul&gt;
&lt;li&gt;Node.js&lt;/li&gt;
&lt;li&gt;Express &lt;/li&gt;
&lt;li&gt;MongoDB &lt;/li&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Node.js实现一个静态资源服务器</title>
    <link href="http://yoursite.com/2017/11/08/-2-Node.js%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yoursite.com/2017/11/08/-2-Node.js实现一个静态资源服务器/</id>
    <published>2017-11-08T15:24:52.000Z</published>
    <updated>2017-11-14T01:09:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="这是什么"><a href="#这是什么" class="headerlink" title="这是什么?"></a>这是什么?</h3><p>原生Node.js写的静态资源服务器,借助浏览器窗口实现计算机任意目录的结构显示</p><h3 id="启动方法"><a href="#启动方法" class="headerlink" title="启动方法"></a>启动方法</h3><ol><li>命令行程序入口处要加 #!/usr/bin/env node,之后可能需要修改此node文件权限,如<code>chmod 755 app.js</code></li><li><p>在package.json中加入字段</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"bin": &#123;</span><br><span class="line">    "choteeserver": "app.js"</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li><li><p>在命令行执行<code>npm link</code>,mac未设置管理员权限要加<code>sudo</code></p></li><li>在任意命令行目录下键入 <code>choteeserver ./</code>,浏览器访问<code>127.0.0.1/3000</code></li></ol><h3 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h3><p><a href="https://github.com/choteewang/Nodejs_static_server" target="_blank" rel="external">https://github.com/choteewang/Nodejs_static_server</a></p><h3 id="关于Node-js命令行工具的参考资料"><a href="#关于Node-js命令行工具的参考资料" class="headerlink" title="关于Node.js命令行工具的参考资料"></a>关于Node.js命令行工具的参考资料</h3><p>参考资料来自阮一峰博客 <a href="http://www.ruanyifeng.com/blog/2015/05/command-line-with-node.html" target="_blank" rel="external">Node.js 命令行程序开发教程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;这是什么&quot;&gt;&lt;a href=&quot;#这是什么&quot; class=&quot;headerlink&quot; title=&quot;这是什么?&quot;&gt;&lt;/a&gt;这是什么?&lt;/h3&gt;&lt;p&gt;原生Node.js写的静态资源服务器,借助浏览器窗口实现计算机任意目录的结构显示&lt;/p&gt;
&lt;h3 id=&quot;启动方法&quot;&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack-pub-template Webpack@2.6.1-发布环境-自配参数记录</title>
    <link href="http://yoursite.com/2017/11/08/-3-webpack-pub-template/"/>
    <id>http://yoursite.com/2017/11/08/-3-webpack-pub-template/</id>
    <published>2017-11-08T15:23:52.000Z</published>
    <updated>2017-11-14T00:54:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="webpack-config-publish-js"><a href="#webpack-config-publish-js" class="headerlink" title="webpack.config.publish.js"></a>webpack.config.publish.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>); </span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>); <span class="comment">// 自动生成HTMl文件的插件</span></span><br><span class="line"><span class="keyword">const</span> cleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>); <span class="comment">// 删除文件夹的webpack插件</span></span><br><span class="line"><span class="keyword">const</span> extractTextWebpackPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>); <span class="comment">// 抽取CSS样式的插件</span></span><br><span class="line"><span class="keyword">const</span> OptimizeCssAssetsPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>); <span class="comment">// 导入优化压缩CSS文件的插件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 通过entry属性，指定入口文件路径</span></span><br><span class="line">  <span class="comment">// 1. 改造入口</span></span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: path.join(__dirname, <span class="string">'main.js'</span>),</span><br><span class="line">    vendors: [<span class="string">'jquery'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123; <span class="comment">// 指定打包好文件的出口</span></span><br><span class="line">    path: path.join(__dirname, <span class="string">'dist'</span>), <span class="comment">// 指定输出路径</span></span><br><span class="line">    filename: <span class="string">'bundle.js'</span> <span class="comment">// 指定输出的文件名</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123; <span class="comment">// 作用：配置处理第三方文件类型的模块</span></span><br><span class="line">    rules: [ <span class="comment">// 第三方文件的匹配规则</span></span><br><span class="line">      <span class="comment">// &#123; test: /\.css$/, use: ['style-loader', 'css-loader'] &#125;, // 处理CSS文件的匹配规则</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>: extractTextWebpackPlugin.extract(&#123;</span><br><span class="line">        fallback: <span class="string">'style-loader'</span>,</span><br><span class="line">        use: <span class="string">'css-loader'</span></span><br><span class="line">        <span class="comment">//publicPath:'../' 若套了别的文件夹引起background问题</span></span><br><span class="line">      &#125;)</span><br><span class="line">      &#125;, <span class="comment">// 处理CSS文件的匹配规则</span></span><br><span class="line">      <span class="comment">// &#123; test: /\.scss$/, use: ['style-loader', 'css-loader', 'sass-loader'] &#125;, // 处理sass文件</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.scss$/</span>, <span class="attr">use</span>: extractTextWebpackPlugin.extract(&#123;</span><br><span class="line">        fallback: <span class="string">'style-loader'</span>,</span><br><span class="line">        use: [<span class="string">'css-loader'</span>, <span class="string">'sass-loader'</span>]</span><br><span class="line">      &#125;)</span><br><span class="line">      &#125;, <span class="comment">// 处理sass文件的匹配规则</span></span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.(png|jpg|jpeg|gif|bmp)$/</span>, <span class="attr">use</span>: <span class="string">'url-loader?limit=43959&amp;name=images/img-[hash:8].[ext]'</span>&#125;, </span><br><span class="line">      <span class="comment">//处理图片文件的匹配规则</span></span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.(woff|ttf|svg|woff2|eot)$/</span>, <span class="attr">use</span>: <span class="string">'url-loader?name=fonts/[name].[ext]'</span>&#125;, </span><br><span class="line">      <span class="comment">// 处理字体文件的匹配规则</span></span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">use</span>: <span class="string">'babel-loader'</span>, <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>&#125; </span><br><span class="line">      <span class="comment">// 处理JS文件的匹配规则, 将node_modules文件夹排除</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> htmlWebpackPlugin(&#123; <span class="comment">// devserver删除后,不在内存中自动生成HTMl文件,转为在设置的dist目录里生成物理文件</span></span><br><span class="line">      template: path.join(__dirname, <span class="string">'index.html'</span>), <span class="comment">// 指定模板文件</span></span><br><span class="line">      filename: <span class="string">'index.html'</span>, <span class="comment">// 指定内存中，生成文件的名称</span></span><br><span class="line">      minify: &#123; <span class="comment">// 压缩生成的HTMl文件</span></span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>, <span class="comment">// 启用合并空白字符</span></span><br><span class="line">        removeComments: <span class="literal">true</span>, <span class="comment">// 移除注释</span></span><br><span class="line">        removeAttributeQuotes: <span class="literal">true</span> <span class="comment">// 移除属性上的引号</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> cleanWebpackPlugin([<span class="string">'dist'</span>]), <span class="comment">// 每次重新运行发布的时候，都把dist目录删掉，重新生成一份最新的dist目录</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123; </span><br><span class="line">      name: <span class="string">'vendors'</span>, <span class="comment">// 在打包时候，通过name属性，从entry入口中，找到指定的属性，然后把这些包抽离为单独的文件</span></span><br><span class="line">      filename: <span class="string">'vendors.js'</span> <span class="comment">// 指定分离出来的第三方模块的JS文件名</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123; <span class="comment">// 创建一个压缩混淆JS代码的插件</span></span><br><span class="line">      compress: &#123; <span class="comment">// 压缩代码</span></span><br><span class="line">        warnings: <span class="literal">false</span> <span class="comment">// 移除警告</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123; <span class="comment">// 定义当前为项目发布环境</span></span><br><span class="line">      <span class="string">'process.env.NODE_ENV'</span>: <span class="string">'"production"'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> extractTextWebpackPlugin(<span class="string">'styles.css'</span>), <span class="comment">// 创建一个抽取CSS文件的插件，然后传递一个名称进去</span></span><br><span class="line">    <span class="keyword">new</span> OptimizeCssAssetsPlugin() <span class="comment">// 使用压缩优化CSS的插件</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="babelrc"><a href="#babelrc" class="headerlink" title=".babelrc"></a>.babelrc</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>:[<span class="string">"env"</span>,<span class="string">"preset-0"</span>],</span><br><span class="line">    <span class="attr">"plugins"</span>:[<span class="string">"transform-runtime"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/choteewang/webpack-pub-template" target="_blank" rel="external">https://github.com/choteewang/webpack-pub-template</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;webpack-config-publish-js&quot;&gt;&lt;a href=&quot;#webpack-config-publish-js&quot; class=&quot;headerlink&quot; title=&quot;webpack.config.publish.js&quot;&gt;&lt;/a&gt;webpack.con
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack-dev-template Webpack@2.6.1-开发环境-自配参数记录</title>
    <link href="http://yoursite.com/2017/11/08/-4-webpack-dev-template/"/>
    <id>http://yoursite.com/2017/11/08/-4-webpack-dev-template/</id>
    <published>2017-11-08T14:23:52.000Z</published>
    <updated>2017-11-14T00:53:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>); </span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>); <span class="comment">// 自动生成HTMl文件的插件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 通过entry属性，指定入口文件路径</span></span><br><span class="line">  entry: path.join(__dirname, <span class="string">'main.js'</span>),</span><br><span class="line">  output: &#123; <span class="comment">// 指定打包好文件的出口</span></span><br><span class="line">    path: path.join(__dirname, <span class="string">'dist'</span>), <span class="comment">// 指定输出路径</span></span><br><span class="line">    filename: <span class="string">'bundle.js'</span> <span class="comment">// 指定输出的文件名</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123; <span class="comment">// 作用：配置处理第三方文件类型的模块</span></span><br><span class="line">    rules: [ <span class="comment">// 第三方文件的匹配规则</span></span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]&#125;, <span class="comment">// 处理CSS文件的匹配规则</span></span><br><span class="line">      <span class="comment">// 处理sass文件的匹配规则,sass-loader内部依赖node-sass也得安撞</span></span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.scss$/</span>, <span class="attr">use</span>: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'sass-loader'</span>]&#125;, </span><br><span class="line">      <span class="comment">//limit后面跟一个图片大小,单位是byte字节,大于这个值保存图片,小于这个值转base64</span></span><br><span class="line">      <span class="comment">//处理图片文件的匹配规则,url-loader内部依赖file-loader也得安装</span></span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.(png|jpg|jpeg|gif|bmp)$/</span>, <span class="attr">use</span>: <span class="string">'url-loader?limit=43959'</span>&#125;, </span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.(woff|ttf|svg|woff2|eot)$/</span>, <span class="attr">use</span>: <span class="string">'url-loader'</span>&#125;, <span class="comment">// 处理字体文件的匹配规则</span></span><br><span class="line">      <span class="comment">//处理es6语法,babel,排除node_modules文件夹</span></span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">use</span>: [<span class="string">'babel-loader'</span>], <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123; </span><br><span class="line">    <span class="comment">//也可以在package.json的script中的webpack-dev-server命令后面跟--open --port 3000 --hot</span></span><br><span class="line">    open: <span class="literal">true</span>, <span class="comment">// 自动打开浏览器</span></span><br><span class="line">    port: <span class="number">3000</span>, <span class="comment">// 指定端口号</span></span><br><span class="line">    hot: <span class="literal">true</span> <span class="comment">// 指定启用热更新</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(), <span class="comment">// 使用webpack的热更新插件</span></span><br><span class="line">    <span class="keyword">new</span> htmlWebpackPlugin(&#123; <span class="comment">// 在内存中自动生成HTMl文件</span></span><br><span class="line">      template: path.join(__dirname, <span class="string">'index.html'</span>), <span class="comment">// 指定模板文件</span></span><br><span class="line">      filename: <span class="string">'index.html'</span> <span class="comment">// 指定内存中，生成文件的名称</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="babelrc"><a href="#babelrc" class="headerlink" title=".babelrc"></a>.babelrc</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>:[<span class="string">"env"</span>,<span class="string">"preset-0"</span>],</span><br><span class="line">    <span class="attr">"plugins"</span>:[<span class="string">"transform-runtime"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://github.com/choteewang/webpack-dev-template" target="_blank" rel="external">https://github.com/choteewang/webpack-dev-template</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;webpack-config-js&quot;&gt;&lt;a href=&quot;#webpack-config-js&quot; class=&quot;headerlink&quot; title=&quot;webpack.config.js&quot;&gt;&lt;/a&gt;webpack.config.js&lt;/h2&gt;&lt;figure class
      
    
    </summary>
    
    
  </entry>
  
</feed>
