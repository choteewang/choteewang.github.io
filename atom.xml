<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>choteewang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-13T13:41:15.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>choteewang@qq.com</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redux 3:react-redux继续改造Redux数据流</title>
    <link href="http://yoursite.com/2017/11/13/react-redux%E7%BB%A7%E7%BB%AD%E6%94%B9%E9%80%A0redux%E6%95%B0%E6%8D%AE%E6%B5%81/"/>
    <id>http://yoursite.com/2017/11/13/react-redux继续改造redux数据流/</id>
    <published>2017-11-13T14:23:52.000Z</published>
    <updated>2017-11-13T13:41:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><p>React-Redux 将所有组件分成两大类：UI 组件（presentational component）和容器组件（container component）。</p><h3 id="UI-组件"><a href="#UI-组件" class="headerlink" title="UI 组件"></a>UI 组件</h3><ul><li>只负责 UI 的呈现，不带有任何业务逻辑</li><li>没有状态（即不使用this.state这个变量）</li><li>所有数据都由参数（this.props）提供</li><li>不使用任何 Redux 的 API<h3 id="容器组件"><a href="#容器组件" class="headerlink" title="容器组件"></a>容器组件</h3></li><li>负责管理数据和业务逻辑，不负责 UI 的呈现</li><li>带有内部状态</li><li>使用 Redux 的 API</li></ul><p>UI 组件负责 UI 的呈现，容器组件负责管理数据和逻辑。<br>将组件拆分成下面的结构：外面是一个容器组件，里面包了一个UI 组件。前者负责与外部的通信，将数据传给后者，由后者渲染出视图。<br>React-Redux 规定，所有的 UI 组件都由用户提供，容器组件则是由 React-Redux 自动生成。也就是说，用户负责视觉层，状态管理则是全部交给它。</p><p><code>下面是将已模块化拆分的,支持异步的redux数据流, 继续改造为react-redux的代码</code><br><a id="more"></a></p><h2 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//myRedux.js 代码保持不变</span></span><br><span class="line"><span class="keyword">const</span> INCREASE = <span class="string">'increase'</span></span><br><span class="line"><span class="keyword">const</span> DECREASE = <span class="string">'decrease'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> reducer = <span class="function">(<span class="params">state = <span class="number">0</span>, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'increase'</span>:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'decrease'</span>:</span><br><span class="line">      <span class="keyword">return</span> state - <span class="number">1</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> onIncrease = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: INCREASE &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> onDecrease = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: DECREASE &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> onIncreaseAsync = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      dispatch(onIncrease())</span><br><span class="line">    &#125;,<span class="number">3000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js 根节点挂载处</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="comment">// applyMiddleware用来处理异步中间件thunk,compose用来将chrome插件与react-thunk按固定顺序连接起来</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore , applyMiddleware ,compose &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="comment">// 为了在根组件页面定义store并传入,需要将reducer引入</span></span><br><span class="line"><span class="keyword">import</span> &#123; reducer &#125; <span class="keyword">from</span> <span class="string">'./myRedux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//chrome插件redux-devtools github文档规定的插件声明方式</span></span><br><span class="line"><span class="keyword">const</span> composeEnhancers = <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;</span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer,composeEnhancers(applyMiddleware(thunk)))</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除subcribe和listener,把ReactDOM.renden重写</span></span><br><span class="line"><span class="comment">//const unsubscribe = store.subscribe(listener)</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="comment">//根组件外套一层Provider传入Store</span></span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;App/&gt;</span><br><span class="line">  &lt;<span class="regexp">/Provider&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('root'));</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//App.js, UI组件定义处 与 包裹UI的容器组件生成处</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; from <span class="string">'react'</span>;</span><br><span class="line"><span class="comment">// 引入react-redux的connect函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; from <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="comment">// 引入所有Action Creator</span></span><br><span class="line"><span class="keyword">import</span> &#123; onIncrease, onDecrease, onIncreaseAsync &#125; from <span class="string">'./myRedux'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//UI组件,只用来做数据展示和分发,将来可以抽离出去</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppUI</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&#123;this.props.count&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"increase"</span> onClick=&#123;<span class="keyword">this</span>.props.onIncrease&#125; /&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"decrease"</span> onClick=&#123;<span class="keyword">this</span>.props.onDecrease&#125; /&gt;</span><br><span class="line">        &#123;&lt;input type=<span class="string">"button"</span> value=<span class="string">"increaseAsync"</span> onClick=&#123;<span class="keyword">this</span>.props.onIncreaseAsync&#125; /&gt;&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//mapStateToProps是一个函数,返回一个对象,key对应UI组件上的参数名称,"值"应该是state或算出state的方法的调用</span></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = (state) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    count: state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//mapDispatchToProps是一个对象,key对应UI组件对应的参数名称,"值"对应传入的actionCreater</span></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = &#123;</span><br><span class="line">  onIncrease, onDecrease, onIncreaseAsync</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用connect函数生成包裹UI组件的容器组件</span></span><br><span class="line"><span class="keyword">const</span> App = connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(AppUI)</span><br><span class="line">export <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/11/13/5a099fedeaa9e.png" alt="Jietu20171111-033033_iutjibikf"></p><h2 id="REFERENCE"><a href="#REFERENCE" class="headerlink" title="REFERENCE"></a>REFERENCE</h2><p><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html" target="_blank" rel="external">阮一峰 Redux 3</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;TODO&quot;&gt;&lt;a href=&quot;#TODO&quot; class=&quot;headerlink&quot; title=&quot;TODO&quot;&gt;&lt;/a&gt;TODO&lt;/h2&gt;&lt;p&gt;React-Redux 将所有组件分成两大类：UI 组件（presentational component）和容器组件（container component）。&lt;/p&gt;
&lt;h3 id=&quot;UI-组件&quot;&gt;&lt;a href=&quot;#UI-组件&quot; class=&quot;headerlink&quot; title=&quot;UI 组件&quot;&gt;&lt;/a&gt;UI 组件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;只负责 UI 的呈现，不带有任何业务逻辑&lt;/li&gt;
&lt;li&gt;没有状态（即不使用this.state这个变量）&lt;/li&gt;
&lt;li&gt;所有数据都由参数（this.props）提供&lt;/li&gt;
&lt;li&gt;不使用任何 Redux 的 API&lt;h3 id=&quot;容器组件&quot;&gt;&lt;a href=&quot;#容器组件&quot; class=&quot;headerlink&quot; title=&quot;容器组件&quot;&gt;&lt;/a&gt;容器组件&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;负责管理数据和业务逻辑，不负责 UI 的呈现&lt;/li&gt;
&lt;li&gt;带有内部状态&lt;/li&gt;
&lt;li&gt;使用 Redux 的 API&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;UI 组件负责 UI 的呈现，容器组件负责管理数据和逻辑。&lt;br&gt;将组件拆分成下面的结构：外面是一个容器组件，里面包了一个UI 组件。前者负责与外部的通信，将数据传给后者，由后者渲染出视图。&lt;br&gt;React-Redux 规定，所有的 UI 组件都由用户提供，容器组件则是由 React-Redux 自动生成。也就是说，用户负责视觉层，状态管理则是全部交给它。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;下面是将已模块化拆分的,支持异步的redux数据流, 继续改造为react-redux的代码&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Redux 2:Redux模块的抽离,Action Creator,异步支持的实现(redux-thunk)</title>
    <link href="http://yoursite.com/2017/11/13/Redux-2-Redux%E6%A8%A1%E5%9D%97%E7%9A%84%E6%8A%BD%E7%A6%BB-Action-Creator-%E5%BC%82%E6%AD%A5%E6%94%AF%E6%8C%81%E7%9A%84%E5%AE%9E%E7%8E%B0-redux-thunk/"/>
    <id>http://yoursite.com/2017/11/13/Redux-2-Redux模块的抽离-Action-Creator-异步支持的实现-redux-thunk/</id>
    <published>2017-11-13T13:23:52.000Z</published>
    <updated>2017-11-13T13:31:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><p><a href="./redux的实现原理(发布订阅模式,闭包">上一篇redux的总结</a>.md)中,写了一个小的Counter Demo, 但是代码耦合度太高, 在复杂项目中组织代码难度增加, 且无法进行异步redux操作, 这篇总结中, 将代码以模块化思想解耦合, 并让redux可以支持异步操作.</p><p>需要用到redux-thunk这个库,这个库的作用是让store.dispatch接受以函数作为参数,从而从函数参数中拿到dispatch与getState执行异步操作, 最底层的原理可以移步阮一峰博客redux第二篇,这里只做代码实现,和详细注释</p><h2 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Index.js : 根组件挂载处</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="comment">// 引入redux-thunk,使dispatch可以接受一个函数作为参数,从而支持applyMiddleware的中间件处理</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="comment">// 引入自己抽离的actionCreater与reducer模块</span></span><br><span class="line"><span class="keyword">import</span> &#123; onIncrease, onDecrease, onIncreaseAsync,reducer &#125; <span class="keyword">from</span> <span class="string">'./myRedux'</span>;</span><br><span class="line"><span class="comment">// 在根组件的挂载处挂载store与reducer,actionCreater控制整个app的redux数据流</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer,applyMiddleware(thunk))</span><br><span class="line"><span class="keyword">const</span> unsubscribe = store.subscribe(listener)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">listener</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ReactDOM.render(</span><br><span class="line">    &lt;App</span><br><span class="line">      <span class="comment">//将store和actionCreater传入组件内部</span></span><br><span class="line">      store=&#123;store&#125;</span><br><span class="line">      onIncrease=&#123;onIncrease&#125;</span><br><span class="line">      onDecrease=&#123;onDecrease&#125;</span><br><span class="line">      onIncreaseAsync=&#123;onIncreaseAsync&#125;</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;<span class="regexp">/App&gt;,</span></span><br><span class="line"><span class="regexp">    document.getElementById('root'));</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">listener()</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.js : UI组件定义处</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="comment">// App就是上篇文章的Counter,不同的是它是一个UI组件,只负责UI的展示和数据流的分派</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// store与ActionCreater从根组件挂载处index.js处拿到</span></span><br><span class="line">    <span class="keyword">const</span> store = <span class="keyword">this</span>.props.store</span><br><span class="line">    <span class="keyword">const</span> onIncrease = <span class="keyword">this</span>.props.onIncrease</span><br><span class="line">    <span class="keyword">const</span> onDecrease = <span class="keyword">this</span>.props.onDecrease</span><br><span class="line">    <span class="keyword">const</span> onIncreaseAsync = <span class="keyword">this</span>.props.onIncreaseAsync</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&#123;store.getState()&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;input type="button" value="increase" onClick=&#123;() =&gt; &#123; store.dispatch(onIncrease()) &#125;&#125; /</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"decrease"</span> onClick=&#123;() =&gt; &#123; store.dispatch(onDecrease()) &#125;&#125; /&gt;</span><br><span class="line">        &#123;<span class="comment">/* 添加异步操作UI */</span>&#125;</span><br><span class="line">        &#123;&lt;input type=<span class="string">"button"</span> value=<span class="string">"increaseAsync"</span> onClick=&#123;() =&gt; &#123; store.dispatch(onIncreaseAsync()) &#125;&#125; /&gt;&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// myRedux.js</span></span><br><span class="line"><span class="comment">// 将actionCreater与reducer抽离成一个单独的js模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义action.type对应的常量,防止后期频繁修改</span></span><br><span class="line"><span class="keyword">const</span> INCREASE = <span class="string">'increase'</span></span><br><span class="line"><span class="keyword">const</span> DECREASE = <span class="string">'decrease'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> reducer = <span class="function">(<span class="params">state = <span class="number">0</span>, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'increase'</span>:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'decrease'</span>:</span><br><span class="line">      <span class="keyword">return</span> state - <span class="number">1</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为了不频繁写action,创建actionCreater方法,自动生成action</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> onIncrease = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: INCREASE &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> onDecrease = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: DECREASE &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// redux异步的解决方案:写出返回函数的actionCreator，使用reduxThunk中间件改造dispatch使函数可以作为其参数。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义异步的actionCreater,返回一个函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> onIncreaseAsync = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 这里return出的方法参数是dispatch与getState,后续applyMiddleWare方法会将store.dispatch与store.getState传入</span></span><br><span class="line">  <span class="comment">// 这里return出的方法是一个中间件方法,applyMiddleWare会在这个方法执行之前发一个action,执行之后再发一个action,从而实现异步处理.</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      dispatch(onIncrease())</span><br><span class="line">    &#125;,<span class="number">3000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/11/13/5a099c902645b.png" alt="Jietu20171111-033033"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html" target="_blank" rel="external">阮一峰 redux(2)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;TODO&quot;&gt;&lt;a href=&quot;#TODO&quot; class=&quot;headerlink&quot; title=&quot;TODO&quot;&gt;&lt;/a&gt;TODO&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;./redux的实现原理(发布订阅模式,闭包&quot;&gt;上一篇redux的总结&lt;/a&gt;.md)中,写了一个小的Co
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Redux 1: Redux的实现原理(发布订阅模式,闭包)</title>
    <link href="http://yoursite.com/2017/11/13/redux%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F-%E9%97%AD%E5%8C%85/"/>
    <id>http://yoursite.com/2017/11/13/redux的实现原理-发布订阅模式-闭包/</id>
    <published>2017-11-13T12:57:01.000Z</published>
    <updated>2017-11-13T13:30:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置知识-发布订阅者模式"><a href="#前置知识-发布订阅者模式" class="headerlink" title="前置知识:发布订阅者模式"></a>前置知识:发布订阅者模式</h2><p><a href="https://www.cnblogs.com/tugenhua0707/p/4687947.html" target="_blank" rel="external">发布订阅者模式_阅读</a></p><h2 id="createStore的实现-闭包-发布订阅模式"><a href="#createStore的实现-闭包-发布订阅模式" class="headerlink" title="createStore的实现,闭包,发布订阅模式"></a>createStore的实现,闭包,发布订阅模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> createStore = <span class="function">(<span class="params">reducer</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 闭包内要操作的数据,state是数据,listeners是发布订阅模式的订阅数组</span></span><br><span class="line">  <span class="keyword">let</span> state;</span><br><span class="line">  <span class="keyword">let</span> listeners = [];</span><br><span class="line">  <span class="comment">// 通过getState返回state的值</span></span><br><span class="line">  <span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> state;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//通过dispatch的参数接收action对象</span></span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// 将action对象传入reducer更新state</span></span><br><span class="line">    state = reducer(state, action);</span><br><span class="line">    <span class="comment">// 一旦state被更新,订阅数组中的所有listener方法被执行</span></span><br><span class="line">    listeners.forEach(<span class="function"><span class="params">listener</span> =&gt;</span> listener());</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 通过subscribe的参数接收listener方法</span></span><br><span class="line">  <span class="keyword">const</span> subscribe = <span class="function">(<span class="params">listener</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// 将listner方法放入订阅数组listeners</span></span><br><span class="line">    listeners.push(listener);</span><br><span class="line">    <span class="comment">// 同时return一个方法形成闭包,这个方法用来从订阅数组listeners中删除掉listener方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      listeners = listeners.filter(<span class="function"><span class="params">l</span> =&gt;</span> l !== listener);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 执行一次dispatch,形成最初的state数据</span></span><br><span class="line">  dispatch(&#123;&#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 将getState, dispatch, subscribe方法向外return,形成闭包</span></span><br><span class="line">  <span class="keyword">return</span> &#123; getState, dispatch, subscribe &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="最基础的Redux数据流"><a href="#最基础的Redux数据流" class="headerlink" title="最基础的Redux数据流"></a>最基础的Redux数据流</h2><p><img src="https://i.loli.net/2017/11/13/5a099379e0660.png" alt="Jietu20171110-094632"><br><a id="more"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React from <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM from <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="comment">// 从redux中拿到createStore函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; from <span class="string">"redux"</span>;</span><br><span class="line"><span class="comment">// ui组件,只有props从外界接收数据并展示,让redux帮我们处理state数据的传递</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&#123;this.props.count&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"Increase"</span> onClick=&#123;<span class="keyword">this</span>.props.onIncrease&#125; /&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"Decrease"</span> onClick=&#123;<span class="keyword">this</span>.props.onDecrease&#125; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reducer,在createStore形成的闭包内部处理state的过滤器,</span></span><br><span class="line"><span class="comment">// 在createStore形成的闭包内部 使用state=reducer(state,action)实现,return的值重新赋值给state</span></span><br><span class="line"><span class="keyword">const</span> reducer = (state = <span class="number">0</span>, action) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'increase'</span>:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'decrease'</span>:</span><br><span class="line">      <span class="keyword">return</span> state - <span class="number">1</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// store是createStore闭包的返回值,是一个对象,结构是&#123;getState,dispatch,subscribe&#125;,</span></span><br><span class="line"><span class="comment">// createStore通过参数传入的reducer形成state的生成规则</span></span><br><span class="line"><span class="comment">// createStore方法还可以接受第二个参数，表示整个应用的state的初始状态,会覆盖reducer函数中的默认初始值</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer)</span><br><span class="line"><span class="comment">// 通过store.subscribe(listener)方法拿到的listener函数进行订阅发布者模式监听,只要state的值变化,订阅数组listenrs中的所有listener方法就会被执行</span></span><br><span class="line"><span class="keyword">const</span> unsubscribe = store.subscribe(listener)</span><br><span class="line"><span class="comment">// store.subscribe的返回值是一个方法unsubscribe(),可以从订阅数组listeners中移除listener方法,取消监听</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这是subscribe调用的listener方法,state的值改变后会被调用,内部让其自动执行渲染函数更新UI组件Counter</span></span><br><span class="line"><span class="function">function <span class="title">listener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ReactDOM.render(</span><br><span class="line">    &lt;Counter</span><br><span class="line">      <span class="comment">// 新生成的state值可以通过store.getState()方法得到闭包快照</span></span><br><span class="line">      count=&#123;store.getState()&#125;</span><br><span class="line">      <span class="comment">// 通过store.dispatch(action)方法拿到action对象传入reducer参数更新state值,state=reducer(state,action)</span></span><br><span class="line">      <span class="comment">// action 是一个对象。其中的type属性是必须的，表示 Action 的名称。其他属性可以自由设置</span></span><br><span class="line">      onIncrease=&#123;() =&gt; &#123; store.dispatch(&#123; type: <span class="string">'increase'</span> &#125;) &#125;&#125;</span><br><span class="line">      onDecrease=&#123;() =&gt; &#123; store.dispatch(&#123; type: <span class="string">'decrease'</span> &#125;) &#125;&#125;</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;/Counter&gt;,</span><br><span class="line">    document.getElementById(<span class="string">'root'</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 首次进入页面先渲染一次页面</span></span><br><span class="line">listener()</span><br></pre></td></tr></table></figure><p><img src="https://ooo.0o0.ooo/2017/11/13/5a0993bd51d99.png" alt="Jietu20171110-082736"></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html" target="_blank" rel="external">阮一峰 redux (1)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前置知识-发布订阅者模式&quot;&gt;&lt;a href=&quot;#前置知识-发布订阅者模式&quot; class=&quot;headerlink&quot; title=&quot;前置知识:发布订阅者模式&quot;&gt;&lt;/a&gt;前置知识:发布订阅者模式&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/tugenhua0707/p/4687947.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;发布订阅者模式_阅读&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;createStore的实现-闭包-发布订阅模式&quot;&gt;&lt;a href=&quot;#createStore的实现-闭包-发布订阅模式&quot; class=&quot;headerlink&quot; title=&quot;createStore的实现,闭包,发布订阅模式&quot;&gt;&lt;/a&gt;createStore的实现,闭包,发布订阅模式&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; createStore = &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;reducer&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 闭包内要操作的数据,state是数据,listeners是发布订阅模式的订阅数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; state;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; listeners = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 通过getState返回state的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; getState = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; state;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//通过dispatch的参数接收action对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; dispatch = &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;action&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	 &lt;span class=&quot;comment&quot;&gt;// 将action对象传入reducer更新state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    state = reducer(state, action);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 一旦state被更新,订阅数组中的所有listener方法被执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    listeners.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;listener&lt;/span&gt; =&amp;gt;&lt;/span&gt; listener());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 通过subscribe的参数接收listener方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; subscribe = &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;listener&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	 &lt;span class=&quot;comment&quot;&gt;// 将listner方法放入订阅数组listeners&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    listeners.push(listener);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 同时return一个方法形成闭包,这个方法用来从订阅数组listeners中删除掉listener方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      listeners = listeners.filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;l&lt;/span&gt; =&amp;gt;&lt;/span&gt; l !== listener);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 执行一次dispatch,形成最初的state数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  dispatch(&amp;#123;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 将getState, dispatch, subscribe方法向外return,形成闭包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123; getState, dispatch, subscribe &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;最基础的Redux数据流&quot;&gt;&lt;a href=&quot;#最基础的Redux数据流&quot; class=&quot;headerlink&quot; title=&quot;最基础的Redux数据流&quot;&gt;&lt;/a&gt;最基础的Redux数据流&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2017/11/13/5a099379e0660.png&quot; alt=&quot;Jietu20171110-094632&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
