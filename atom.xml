<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>choteewang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-24T00:55:50.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>choteewang@qq.com</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>模拟Vue.js的设计模式实现 (四): 模拟Compile</title>
    <link href="http://yoursite.com/2018/04/10/my-vue-04/"/>
    <id>http://yoursite.com/2018/04/10/my-vue-04/</id>
    <published>2018-04-10T12:16:03.000Z</published>
    <updated>2018-04-24T00:55:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://choteewang.github.io/2018/04/07/my-vue-03/" target="_blank" rel="noopener">上篇博客</a>完成了<code>observer.js</code>与<code>watcher.js</code>, 并从全局的角度理解了<code>Vue.js</code>的设计模式</p><p>这个小项目的源码的<code>github</code>地址是: <a href="https://github.com/choteewang/my-vue" target="_blank" rel="noopener">https://github.com/choteewang/my-vue</a></p><p><img src="https://i.loli.net/2018/04/22/5adc3ff06cc7a.jpg" alt="Vue设计模式"></p><p>我们同时抛出了两个问题: </p><ul><li><strong>为什么要用多个<code>dep</code>, 而不是维护一个全局<code>dep</code>对象 ?</strong> </li><li><strong>什么时候调用new Watcher() ?</strong></li></ul><blockquote><p>为什么要用多个<code>dep</code>实例, 而不是维护一个全局列表 ?</p></blockquote><p>传统的观察者模式的<code>dep.subs</code>不是一个数组, 而是一个对象, 用<code>key</code>代表依赖, <code>key</code>的值代表依赖列表, 统一管理所有<code>订阅者</code>.</p><p><code>MVVM</code>框架的依赖项是<code>多维</code>的, 处于同一维度的不是不同的<code>key</code>, 而是依赖同一个<code>data[key]</code>的不同依赖项. </p><p>具体来说, 不能将<code>dep,subs</code>本身设置成一个全局<code>对象</code>或<code>数组</code>, 却用一维平行装载<code>vm.a</code>, <code>vm.b</code>这些依赖. 倘若如此, 如果有一个依赖<code>vm.a</code>的计算属性<code>vm.computedFromA</code>呢?</p><p>当然也可以将<code>dep.subs</code>设计成多维的, 比如<code>dep.subs</code>是一个对象, 每个<code>key</code>代表一个<code>data[key]</code>依赖, 它的值再是一个依赖<code>data[key]</code>依赖项们组成的数组. 而我们还是要从每个<code>data[key]</code>的<code>getter</code>与<code>setter</code>中取这个<code>dep</code>的实例, 闭包一点都没少用, 性能当然不会大幅提升.</p><p>所以, 最好的做法就是像现在这样, 依赖<code>vm.a</code>的所有依赖项共享一个<code>dep</code>, 共享<code>dep.subs</code>观察者列表. <code>dep</code>的角色从传统观察者模式的全局对象降低为类似全局对象中的一个<code>key</code>, 而<code>dep.subs</code>设计成一维数组, 用来同时维护<code>vm.a</code>, <code>vm.computedFromA</code>等所有依赖<code>vm.a</code>的<code>watcher</code>依赖项</p><p>于是, 第二个问题又会随之浮上水面: 何时调用<code>new Watcher()</code>实例化<code>watcher</code>触发<code>data[key]</code>的依赖收集?</p><blockquote><p>何时调用<code>new Watcher()</code>进行依赖收集?</p></blockquote><p>答案是模板编译(<code>Compile</code>)的时候, 我们先来看下<code>render</code>函数</p><h3 id="Vue-js中render函数的介绍"><a href="#Vue-js中render函数的介绍" class="headerlink" title="Vue.js中render函数的介绍"></a>Vue.js中render函数的介绍</h3><p>在<code>Vue.js</code>中, 如果我们写这样一个<code>Vue template</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;price&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的模板字符串会被编译成js执行, 具体点说是被解析为一个<code>render</code>函数, 这个函数长这样:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">with</span> (<span class="keyword">this</span>) &#123;  <span class="comment">// this 就是 vm</span></span><br><span class="line">    <span class="keyword">return</span> _c(</span><br><span class="line">      <span class="string">'div'</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        attrs: &#123; <span class="string">'id'</span>: <span class="string">'app'</span> &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      [</span><br><span class="line">        _c(<span class="string">'p'</span>, [_v(_s(price))])</span><br><span class="line">      ]</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述<code>render</code>函数中的<code>with(this)</code>扩展了大括号的作用域, 这个<code>this</code>指向<code>vm</code>实例, 下面的<code>_c</code>函数实际上是<code>vm._c</code>, 同理, <code>_v</code>是<code>vm._v</code>, <code>_s</code>是<code>vm._s</code>, <code>price</code>是<code>vm.price</code>, 我们将其改写如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> vm._c(</span><br><span class="line">    <span class="string">'div'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// vm._c =&gt; 创建dom标签</span></span><br><span class="line">      attrs: &#123; <span class="string">'id'</span>: <span class="string">'app'</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    [</span><br><span class="line">      <span class="comment">// vm._v =&gt; 创建文本节点</span></span><br><span class="line">      <span class="comment">// vm._s =&gt; toString()</span></span><br><span class="line">      vm._c(<span class="string">'p'</span>, [vm._v(vm._s(vm.price))])</span><br><span class="line">    ]</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>似乎变的清晰些了, 这个<code>render</code>函数非常像<code>VNode</code>的实现方式, 以字符串表示<code>node.tagName</code>, 以一个对象表示<code>node.attributes</code>, 以及最后用数组表示<code>node.childNodes</code>, 实际上, <code>vm._c</code>本质上就是<code>VNode</code>实现中的<code>h函数</code>, 用来把一个<code>VNode</code>对象转化为一个元素节点, 它的返回值的确就是一个<code>VNode</code>节点, 同理, <code>vm._v</code>是创建文本节点的方法, <code>vm._s</code>则是转化字符串的方法</p><p>这里涉及到<code>VNode</code>的知识, 再说下去就是<code>diff算法</code>, 就不过多展开了, 之所以介绍<code>render</code>函数, 是因为我们要模拟的<code>Compile</code>过程其实就类似创建<code>render</code>函数的过程, 不过我们用的不是<code>VNode</code>,<code>diff算法</code>,<code>render函数</code>, 而是<code>Fragment</code>, 这样做的原因有两个: 一是可以简化这里的实现, 把重点放在之前<code>Vue</code>的设计模式上, 二是无论<code>Fragment</code>, 还是<code>render</code>函数, 它们调用<code>new Watcher()</code>进行依赖收集的时机本质上是一样的.</p><h3 id="模拟-Compile"><a href="#模拟-Compile" class="headerlink" title="模拟 Compile"></a>模拟 Compile</h3><p>打开<code>index.js</code>, 在数据代理和劫持监听过程之后, 加入<code>compile</code>过程入口, 传递挂载点dom选择器和<code>vm</code>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.data = options.data</span><br><span class="line">  <span class="keyword">this</span>.el = options.el</span><br><span class="line">  <span class="keyword">this</span>.methods = options.methods</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.init(<span class="keyword">this</span>.data)</span><br><span class="line">  observe(<span class="keyword">this</span>.data)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// compile入口</span></span><br><span class="line">  <span class="keyword">new</span> Compile(<span class="keyword">this</span>.el, <span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开<code>compile.js</code>, 写下架构雏形:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// compile.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Compile</span>(<span class="params">el, vm</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 将挂载点dom缓存</span></span><br><span class="line">  <span class="keyword">this</span>.el = <span class="built_in">document</span>.querySelector(el)</span><br><span class="line">  <span class="keyword">this</span>.vm = vm</span><br><span class="line">  <span class="comment">// 用于dom更新的片段</span></span><br><span class="line">  <span class="keyword">this</span>.fragment = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">this</span>.init()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Compile.prototype = &#123;</span><br><span class="line">  init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  <span class="comment">// 创建片段</span></span><br><span class="line">  createFragment: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;&#125;,</span><br><span class="line">  <span class="comment">// 循环遍历节点,分类编译</span></span><br><span class="line">  compile: <span class="function"><span class="keyword">function</span>(<span class="params">fragment</span>) </span>&#123;&#125;,</span><br><span class="line">  <span class="comment">// 编译元素节点</span></span><br><span class="line">  compileElement: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  <span class="comment">// 编译v-on指令</span></span><br><span class="line">  compileEvent: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  <span class="comment">// 编译v-model指令</span></span><br><span class="line">  compileVmodel: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  <span class="comment">// 编译v-bind指令</span></span><br><span class="line">  compileVbind: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  <span class="comment">// 编译文本节点</span></span><br><span class="line">  compileTextNode: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Compile</code>构造函数在内部先缓存根挂载点和<code>vm</code>实例, 定义用于<code>dom</code>更新的<code>fragment</code>片段, 调用<code>init</code>方法开始编译, 搭完这个骨架后, 我们一点点实现编译过程.</p><h4 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h4><p><code>init</code>方法是整个编译过程的入口, 它清晰的显示了同步编译流程的各个步骤: </p><ol><li>将<code>Vue template</code>放入一个片段并缓存给<code>compile.fragment</code></li><li>逐个节点编译这个片段, 进行必要的<code>dom</code>操作和更新</li><li>最后将编译完成的片段<code>append</code>入挂载点</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.el) &#123;</span><br><span class="line">    <span class="comment">// 创建并缓存片段</span></span><br><span class="line">    <span class="keyword">this</span>.fragment = <span class="keyword">this</span>.createFragment(<span class="keyword">this</span>.el)</span><br><span class="line">    <span class="comment">// 编译片段</span></span><br><span class="line">    <span class="keyword">this</span>.compile(<span class="keyword">this</span>.fragment)</span><br><span class="line">    <span class="comment">// 将编译完成的片段append入挂载点</span></span><br><span class="line">    <span class="keyword">this</span>.el.appendChild(<span class="keyword">this</span>.fragment)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'can not find root element'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果采用<code>Vue.js</code>使用的<code>Virtual Dom</code>方法, 会将<code>Vue template</code>编译成一个<code>render</code>函数, <code>render</code>函数的返回值是一个<code>Vnode</code>, 使用<code>patch</code>方法将此<code>Vnode</code>挂载入页面.</p><h4 id="创建片段"><a href="#创建片段" class="headerlink" title="创建片段"></a>创建片段</h4><p><code>createFragment</code>方法创建并返回<code>Vue template</code>dom结构的片段, 用<code>createDocumentFragment</code>方法创建一个片段, 循环遍历挂载点的子节点 将子节点<code>append</code>入片段中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">createFragment: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> fragment = <span class="built_in">document</span>.createDocumentFragment()</span><br><span class="line">  <span class="keyword">var</span> child = el.firstChild</span><br><span class="line">  <span class="keyword">while</span>(child) &#123;</span><br><span class="line">    fragment.appendChild(child)</span><br><span class="line">    child = el.firstChild</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fragment</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="分类编译"><a href="#分类编译" class="headerlink" title="分类编译"></a>分类编译</h4><p><code>compile</code>方法的功能是为不同的节点分配不同的编译函数, 如果是元素节点直接进行编译, 文本节点则用正则表达式匹配是否符合<code>\{\{ xxx \}\}</code>的插值形式, 如果匹配再进行编译. 最后递归调用编译每个子节点, 保证整个<code>Fragment</code>的<code>Dom Tree</code>被完全编译</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">compile: <span class="function"><span class="keyword">function</span>(<span class="params">fragment</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">var</span> childNodes = fragment.childNodes</span><br><span class="line">  <span class="built_in">Array</span>.prototype.forEach.call(childNodes, <span class="function"><span class="keyword">function</span>(<span class="params">childNode</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果是元素节点, 调用compileElment</span></span><br><span class="line">    <span class="keyword">if</span>(childNode.nodeType === <span class="number">1</span>) &#123;</span><br><span class="line">      self.compileElement(childNode)</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 如果是文本节点</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(childNode.nodeType === <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="comment">// 判断是否匹配vue插值格式</span></span><br><span class="line">      <span class="keyword">var</span> reg = <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span> <span class="comment">// 匹配&#123;&#123; xxx &#125;&#125;</span></span><br><span class="line">      <span class="keyword">if</span>(reg.test(childNode.nodeValue)) &#123;</span><br><span class="line">        <span class="comment">// 传入捕获组匹配的表达式, 调用compileTextNode</span></span><br><span class="line">        self.compileTextNode(childNode, <span class="built_in">RegExp</span>.$<span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果childNode仍然存在子节点, 递归调用</span></span><br><span class="line">    <span class="comment">// 这里注意childNodes是带有length属性的伪数组, 注意判断条件</span></span><br><span class="line">    <span class="keyword">if</span>(childNode.childNodes &amp;&amp; childNode.childNodes.length) &#123;</span><br><span class="line">      self.compile(childNode)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编译文本节点"><a href="#编译文本节点" class="headerlink" title="编译文本节点"></a>编译文本节点</h4><p><code>compileTextNode</code>方法用于编译形如<code>\{\{ xxx \}\}</code>类型的文本节点. 这里就是调用<code>new Watcher</code>的时机. </p><p>比如文本节点是<code></code>, 实例化一个<code>watcher</code>触发<code>data[&#39;triggerTip&#39;]</code>的<code>getter</code>, 此<code>watcher</code>由于被赋值给<code>Dep.target</code>最终被<code>push</code>入对应的<code>dep</code>实例的观察者数组<code>subs</code>, 同时<code>watcher.val</code>拿到返回值并返回给<code>node.nodeValue</code>完成初次渲染.</p><p>当下次<code>data[&#39;triggerTip&#39;]</code>的值改变时, 会通过其<code>getter</code>通知同一个<code>dep</code>通知<code>watcher</code>的<code>update</code>方法执行我们现在传入的回调函数, 回调函数调用<code>compile._updateTextNode</code>方法更新文本节点的<code>nodeValue</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">compileTextNode: <span class="function"><span class="keyword">function</span>(<span class="params">node, exp</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="comment">// 初始化watcher</span></span><br><span class="line">  <span class="comment">// 此步骤会调用data[key]的getter添加依赖项</span></span><br><span class="line">  <span class="comment">// 获取并设置初始渲染的值</span></span><br><span class="line">  node.nodeValue = <span class="keyword">new</span> Watcher(<span class="keyword">this</span>.vm, exp, <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    self._updateTextNode(node, val)</span><br><span class="line">  &#125;).val</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 更新文本节点</span></span><br><span class="line">_updateTextNode: <span class="function"><span class="keyword">function</span>(<span class="params">node, val</span>) </span>&#123;</span><br><span class="line">  node.nodeValue = <span class="keyword">typeof</span> val === <span class="string">'undefined'</span> ? <span class="string">''</span> : val</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编辑元素节点"><a href="#编辑元素节点" class="headerlink" title="编辑元素节点"></a>编辑元素节点</h4><p><code>compileElement</code>方法用于编译<code>Vue</code>元素节点, 再根据特性节点中<code>Vue指令</code>的不同分派不同的处理函数. 它的大概运行过程是这样的.</p><ol><li>获取元素的特性节点集合</li><li>遍历集合并对其中形式为<code>v-</code>开头的各个指令做不同的处理函数指派</li><li>从元素上移除<code>Vue指令</code>特性, 使其渲染到页面后成为标准的<code>HTML</code>元素</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">compileElement: <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">var</span> attrs = node.attributes <span class="comment">// 获取特性list</span></span><br><span class="line">  <span class="built_in">Array</span>.prototype.forEach.call(attrs, <span class="function"><span class="keyword">function</span>(<span class="params">attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> attrName = attr.nodeName <span class="comment">// 获取特性名</span></span><br><span class="line">    <span class="keyword">var</span> exp = attr.nodeValue<span class="comment">// 获取特性值</span></span><br><span class="line">    <span class="comment">// 判断是不是v-开头的指令</span></span><br><span class="line">    <span class="keyword">if</span> (self._isDirective(attrName)) &#123;</span><br><span class="line">      <span class="keyword">var</span> directive = attrName.slice(<span class="number">2</span>) <span class="comment">// 去掉v-</span></span><br><span class="line">      <span class="comment">// 如果是v-on指令</span></span><br><span class="line">      <span class="keyword">if</span> (self._isVon(directive)) &#123;</span><br><span class="line">        self.compileEvent(node, self.vm, exp, directive)</span><br><span class="line">      &#125; </span><br><span class="line">      <span class="comment">// 如果是v-model指令</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(self._isVmodel(directive)) &#123;</span><br><span class="line">        self.compileVmodel(node, self.vm, exp)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果是v-bind指令</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(self._isVbind(directive)) &#123;</span><br><span class="line">        self.compileVbind(node, self.vm, exp, directive)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 移除vue指令特性</span></span><br><span class="line">      node.removeAttribute(attrName)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 判断是否Vue指令</span></span><br><span class="line">_isDirective: <span class="function"><span class="keyword">function</span>(<span class="params">attrName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> attrName.indexOf(<span class="string">'v-'</span>) === <span class="number">0</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 判断是否v-on指令</span></span><br><span class="line">_isVon: <span class="function"><span class="keyword">function</span>(<span class="params">directive</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> directive.indexOf(<span class="string">'on:'</span>) === <span class="number">0</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 判断是否v-model指令</span></span><br><span class="line">_isVmodel: <span class="function"><span class="keyword">function</span>(<span class="params">directive</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> directive.indexOf(<span class="string">'model'</span>) === <span class="number">0</span></span><br><span class="line">&#125;,</span><br><span class="line">_isVbind: <span class="function"><span class="keyword">function</span>(<span class="params">directive</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> directive.indexOf(<span class="string">'bind'</span>) === <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编译v-on指令"><a href="#编译v-on指令" class="headerlink" title="编译v-on指令"></a>编译v-on指令</h4><p><code>compileEvent</code>用于编译<code>v-on</code>指令, 它先获取事件类型(<code>eventType</code>), 再从<code>vm.methods</code>中获取表达式对应的方法名, 最终用<code>addEventListener</code>方法进行事件绑定, 为了模拟<code>Vue</code>的处理方式, 将<code>this</code>绑定为<code>vm</code>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">compileEvent: <span class="function"><span class="keyword">function</span>(<span class="params">node, vm, exp, directive</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取事件类型</span></span><br><span class="line">  <span class="keyword">var</span> type = directive.split(<span class="string">':'</span>)[<span class="number">1</span>]</span><br><span class="line">  <span class="comment">// 获取methods中的对应方法</span></span><br><span class="line">  <span class="keyword">var</span> cb = vm.methods &amp;&amp; vm.methods[exp]</span><br><span class="line">  <span class="comment">// 给节点绑定事件,注意将cb内部this绑定vm</span></span><br><span class="line">  <span class="keyword">if</span>(type &amp;&amp; cb) &#123;</span><br><span class="line">    node.addEventListener(type, cb.bind(vm), <span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编译v-bind指令"><a href="#编译v-bind指令" class="headerlink" title="编译v-bind指令"></a>编译v-bind指令</h4><p><code>compileVbind</code>方法用于编译<code>v-bind</code>指令, 它先获取需绑定的<code>HTML</code>特性名, 再执行<code>new Watcher()</code>触发对应<code>getter</code>收集依赖并返回初值, 进行首次渲染. 同时绑定了回调函数<code>cb</code>, 在<code>data[attr]</code>改变时, 触发回调, <code>re-render</code>页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">compileVbind: <span class="function"><span class="keyword">function</span>(<span class="params">node, vm, exp, directive</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="comment">// 获取要绑定的特性名</span></span><br><span class="line">  <span class="keyword">var</span> attr = directive.split(<span class="string">':'</span>)[<span class="number">1</span>]</span><br><span class="line">  <span class="comment">// 获取初始值</span></span><br><span class="line">  <span class="keyword">var</span> value = <span class="keyword">new</span> Watcher(vm, exp, <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    self._updateNodeAttr(node, attr, val)</span><br><span class="line">  &#125;).val</span><br><span class="line">  <span class="comment">// 首次渲染</span></span><br><span class="line">  <span class="keyword">this</span>._updateNodeAttr(node, attr, value)    </span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 更新元素的attr特性</span></span><br><span class="line">_updateNodeAttr: <span class="function"><span class="keyword">function</span>(<span class="params">node, attr, val</span>) </span>&#123;</span><br><span class="line">  node[attr] = <span class="keyword">typeof</span> val === <span class="string">'undefined'</span> ? <span class="string">''</span> : val</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编译v-model指令"><a href="#编译v-model指令" class="headerlink" title="编译v-model指令"></a>编译v-model指令</h4><p><code>compileVmodel</code>方法用于编译<code>v-model</code>指令, 这里执行了一个双向绑定的过程</p><ul><li><code>data -&gt; view</code>: 同上述<code>v-bind</code>过程, 改变<code>element.value</code>的值</li><li><code>view -&gt; input</code>: 监听元素的<code>input</code>事件, 将<code>event.target.value</code>赋值给<code>vm[key]</code>触发<code>setter</code>, <code>setter</code>通知依赖<code>watcher</code>执行<code>update</code>方法, 执行回调进行<code>re-render</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">compileVmodel: <span class="function"><span class="keyword">function</span>(<span class="params">node, vm, exp</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// data -&gt; view</span></span><br><span class="line">  <span class="comment">// 初始化watcher</span></span><br><span class="line">  <span class="comment">// 此步骤会调用data[key]的getter添加依赖项</span></span><br><span class="line">  <span class="comment">// 获取初值</span></span><br><span class="line">  <span class="keyword">var</span> value =  <span class="keyword">new</span> Watcher(vm, exp, <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    self._updateNodeAttr(node, <span class="string">'value'</span> ,val)</span><br><span class="line">  &#125;).val </span><br><span class="line">  <span class="comment">// 首次渲染设置nodeValue</span></span><br><span class="line">  <span class="keyword">this</span>._updateNodeAttr(node, <span class="string">'value'</span>, value)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// view -&gt; data</span></span><br><span class="line">  node.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    self.vm[exp] = event.target.value</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新元素的attr特性</span></span><br><span class="line">_updateNodeAttr: <span class="function"><span class="keyword">function</span>(<span class="params">node, attr, val</span>) </span>&#123;</span><br><span class="line">  node[attr] = <span class="keyword">typeof</span> val === <span class="string">'undefined'</span> ? <span class="string">''</span> : val</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模拟-mounted"><a href="#模拟-mounted" class="headerlink" title="模拟 mounted"></a>模拟 mounted</h4><p>全部编译完成后, <code>init</code>方法执行<code>this.el.appendChild(this.fragment)</code>将编译完成的<code>DOM</code>节点<code>append</code>入挂载点<code>el</code>, <code>dom</code>挂载完成.</p><p>回到<code>index.js</code>, 加上执行<code>mounted</code>钩子的代码, 注意模拟<code>Vue.js</code>绑定<code>this</code>为<code>vm</code>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.data = options.data</span><br><span class="line">  <span class="keyword">this</span>.el = options.el</span><br><span class="line">  <span class="keyword">this</span>.methods = options.methods</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.init(<span class="keyword">this</span>.data)</span><br><span class="line">  observe(<span class="keyword">this</span>.data)</span><br><span class="line">  <span class="keyword">new</span> Compile(<span class="keyword">this</span>.el, <span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将dom挂载完成后,执行mounted钩子</span></span><br><span class="line">  options.mounted &amp;&amp; options.mounted.call(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="回顾流程"><a href="#回顾流程" class="headerlink" title="回顾流程"></a>回顾流程</h3><p><code>compile.js</code>完成后, 所有开发已经完成, 将之前画的图进行扩充, 项目的设计模式如下:</p><p><img src="https://i.loli.net/2018/04/23/5adcc9ecb3e4a.jpg" alt=""></p><p>从图中可以清晰的看到, 在编译模板的的过程中, 通过<code>new Watcher().val</code>拿到首次渲染的对应值, <code>data[key]</code>更新后, 通过<code>setter</code>-&gt;<code>dep.notify</code>-&gt;<code>wathcer.update</code>, 最终执行<code>new Watcher()</code>过程中绑定的回调函数<code>cb</code>, 该函数回到<code>compile</code>作用域执行, 对视图进行更新.</p><h3 id="整体效果"><a href="#整体效果" class="headerlink" title="整体效果"></a>整体效果</h3><p>用浏览器打开<code>index.html</code>观察效果, 可以看到所有<code>dom</code>挂载完毕后显示<code>mounted function called</code>, 证明<code>mounted</code>钩子已正确执行.</p><p>改变<code>input</code>的输入值, 输入框下插值<code>inputValue</code>的<code>h1</code>标签可跟随<code>input</code>的输入改变. 打开浏览器设置<code>vm.inputValue = finished coding!</code>, 可以看到<code>input</code>输入框和<code>h1</code>标签的共同改变, 双向绑定完成!</p><p>点击<code>button</code>, <code>img</code>标签的图片会正常切换, 打开控制台将<code>vm.src</code>设置为一个网络地址, 图片改变.</p><p>完结, 撒花! </p><p><img src="https://i.loli.net/2018/04/22/5adc7ce746bae.jpg" alt=""></p><p><img src="https://i.loli.net/2018/04/22/5adc7ce7794ef.jpg" alt=""></p><h3 id="compile-js-完整代码"><a href="#compile-js-完整代码" class="headerlink" title="compile.js 完整代码"></a>compile.js 完整代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Compile</span>(<span class="params">el, vm</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 将挂载点dom缓存</span></span><br><span class="line">  <span class="keyword">this</span>.el = <span class="built_in">document</span>.querySelector(el)</span><br><span class="line">  <span class="keyword">this</span>.vm = vm</span><br><span class="line">  <span class="comment">// 用于dom更新的片段</span></span><br><span class="line">  <span class="keyword">this</span>.fragment = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">this</span>.init()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Compile.prototype = &#123;</span><br><span class="line">  init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.el) &#123;</span><br><span class="line">      <span class="comment">// 将vue字符模板放入片段中操作,提高性能</span></span><br><span class="line">      <span class="keyword">this</span>.fragment = <span class="keyword">this</span>.node2Fragment(<span class="keyword">this</span>.el)</span><br><span class="line">      <span class="comment">// 编译片段</span></span><br><span class="line">      <span class="keyword">this</span>.compile(<span class="keyword">this</span>.fragment)</span><br><span class="line">      <span class="comment">// 将编译完成的片段append入挂载点</span></span><br><span class="line">      <span class="keyword">this</span>.el.appendChild(<span class="keyword">this</span>.fragment)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'can not find root element'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 将挂载点的innerHTML append入fragment</span></span><br><span class="line">  node2Fragment: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fragment = <span class="built_in">document</span>.createDocumentFragment()</span><br><span class="line">    <span class="keyword">var</span> child = el.firstChild</span><br><span class="line">    <span class="keyword">while</span>(child) &#123;</span><br><span class="line">      fragment.appendChild(child)</span><br><span class="line">      child = el.firstChild</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fragment</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 循环遍历节点,分类编译</span></span><br><span class="line">  compile: <span class="function"><span class="keyword">function</span>(<span class="params">fragment</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">var</span> childNodes = fragment.childNodes</span><br><span class="line">    <span class="built_in">Array</span>.prototype.forEach.call(childNodes, <span class="function"><span class="keyword">function</span>(<span class="params">childNode</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 如果是元素节点, 直接传递node</span></span><br><span class="line">      <span class="keyword">if</span>(childNode.nodeType === <span class="number">1</span>) &#123;</span><br><span class="line">        self.compileElement(childNode)</span><br><span class="line">      &#125; </span><br><span class="line">      <span class="comment">// 如果是文本节点</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(childNode.nodeType === <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断是否匹配vue插值格式</span></span><br><span class="line">        <span class="keyword">var</span> reg = <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span> <span class="comment">// 匹配&#123;&#123; xxx &#125;&#125;</span></span><br><span class="line">        <span class="keyword">if</span>(reg.test(childNode.nodeValue)) &#123;</span><br><span class="line">          <span class="comment">// 传入捕获组匹配的表达式</span></span><br><span class="line">          self.compileTextNode(childNode, <span class="built_in">RegExp</span>.$<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果childNode仍然存在子节点, 递归调用</span></span><br><span class="line">      <span class="comment">// 这里注意childNodes是带有length属性的伪数组, 注意判断条件</span></span><br><span class="line">      <span class="keyword">if</span>(childNode.childNodes &amp;&amp; childNode.childNodes.length) &#123;</span><br><span class="line">        self.compile(childNode)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 编译元素节点</span></span><br><span class="line">  compileElement: <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">var</span> attrs = node.attributes <span class="comment">// 获取特性list</span></span><br><span class="line">    <span class="built_in">Array</span>.prototype.forEach.call(attrs, <span class="function"><span class="keyword">function</span>(<span class="params">attr</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> attrName = attr.nodeName <span class="comment">// 获取特性名</span></span><br><span class="line">      <span class="keyword">var</span> exp = attr.nodeValue<span class="comment">// 获取特性值</span></span><br><span class="line">      <span class="comment">// 判断是不是v-开头的指令</span></span><br><span class="line">      <span class="keyword">if</span> (self._isDirective(attrName)) &#123;</span><br><span class="line">        <span class="keyword">var</span> directive = attrName.slice(<span class="number">2</span>) <span class="comment">// 去掉v-</span></span><br><span class="line">        <span class="comment">// 如果是v-on指令</span></span><br><span class="line">        <span class="keyword">if</span> (self._isVon(directive)) &#123;</span><br><span class="line">          self.compileEvent(node, self.vm, exp, directive)</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">// 如果是v-model指令</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(self._isVmodel(directive)) &#123;</span><br><span class="line">          self.compileVmodel(node, self.vm, exp)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果是v-bind指令</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(self._isVbind(directive)) &#123;</span><br><span class="line">          self.compileVbind(node, self.vm, exp, directive)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 移除vue指令特性</span></span><br><span class="line">        node.removeAttribute(attrName)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 判断是否Vue指令</span></span><br><span class="line">  _isDirective: <span class="function"><span class="keyword">function</span>(<span class="params">attrName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> attrName.indexOf(<span class="string">'v-'</span>) === <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 判断是否v-on指令</span></span><br><span class="line">  _isVon: <span class="function"><span class="keyword">function</span>(<span class="params">directive</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> directive.indexOf(<span class="string">'on:'</span>) === <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 判断是否v-model指令</span></span><br><span class="line">  _isVmodel: <span class="function"><span class="keyword">function</span>(<span class="params">directive</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> directive.indexOf(<span class="string">'model'</span>) === <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  _isVbind: <span class="function"><span class="keyword">function</span>(<span class="params">directive</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> directive.indexOf(<span class="string">'bind'</span>) === <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 编译v-on指令</span></span><br><span class="line">  compileEvent: <span class="function"><span class="keyword">function</span>(<span class="params">node, vm, exp, directive</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取事件类型</span></span><br><span class="line">    <span class="keyword">var</span> type = directive.split(<span class="string">':'</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="comment">// 获取methods中的对应方法</span></span><br><span class="line">    <span class="keyword">var</span> cb = vm.methods &amp;&amp; vm.methods[exp]</span><br><span class="line">    <span class="comment">// 给节点绑定事件,注意将cb内部this绑定vm</span></span><br><span class="line">    <span class="keyword">if</span>(type &amp;&amp; cb) &#123;</span><br><span class="line">      node.addEventListener(type, cb.bind(vm), <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 编译v-model指令</span></span><br><span class="line">  compileVmodel: <span class="function"><span class="keyword">function</span>(<span class="params">node, vm, exp</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">var</span> value = vm[exp] <span class="comment">// 获取初值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// data -&gt; view</span></span><br><span class="line">    <span class="comment">// 首次渲染设置nodeValue</span></span><br><span class="line">    <span class="keyword">this</span>._updateNodeAttr(node, <span class="string">'value'</span>, value)</span><br><span class="line">    <span class="comment">// 初始化watcher</span></span><br><span class="line">    <span class="comment">// 此步骤会调用data[key]的getter添加依赖项</span></span><br><span class="line">    <span class="keyword">new</span> Watcher(vm, exp, <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">      self._updateNodeAttr(node, <span class="string">'value'</span> ,val)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// view -&gt; data</span></span><br><span class="line">    node.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">      self.vm[exp] = event.target.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 编译v-bind指令</span></span><br><span class="line">  compileVbind: <span class="function"><span class="keyword">function</span>(<span class="params">node, vm, exp, directive</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line">    <span class="comment">// 获取要绑定的特性名</span></span><br><span class="line">    <span class="keyword">var</span> attr = directive.split(<span class="string">':'</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="comment">// 获取初始值</span></span><br><span class="line">    <span class="keyword">var</span> value = vm[exp]</span><br><span class="line">    <span class="comment">// 首次渲染赋值</span></span><br><span class="line">    <span class="keyword">this</span>._updateNodeAttr(node, attr, value)</span><br><span class="line">    <span class="keyword">new</span> Watcher(vm, exp, <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">      self._updateNodeAttr(node, attr, val)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 更新元素的attr特性</span></span><br><span class="line">  _updateNodeAttr: <span class="function"><span class="keyword">function</span>(<span class="params">node, attr, val</span>) </span>&#123;</span><br><span class="line">    node[attr] = <span class="keyword">typeof</span> val === <span class="string">'undefined'</span> ? <span class="string">''</span> : val</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 编译文本节点</span></span><br><span class="line">  compileTextNode: <span class="function"><span class="keyword">function</span>(<span class="params">node, exp</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line">    <span class="comment">// 获取并设置初始渲染的值</span></span><br><span class="line">    node.nodeValue = <span class="keyword">this</span>.vm[exp]</span><br><span class="line">    <span class="comment">// 初始化watcher</span></span><br><span class="line">    <span class="comment">// 此步骤会调用data[key]的getter添加依赖项</span></span><br><span class="line">    <span class="keyword">new</span> Watcher(<span class="keyword">this</span>.vm, exp, <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">      self._updateTextNode(node, val)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 更新文本节点</span></span><br><span class="line">  _updateTextNode: <span class="function"><span class="keyword">function</span>(<span class="params">node, val</span>) </span>&#123;</span><br><span class="line">    node.nodeValue = <span class="keyword">typeof</span> val === <span class="string">'undefined'</span> ? <span class="string">''</span> : val;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://choteewang.github.io/2018/04/07/my-vue-03/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;上篇博客&lt;/a&gt;完成了&lt;code&gt;observer.js&lt;/code&gt;与&lt;code&gt;wat
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>模拟Vue.js的设计模式实现 (三): Observer类 &amp; Watcher类</title>
    <link href="http://yoursite.com/2018/04/07/my-vue-03/"/>
    <id>http://yoursite.com/2018/04/07/my-vue-03/</id>
    <published>2018-04-07T07:56:55.000Z</published>
    <updated>2018-04-24T00:56:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://choteewang.github.io/2018/04/03/my-vue-2/" target="_blank" rel="noopener">上篇博客</a>解释了<code>Vue</code>进行数据代理的过程和<code>Dep</code>类的实现模式, 循着上篇留下的问题: <code>dep</code>实例与外界是如何交互的? 我们开始本篇.</p><p>这个小项目的源码的<code>github</code>地址是: <a href="https://github.com/choteewang/my-vue" target="_blank" rel="noopener">https://github.com/choteewang/my-vue</a></p><h3 id="Observer类"><a href="#Observer类" class="headerlink" title="Observer类"></a>Observer类</h3><p>在之前的<code>index.js</code>中<code>Vue</code>的构造函数中添加调用<code>observer</code>方法的代码, 并将<code>vm.data</code>传入. 需要注意的是在执行这行代码时, 已经执行了<code>vm.init</code>方法, 将<code>data</code>对象的数据通过<code>vm.proxyKeys</code>代理到了<code>vm</code>实例上.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.data = options.data</span><br><span class="line">  <span class="keyword">this</span>.el = options.el</span><br><span class="line">  <span class="keyword">this</span>.methods = options.methods</span><br><span class="line">  <span class="keyword">this</span>.init(<span class="keyword">this</span>.data)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化observer,为vm.data添加观察者模式</span></span><br><span class="line">  observe(<span class="keyword">this</span>.data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开<code>observer.js</code>, 添加<code>observer</code>方法的代码, 它首先检测传入的<code>data</code>对象是否是一个对象(<strong>需要检测的原因是该函数在后面的代码中会被递归调用, 有可能传入一个不是对象的基本类型</strong>), 并将<code>data</code>传递给<code>Observer</code>构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// observer.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 检查data参数是否是一个对象</span></span><br><span class="line">  <span class="keyword">if</span> (!data || <span class="keyword">typeof</span> data !== <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将data传入Observer构造函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Observer(data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们来完成<code>Observer</code>构造函数和其原型, <code>observer</code>实例有一个<code>walk</code>方法, 它遍历了传入的<code>data</code>对象, 并将<code>key</code>与<code>value</code>传入<code>observer</code>实例的<code>defineReactive</code>方法.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// observer.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Observer</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.walk(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Observer.prototype = &#123;</span><br><span class="line">  walk: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">      self.defineReactive(data, key, data[key])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ... Dep类代码</span></span><br></pre></td></tr></table></figure><p>下面我们完成<code>defineReactive</code>方法, 这个方法非常重要, 设计也十分巧妙, 是<code>Vue</code>响应式设计模式的核心方法, 我们需要对其进行详细解读</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// observer.js</span></span><br><span class="line">Observer.prototype = &#123;</span><br><span class="line">  defineReactive: <span class="function"><span class="keyword">function</span>(<span class="params">data, key, val</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 注意参数val是原始数据对象data中的属性key的值data[key]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化一个Dep(Dependency)</span></span><br><span class="line">    <span class="keyword">var</span> dep = <span class="keyword">new</span> Dep()</span><br><span class="line">    <span class="comment">// 对data中的key设置get, set</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">      configurable: <span class="literal">true</span>,</span><br><span class="line">      enumerable: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// 调用getter时添加依赖项到dep实例</span></span><br><span class="line">      get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">          <span class="comment">// 注意dep是通过闭包访问到的</span></span><br><span class="line">          dep.addSub(Dep.target)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 注意val是通过闭包访问到的</span></span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 调用setter时通知所有依赖data[key]的项进行更新</span></span><br><span class="line">      set: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 比较新旧值(注意旧值val是通过闭包获取的)</span></span><br><span class="line">        <span class="keyword">if</span> (newVal !== val) &#123;</span><br><span class="line">          <span class="comment">// 更新data[key]的值</span></span><br><span class="line">          <span class="comment">// 注意val值是通过闭包访问到的</span></span><br><span class="line">          val = newVal</span><br><span class="line">          <span class="comment">// 通知所有依赖进行更新</span></span><br><span class="line">          <span class="comment">// 注意dep是通过闭包访问到的</span></span><br><span class="line">          dep.notify()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 递归调用observer,保证data[key]的子孙也都添加了监听与dep</span></span><br><span class="line">    observe(val)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>defineReactive</code>是一个经典的闭包设计, 闭包主要维护了两个变量: </p><ol><li><code>val</code>, 是<code>data[key]</code>的值</li><li><code>dep</code>, 是<code>Dep</code>的实例, 由于闭包逻辑的关联, <strong>每个<code>dep</code>实例形成了与<code>data[key]</code>的关联</strong></li></ol><p>由于<code>Object.definePropery</code>定义的<code>getter</code>与<code>setter</code>存在对其的引用, 形成闭包, <strong>无论何时调用<code>getter</code>与<code>setter</code>, <code>val</code>和<code>dep</code>都可以被<code>getter</code>和<code>setter</code>访问到</strong>. 方法尾部对<code>data[key]</code>继续调用了<code>observe</code>方法, 形成了递归调用, 保证了<strong><code>data</code>中任何一层的任意一个数据项都有一个对应的<code>dep</code>实例与之相对应</strong>.</p><p>我们可以先忽略<code>getter</code>与<code>setter</code>内部与<code>Dep.target</code>,<code>dep</code>实例之间存在的具体逻辑, 下面介绍<code>Watcher</code>对象后, 这些逻辑会逐渐清晰. 现在可以简单理解为<code>getter</code>用来返回<code>data[key]</code>的值, <code>setter</code>用来设置<code>data[key]</code>的值, 重点是要理解每一项<code>data[key]</code>都有一个<code>dep</code>与之对应.</p><h3 id="Watcher类"><a href="#Watcher类" class="headerlink" title="Watcher类"></a>Watcher类</h3><p>带着上面未完成的问题: <code>getter</code>与<code>setter</code>到底如何与<code>dep</code>, <code>Dep.target</code>交互的, 我们需要在<code>watcher.js</code>中完成<code>Watcher</code>类</p><p><code>Watcher</code>的构造函数接收三个参数, <code>vm</code>实例, <code>exp</code>表示编译时从模板传入的<code>js表达式</code>( 在本项目中, 不支持所有<code>js</code>表达式, 可以看做是代理到<code>vm</code>实例上的<code>data</code>中某个<code>key</code>的值在<code>Vue template</code>中的表达式, 比如<code>vm.a</code>代理的是<code>vm.data.a</code>, 它的表达式在<code>Vue template</code>中是<code>a</code>, 但是<code>a.toString()</code>在本项目中没有做处理 ), <code>cb</code>是编译<code>Vue template</code>时传入的回调函数, 用来绑定<code>watcher</code>与对应的<code>data[key]</code>, 它在<code>watcher</code>依赖项被通知需”更新”(<code>update</code>)时被调用.</p><p>现在我们忽略<code>cb</code>的具体实现, 只单纯的理解为<code>cb</code>是用来更新依赖项用于<code>Vue re-render</code>的, 在<code>vm</code>,<code>exp</code>,<code>cb</code>三个参数被代理到<code>watcher</code>实例上后, <code>watcher</code>执行<code>get</code>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// watcher.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Watcher</span>(<span class="params">vm, exp, cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.vm = vm <span class="comment">// vm实例</span></span><br><span class="line">  <span class="keyword">this</span>.exp = exp <span class="comment">// 相当于vm.data[key]中的key值</span></span><br><span class="line">  <span class="keyword">this</span>.cb = cb <span class="comment">// 数据更新后用于更新视图的回调函数</span></span><br><span class="line">  <span class="keyword">this</span>.val = <span class="keyword">this</span>.get() <span class="comment">// this.val是data[key]的当前值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Watcher.prototype = &#123; <span class="comment">/* ... */</span>&#125;</span><br></pre></td></tr></table></figure><p><code>get</code>方法是继<code>defineReactive</code>后, 又一个<code>Vue</code>设计模式的重要方法, 了解它调用的时机和作用至关重要. 要谨记, <strong><code>watcher.get</code>方法是在每个<code>watcher</code>被实例化时调用的</strong>, 它的返回值是对应的<code>vm.data[key]</code>值, 并被保存在<code>watcher.val</code>中. 我们看看它是如何取到值的.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// watcher.js</span></span><br><span class="line">Watcher.prototype = &#123;</span><br><span class="line">  <span class="comment">// new Watcher时候调用get方法</span></span><br><span class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Dep.target = <span class="keyword">this</span> <span class="comment">// 设置Dep.target静态属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 触发data[key]的getter函数</span></span><br><span class="line">    <span class="comment">// 通过闭包得到dep实例</span></span><br><span class="line">    <span class="comment">// 执行dep.addSub(Dep.target)收集依赖</span></span><br><span class="line">    <span class="comment">// 通过闭包返回data[key]值(val参数)</span></span><br><span class="line">    <span class="keyword">var</span> val = <span class="keyword">this</span>.vm.data[<span class="keyword">this</span>.exp]</span><br><span class="line"></span><br><span class="line">    Dep.target = <span class="literal">null</span> <span class="comment">// 清空Dep.target占用</span></span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>get</code>方法内部, 先将前面注意到的<code>Dep</code>的静态属性<code>Dep.target</code>赋值为<code>watcher</code>实例自己, 然后读取<code>vm.data[key]</code>的值, 这会触发之前学习的<code>defineReactive</code>中的<code>getter</code>并返回<code>data[key]</code>的最新值, <code>get</code>方法的返回值被赋值给<code>watcher.val</code>, <code>Dep.target</code>在获取值后被重新设置为<code>null</code>, 方便下次单例模式调用.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// observer.js中的defineReactive方法</span></span><br><span class="line">defineReactive: <span class="function"><span class="keyword">function</span>(<span class="params">data, key, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dep = <span class="keyword">new</span> Dep()</span><br><span class="line">  <span class="comment">// 对data中的key设置get, set</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">      <span class="comment">// 注意dep是通过闭包访问到的</span></span><br><span class="line">      dep.addSub(Dep.target)</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="comment">// 注意val是通过闭包访问到的</span></span><br><span class="line">      <span class="keyword">return</span> val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>watcher.get</code>方法读取<code>vm.data[key]</code>的值时, <code>defineReactive</code>方法中的<code>getter</code>被触发, 它先判断<code>Dep.target</code>是否存在(已被赋值为<code>watcher</code>), 再<strong>通过闭包获取与<code>data[key]</code>对应的<code>dep</code></strong>, 将<code>watcher</code>添加入<code>dep</code>内部维护的<code>subs</code>订阅者列表, 最后<strong>通过闭包返回对应的data[key]的最新值</strong>, 这个过程被称之为”依赖收集”(<code>collect Dependency</code>)</p><p><code>watcher</code>被实例化的同时, <code>Vue.js</code>同时进行了依赖收集. 理解这一点对后续理解模板编译(<code>compile</code>)至关重要. 下面我们看看<code>watcher</code>被收集后是如何进行更新(<code>update</code>)的. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// observer.js</span></span><br><span class="line">Observer.prototype = &#123;</span><br><span class="line">defineReactive: <span class="function"><span class="keyword">function</span>(<span class="params">data, key, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dep = <span class="keyword">new</span> Dep()</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 调用setter时通知所有依赖data[key]的项进行更新</span></span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 比较新旧值(注意旧值val是通过闭包获取的)</span></span><br><span class="line">      <span class="keyword">if</span> (newVal !== val) &#123;</span><br><span class="line">        <span class="comment">// 更新data[key]的值, 也就是闭包中的参数变量val</span></span><br><span class="line">        <span class="comment">// 此值在调用data[key]的setter时被闭包读取返回</span></span><br><span class="line">        val = newVal</span><br><span class="line">        <span class="comment">// 通知所有依赖进行更新</span></span><br><span class="line">        dep.notify()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">Dep.prototype = &#123;</span><br><span class="line">  notify: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">watcher</span>) </span>&#123;</span><br><span class="line">      watcher.update()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给<code>vm[key]</code>赋值时会触发<code>vm.data[key]</code>的<code>setter</code>, 它<strong>先通过闭包获取<code>data[key]</code>的缓存值</strong>, 与<code>setter</code>接收的参数进行比较, 若值已更新, <strong>通过闭包获取<code>dep</code>实例</strong>, 调用<code>dep</code>的<code>notify</code>方法. <code>dep.notify</code>方法调用所有<code>subs</code>数组中所有<code>data[key]</code>的<code>watcher</code>依赖项, 执行他们各自的<code>update</code>方法. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// watcher.js</span></span><br><span class="line">Watcher.prototype = &#123;</span><br><span class="line">  <span class="comment">// 依赖项需更新时调用update方法</span></span><br><span class="line">  update: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取最新值</span></span><br><span class="line">    <span class="keyword">var</span> newVal = <span class="keyword">this</span>.vm.data[<span class="keyword">this</span>.exp]</span><br><span class="line">    <span class="comment">// 获取缓存值</span></span><br><span class="line">    <span class="keyword">var</span> oldVal = <span class="keyword">this</span>.val</span><br><span class="line">    <span class="keyword">if</span> (newVal !== oldVal) &#123;</span><br><span class="line">      <span class="keyword">this</span>.val = newVal <span class="comment">// 更新缓存值</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 执行回调,用于re-render</span></span><br><span class="line">      <span class="keyword">this</span>.cb.call(<span class="keyword">this</span>.vm, newVal, oldVal)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>watcher.updater</code>方法中, 先通过<code>data[key]</code>的<code>getter</code>拿到最新值, 然后获取上一次调用<code>getter</code>时缓存在<code>wathcer.val</code>中的缓存值, 若需要更新, 调用存储在<code>watcher.cb</code>中的回调函数, 它也是在<code>watcher</code>实例化时绑定的. 最后, 为了模拟使用<code>Vue.js</code>开发时的写法(在<code>methods</code>中可以用<code>this</code>指向<code>vm</code>实例, 在<code>watch</code>的参数中可以获取<code>newVal</code>和<code>oldVal</code>), 我们给<code>cb</code>绑定上下文<code>vm</code>, 并传入最新值和缓存值.</p><p>到目前为止, 还不用太关心<code>re-render</code>的过程, 很明显, 它们是被封装在<code>cb</code>中的, 在下篇会模拟<code>Vue.js</code>编译模板(<code>Compile</code>)的过程, 更多细节将在到时讨论.</p><p>下面先附上<code>observer.js</code>和<code>watcher.js</code>的完整代码</p><h3 id="observer-js-与-watcher-js-完整代码"><a href="#observer-js-与-watcher-js-完整代码" class="headerlink" title="observer.js 与 watcher.js 完整代码"></a>observer.js 与 watcher.js 完整代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// observer.js完整代码</span></span><br><span class="line">Observer.prototype = &#123;</span><br><span class="line">  defineReactive: <span class="function"><span class="keyword">function</span>(<span class="params">data, key, val</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 注意参数val是原始数据对象data中的属性key的值data[key]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化一个Dep(Dependency)</span></span><br><span class="line">    <span class="keyword">var</span> dep = <span class="keyword">new</span> Dep()</span><br><span class="line">    <span class="comment">// 对data中的key设置get, set</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">      configurable: <span class="literal">true</span>,</span><br><span class="line">      enumerable: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// 调用getter时添加依赖项到dep实例</span></span><br><span class="line">      get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">          <span class="comment">// 注意dep是通过闭包访问到的</span></span><br><span class="line">          dep.addSub(Dep.target)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 注意val是通过闭包访问到的</span></span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 调用setter时通知所有依赖data[key]的项进行更新</span></span><br><span class="line">      set: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 比较新旧值(注意旧值val是通过闭包获取的)</span></span><br><span class="line">        <span class="keyword">if</span> (newVal !== val) &#123;</span><br><span class="line">          <span class="comment">// 更新data[key]的值</span></span><br><span class="line">          <span class="comment">// 注意val值是通过闭包访问到的</span></span><br><span class="line">          val = newVal</span><br><span class="line">          <span class="comment">// 通知所有依赖进行更新</span></span><br><span class="line">          <span class="comment">// 注意dep是通过闭包访问到的</span></span><br><span class="line">          dep.notify()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 递归调用observer,保证data[key]的子孙也都添加了监听与dep</span></span><br><span class="line">    observe(val)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// observer.js完整代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!data || <span class="keyword">typeof</span> data !== <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Observer(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Observer</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.walk(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Observer.prototype = &#123;</span><br><span class="line">  walk: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">      self.defineReactive(data, key, data[key])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  defineReactive: <span class="function"><span class="keyword">function</span>(<span class="params">data, key, val</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 注意参数val是原始数据对象data中的属性key的值data[key]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化一个Dep(Dependency)</span></span><br><span class="line">    <span class="keyword">var</span> dep = <span class="keyword">new</span> Dep()</span><br><span class="line">    <span class="comment">// 对data中的key设置get, set</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">      configurable: <span class="literal">true</span>,</span><br><span class="line">      enumerable: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// 调用getter时添加依赖项到dep实例</span></span><br><span class="line">      get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">          dep.addSub(Dep.target)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 调用setter时通知所有依赖data[key]的项进行更新</span></span><br><span class="line">      set: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 比较新旧值(注意旧值val是通过闭包获取的)</span></span><br><span class="line">        <span class="keyword">if</span> (newVal !== val) &#123;</span><br><span class="line">          <span class="comment">// 更新data[key]的值, 也就是闭包中的参数变量val</span></span><br><span class="line">          <span class="comment">// 此值在调用data[key]的setter时被闭包读取返回</span></span><br><span class="line">          val = newVal</span><br><span class="line">          <span class="comment">// 通知所有依赖进行更新</span></span><br><span class="line">          dep.notify()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归调用observer,保证data[key]的子孙也都添加了监听与dep</span></span><br><span class="line">    observe(val)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 每个Dep实例对应一个对应的data[key]依赖</span></span><br><span class="line">  <span class="comment">// 内部维护一个依赖列表subs,每项是一个watcher实例</span></span><br><span class="line">  <span class="comment">// 每个watcher实例都是一个data[key]的依赖项</span></span><br><span class="line">  <span class="comment">// 这些watcher可能是Vue的template中绑定vm.a的位置</span></span><br><span class="line">  <span class="comment">// 此外,也可能是依赖vm.a的位置(比如依赖vm.a的计算属性)</span></span><br><span class="line">  <span class="comment">// vm.a改变时,这些依赖项都要被通知更新(notify)</span></span><br><span class="line">  <span class="keyword">this</span>.subs = []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Dep.prototype = &#123;</span><br><span class="line">  addSub: <span class="function"><span class="keyword">function</span>(<span class="params">watcher</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subs.push(watcher)</span><br><span class="line">  &#125;,</span><br><span class="line">  notify: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">watcher</span>) </span>&#123;</span><br><span class="line">      watcher.update()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Dep.target = <span class="literal">null</span></span><br></pre></td></tr></table></figure><h3 id="深入Vue-js设计模式"><a href="#深入Vue-js设计模式" class="headerlink" title="深入Vue.js设计模式"></a>深入Vue.js设计模式</h3><p>写完<code>observer.js</code>和<code>watcher.js</code>, 让我们再回顾下<code>Vue.js</code>的设计模式, 从局部回到全局后, 为了更形象的理解, 我画了一张图:</p><p><img src="https://i.loli.net/2018/04/22/5adc3ff06cc7a.jpg" alt=""></p><p>从上图中, 我们可以更清晰的理解数据流和设计模式, 值得注意的是, 整个流程有两个入口:</p><p>第一个是<code>new Vue()</code>, 程序从这里开始, 先完成数据代理<code>data proxy</code>, 再完成<code>劫持监听</code>(<code>Object.defineProperty</code>), 将<code>data</code>的每层每项数据全部用闭包封装成寄存器模式, 并给每项<code>getter</code>与<code>setter</code>绑定了对应的<code>dep</code>实例. 程序运行到这里戛然而止.</p><p>第二个入口是<code>new Watcher()</code>, 从这个方向, <code>watcher</code>在实例化的过程中调用了第一个入口设置好的<code>getter</code>, 向对应的<code>data[key]</code>的<code>dep</code>实例中维护的观察者列表<code>subs</code>添加依赖项(<code>watcher</code>自己), 并在<code>data[key]</code>被重新赋值时被<code>dep</code>通知(<code>dep.notify</code>), 进行自我更新<code>watcher.update</code></p><p>那么有两个问题浮现在我们眼前: </p><ul><li><strong>为什么要用多个<code>dep</code>, 而不是维护一个全局<code>dep</code>对象 ?</strong> </li><li><strong>什么时候调用new Watcher() ?</strong></li></ul><p>这就要涉及到”模板编译”(<code>Compile</code>)过程, 将在下篇中介绍.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://choteewang.github.io/2018/04/03/my-vue-2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;上篇博客&lt;/a&gt;解释了&lt;code&gt;Vue&lt;/code&gt;进行数据代理的过程和&lt;code&gt;Dep
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>模拟Vue.js的设计模式实现 (二): 数据代理 &amp; Dep类</title>
    <link href="http://yoursite.com/2018/04/03/my-vue-2/"/>
    <id>http://yoursite.com/2018/04/03/my-vue-2/</id>
    <published>2018-04-02T17:26:53.000Z</published>
    <updated>2018-04-22T17:53:29.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://choteewang.github.io/2018/04/01/my-vue-01/" target="_blank" rel="noopener">上篇博客</a> 详细讲解了<code>双向绑定</code>的原理, 提出了<code>MVVM</code>各自代表部分的抽象含义, 同时强调了在<code>双向绑定</code>实现过程中对于<code>中间变量</code>作用域引用的意义, 对于理解<code>Vue</code>观察者模式, 所有的理论基础已经具备, 从这篇博客开始, 一边理解<code>Vue</code>的核心设计模式, 一边实现一个<code>mini Vue</code>, 最终实现对数个<code>Vue</code>功能的克隆.</p><p>这个小项目的源码的<code>github</code>地址是: <a href="https://github.com/choteewang/my-vue" target="_blank" rel="noopener">https://github.com/choteewang/my-vue</a></p><h3 id="模拟场景"><a href="#模拟场景" class="headerlink" title="模拟场景"></a>模拟场景</h3><p>首先, 我们需要模拟<code>Vue</code>的模板, 新建一个<code>index.html</code>, 如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;triggerTip&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"inputValue"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;inputValue&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"src"</span> <span class="attr">style</span>=<span class="string">"width:300px"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"eventHandle"</span>&gt;</span>点击改变data.src的值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">// 模拟vue的各个模块</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/observer.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/watcher.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/compile.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意在<code>body</code>标签的底部引入了数个<code>js</code>空文件, 它们是需要手写完成的<code>js</code>文件, 分别代表了从<code>Vue</code>源码中抽离出来的某部分, 封装了各自不同的功能和职责, 我们会将其逐渐完成.</p><p>在浏览器中打开刚刚创建完成的<code>index.html</code>文件, 它长这样:</p><p><img src="https://i.loli.net/2018/04/22/5adb741f62e22.jpg" alt=""></p><p>可以看到, 在没有<code>Vue.js</code>解析的<code>template</code>变的完全没有语义化, 我们会一步步完成它, 让它最终具备和<code>Vue</code>一样的功能. 在最后一个引用<code>index.js</code>的<code>script</code>标签下, 再建立一个<code>script</code>标签, 在其中写下初始化<code>Vue</code>实例的代码, 是的, 就像使用真实的<code>Vue.js</code>一样, 一模一样.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面的配置项本身也可看作是ViewModel的一部分</span></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    triggerTip: <span class="string">'waiting for mounted'</span>,</span><br><span class="line">    inputValue: <span class="string">'choteewang'</span>,</span><br><span class="line">    src: <span class="string">'./imgs/react.jpeg'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    eventHandle() &#123;</span><br><span class="line">      <span class="keyword">this</span>.triggerTip = <span class="string">'click function called'</span></span><br><span class="line">      <span class="keyword">this</span>.src = <span class="string">'./imgs/'</span> + (<span class="keyword">this</span>.src.indexOf(<span class="string">'vue'</span>) &gt; <span class="number">0</span> ? <span class="string">'react.jpeg'</span> : <span class="string">'vue.png'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.triggerTip = <span class="string">'mounted function called'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样, <code>Vue</code>入口就完成了, 结合我们上面写的<code>template</code>, 可以发现: 这个小Demo展示了若干通过<code>插值</code>或<code>Vue特性语法</code><strong>单向</strong>或<strong>双向</strong>绑定<code>data</code>数据的<code>Vue template</code>, 其中<code>input</code>用<code>v-model指令</code>双向绑定了<code>data</code>属性下的<code>inputValue</code>变量, <code>img</code>用<code>v-bind指令</code>单向绑定了<code>src</code>变量, <code>button</code>用<code>v-on指令</code>绑定了<code>methods</code>属性下的<code>eventHandle</code>方法, 点击<code>button</code>时可以改变<code>img</code>的<code>src</code>的值, 为了实现这个功能, 添加<code>imgs</code>文件夹, 放入<code>src</code>要引用的图片文件. 最终, 整个页面<code>插值</code>, <code>事件</code>, <code>指令</code>一应俱全, 我们现在就开始实现一个<code>mini Vue</code>, 让这一切语法变的有实际含义.</p><h3 id="数据代理-data-proxy"><a href="#数据代理-data-proxy" class="headerlink" title="数据代理, data proxy"></a>数据代理, data proxy</h3><p>现在正式开始<code>mini-Vue</code>的开发, 在之前提到的<code>index.js</code>中, 新建<code>Vue</code>的<code>构造函数</code>和<code>prototype</code>对象, 将初始化<code>Vue</code>实例时我们自己定义的配置对象以参数名<code>option</code>传入, 并将其属性代理到<code>vm</code>上, 在构造函数的结尾调用原型内的<code>init</code>方法</p><p><code>init</code>方法做了一件事, 遍历<code>vm</code>对象的<code>data</code>属性(注意这里要调用<code>hasOwnProperty</code>方法确保<code>Object.prototype</code>的继承属性不会被遍历到), 并继续调用<code>proxyKeys</code>方法,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.data = options.data</span><br><span class="line">  <span class="keyword">this</span>.el = options.el</span><br><span class="line">  <span class="keyword">this</span>.methods = options.methods</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.init(<span class="keyword">this</span>.data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.prototype = &#123;</span><br><span class="line">  init: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> key</span><br><span class="line">    <span class="keyword">for</span>(key <span class="keyword">in</span> data) &#123;</span><br><span class="line">      <span class="keyword">if</span> (data.hasOwnProperty(key)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.proxyKeys(key, data)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>Vue</code>中, 可以通过<code>vm.a</code>, <code>vm.b</code>来访问和修改代理到<code>Vue</code>中的属性值, 这些数据都是有响应式特性的, 要实现这个功能, 最先做的就是”数据代理”(<code>data proxy</code>). <code>proxyKeys</code>方法完成了这个功能, 它将实例化<code>vm</code>时定义的<code>data</code>对象中的每个<code>key</code>代理到<code>vm</code>实例上.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype = &#123;</span><br><span class="line">  <span class="comment">// ... 省略init方法</span></span><br><span class="line">  proxyKeys(key, data) &#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, key, &#123;</span><br><span class="line">      configurable: <span class="literal">false</span>,</span><br><span class="line">      enumerable: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// 之后所有vm[key]的getter</span></span><br><span class="line">      get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 会转为调用vm.data[key]的getter</span></span><br><span class="line">        <span class="keyword">return</span> self.data[key]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 之后所有vm[key]的setter</span></span><br><span class="line">      set: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data[key] === val) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'return'</span>)</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'changed'</span>)</span><br><span class="line">          <span class="comment">// 会转为调用vm.data[key]的setter</span></span><br><span class="line">          self.data[key] = val</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;) </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>proxyKeys</code>方法通过<code>Object.defineProperty</code>方法完成<code>data proxy</code>过程. 注意, <strong>这里的<code>defineProperty</code>完成的不是双向绑定, 而是数据代理,</strong> 即之后再访问<code>vm.a</code>(触发<code>vm.a</code>的<code>getter</code>), 实际上访问的是<code>vm.data.a</code>(触发<code>vm.data.a</code>的<code>getter</code>), 再修改<code>vm.data.a</code>的值(触发<code>vm.a</code>的<code>setter</code>), 修改的实际是<code>vm.data.a</code>的值(触发<code>vm.data.a</code>的<code>setter</code>). </p><p>完成上述代码后, 用浏览器打开<code>index.html</code>, 打开控制台手动试一下, 可以看到”数据代理”(<code>data proxy</code>)已经被实现, 如下所示:</p><p><img src="https://i.loli.net/2018/04/22/5adb741fbe264.jpg" alt=""></p><h3 id="data-proxy-完整代码"><a href="#data-proxy-完整代码" class="headerlink" title="data proxy 完整代码"></a>data proxy 完整代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;triggerTip&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"inputValue"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;inputValue&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"eventHandle"</span>&gt;</span>触发点击事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/observer.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/watcher.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/compile.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">      data: &#123;</span></span><br><span class="line"><span class="javascript">        triggerTip: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">        inputValue: <span class="string">'choteewang'</span></span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      method: &#123;</span></span><br><span class="line"><span class="undefined">        eventHandle() &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.triggerTip = <span class="string">'click function called'</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.triggerTip = <span class="string">'mounted function called'</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.data = options.data</span><br><span class="line">  <span class="keyword">this</span>.el = options.el</span><br><span class="line">  <span class="keyword">this</span>.methods = options.methods</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.init(<span class="keyword">this</span>.data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.prototype = &#123;</span><br><span class="line">  init: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 遍历data, 将每个data每个属性的第一层代理到vm实例上</span></span><br><span class="line">    <span class="keyword">var</span> key</span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> data) &#123;</span><br><span class="line">      <span class="keyword">if</span> (data.hasOwnProperty(key)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.proxyKeys(key, data)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  proxyKeys(key, data) &#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, key, &#123;</span><br><span class="line">      configurable: <span class="literal">false</span>,</span><br><span class="line">      enumerable: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// 之后所有vm[key]的getter</span></span><br><span class="line">      get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 会转为调用vm.data[key]的getter</span></span><br><span class="line">        <span class="keyword">return</span> self.data[key]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 之后所有vm[key]的setter</span></span><br><span class="line">      set: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'changed'</span>)</span><br><span class="line">        <span class="comment">// 会转为调用vm.data[key]的setter</span></span><br><span class="line">        self.data[key] = val</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dep-Denpendency"><a href="#Dep-Denpendency" class="headerlink" title="Dep(Denpendency)"></a>Dep(Denpendency)</h3><p>完成数据代理后, 我们继续完成<code>Dep</code>类, 在完成这部分前, 你需要具备一些<code>观察者模式</code>的知识, 我有两篇博客专门讲解了观察者模式的思想, 下面放上传送门: </p><p><a href="https://choteewang.github.io/2017/12/23/javascript-%E4%B8%8E-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">javascript 与 “发布/订阅(观察者)模式”</a><br><a href="https://choteewang.github.io/2018/01/04/javascript%E4%B8%8E%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F2/" target="_blank" rel="noopener">javascript 与 ‘发布订阅(观察者)模式’ vol.2 : 自定义事件</a></p><p>如果你了解这方面知识, 下面的<code>Dep</code>类, 就显得十分简单, 打开<code>observer.js</code>写入如下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// observer.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 每个Dep实例对应一个对应的data[key]依赖</span></span><br><span class="line">  <span class="comment">// 内部维护一个依赖列表subs,每项是一个watcher实例</span></span><br><span class="line">  <span class="comment">// 每个watcher实例都是一个data[key]的依赖项</span></span><br><span class="line">  <span class="comment">// 这些watcher可能是Vue的template中绑定vm.a的位置</span></span><br><span class="line">  <span class="comment">// 此外,也可能是依赖vm.a的位置(比如依赖vm.a的计算属性)</span></span><br><span class="line">  <span class="comment">// vm.a改变时,这些依赖项都要被通知更新(notify)</span></span><br><span class="line">  <span class="keyword">this</span>.subs = []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Dep.prototype = &#123;</span><br><span class="line">  addSub: <span class="function"><span class="keyword">function</span>(<span class="params">watcher</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subs.push(watcher)</span><br><span class="line">  &#125;,</span><br><span class="line">  notify: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">watcher</span>) </span>&#123;</span><br><span class="line">      watcher.update()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Dep.target = <span class="literal">null</span></span><br></pre></td></tr></table></figure><p><code>Dep</code>可以理解为<code>Dependency(依赖)</code>, <code>dep</code>实例用来<strong>收集依赖</strong>并<strong>通知更新</strong>, 并采用了<code>观察者</code>设计模式, <code>dep</code>实例维护一个<code>subs</code>数组, 这个<code>subs</code>是<code>subscribers(订阅者们)</code>的意思, 用来存放<code>data</code>上某个被<code>Vue</code>代理的<code>data[key]</code>的所有依赖项. </p><p><code>dep</code>实例有<code>addSub</code>方法和<code>notify</code>方法, 前者用来将依赖项(<code>watcher</code>实例)添加入<code>subs</code>列表, 后者在数据更新时被调用, 遍历<code>subs</code>列表, 并通知(<code>notify</code>)每一个依赖项进行数据更新(<code>update</code>), 以在下一个<code>事件循环</code>(<code>event loop</code>)中完成<code>重渲染</code>(<code>re-render</code>)</p><p><code>subs</code>数组中的每一项都是一个<code>watcher</code>实例, 每个<code>watcher</code>都有一个<code>update</code>方法, 在<code>dep</code>实例被<code>notify</code>时被调用, 用来进行数据更新.</p><p>现在我们还不清楚<code>watcher</code>是什么, 对于<code>dep</code>实例与外界如何交互也一无所知, 也不知道为何在<code>Dep</code>构造函数上有一个静态属性<code>target</code>指向<code>null</code>. 这很正常, <code>Vue</code>的响应式设计是<code>Watcher</code>, <code>Observer</code>, <code>Dep</code>三个类相辅相成共同协作完成的, 之所以先介绍<code>Dep</code>类, 是因为它的代码完全符合<code>观察者模式</code>的设计, 从形式上最容易理解. </p><p>下一篇博客, 我们将带着这些问题完成<code>Observer</code>类与<code>Watcher</code>类, 一切脉络就会渐渐清晰.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://choteewang.github.io/2018/04/01/my-vue-01/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;上篇博客&lt;/a&gt; 详细讲解了&lt;code&gt;双向绑定&lt;/code&gt;的原理, 提出了&lt;code&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>模拟Vue.js的设计模式实现 (一): 双向绑定 &amp; MVVM</title>
    <link href="http://yoursite.com/2018/04/01/my-vue-01/"/>
    <id>http://yoursite.com/2018/04/01/my-vue-01/</id>
    <published>2018-03-31T18:59:54.000Z</published>
    <updated>2018-04-22T12:27:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>做了好几个<code>Vue</code>项目, 最近研究了部分<code>Vue</code>源码, 尤其对<code>Vue</code>的设计模式这部分做了认真的研读. 感叹设计巧妙的同时, 希望写些东西提高自己.</p><p>这个系列的博客旨在从最简易的双向绑定原理开始, 一步步实现一个能实现部分<code>Vue</code>部分功能的<code>&quot;mini Vue&quot;</code>, 希望把阅读源码的收获在这个小项目中体现出来.</p><p>这个小项目的设计模式模拟了<code>Vue.js</code>的实现思想. 在模板编译部分, 去繁就简, 拿掉了<code>Vue</code>源码中<code>render</code>函数和<code>VNode</code>,<code>Diff算法</code>这部分内容, 实现了一个同样功能的编译方法, 模拟了<code>DOM</code>节点在形成和更新过程中经过的处理, 主要体现了<code>new Watcher</code>触发的时机, 让我们更有效率的理解<code>Vue.js</code>的设计模式.</p><p>下面让我们从基本的双向绑定开始.</p><h3 id="什么是双向绑定-two-way-bindings-什么是MVVM"><a href="#什么是双向绑定-two-way-bindings-什么是MVVM" class="headerlink" title="什么是双向绑定(two-way-bindings)? 什么是MVVM ?"></a>什么是双向绑定(two-way-bindings)? 什么是MVVM ?</h3><p>双向绑定(<code>two-way-binding</code>): 即将视图和数据绑定在一个数据模型上, 修改此数据模型(<code>Model</code>)会触发视图(<code>View</code>)的更新, 在视图中通过交互修改视图中显示的数据(<code>input元素</code>)会更新数据模型(<code>Model</code>)</p><p><code>MVVM</code>中的<code>ViewModel</code>的含义比较模糊, 浅显狭义的讲, 所有<code>Model</code>和<code>View</code>中间的桥梁都是<code>View Model</code>的一部分, 比如给<code>Vue</code>组件模板字符串中表示绑定指令的<code>attr</code>, 比如在创建<code>Vue</code>实例时传递的配置对象中绑定的<code>methods</code>, 都可以理解为<code>View Model</code>的一部分. <code>Model</code>和<code>View</code>在绑定过程中要借用一个<code>中间变量</code>来进行数据交换, 在<code>Vue</code>的实现过程中, 这个中间变量是通过<code>闭包</code>来实现的, 我们将后文在慢慢深入.</p><p><img src="https://i.loli.net/2018/04/21/5adaa007d0c99.png" alt="6519022-b42f7711343d00d4"></p><h3 id="双向绑定的核心API及基本原理"><a href="#双向绑定的核心API及基本原理" class="headerlink" title="双向绑定的核心API及基本原理"></a>双向绑定的核心API及基本原理</h3><p>下面介绍实现双向绑定的核心API, <code>MVVM</code>通过<code>Object.defineProperty</code>实现<code>data -&gt; view</code> 的绑定, 通过<code>DOM</code>元素的<code>input</code>或<code>change</code>事件来实现<code>view -&gt; data</code>的绑定. 如下图所示:</p><p><img src="https://i.loli.net/2018/04/21/5ada38416f040.jpg" alt=""></p><p>如果对<code>Object.defineProperty</code>这个语法不熟, 这是一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener">MDN传送门</a>, 可以取学习一下这个API的语法. </p><p>上个小例子演示下, 一个<code>input</code>输入框与一个全局对象<code>data</code>的<code>inputValue</code>属性进行双向数据绑定, 这个例子能清楚的展示双向绑定的基本API, 以及绑定过程中对<code>中间变量</code>的依赖.</p><p>先写一个<code>html</code>文件,它的<code>DOM</code>结构如下所示:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"two-way-binding"</span> <span class="attr">style</span>=<span class="string">"color: red"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">input输入框的value绑定了全局变量data的inputValue, 它现在的值是</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: red"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们在<code>body</code>标签底部添加<code>script</code>标签加入js代码如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取dom</span></span><br><span class="line"><span class="keyword">var</span> input = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">var</span> span = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'span'</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="comment">// 定义viewmodel</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;&#125;</span><br><span class="line"><span class="comment">// 定义数据原型</span></span><br><span class="line"><span class="keyword">var</span> inputValue = <span class="string">''</span></span><br><span class="line"><span class="comment">// data -&gt; view</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(data, <span class="string">'inputValue'</span>, &#123;</span><br><span class="line">  configurable: <span class="literal">false</span>,</span><br><span class="line">  enumerable: <span class="literal">true</span>,</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> inputValue</span><br><span class="line">  &#125;,</span><br><span class="line">  set: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    inputValue = val</span><br><span class="line">    input.value = inputValue <span class="comment">// data -&gt; view</span></span><br><span class="line">    showViewModel()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// view -&gt; data</span></span><br><span class="line">input.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  data.inputValue = event.target.value <span class="comment">// view -&gt; data</span></span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showViewModel</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  span.innerText = data.inputValue</span><br><span class="line">&#125;</span><br><span class="line">showViewModel()</span><br></pre></td></tr></table></figure><p>打开<code>html</code>文件运行, 发现在输入框中进行文本输入已可以与<code>data.inputValue</code>进行双向绑定, 打开控制台, 给<code>data.inputValue</code>赋值时, 也可触发<code>input</code>输入框的<code>value</code>值改变. 如下图所示:</p><p><img src="https://i.loli.net/2018/04/21/5ada384184fb5.png" alt="1524235700383"></p><p>这个例子中, 在控制台用<code>data.inputValue = &quot;xxx&quot;</code>改变<code>Model</code>的值时, <code>Object.defineProperty</code>定义的<code>setter</code>将最新值传递给<code>inputValue</code>中间变量, 同时让<code>input</code>元素<code>value</code>特性的值等于这个中间变量<code>inputValue</code>继而达到了将最新的值传递给<code>input</code>元素<code>value</code>特性的目的</p><p>同时, 中间变量<code>inputValue</code>并不只有<code>setter</code>中的值传递作用, <code>input</code>输入框的<code>value</code>值改变后, 在控制台打印<code>data.inputValue</code>会调用<code>getter</code>, 返回中间变量<code>inputValue</code>的值, 通过这个方法可以在开发过程中拿到<code>Model</code>的最新值, 这个中间变量<code>inputValue</code>是<code>ViewModel</code>的重要组成部分, <code>Vue.js</code>的观察者模式中复杂闭包也是以这种原理为基础实现的.</p><p>上述例子只是双向绑定的基本原理, <code>Vue</code>中的双向绑定没有这么简单, 其中还包括了”数据代理”(<code>data proxy</code>), “属性寄存器监听”(<code>Object.defineProperty(data, key, {get, set})</code>), “收集依赖”(<code>collect Denpendency</code>), “通知变化”(<code>notify</code>)等一系列的内容. 这篇博客只是讲了一个基本的双向绑定原理.</p><p>理解了双向绑定的原理和<code>MVVM</code>的概念, 接下来就要开始实现一个<code>mini-Vue</code>了, 为了让接下来的<code>&quot;数据代理&quot;</code>部分 (也用到了<code>DefineProperty()</code>,但和此篇所讲应用原理不同) 不和双向绑定的原理混淆, 重开一篇博客继续实现<code>数据代理</code>部分.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;做了好几个&lt;code&gt;Vue&lt;/code&gt;项目, 最近研究了部分&lt;code&gt;Vue&lt;/code&gt;源码, 尤其对&lt;code&gt;Vue&lt;/code&gt;的设计模式这部分做了认真的研读. 感叹设计巧妙的同时, 希望写些东西提高自己.&lt;/p&gt;
&lt;p&gt;这个系列的博客旨在从最简易的双向绑定原
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于table布局的那些事</title>
    <link href="http://yoursite.com/2018/03/25/table%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2018/03/25/table布局/</id>
    <published>2018-03-25T03:56:27.000Z</published>
    <updated>2018-05-05T08:43:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table布局"><a href="#table布局" class="headerlink" title="table布局"></a>table布局</h2><p>在做移动端布局时经常遇到table布局的技巧, 花了一些时间总结了一下, 写了一些常用案例, 方便学习的正反馈.</p><p>先从<code>table</code>布局的原理说起</p><h3 id="table（display-table）"><a href="#table（display-table）" class="headerlink" title="table（display:table）"></a>table（display:table）</h3><ul><li><strong>table可设置宽高</strong>、<code>margin</code>、<code>border</code>、<code>padding</code>等属性。单位可用px，百分比。</li><li>table的大小默认由<code>内容</code>的宽高撑开，若table设置了宽度，<strong>宽度默认被它里面的td平分</strong>，若给一个<code>td</code>设置宽度，<code>table</code>剩余宽度被其他的<code>td</code>平分（类似<code>flex</code>布局）</li><li><strong>table设置的高度只是min-height</strong>，当内容的高度高于设置的高度时，table的高度会被撑高。</li></ul><h3 id="tr（display-table-row）"><a href="#tr（display-table-row）" class="headerlink" title="tr（display:table-row）"></a>tr（display:table-row）</h3><ul><li><strong>给<code>tr</code>设置高度只是<code>min-height</code></strong>，默认平分<code>table</code>的高度。</li><li><code>td</code>默认高度继承<code>tr</code>高度，若给一<code>td</code>设置了高度，其他<code>td</code><strong>同样变高</strong>。适合多列等高布局</li><li><strong>设置宽度、margin均无效</strong></li></ul><h3 id="td（display-table-cell）"><a href="#td（display-table-cell）" class="headerlink" title="td（display:table-cell）"></a>td（display:table-cell）</h3><ul><li><strong><code>td</code>默认继承<code>table</code>高度，平分<code>table</code>的宽度</strong></li><li>若<code>table（display:table）</code>不存在，给<code>td</code>设置的宽高不能用百分比只能用准确的数值</li><li>给<code>td</code>设置<code>vertical-align: middle</code>; <code>td</code>元素里面(除<code>float</code>、<code>position:absolute</code>)所有的块级、非块级元素都会相对于<code>td</code>垂直居中</li><li>给<code>td</code>设置<code>text-align: center</code>; <code>td</code>元素里面所有非<code>block</code>元素(除<code>float</code>、<code>position:absolute</code>)都会相对于<code>td</code>水平居中，虽然<code>block</code>元素不居中，但其中的文字或<code>inline</code>元素会水平居中</li></ul><h2 id="一些案例"><a href="#一些案例" class="headerlink" title="一些案例"></a>一些案例</h2><p><strong>注意: 案例尽可能的精简, 省略了不必要的css样式代码</strong></p><h3 id="多行文本-图片-垂直居中"><a href="#多行文本-图片-垂直居中" class="headerlink" title="多行文本(图片)垂直居中"></a>多行文本(图片)垂直居中</h3><p><img src="https://i.loli.net/2018/05/05/5aed2b475802a.jpg" alt=""></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 垂直居中(兼容多行文本) </span></span><br><span class="line"><span class="selector-class">.container</span> </span><br><span class="line">  <span class="attribute">display</span> table</span><br><span class="line"><span class="selector-class">.box</span> </span><br><span class="line">  <span class="attribute">display</span> table-cell</span><br><span class="line">  <span class="attribute">vertical-align</span> middle</span><br><span class="line">  <span class="attribute">text-align</span> center</span><br></pre></td></tr></table></figure><h3 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h3><p><img src="https://i.loli.net/2018/05/05/5aed2b4776a54.jpg" alt=""></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 响应式布局</span></span><br><span class="line"><span class="selector-class">.container</span> </span><br><span class="line">  <span class="attribute">display</span> table</span><br><span class="line">  <span class="attribute">width</span> <span class="number">100%</span></span><br><span class="line"><span class="selector-class">.box</span> </span><br><span class="line">  <span class="attribute">display</span> table-cell</span><br><span class="line"><span class="comment">// 单独设置了某些列宽, 其他元素会占满宽度</span></span><br><span class="line">.<span class="attribute">left</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30px</span></span><br><span class="line"><span class="selector-class">.right</span> </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span></span><br></pre></td></tr></table></figure><h3 id="一行多列水平垂直居中"><a href="#一行多列水平垂直居中" class="headerlink" title="一行多列水平垂直居中"></a>一行多列水平垂直居中</h3><p><img src="https://i.loli.net/2018/05/05/5aed2b47759d9.jpg" alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>我是item1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>我是item2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>我是item3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> </span><br><span class="line">  <span class="attribute">display</span> table-cell</span><br><span class="line">  <span class="attribute">vertical-align</span> middle</span><br><span class="line">  <span class="attribute">width</span> <span class="number">400px</span></span><br><span class="line">  <span class="attribute">height</span> <span class="number">100px</span></span><br><span class="line">  <span class="attribute">text-align</span> center</span><br><span class="line"><span class="selector-class">.box</span> </span><br><span class="line">  <span class="attribute">display</span> inline-block</span><br><span class="line">  <span class="attribute">width</span> <span class="number">100px</span></span><br><span class="line">  <span class="attribute">height</span> <span class="number">60px</span></span><br></pre></td></tr></table></figure><h3 id="左右浮动元素垂直居中"><a href="#左右浮动元素垂直居中" class="headerlink" title="左右浮动元素垂直居中"></a>左右浮动元素垂直居中</h3><blockquote><p>由于<code>table</code>布局对浮动元素无效, 要居中浮动元素时, 需在外套一个<code>inline-block</code></p></blockquote><p><img src="https://i.loli.net/2018/05/05/5aed2b4774ce1.jpg" alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float left"</span>&gt;</span>我是左浮动元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float right"</span>&gt;</span>我是右浮动元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> </span><br><span class="line">  <span class="attribute">display</span> table-cell</span><br><span class="line">  <span class="attribute">vertical-align</span> middle</span><br><span class="line">  <span class="attribute">width</span> <span class="number">200px</span></span><br><span class="line">  <span class="attribute">height</span> <span class="number">40px</span></span><br><span class="line">  <span class="selector-class">.inner</span> </span><br><span class="line">    <span class="comment">// 清除浮动, 使inner包含浮动元素</span></span><br><span class="line">    <span class="attribute">clear</span> both</span><br><span class="line">    <span class="comment">// 设置inline-block</span></span><br><span class="line">    <span class="attribute">display</span> inline-block</span><br><span class="line">    <span class="attribute">width</span> <span class="number">150px</span></span><br><span class="line">  <span class="selector-class">.float</span> </span><br><span class="line">    <span class="attribute">width</span> <span class="number">50px</span></span><br><span class="line">    <span class="attribute">height</span> <span class="number">25px</span></span><br><span class="line">  .<span class="attribute">left</span></span><br><span class="line">    <span class="attribute">float</span> left</span><br><span class="line">  <span class="selector-class">.right</span> </span><br><span class="line">    <span class="attribute">float</span> right</span><br></pre></td></tr></table></figure><h3 id="多列等高布局"><a href="#多列等高布局" class="headerlink" title="多列等高布局"></a>多列等高布局</h3><p><img src="https://i.loli.net/2018/05/05/5aed2b479f3f1.jpg" alt=""></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.container</span><br><span class="line">  <span class="attribute">display</span> table-row/table</span><br><span class="line">  <span class="attribute">width</span> <span class="number">100%</span></span><br><span class="line"><span class="selector-class">.box</span> </span><br><span class="line">  <span class="attribute">display</span> table-cell</span><br></pre></td></tr></table></figure><h3 id="sticky-footer"><a href="#sticky-footer" class="headerlink" title="sticky-footer"></a>sticky-footer</h3><blockquote><p><code>sticky-footer</code>的两个需求</p></blockquote><ul><li>高度不足时<code>footer</code>在页面最底部</li><li>高度超出时<code>footer</code>按正常布局被挤下去</li></ul><p><img src="https://i.loli.net/2018/05/05/5aed2b478bb08.jpg" alt=""></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sticky-footer</span></span><br><span class="line"><span class="comment">// 高度不足时footer在页面最底部</span></span><br><span class="line"><span class="comment">// 高度超出时footer按正常布局被挤下去</span></span><br><span class="line"><span class="selector-class">.container</span> </span><br><span class="line">  <span class="attribute">display</span> table</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="selector-class">.main</span> </span><br><span class="line">  <span class="attribute">height</span> <span class="number">100%</span></span><br><span class="line"><span class="selector-class">.footer</span> </span><br><span class="line">  <span class="attribute">display</span> table-row</span><br><span class="line">  <span class="comment">// 页脚必须固定高度</span></span><br><span class="line">  <span class="attribute">height</span> <span class="number">10px</span></span><br></pre></td></tr></table></figure><h3 id="两栏布局-左侧固定-右侧自适应"><a href="#两栏布局-左侧固定-右侧自适应" class="headerlink" title="两栏布局, 左侧固定, 右侧自适应"></a>两栏布局, 左侧固定, 右侧自适应</h3><p><img src="https://i.loli.net/2018/05/05/5aed2b476db83.jpg" alt=""></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> </span><br><span class="line">  <span class="attribute">display</span> table</span><br><span class="line">  <span class="attribute">width</span> <span class="number">100%</span></span><br><span class="line"><span class="selector-class">.left</span>, .<span class="attribute">right</span></span><br><span class="line">  <span class="attribute">display</span> table-cell</span><br><span class="line">  <span class="attribute">height</span> <span class="number">100%</span></span><br><span class="line"><span class="selector-class">.left</span> </span><br><span class="line">  <span class="attribute">width</span> <span class="number">30px</span></span><br><span class="line">.<span class="attribute">right</span></span><br><span class="line">  <span class="comment">// 空</span></span><br></pre></td></tr></table></figure><h3 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h3><p><img src="https://i.loli.net/2018/05/05/5aed2b478edab.jpg" alt=""></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 圣杯布局</span></span><br><span class="line">body</span><br><span class="line">  <span class="attribute">display</span> table</span><br><span class="line">  <span class="attribute">width</span> <span class="number">100%</span></span><br><span class="line">.header</span><br><span class="line">  <span class="attribute">display</span> table-row</span><br><span class="line">  hegiht <span class="number">10px</span></span><br><span class="line">.main</span><br><span class="line">  <span class="attribute">height</span> <span class="number">100%</span></span><br><span class="line">  <span class="attribute">display</span> table;</span><br><span class="line">  <span class="attribute">width</span> <span class="number">100%</span></span><br><span class="line">  <span class="selector-class">.left</span>, .<span class="attribute">right</span></span><br><span class="line">    <span class="attribute">display</span> table-cell</span><br><span class="line">    <span class="attribute">width</span> <span class="number">10px</span></span><br><span class="line"> .article</span><br><span class="line">    <span class="attribute">display</span> table-cell</span><br><span class="line">.footer</span><br><span class="line">  <span class="attribute">display</span> table-row</span><br><span class="line">  <span class="attribute">height</span> <span class="number">10px</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;table布局&quot;&gt;&lt;a href=&quot;#table布局&quot; class=&quot;headerlink&quot; title=&quot;table布局&quot;&gt;&lt;/a&gt;table布局&lt;/h2&gt;&lt;p&gt;在做移动端布局时经常遇到table布局的技巧, 花了一些时间总结了一下, 写了一些常用案例, 方便学
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基于Vue,Hotcss+Px2rem自适应设计,Webpack+Npm script自动化构建的jd-finance web app</title>
    <link href="http://yoursite.com/2018/03/20/vue-jd/"/>
    <id>http://yoursite.com/2018/03/20/vue-jd/</id>
    <published>2018-03-20T09:15:55.000Z</published>
    <updated>2018-03-20T09:19:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="A-jd-finance-web-app-based-on-Vue-hotcss-px2rem"><a href="#A-jd-finance-web-app-based-on-Vue-hotcss-px2rem" class="headerlink" title="A jd-finance web app based on Vue, hotcss + px2rem"></a>A jd-finance web app based on Vue, hotcss + px2rem</h1><h3 id="Tech"><a href="#Tech" class="headerlink" title="Tech"></a>Tech</h3><ul><li>Vue 2.5+</li><li>Vue-router </li><li>sass</li><li>css-modules</li><li>hotcss</li><li>px2rem</li><li>full-ES6-syntax-cover</li><li>eslint</li><li>vue-awesome-swiper</li><li>webpack </li><li>npm scirpts</li></ul><h3 id="自适应方案设计"><a href="#自适应方案设计" class="headerlink" title="自适应方案设计"></a>自适应方案设计</h3><ul><li>利用<code>hotcss</code>动态调整<code>meta</code>标签和<code>dpr</code>, 动态设定<code>html</code>标签的<code>font-size</code>(<code>Rem布局实现</code>)</li><li>利用<code>px2rem-loader</code>在自动化构建时自动转换<code>scss</code>的css尺寸</li><li>一份代码, 所有移动设备动态适配</li></ul><p>详情请移步我的技术博客: <a href="https://choteewang.github.io/2018/03/20/vue-jd%E8%87%AA%E9%80%82%E5%BA%94%E6%96%B9%E6%A1%88%E8%AE%BE%E8%AE%A1/" target="_blank" rel="noopener">记一次vue项目的自适应方案设计 hotcss + px2rem </a></p><h3 id="自动化构建"><a href="#自动化构建" class="headerlink" title="自动化构建"></a>自动化构建</h3><blockquote><p>使用<code>webpack</code>与<code>npm script</code>进行自动化构建, 手写所有代码</p></blockquote><ul><li>处理<code>vue</code>,<code>js</code>,<code>css</code>,<code>scss</code></li><li>处理图片,开启<code>Base64</code></li><li>自动清理<code>dist</code>目录</li><li>热重载</li><li>提取<code>vendors</code>与<code>manifest</code></li><li><code>Js-Uglify</code></li><li><code>Css-Minify</code></li><li>区分<code>开发环境</code>和<code>生产环境</code></li><li><code>生产环境</code>提取css文件</li><li><code>开发环境</code>开启<code>js-SourceMap</code></li><li><code>开发环境</code>开启<code>css-SourceMap</code></li><li><code>eslint</code></li></ul><h3 id="css模块化"><a href="#css模块化" class="headerlink" title="css模块化"></a>css模块化</h3><p>使用css模块化, 对公用模板组件的css进行抽象, 后续开发完全继承于已抽象的css模块</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">'layout'</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> btn(<span class="variable">$size</span>:<span class="number">14px</span>,<span class="variable">$color</span>:<span class="number">#fff</span>,<span class="variable">$bgcolor</span>:<span class="number">#F04752</span>,<span class="variable">$padding</span>:<span class="number">5px</span>,<span class="variable">$radius</span>:<span class="number">5px</span>) &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="variable">$padding</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">$bgcolor</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="variable">$radius</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="variable">$bgcolor</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$size</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> list(<span class="variable">$direction</span>:column) &#123;</span><br><span class="line">  @<span class="keyword">include</span> flex(<span class="variable">$direction</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> panel(<span class="variable">$bgcolor</span>:<span class="number">#fff</span>,<span class="variable">$padding</span>:<span class="number">0</span>,<span class="variable">$margin</span>:<span class="number">20px</span> 0,<span class="variable">$height</span>:<span class="number">112px</span>,<span class="variable">$txtPadding</span>:<span class="number">0</span> 32px,<span class="variable">$color</span>:<span class="number">#333</span>,<span class="variable">$fontSize</span>:<span class="number">32px</span>) &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">$bgcolor</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="variable">$padding</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="variable">$margin</span>;</span><br><span class="line">  &gt; <span class="selector-tag">h4</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">$height</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="variable">$height</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="variable">$txtPadding</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">$fontSize</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="vue组件模块化"><a href="#vue组件模块化" class="headerlink" title="vue组件模块化"></a>vue组件模块化</h3><p>抽象了<code>slider</code>, <code>btn</code>, <code>panel</code> 三个js组件模块, 后续所有组件开发继承于已抽象组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">// slider.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">:class</span>=<span class="string">"cname"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">swiper</span> <span class="attr">:options</span>=<span class="string">"options"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">swiper-slide</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">:key</span>=<span class="string">"item.href"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name:item.href&#125;"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"item.src"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">swiper-slide</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-pagination"</span> <span class="attr">v-if</span>=<span class="string">"options.pagination"</span> <span class="attr">slot</span>=<span class="string">"pagination"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; swiper, swiperSlide &#125; <span class="keyword">from</span> <span class="string">'vue-awesome-swiper'</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  components: &#123;</span></span><br><span class="line"><span class="undefined">    swiper,</span></span><br><span class="line"><span class="undefined">    swiperSlide</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  props: &#123;</span></span><br><span class="line"><span class="undefined">    cname: &#123;</span></span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    options: &#123;</span></span><br><span class="line"><span class="javascript">      type: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">          autoplay: &#123;</span></span><br><span class="line"><span class="undefined">            delay: 3000,</span></span><br><span class="line"><span class="javascript">            disableOnInteraction: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">            stopOnLastSlide: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="javascript">          loop: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">          disableOnInteraction: <span class="literal">false</span>,</span></span><br><span class="line"><span class="undefined">          pagination: &#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'.swiper-pagination'</span></span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    items: &#123;</span></span><br><span class="line"><span class="javascript">      type: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> []</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">@<span class="keyword">import</span> <span class="string">'~swiper/dist/css/swiper.css'</span>;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// panel.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">:class</span>=<span class="string">"[panelClass,cname]"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>-&#123;&#123;title&#125;&#125;-<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  props: &#123;</span></span><br><span class="line"><span class="undefined">    cname: &#123;</span></span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    title: &#123;</span></span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  data() &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      panelClass: <span class="string">'panel'</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">@<span class="keyword">import</span> <span class="string">'../../css/element'</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.panel</span> &#123;</span></span><br><span class="line"><span class="css">  @<span class="keyword">include</span> panel;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h3><p><img src="https://i.loli.net/2018/03/20/5ab0cfc0b90e3.gif" alt="1"></p><p><img src="https://i.loli.net/2018/03/20/5ab0cfc16c581.gif" alt="2"></p><p><img src="https://i.loli.net/2018/03/20/5ab0cfc352d89.gif" alt="3"></p><p><img src="https://i.loli.net/2018/03/20/5ab0cfc14ecd8.gif" alt="4"></p><p><img src="https://i.loli.net/2018/03/20/5ab0cfc3b4594.gif" alt="5"></p><h3 id="github"><a href="#github" class="headerlink" title="github:"></a>github:</h3><p><a href="https://github.com/choteewang/vue-jd" target="_blank" rel="noopener">https://github.com/choteewang/vue-jd</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;A-jd-finance-web-app-based-on-Vue-hotcss-px2rem&quot;&gt;&lt;a href=&quot;#A-jd-finance-web-app-based-on-Vue-hotcss-px2rem&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hotcss + px2rem 实现 vue 项目的自适应方案设计 </title>
    <link href="http://yoursite.com/2018/03/20/vue-jd%E8%87%AA%E9%80%82%E5%BA%94%E6%96%B9%E6%A1%88%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/2018/03/20/vue-jd自适应方案设计/</id>
    <published>2018-03-20T09:05:45.000Z</published>
    <updated>2018-03-20T12:06:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自适应方案设计"><a href="#自适应方案设计" class="headerlink" title="自适应方案设计"></a>自适应方案设计</h2><p>做到一份代码, 构建出的app适配各种设备, 根据设备的屏幕尺寸, 自动缩放所有css尺寸, 让所有设备的浏览体验基本接近</p><h3 id="核心实现原理"><a href="#核心实现原理" class="headerlink" title="核心实现原理:"></a>核心实现原理:</h3><ul><li><code>hotcss</code>利用<code>viewport</code>和<code>设备像素比(dpr)</code>调整html标签的<code>font-size</code>(Rem基准像素)</li><li>使用<code>px2rem-loader</code>实现<code>px</code>向<code>rem</code>的转化</li></ul><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://i.loli.net/2018/03/20/5ab0cfc3b4594.gif" alt="https://i.loli.net/2018/03/20/5ab0cfc3b4594.gif"></p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><blockquote><p><code>css像素</code>, <code>逻辑像素</code>, <code>设备像素</code>, <code>物理像素</code>, <code>设备像素比</code><br><a href="https://github.com/jawil/blog/issues/21" target="_blank" rel="noopener">https://github.com/jawil/blog/issues/21</a></p></blockquote><ul><li><code>css像素</code> 就是 <code>设备独立像素(dip)</code></li><li><code>设备像素</code> : <code>设备像素</code> 就是 <code>物理像素</code> 若在retina屏幕上的<code>设备像素比</code>=<code>2</code>, 则显示1px<code>css像素</code>需要2个<code>物理像素</code>, 显示宽高都是1px(<code>css像素</code>)的方块需要2*2个(<code>设备像素</code>)</li><li><code>设备像素比(dpr)</code>: <ul><li>广义定义: <code>设备像素</code>(<code>物理像素</code>) / <code>设备独立像素(dip)</code>(<code>css像素</code>) , </li><li>同义定义: <code>屏幕横向设备像素</code> / <code>理想视口的宽</code></li><li>获取方式: <code>window.devicePixelRatio</code></li><li>与<code>initial-scale</code>的关系: 互为倒数</li></ul></li></ul><p><img src="https://i.loli.net/2018/03/20/5ab0ceccad75e.jpg" alt="15213620087815"></p><blockquote><p>viewport</p></blockquote><p>viewport分三类: <code>layout viewport</code>, <code>visual viewport</code>, <code>ideal viewport</code></p><ul><li><code>layout viewport</code><br><img src="https://i.loli.net/2018/03/20/5ab0ceccc9890.jpg" alt="15213628251435"></li></ul><p>这个<code>layout viewport</code>的宽度可以通过<code>document.documentElement.clientWidth</code> 来获取。</p><ul><li><code>ideal viewport</code> 与 <code>visual viewport</code><br>在<code>meta</code>标签的<code>user-scalable=no</code>时,<code>ideal viewport</code>就是<code>visual viewport</code>, 宽度是屏幕宽度<code>window.innerWidth</code><br><img src="https://i.loli.net/2018/03/20/5ab0ceccd2587.jpg" alt="15213632335178"></li></ul><p><code>meta</code> 标签的<code>width=device-width</code>其实就是将<code>ideal-viewport</code>的宽度赋值给了<code>layout viewport</code><br><img src="https://i.loli.net/2018/03/20/5ab0ceccdc066.jpg" alt="15213640815087"></p><h3 id="核心工作原理"><a href="#核心工作原理" class="headerlink" title="核心工作原理"></a>核心工作原理</h3><blockquote><p><code>hotcss</code>利用<code>viewport</code>和<code>设备像素比(dpr)</code>调整基准像素</p></blockquote><p><a href="https://github.com/imochen/hotcss" target="_blank" rel="noopener">hotcss github地址</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// hotcss打包方式</span></span><br><span class="line">entry: &#123;</span><br><span class="line">  app: [<span class="string">'./app/js/main.js'</span>, <span class="string">'./app/js/hotcss.js'</span>],</span><br><span class="line">  vendor: [<span class="string">'vue'</span>, <span class="string">'vue-router'</span>, <span class="string">'vue-awesome-swiper'</span>]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>rem</li></ul><p><code>设计稿fontSize基准值(remUnit)</code>/<code>设计稿物理像素宽度</code> = <code>当前设备html标签fontSize值(所求)</code>/当前设备<code>物理像素宽度</code></p><p><img src="https://i.loli.net/2018/03/20/5ab0ceccd1164.jpg" alt="15213642316299"></p><p>对于上图的解释: </p><ul><li>左面是<code>设计稿</code>, 右面是<code>设备</code></li><li><code>设计稿物理像素宽度</code>是 320px(<code>css像素</code>丈量下的<code>ideal port</code>宽度) * 2(<code>dpr</code>) = 640(<code>物理像素</code>)</li><li>若此时适配到了一个<code>ideal port</code>宽度为375px,<code>dpr</code>=3的设备</li><li>则<code>设备物理像素宽度</code> = 375px(<code>css像素</code>丈量下的<code>ideal port</code>宽度) * 3(<code>dpr</code>) = 1125(<code>物理像素</code>)</li><li>与<code>rem</code>关系, <code>remUnit</code>(设计稿html标签fontSize基准值)/ <code>设备html标签fontSize值</code> = <code>设计稿物理像素宽度</code> / <code>设备物理像素宽度</code></li></ul><p><strong>若此时左面设计稿的<code>html</code>标签的<code>font-size</code>是40px, 则hotcss应将右面设计稿的<code>html</code>标签的<code>font-size</code>计算为:</strong><br><strong><code>(375 * 3) / (320 * 2) * 40 = 70.3125</code>, 从而达到等比缩放的效果</strong></p><blockquote><p>利用px2rem自动转换css单位</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">  loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    loaders: &#123;</span><br><span class="line">      <span class="comment">// npm install px2rem-loader</span></span><br><span class="line">      <span class="comment">// 叹号分隔loader, 从右向左加载</span></span><br><span class="line">      <span class="comment">// 开启px2rem, npm install px2rem-loader</span></span><br><span class="line">      <span class="comment">// remUnit = 75(在设计稿中html字体的大小, 也可理解为在原设计稿中1rem=多少像素)</span></span><br><span class="line">      <span class="comment">// 设计稿fontSize基准值(remUnit)/设计稿物理像素宽度 = 当前设备html标签fontSize值(所求)/当前设备物理像素宽度(媒体查询适配)</span></span><br><span class="line">      <span class="comment">// Precision = 8 转换小数精度</span></span><br><span class="line">      css: <span class="string">'vue-style-loader!css-loader!px2rem-loader?remUnit=40&amp;remPreceision=8'</span>,</span><br><span class="line">      scss: <span class="string">'vue-style-loader!css-loader!px2rem-loader?remUnit=40&amp;remPrecision=8!sass-loader'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>配置了<code>px2rem</code>后, 再写一个<code>80px</code>的css会被转化为<code>1.06666667rem</code>, 满足8位小数(Precision = 8), 且 1.06666667rem * 75(<code>remUnit</code>) = 80px</p></li><li><p>注意, 我们只需关心原始设计图的css尺寸开发, <code>hotcss</code>会根据不同设备的<code>dpr</code>与<code>ideal viewport</code>宽度来创建meta标签(将<code>initial-scale</code>设置为<code>dpr</code>的倒数), 同时设置html标签的<code>fontSize</code></p></li></ul><h3 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h3><p>这里主要拣一些在踩坑过程中容易出现混淆的细节详细说说</p><blockquote><p>关于webpack配置里remUnit的含义</p></blockquote><p><code>scss: &#39;vue-style-loader!css-loader!px2rem-loader?remUnit=40&amp;remPrecision=8!sass-loader&#39;</code></p><p>webpack中这个配置中声明了<code>px2rem-loader</code>的一个<code>option</code>选项<code>remUnit</code>的值赋值为40px, 但是如何理解这个40px? 这个值设成别的值行不行? </p><p><code>remUnit</code>本身是指<strong>设计稿</strong>的<code>html</code>标签的<code>font-size</code>属性值, 假设这个值设为40px, 其代表了在以设计稿为基准以<code>rem</code>布局书写css时, 每1rem代表了40px, 若此时有一个<code>div</code>的<code>font-size</code>的css书写是80px, <code>px2rem</code>会将其转化为2rem. 若此时再将<code>remUnit</code>在<code>webpack</code>中的配置改为<code>80</code>, 则重新构建后<code>div</code>的<code>font-size</code>变为<strong>1rem</strong></p><p>看起来这个<code>remUnit</code> 的设置并不会影响我们的界面展示, 因为根据书写css的尺寸是固定的, <code>rem尺寸</code> = <code>css尺寸</code> / <code>remUnit</code>, 不论我们写多少, <code>px2rem</code>都会调整为显示效果一样的rem尺寸. 但若是再加上<code>hotcss</code>呢? </p><blockquote><p>试一下随便改几个<code>remUnit</code>的尺寸, 配合<code>hotcss</code>就知道不行了. 若是熟悉了本篇博客上面写的基础知识, 再去看<code>hotcss</code>源码就可得到答案.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hotcss 源码</span></span><br><span class="line">hotcss.px2rem = <span class="function"><span class="keyword">function</span>(<span class="params">px, designWidth</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//预判你将会在JS中用到尺寸，特提供一个方法助你在JS中将px转为rem。就是这么贴心。</span></span><br><span class="line">  <span class="keyword">if</span> (!designWidth) &#123;</span><br><span class="line">    <span class="comment">//如果你在JS中大量用到此方法，建议直接定义 hotcss.designWidth 来定义设计图尺寸;</span></span><br><span class="line">    <span class="comment">//否则可以在第二个参数告诉我你的设计图是多大。</span></span><br><span class="line">    designWidth = <span class="built_in">parseInt</span>(hotcss.designWidth, <span class="number">10</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(px, <span class="number">10</span>) * <span class="number">320</span> / designWidth / <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">hotcss.mresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//对，这个就是核心方法了，给HTML设置font-size。</span></span><br><span class="line">  <span class="keyword">var</span> innerWidth =</span><br><span class="line">    <span class="built_in">document</span>.documentElement.getBoundingClientRect().width ||</span><br><span class="line">    <span class="built_in">window</span>.innerWidth</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (hotcss.maxWidth &amp;&amp; innerWidth / hotcss.dpr &gt; hotcss.maxWidth) &#123;</span><br><span class="line">    innerWidth = hotcss.maxWidth * hotcss.dpr</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!innerWidth) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.documentElement.style.fontSize = innerWidth * <span class="number">20</span> / <span class="number">320</span> + <span class="string">'px'</span></span><br><span class="line"></span><br><span class="line">  hotcss.callback &amp;&amp; hotcss.callback()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hotcss.mresize()</span><br><span class="line"><span class="comment">//直接调用一次</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(</span><br><span class="line">  <span class="string">'resize'</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    clearTimeout(hotcss.tid)</span><br><span class="line">    hotcss.tid = setTimeout(hotcss.mresize, <span class="number">33</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">//绑定resize的时候调用</span></span><br></pre></td></tr></table></figure><p><strong>通过读这段源码, 结合本篇博客开篇所介绍的基础知识, 我们可以得知其中原理: hotcss的作者将320px的设计图的rem基准定为了20px,其他设备不同屏幕宽度的设备页面的基准字号其实也随之而定了, 比如你的设计稿是iphone手机, dpr是2, 设计稿宽度是640px, 那么hotcss给html设置的<code>font-size</code>就是40px.</strong></p><p><strong>从rem自适应的原理上来说, 经px2rem转换之后, css中的rem单位都已经定下来了, 不会随着页面的变化而更改, 所以只有等比的设置不同屏幕的基准font-size, 才能达到一套代码全部屏幕自适应的需求, hotcss通过监听<code>window.resize</code>事件, 根据当前设备的<code>ideal port</code>宽度和<code>dpr</code>的值, 动态给页面的html标签设置基准font-size</strong></p><p><strong>回到我们抛出的问题, webpack中px2rem中remUnit值的设置, 其实相当于<code>在项目原始设计稿的标准下, html标签中的基准font-size会被hotcss转化为的数值</code>, 若以我的项目举例, 我的设计稿是640px的, 所以这里webpack中的remUnit必须设为40px</strong></p><p>至此, 很详细的说了这次自适应设计的原理, 整个处理webpack构建和设计自适应的过程是对自己处理问题能力的一个提升. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;自适应方案设计&quot;&gt;&lt;a href=&quot;#自适应方案设计&quot; class=&quot;headerlink&quot; title=&quot;自适应方案设计&quot;&gt;&lt;/a&gt;自适应方案设计&lt;/h2&gt;&lt;p&gt;做到一份代码, 构建出的app适配各种设备, 根据设备的屏幕尺寸, 自动缩放所有css尺寸, 让所有
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正反馈系列: Webpack (二)</title>
    <link href="http://yoursite.com/2018/03/16/webpack02/"/>
    <id>http://yoursite.com/2018/03/16/webpack02/</id>
    <published>2018-03-16T01:53:16.000Z</published>
    <updated>2018-03-20T03:40:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇博客总结了<code>webpack</code>的基本配置, 处理js, css, 代码分割, 懒加载, tree-shaking等方法, 这篇博客继续总结资源处理, 第三方js库处理, html相关, devServer相关等知识.</p><h2 id="图片处理"><a href="#图片处理" class="headerlink" title="图片处理"></a>图片处理</h2><h3 id="场景与技术"><a href="#场景与技术" class="headerlink" title="场景与技术"></a>场景与技术</h3><ul><li>CSS中引入的图片 <code>file-loader</code></li><li>自动合成的雪碧图 <code>postcss-sprites</code></li><li>压缩图片 <code>img-loader</code></li><li>Base64编码 <code>url-loader</code></li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">      use: ExtractTextWebpackPlugin.extract(</span><br><span class="line">        &#123;</span><br><span class="line">          fallback: &#123;</span><br><span class="line">            loader: <span class="string">'style-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              singleton: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          use: [</span><br><span class="line">            &#123;</span><br><span class="line">              loader: <span class="string">'css-loader'</span>,</span><br><span class="line">              options: &#123;</span><br><span class="line">                importLoaders: <span class="number">2</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">              options: &#123;</span><br><span class="line">                ident: <span class="string">'postcss'</span>,</span><br><span class="line">                plugins: [</span><br><span class="line">                  <span class="comment">// CSS 雪碧图</span></span><br><span class="line">                  <span class="built_in">require</span>(<span class="string">'postcss-sprites'</span>)(&#123;</span><br><span class="line">                    spritePath: <span class="string">'dist/assets/imgs/sprites'</span>,</span><br><span class="line">                    <span class="comment">// 只对形如'border@2x.png'类似的文件名起效</span></span><br><span class="line">                    retina: <span class="literal">true</span></span><br><span class="line">                  &#125;),</span><br><span class="line">                  <span class="built_in">require</span>(<span class="string">'postcss-cssnext'</span>)()</span><br><span class="line">                ]</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              loader: <span class="string">'less-loader'</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.(png|jpg|jpeg|gif)$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// url-loader和file-loader在图片处理时唯一的区别是url-loader可以设limit转Base64</span></span><br><span class="line">          <span class="comment">// 所以可以用url-loader代替file-loader</span></span><br><span class="line">          loader: <span class="string">'url-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            <span class="comment">// ext代表后缀名</span></span><br><span class="line">            name: <span class="string">'[name]-[hash:5].[ext]'</span>,</span><br><span class="line">            limit: <span class="number">1000</span>,</span><br><span class="line">            <span class="comment">// publicPath: 静态资源引用地址</span></span><br><span class="line">            <span class="comment">// 覆盖output中的publicPath设置</span></span><br><span class="line">            <span class="comment">// 若服务为httpServer, 设置为'/'则指向了网站根目录,相当于开启一个绝对路径</span></span><br><span class="line">            <span class="comment">/* 一些publicPath示例</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">                publicPath: "https://cdn.example.com/assets/", // CDN（总是 HTTPS 协议）</span></span><br><span class="line"><span class="comment">                publicPath: "//cdn.example.com/assets/", // CDN (协议相同)</span></span><br><span class="line"><span class="comment">                publicPath: "/assets/", // 相对于服务(server-relative)</span></span><br><span class="line"><span class="comment">                publicPath: "assets/", // 相对于 HTML 页面</span></span><br><span class="line"><span class="comment">                publicPath: "../assets/", // 相对于 HTML 页面</span></span><br><span class="line"><span class="comment">                publicPath: "", // 相对于 HTML 页面（目录相同）</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            publicPath: <span class="string">'/'</span>,</span><br><span class="line">            <span class="comment">// outputPath: 构建文件输出地址</span></span><br><span class="line">            <span class="comment">// 相对output.path的相对路径,以'/'结尾表示文件夹</span></span><br><span class="line">            outputPath: <span class="string">'assets/imgs/'</span>,</span><br><span class="line">            <span class="comment">// 会模拟源代码的目录结构生成对应的相对文件结构, 方便css等相对路径的引用</span></span><br><span class="line">            <span class="comment">// useRelativePath: true</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'img-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            pngquant: &#123;</span><br><span class="line">              quality: <span class="number">80</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字体文件处理"><a href="#字体文件处理" class="headerlink" title="字体文件处理"></a>字体文件处理</h2><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><blockquote><p>方法同图片文件处理: 即不涉及Base64编码时使用<code>file-loader</code>,否则使用<code>url-loader</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(eot|woff2?|ttf|svg)$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'url-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        name: <span class="string">'[name]-[hash:5].[ext]'</span>,</span><br><span class="line">        <span class="comment">// 转为 baseurl 的前提</span></span><br><span class="line">        limit: <span class="number">5000</span>,</span><br><span class="line">        publicPath: <span class="string">''</span>,</span><br><span class="line">        outputPath: <span class="string">'dist/'</span>,</span><br><span class="line">        useRelativePath: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="处理第三方JS库"><a href="#处理第三方JS库" class="headerlink" title="处理第三方JS库"></a>处理第三方JS库</h2><h3 id="场景和方法"><a href="#场景和方法" class="headerlink" title="场景和方法"></a>场景和方法</h3><ul><li>远程cdn库用script标签链html中: <code>script</code>标签在html页面中引入, <code>window</code>全局引入, 所有模块皆可使用</li><li>npm install的库注入模块中: <code>webpack.providePlugin</code>,  <code>imports-loader</code></li><li>本地目录下的js文件注入模块中: <code>resolve</code>属性配置<code>alias</code>后, <code>webpack.providePlugin</code>或<code>imports-loader</code>引入`</li></ul><h3 id="webpack-providePlugin"><a href="#webpack-providePlugin" class="headerlink" title="webpack.providePlugin"></a>webpack.providePlugin</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 若本地目录下的js文件需引入模块则配置resolve, npm仓库不需配置</span></span><br><span class="line">  <span class="comment">// 配置alias后也可用imports-loader导入</span></span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="comment">// jquery 别名，告诉webpack jquery = src/libs/jquery.min.js</span></span><br><span class="line">      <span class="comment">// 这里加$号的原因是需匹配具体文件,而不是文件夹</span></span><br><span class="line">      <span class="comment">// $号前的jquery字符串对应ProvidePlugin中的'jquery'</span></span><br><span class="line">      jquery$: path.resolve(__dirname, <span class="string">'src/libs/jquery.min.js'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// 将jquery注入到每一个模块中</span></span><br><span class="line">    <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">      $: <span class="string">'jquery'</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="imports-loader"><a href="#imports-loader" class="headerlink" title="imports-loader"></a>imports-loader</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">&#123;</span><br><span class="line">  test: path.resolve(__dirname, <span class="string">'src/app.js'</span>),</span><br><span class="line">  use: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 使用 imports-loader 注入</span></span><br><span class="line">      loader: <span class="string">'imports-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        $: <span class="string">'jquery'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HTML-in-Webpack"><a href="#HTML-in-Webpack" class="headerlink" title="HTML in Webpack"></a>HTML in Webpack</h2><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ul><li>自动生成html, 引入bundle: <code>HtmlWebpackPlugin</code></li><li>html中img标签用src引入图片: <code>html-loader</code></li><li>直接在src中用require方式引用: <code>require</code>语法</li><li>将提取的manifest公共代码通过script标签引入, <code>htmlWebpackInlineChunkPlugin</code></li></ul><h3 id="自动生成html-htmlWebpackPlugin"><a href="#自动生成html-htmlWebpackPlugin" class="headerlink" title="自动生成html, htmlWebpackPlugin"></a>自动生成html, htmlWebpackPlugin</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    <span class="comment">// 可指定目录'dist/index.html'</span></span><br><span class="line">    filename: <span class="string">'index.html'</span>,</span><br><span class="line">    template: <span class="string">'./index.html'</span>,</span><br><span class="line">    minify: &#123;</span><br><span class="line">      collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 选择插入哪些entry生成的bundle</span></span><br><span class="line">    <span class="comment">// chunks: ['app','app2']</span></span><br><span class="line">    <span class="comment">// 选择是否插入生成的bundle</span></span><br><span class="line">    <span class="comment">// false时可以手动在html页面内引入</span></span><br><span class="line">    <span class="comment">// inject: true</span></span><br><span class="line">  &#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="html中img标签用src引入图片-html-loader"><a href="#html中img标签用src引入图片-html-loader" class="headerlink" title="html中img标签用src引入图片, html-loader"></a>html中img标签用src引入图片, html-loader</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'html-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">          attrs: [<span class="string">'img:src'</span>, <span class="string">'img:data-src'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="直接在src中用require方式引用"><a href="#直接在src中用require方式引用" class="headerlink" title="直接在src中用require方式引用"></a>直接在src中用require方式引用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"$&#123;require('./assets/img.png')&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="将提取的manifest公共代码通过script标签引入-htmlWebpackInlineChunkPlugin"><a href="#将提取的manifest公共代码通过script标签引入-htmlWebpackInlineChunkPlugin" class="headerlink" title="将提取的manifest公共代码通过script标签引入, htmlWebpackInlineChunkPlugin"></a>将提取的manifest公共代码通过script标签引入, htmlWebpackInlineChunkPlugin</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">  name: <span class="string">'manifest'</span></span><br><span class="line">&#125;),</span><br><span class="line"><span class="comment">//!</span></span><br><span class="line"><span class="keyword">new</span> HtmlInlinkChunkPlugin(&#123;</span><br><span class="line">  <span class="comment">// 注意若在htmlWebpackPlugin中配置了chunks属性, 需将'manifest'加入数组</span></span><br><span class="line">  inlineChunks: [<span class="string">'manifest'</span>]</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><h2 id="开发服务器"><a href="#开发服务器" class="headerlink" title="开发服务器"></a>开发服务器</h2><h3 id="三种方式"><a href="#三种方式" class="headerlink" title="三种方式"></a>三种方式</h3><p><code>webpack-watch-mode</code>, 只监视文件,无服务器<br><code>webpack-dev-server</code><br><code>express + webpack-dev-middleware</code> 灵活的配置服务, 比如<code>koa</code>替换<code>express</code></p><h3 id="清除webpack代码-cleanWebpackPlugin"><a href="#清除webpack代码-cleanWebpackPlugin" class="headerlink" title="清除webpack代码, cleanWebpackPlugin"></a>清除webpack代码, cleanWebpackPlugin</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="comment">// 数组中是需要清除的路径</span></span><br><span class="line"><span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist'</span>])</span><br></pre></td></tr></table></figure><h3 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h3><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><ul><li>live-reloading</li><li>打包文件写入内存</li><li>路径重定向</li><li>https</li><li>浏览器中显示编译错误</li><li>接口代理</li><li>模块热更新</li></ul><h4 id="npm-scripts-启动"><a href="#npm-scripts-启动" class="headerlink" title="npm scripts 启动"></a>npm scripts 启动</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">"scripts": &#123;</span><br><span class="line">  // 通过命令行形式直接运行webpack-dev-server会找不到</span><br><span class="line">  // 因为该命令入口在/node_modules/.bin目录下</span><br><span class="line">  "server": "webpack-dev-server --open"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="H5-history-api-rewrite-historyApiFallback"><a href="#H5-history-api-rewrite-historyApiFallback" class="headerlink" title="H5 history api rewrite, historyApiFallback"></a>H5 history api rewrite, historyApiFallback</h4><blockquote><p>作用: 当使用 <code>HTML5 History AP</code>I 时，任意的 404 响应都可能需要被替代为 index.html<br>也可以配置rewrites进一步配置, 防止用户在浏览器栏输入地址并刷新时跳转到不存在的404页面</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 头部不用import devServer</span></span><br><span class="line">devServer: &#123;</span><br><span class="line">  <span class="comment">// liveReloading是自动的, 不用参数配置</span></span><br><span class="line">  <span class="comment">// 本地服务端口号</span></span><br><span class="line">  port: <span class="number">9001</span>,</span><br><span class="line">  <span class="comment">// HTML5 histroy API rewrite</span></span><br><span class="line">  <span class="comment">// 简单版使用 'historyApiFallback: true'</span></span><br><span class="line">  <span class="comment">// 之后在浏览器访问一个不存在的地址时不会报404,会停留在index.html</span></span><br><span class="line">  <span class="comment">// historyApiFallback: true</span></span><br><span class="line">  historyApiFallback: &#123;</span><br><span class="line">    rewrites: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 来自什么样的路径</span></span><br><span class="line">        <span class="keyword">from</span>: <span class="regexp">/^\/([a-zA-Z0-9]+\/?)([a-zA-Z0-9]+)/</span>,</span><br><span class="line">        <span class="comment">// 跳转到哪里</span></span><br><span class="line">        <span class="comment">// context拿到正则捕获组</span></span><br><span class="line">        to: <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">'/'</span> + context.match[<span class="number">1</span>] + context.match[<span class="number">2</span>] + <span class="string">'.html'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h4><blockquote><p>Proxy 内部集成 <code>http-proxy-middleware</code></p></blockquote><ul><li><code>target</code>: 指定代理服务器地址</li><li><code>changeOrigin</code>: 改变源到url, 设置为true时可以请求vitual host站点, 默认false记得设为true</li><li><code>headers</code>: 给http增加请求头</li><li><code>logLevel</code>: 在控制台或terminal中显示代理信息, 帮助调试</li><li><code>pathRewrite</code>: 可以用简短的地址代替长地址请求</li></ul><blockquote><p>例: 请求新浪微博接口 <code>https://m.weibo.cn/api/comments/show?id=4193586758833502&amp;page=1</code><br>在js文件中用jquery请求我们自己定义的短路径’/comments/show’</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在自己开发的js中写入下述代码</span></span><br><span class="line"><span class="comment">// '/comments/show' 是我们自己定义的缩短路径</span></span><br><span class="line">$.get(<span class="string">'/comments/show'</span>, &#123;</span><br><span class="line">  id: <span class="string">'4193586758833502'</span>,</span><br><span class="line">  page: <span class="number">1</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">devServer: &#123;</span><br><span class="line">  port: <span class="number">9001</span>,</span><br><span class="line">  proxy: &#123;</span><br><span class="line">    <span class="comment">// 需要被代理的路径开头</span></span><br><span class="line">    <span class="string">'/'</span>: &#123;</span><br><span class="line">      <span class="comment">// 指定代理服务器地址</span></span><br><span class="line">      target: <span class="string">'https://m.weibo.cn'</span>,</span><br><span class="line">      <span class="comment">// 设置为true时可以请求vitual host站点, 默认false, 需要设置为true</span></span><br><span class="line">      changeOrigin: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// 在控制台或terminal中显示代理信息, 帮助调试</span></span><br><span class="line">      logLevel: <span class="string">'debug'</span>,</span><br><span class="line">      <span class="comment">// 用简短的地址替换长地址请求</span></span><br><span class="line">      pathRewrite: &#123;</span><br><span class="line">        <span class="string">'^/comments'</span>: <span class="string">'/api/comments'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 给http协议增加请求头</span></span><br><span class="line">      headers: &#123;</span><br><span class="line">        <span class="string">'Cookie'</span>: <span class="string">'_T_WM=044532f80b8fabc6dc347fd417c33202; ALF=1517569014; SUBP=0033WrSXqPxfM725Ws9jqgMF55529P9D9WhQljxrwvAfCCZa_p.u8pB.5JpX5K-hUgL.Fo2cS0qRehBcSKM2dJLoI7HpqJ8XwBtt; SCF=AkQsXaaTywl0RziwnumQ0tVE_xW5udcpoGP43q7eb2tFW9lXRc4bVNOn9N5m_ZKwFc-Q2r4Hz5oMBAbVJuhI1uk.; SUB=_2A253SLARDeRhGedI7FQZ8CrKzjuIHXVUstBZrDV6PUJbktANLUXEkW1NVtAHXD7nHQtwFntsDZsmqj2nB17cClnd; SUHB=0k1zt1ckxYq3c6; H5_INDEX_TITLE=qbaty; H5_INDEX=0_all; WEIBOCN_FROM=1110006030; M_WEIBOCN_PARAMS=oid%3D4193586758833502%26luicode%3D20000061%26lfid%3D4193594443440569%26uicode%3D20000061%26fid%3D4193586758833502'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="模块热更新-MHR-Module-Hot-Reloading"><a href="#模块热更新-MHR-Module-Hot-Reloading" class="headerlink" title="模块热更新 MHR(Module Hot Reloading)"></a>模块热更新 MHR(Module Hot Reloading)</h4><blockquote><p>与liveReloading的区别: </p></blockquote><ul><li>不重新刷新浏览器更新前端代码</li><li>可以保持应用数据状态</li><li>节省时间, 样式调试更快</li></ul><blockquote><p>所需工具和方法</p></blockquote><ul><li><code>devServer.hot: true</code> 即可使用</li><li><code>webpack.HotModuleReplacementPlugin</code> 必须使用</li><li><code>webpack.NamedModulesPlugin</code> 启用HMR时, 如果想看到模块相对路径, 需使用</li></ul><blockquote><p>配置</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">devServer: &#123;</span><br><span class="line">  hot: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 使全局无论如何不通过刷新页面实现热更新</span></span><br><span class="line">  hotOnly: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">  <span class="keyword">new</span> webpack.NamedModulesPlugin(),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>注意: HMR更新的是内存中的代码, 所以若css用<code>ExtractTextWebpackPlugin</code>提取过的话, 无法进行热更新<br>解决方法是改为<code>style-loader</code>注入的方式<br>关于<code>NamedModulesPlugin</code>的具体效果, 移步<a href="https://doc.webpack-china.org/guides/caching/#%E6%A8%A1%E5%9D%97%E6%A0%87%E8%AF%86%E7%AC%A6-module-identifiers-" target="_blank" rel="noopener">webpack官中文档</a></p></blockquote><h2 id="Source-Map"><a href="#Source-Map" class="headerlink" title="Source Map"></a>Source Map</h2><h3 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h3><blockquote><p>JS Source Map</p></blockquote><ul><li><code>devtool</code></li><li><code>webpack.SourceMapDevToolPlugin</code></li><li><code>webpack.EvalSourceMapDevToolPlugin</code></li></ul><blockquote><p>CSS Source Map<br>将下列属性设置为true即可</p></blockquote><ul><li><code>style-loader.option.sourceMap</code></li><li><code>css-loader.option.sourceMap</code> </li><li><code>less-loader.option.sourceMap</code></li><li><code>sass-loader.option.sourceMap</code></li></ul><h3 id="devtool-取值"><a href="#devtool-取值" class="headerlink" title="devtool 取值"></a>devtool 取值</h3><blockquote><p>Development</p></blockquote><ul><li><code>eval</code></li><li><code>eval-source-map</code></li><li><code>cheap-eval-source-map</code></li><li><code>cheap-module-eval-source-map</code> 建议在开发环境使用</li></ul><blockquote><p>Production</p></blockquote><ul><li><code>source-map</code></li><li><code>hidden-source-map</code></li><li><code>nosource-source-map</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  devtool: <span class="string">'cheap-module-eval-source-map'</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS-Source-Map-设置"><a href="#CSS-Source-Map-设置" class="headerlink" title="CSS Source Map 设置"></a>CSS Source Map 设置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'style-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        <span class="comment">// 必须去掉singleton属性才可以正确开启css-sourcemap</span></span><br><span class="line">        <span class="comment">// singleton: true</span></span><br><span class="line">        sourceMap: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'css-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        importLoaders: <span class="number">2</span>,</span><br><span class="line">        sourceMap: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        ident: <span class="string">'postcss'</span>,</span><br><span class="line">        sourceMap: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'less-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        sourceMap: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置-EsLint"><a href="#设置-EsLint" class="headerlink" title="设置 EsLint"></a>设置 EsLint</h2><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ul><li><code>eslint</code></li><li><code>eslint-loader</code></li><li><code>eslint-plugin-html</code>: 当在html中以script标签引入js时开启eslint</li><li><code>eslint-friendly-formatter</code> 开启更友好的eslint提示</li></ul><h3 id="方式-1"><a href="#方式-1" class="headerlink" title="方式"></a>方式</h3><ul><li>在<code>webpack.config.js</code>中开启<code>eslint-loader</code></li><li>在<code>.eslintrc</code>或<code>package.json</code>中的<code>eslintConfig</code>属性中设置相关选项</li></ul><h3 id="eslint规范"><a href="#eslint规范" class="headerlink" title="eslint规范"></a>eslint规范</h3><blockquote><p>JavaScript Standard Style (<a href="https://standardjs.com/" target="_blank" rel="noopener">https://standardjs.com/</a>)</p></blockquote><ul><li><code>eslint-config-standard</code></li><li><code>eslint-plugin-promise</code></li><li><code>eslint-plugin-standard</code></li><li><code>eslint-plugin-import</code></li><li><code>eslint-plugin-node</code></li><li><code>eslint-config-xxx</code></li></ul><h3 id="eslint-loader等配置"><a href="#eslint-loader等配置" class="headerlink" title="eslint-loader等配置"></a>eslint-loader等配置</h3><blockquote><p>eslint-loader</p></blockquote><ul><li><code>options.failOnWarning</code>: 若Warning则不通过编译</li><li><code>options.failOnError</code>: 若Error则不通过编译</li><li><code>options.formatter</code>: 设置第三方友好代码提示的选项, 可用<code>eslint-friendly-formatter</code></li><li><code>options.outputReport</code>: 输出一个代码格式检查的报告</li></ul><blockquote><p><code>devServer.overlay</code><br>配置此选项可让eslint在浏览器中输出</p></blockquote><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install eslint eslint-loader eslint-plugin-html eslint-friendly-formatter --save-dev</span><br><span class="line">npm install eslint-config-standard eslint-plugin-promise eslint-plugin-node eslint-plugin-import eslint-plugin-standard --save-dev</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">devServer: &#123;</span><br><span class="line">  overlay: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      include: [path.resolve(__dirname, <span class="string">'src'</span>)],</span><br><span class="line">      exclude: [path.resolve(__dirname, <span class="string">'src/libs'</span>)],</span><br><span class="line">      use: [</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            presets: [<span class="string">'env'</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            <span class="comment">// 设置第三方友好代码提示的选项, 可用`eslint-friendly-formatter`</span></span><br><span class="line">            formatter: <span class="built_in">require</span>(<span class="string">'eslint-friendly-formatter'</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .eslintrc</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  extends: <span class="string">'standard'</span>,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// eslint-plugin-html插件</span></span><br><span class="line">    <span class="string">'html'</span></span><br><span class="line">  ],</span><br><span class="line">  env: &#123;</span><br><span class="line">    browser: <span class="literal">true</span>,</span><br><span class="line">    node: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 允许的全局变量</span></span><br><span class="line">  globals: &#123;</span><br><span class="line">    $: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 覆盖extends标准的规则</span></span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="string">'indent'</span>: [<span class="string">'error'</span>, <span class="number">4</span>],</span><br><span class="line">    <span class="string">'eol-last'</span>: [<span class="string">'error'</span>, <span class="string">'never'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Resolve"><a href="#Resolve" class="headerlink" title="Resolve"></a>Resolve</h2><h3 id="resolve-alias"><a href="#resolve-alias" class="headerlink" title="resolve.alias"></a>resolve.alias</h3><blockquote><p>可以在<code>import</code>时启用别名替换</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">alias: &#123;</span><br><span class="line">  Utilities: path.resolve(__dirname, <span class="string">'src/utilities/'</span>),</span><br><span class="line">  Templates: path.resolve(__dirname, <span class="string">'src/templates/'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置前: import Utility from '../../utilities/utility';</span></span><br><span class="line"><span class="comment">// 设置后: import Utility from 'Utilities/utility';</span></span><br></pre></td></tr></table></figure><h3 id="resolve-extensions"><a href="#resolve-extensions" class="headerlink" title="resolve.extensions"></a>resolve.extensions</h3><blockquote><p>可以在<code>import</code>时忽略的扩展名</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">resolve: &#123;</span><br><span class="line">  extensions: [<span class="string">".js"</span>, <span class="string">".vue"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区分开发环境和生产环境"><a href="#区分开发环境和生产环境" class="headerlink" title="区分开发环境和生产环境"></a>区分开发环境和生产环境</h2><blockquote><p>开发环境需要(对应<code>webpack.dev.conf.js</code>):</p></blockquote><ul><li>模块热更新</li><li>sourceMap</li><li>接口代理</li><li>代码规范检查</li></ul><blockquote><p>生产环境需要(对应<code>webpack.prod.conf.js</code>): </p></blockquote><ul><li>提取公用代码</li><li>压缩混淆</li><li>文件压缩或Base64编码</li><li>Tree-Shaking</li></ul><blockquote><p>共同点(对应<code>webpack.common.conf.js</code>)</p></blockquote><ul><li>同样的入口</li><li>同样的代码处理(loader处理)</li><li>同样的解析配置</li></ul><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><ul><li>用<code>webpack.DefinePlugin</code>设置常量</li><li>进阶: <code>webpack-merge</code> 拼接webpack配置</li></ul><h3 id="webpack-DefinePlugin"><a href="#webpack-DefinePlugin" class="headerlink" title="webpack.DefinePlugin"></a>webpack.DefinePlugin</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">env</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        loader: env === PRODUCTION ? ExtractTextPlugin.extract(&#123;</span><br><span class="line">          use: <span class="string">'css-loader'</span>,</span><br><span class="line">          fallback: <span class="string">'style-loader'</span></span><br><span class="line">        &#125;) : <span class="string">'style-loader!css-loader'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// 此插件用来定义全局变量</span></span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="comment">// 因为插件直接进行文本替换,要保留原始引号,两种方法是:</span></span><br><span class="line">      <span class="comment">// 1. '"production"'</span></span><br><span class="line">      <span class="comment">// 2. JSON.stringify('production')</span></span><br><span class="line">      PRODUCTION: <span class="built_in">JSON</span>.stringify(<span class="string">'production'</span>),</span><br><span class="line">      DEV: <span class="built_in">JSON</span>.stringify(<span class="string">'development'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="webpack-merge配置"><a href="#webpack-merge配置" class="headerlink" title="webpack-merge配置"></a>webpack-merge配置</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">"scripts": &#123;</span><br><span class="line">  "server": "webpack-dev-server --env development --open --config build/webpack.common.conf.js",</span><br><span class="line">  "build": "webpack --env production --config build/webpack.common.conf.js",</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.common.conf.js</span></span><br><span class="line"><span class="keyword">const</span> productionConfig = <span class="built_in">require</span>(<span class="string">'./webpack.prod.conf'</span>)</span><br><span class="line"><span class="keyword">const</span> developmentConfig = <span class="built_in">require</span>(<span class="string">'./webpack.dev.conf'</span>)</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="comment">// 生成提取css文件的Plugin</span></span><br><span class="line"><span class="keyword">const</span> extractLess = <span class="keyword">new</span> ExtractTextWebpackPlugin(&#123;</span><br><span class="line">  filename: <span class="string">'css/[name]-bundle-[hash:5].css'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 这里的参数env是npm scripts --env 传入的字符串</span></span><br><span class="line"><span class="keyword">const</span> generateConfig = <span class="function"><span class="params">env</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 设置js需要的scriptloader</span></span><br><span class="line">  <span class="keyword">const</span> scriptLoader = [</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'babel-loader'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ].concat(env === <span class="string">'production'</span> ? [] : [</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        formatter: <span class="built_in">require</span>(<span class="string">'eslint-friendly-formatter'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ])</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 设置css需要的cssLoaders</span></span><br><span class="line">  <span class="keyword">const</span> cssLoaders = [</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'css-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        importLoaders: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 若是dev环境则关闭sourceMap</span></span><br><span class="line">        sourceMap: env === <span class="string">'development'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        ident: <span class="string">'postcss'</span>,</span><br><span class="line">        <span class="comment">// 若是dev环境则关闭sourceMap</span></span><br><span class="line">        sourceMap: env === <span class="string">'development'</span>,</span><br><span class="line">        plugins: [</span><br><span class="line">          <span class="built_in">require</span>(<span class="string">'postcss-cssnext'</span>)()</span><br><span class="line">        ].concat(</span><br><span class="line">          <span class="comment">// 若是生产环境,加载post-css雪碧图功能</span></span><br><span class="line">          env === <span class="string">'production'</span></span><br><span class="line">            ? <span class="built_in">require</span>(<span class="string">'postcss-sprites'</span>)(&#123;</span><br><span class="line">              spritePath: <span class="string">'dist/assets/imgs/sprites'</span>,</span><br><span class="line">              retina: <span class="literal">true</span></span><br><span class="line">            &#125;)</span><br><span class="line">            : []</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'less-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        <span class="comment">// 若是dev环境则关闭sourceMap</span></span><br><span class="line">        sourceMap: env === <span class="string">'development'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// style-loader若是prod环境需提取,dev环境直接使用style-loader</span></span><br><span class="line">  <span class="keyword">const</span> styleLoader = env === <span class="string">'production'</span></span><br><span class="line">    ? extractLess.extract(&#123;</span><br><span class="line">      fallback: <span class="string">'style-loader'</span>,</span><br><span class="line">      use: cssLoaders</span><br><span class="line">    &#125;)</span><br><span class="line">    : [&#123;</span><br><span class="line">      loader: <span class="string">'style-loader'</span></span><br><span class="line">    &#125;].concat(cssLoaders)</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 针对file-loader的配置</span></span><br><span class="line">  <span class="comment">// fileLoader根据img和font文件的不同设置不同的outputPath</span></span><br><span class="line">  <span class="keyword">const</span> fileLoader = <span class="function"><span class="params">path</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果是dev环境,使用file-loader,若是prod环境,使用url-loader开启Base64编码</span></span><br><span class="line">    <span class="keyword">return</span> env === <span class="string">'development'</span></span><br><span class="line">      ? [&#123;</span><br><span class="line">        loader: <span class="string">'file-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          name: <span class="string">'[name]-[hash:5].[ext]'</span>,</span><br><span class="line">          outputPath: path</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;]</span><br><span class="line">      : [&#123;</span><br><span class="line">        loader: <span class="string">'url-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          name: <span class="string">'[name]-[hash:5].[ext]'</span>,</span><br><span class="line">          limit: <span class="number">1000</span>,</span><br><span class="line">          outputPath: path</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,&#123;</span><br><span class="line">        loader: <span class="string">'img-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          pngquant: &#123;</span><br><span class="line">            quality: <span class="number">80</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回配置对象, 在各自rules的use字段载入上述定义的loader</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    entry,</span><br><span class="line">    output,</span><br><span class="line">    resolve,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">      rules: [</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">          include: [path.resolve(__dirname, <span class="string">'../src'</span>)],</span><br><span class="line">          exclude: [path.resolve(__dirname, <span class="string">'../src/libs'</span>)],</span><br><span class="line">          use: scriptLoader</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">          use: styleLoader(<span class="string">'assets/imgs/'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.(png|jpg|jpeg|gif)$/</span>,</span><br><span class="line">          use: fileLoader</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.(eot|woff2?|ttf|svg)$/</span>,</span><br><span class="line">          use: fileLoader(<span class="string">'assets/fonts/'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="comment">// 提取less</span></span><br><span class="line">      extractLess,</span><br><span class="line">      <span class="comment">// 自动生成html, 引入bundle</span></span><br><span class="line">      <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">        filename: <span class="string">'index.html'</span>,</span><br><span class="line">        template: <span class="string">'./index.html'</span>,</span><br><span class="line">        minify: &#123;</span><br><span class="line">          collapseWhitespace: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="comment">// 将本地的jquery文件注入到每一个模块中</span></span><br><span class="line">      <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">        $: <span class="string">'jquery'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的参数env是npm scripts --env 传入的字符串</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">env</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// config根据传入的env变量赋值为对应的prod配置或dev配置</span></span><br><span class="line">  <span class="keyword">let</span> config = env === <span class="string">'production'</span></span><br><span class="line">    ? productionConfig</span><br><span class="line">    : developmentConfig</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> merge(generateConfig(env), config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.dev.conf.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devtool: <span class="string">'cheap-module-source-map'</span>,</span><br><span class="line">  devServer,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// 引入devServer相关plugins</span></span><br><span class="line">    <span class="comment">// 热更新</span></span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">    <span class="comment">// 启用热更新时显示模块相对路径</span></span><br><span class="line">    <span class="keyword">new</span> webpack.NamedModulesPlugin(),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.prod.conf.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// CSS Tree Shaking</span></span><br><span class="line">    <span class="keyword">new</span> PurifyWebpack(&#123;</span><br><span class="line">      paths: glob.sync([</span><br><span class="line">        <span class="string">'./*.html'</span>,</span><br><span class="line">        <span class="string">'./src/*.js'</span></span><br><span class="line">      ])</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 提取manifest</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">'manifest'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 将manifest以script标签形式放入html中</span></span><br><span class="line">    <span class="keyword">new</span> HtmlInlinkChunkPlugin(&#123;</span><br><span class="line">      inlineChunks: [<span class="string">'manifest'</span>]</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// JS Tree Shaking</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(),</span><br><span class="line">    <span class="comment">// 打包前 clean dist 目录</span></span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(path.resolve(__dirname, <span class="string">'../dist'</span>)),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优化打包速度"><a href="#优化打包速度" class="headerlink" title="优化打包速度"></a>优化打包速度</h2><blockquote><p>分开vender和app</p></blockquote><ul><li><code>DllPlugin</code>: 通过打包第三包库会生成map(映射关系),供业务代码引用</li><li><code>DllReferencePlugin</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.dll.conf.js</span></span><br><span class="line"><span class="comment">// 所有vendor库代码打包配置</span></span><br><span class="line"><span class="comment">// 在生产环境构建中运行一次即可 webpack --config webpack.dll.conf.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    vue: [<span class="string">'vue'</span>, <span class="string">'vue-router'</span>],</span><br><span class="line">    ui: [<span class="string">'element-ui'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.join(__dirname, <span class="string">'../src/dll/'</span>),</span><br><span class="line">    filename: <span class="string">'[name].dll.js'</span>,</span><br><span class="line">    <span class="comment">// 定义第三方库的引用名, 若不配置此项, 则vendor都以全局变量引入</span></span><br><span class="line">    library: <span class="string">'[name]'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// `DllPlugin`: 通过打包第三包库会生成map(映射关系),供业务代码引用</span></span><br><span class="line">    <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">      <span class="comment">// 这里选择的输出其实是map的输出地址, map是json文件</span></span><br><span class="line">      path: path.join(__dirname, <span class="string">'../src/dll/'</span>, <span class="string">'[name]-manifest.json'</span>),</span><br><span class="line">      name: <span class="string">'[name]'</span></span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/03/16/5aab232642fad.jpg" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.prod.conf.js</span></span><br><span class="line">plugins: [</span><br><span class="line">plugins: [</span><br><span class="line">  <span class="comment">// 用DllReferencePlugin将刚才生成的map文件引入</span></span><br><span class="line">  <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">    manifest: <span class="built_in">require</span>(<span class="string">'../src/dll/ui-manifest.json'</span>)</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">    manifest: <span class="built_in">require</span>(<span class="string">'../src/dll/vue-manifest.json'</span>)</span><br><span class="line">  &#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>平行处理压缩混淆</p></blockquote><ul><li><code>UglifyJsPlugin</code><ul><li><code>parallel: true</code>: 平行线程处理</li><li><code>cache: true</code>: 利用缓存</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.dev.conf.js</span></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">    parallel: <span class="literal">true</span>,</span><br><span class="line">    cache: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>平行处理文件loaders处理</p></blockquote><ul><li><code>HappyPack</code><ul><li><code>HappyPack.ThreadPool</code>: 共享文件loaders处理线程池</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.base.conf.js</span></span><br><span class="line"><span class="keyword">const</span> HappyPack = <span class="built_in">require</span>(<span class="string">'happypack'</span>)</span><br><span class="line"><span class="keyword">const</span> vueLoaderConfig = <span class="built_in">require</span>(<span class="string">'./vue-loader.conf'</span>)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">      <span class="comment">// id与plugins中HappyPack实例中的id相对应, </span></span><br><span class="line">      <span class="comment">// 将options传给plugins中的happyPack实例即可, 不用在此引入</span></span><br><span class="line">      loader: <span class="string">'happypack/loader?id=vue'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">    id: <span class="string">'vue'</span>,</span><br><span class="line">    loaders: [&#123;</span><br><span class="line">      loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">      option: <span class="built_in">require</span>(<span class="string">'./vue-loader.conf'</span>)</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>babel-loader</p></blockquote><ul><li><code>options.cacheDirecotry</code>: 开启缓存</li><li><code>include</code> &amp; <code>exclude</code>: 尽可能规定使用babel范围</li></ul><blockquote><p>其他因素</p></blockquote><ul><li>减少<code>resolve</code></li><li>上线去除<code>sourcemap</code></li><li><code>cache-loader</code>: 将所有loader结果缓存</li><li>升级<code>node</code>与<code>webpack</code></li></ul><h2 id="长缓存优化"><a href="#长缓存优化" class="headerlink" title="长缓存优化"></a>长缓存优化</h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>当版本更新时, 使用户的浏览器只下载更新过的模块, 其他模块由于hash值的不变不用用户再次下载</p><h3 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h3><ul><li>提取<code>vender</code></li><li><code>hash</code> -&gt; <code>chunkHash</code></li><li>提取 <code>webpack runtime 与 manifest</code> </li><li>使用 <code>NamedChunksPlugin</code>: 使Chunk的<code>id</code>以<code>name</code>命名, 不再分配打包顺序数字</li><li>使用 <code>NamedModule是Plugin</code>: 使Module的<code>id</code>以<code>相对路径</code>命名, 不再分配打包顺序数字</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: <span class="string">'./src/foo'</span>,</span><br><span class="line">    vendor: [<span class="string">'react'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    <span class="comment">// 以[chunkhash]代替[hash]</span></span><br><span class="line">    filename: <span class="string">'[name].[chunkhash].js'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.NamedChunksPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.NamedModulesPlugin(),</span><br><span class="line">    <span class="comment">// 提取公用代码, 此例中为react库的代码</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">'vendor'</span>,</span><br><span class="line">      minChunks: <span class="literal">Infinity</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 提取manifest与runtime</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">'manifest'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="webpack多页面应用"><a href="#webpack多页面应用" class="headerlink" title="webpack多页面应用"></a>webpack多页面应用</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>多入口 entry</li><li>多页面 html</li><li>每个页面不同的 chunk (js, css)</li><li>每个页面需要不同的webpack参数</li></ul><h3 id="多配置"><a href="#多配置" class="headerlink" title="多配置"></a>多配置</h3><blockquote><p>方法:</p></blockquote><ul><li><code>parallel-webpack</code>: 并行处理没有关联的多份配置(比如同时打包10个页面)</li></ul><blockquote><p>优点:</p></blockquote><ul><li>可以使用<code>parallel-webpack</code>来提高打包速度</li><li>配置更加独立, 灵活</li></ul><blockquote><p>缺点:</p></blockquote><ul><li>不能多页面之间共享代码, 不能使用长缓存, 用户加载效率低</li></ul><blockquote><p>配置:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多页面多配置的parallel-webpack并行打包多页面的优化</span></span><br><span class="line"><span class="comment">// npm install parallel-webpack --save-dev</span></span><br><span class="line"><span class="comment">// node_modules/parallel-webpack/bin/run.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baseConfig = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    react: [<span class="string">'react'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'js/[name].[chunkhash].js'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: ExtractTextWebpack.extract(&#123;</span><br><span class="line">          fallback: <span class="string">'style-loader'</span>,</span><br><span class="line">          use: <span class="string">'css-loader'</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> ExtractTextWebpack(&#123;</span><br><span class="line">      filename: <span class="string">'css/[name].[hash].css'</span></span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> CleanWebpack(path.resolve(__dirname, <span class="string">'dist'</span>)),</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">'react'</span>,</span><br><span class="line">      minChunks: <span class="literal">Infinity</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 每个页面的配置生成函数</span></span><br><span class="line"><span class="keyword">const</span> generatePage = <span class="function"><span class="keyword">function</span> (<span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                                 title = <span class="string">''</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 entry = <span class="string">''</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 template = <span class="string">'./src/index.html'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 name = <span class="string">''</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 chunks = []</span></span></span><br><span class="line"><span class="function"><span class="params">                               &#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    entry,</span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">        chunks,</span><br><span class="line">        template,</span><br><span class="line">        filename: name + <span class="string">'.html'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 生成每个页面的配置数组</span></span><br><span class="line"><span class="keyword">const</span> pages = [</span><br><span class="line">  generatePage(&#123;</span><br><span class="line">    title: <span class="string">'page A'</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">      a: <span class="string">'./src/pages/a'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    name: <span class="string">'a'</span>,</span><br><span class="line">    chunks: [<span class="string">'react'</span>, <span class="string">'a'</span>]</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  generatePage(&#123;</span><br><span class="line">    title: <span class="string">'page B'</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">      b: <span class="string">'./src/pages/b'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    name: <span class="string">'b'</span>,</span><br><span class="line">    chunks: [<span class="string">'react'</span>, <span class="string">'b'</span>]</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  generatePage(&#123;</span><br><span class="line">    title: <span class="string">'page C'</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">      c: <span class="string">'./src/pages/c'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    name: <span class="string">'c'</span>,</span><br><span class="line">    chunks: [<span class="string">'react'</span>, <span class="string">'c'</span>]</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模块返回一个配置数组, 每一项都是每个页面的单独配置和baseConfig的一个合并</span></span><br><span class="line"><span class="built_in">module</span>.exports = pages.map(<span class="function"><span class="params">page</span> =&gt;</span> merge(baseConfig, page))</span><br></pre></td></tr></table></figure><h3 id="单配置-共享配置"><a href="#单配置-共享配置" class="headerlink" title="单配置(共享配置)"></a>单配置(共享配置)</h3><blockquote><p>优点:</p></blockquote><ul><li>可以共享各个 <code>entry</code> 之间的公用代码</li></ul><blockquote><p>缺点: </p></blockquote><ul><li>打包速度比较慢</li><li>输出的内容比较复杂</li></ul><blockquote><p>配置: </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> baseConfig = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    react: [<span class="string">'react'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'js/[name].[chunkhash].js'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: ExtractTextWebpack.extract(&#123;</span><br><span class="line">          fallback: <span class="string">'style-loader'</span>,</span><br><span class="line">          use: <span class="string">'css-loader'</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> ExtractTextWebpack(&#123;</span><br><span class="line">      filename: <span class="string">'css/[name].[hash].css'</span></span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> CleanWebpack(path.resolve(__dirname, <span class="string">'dist'</span>)),</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">'react'</span>,</span><br><span class="line">      minChunks: <span class="literal">Infinity</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> generatePage = <span class="function"><span class="keyword">function</span> (<span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                                 title = <span class="string">''</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 entry = <span class="string">''</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 template = <span class="string">'./src/index.html'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 name = <span class="string">''</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 chunks = []</span></span></span><br><span class="line"><span class="function"><span class="params">                               &#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    entry,</span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">        chunks,</span><br><span class="line">        template,</span><br><span class="line">        title,</span><br><span class="line">        filename: name + <span class="string">'.html'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pages = [</span><br><span class="line">  generatePage(&#123;</span><br><span class="line">    title: <span class="string">'page A'</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">      a: <span class="string">'./src/pages/a'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    name: <span class="string">'a'</span>,</span><br><span class="line">    chunks: [<span class="string">'react'</span>, <span class="string">'a'</span>]</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  generatePage(&#123;</span><br><span class="line">    title: <span class="string">'page B'</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">      b: <span class="string">'./src/pages/b'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    name: <span class="string">'b'</span>,</span><br><span class="line">    chunks: [<span class="string">'react'</span>, <span class="string">'b'</span>]</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  generatePage(&#123;</span><br><span class="line">    title: <span class="string">'page C'</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">      c: <span class="string">'./src/pages/c'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    name: <span class="string">'c'</span>,</span><br><span class="line">    chunks: [<span class="string">'react'</span>, <span class="string">'c'</span>]</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多页面单配置</span></span><br><span class="line"><span class="built_in">module</span>.exports = merge([baseConfig].concat(pages))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一篇博客总结了&lt;code&gt;webpack&lt;/code&gt;的基本配置, 处理js, css, 代码分割, 懒加载, tree-shaking等方法, 这篇博客继续总结资源处理, 第三方js库处理, html相关, devServer相关等知识.&lt;/p&gt;
&lt;h2 id=&quot;图片处
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正反馈系列: Webpack (一)</title>
    <link href="http://yoursite.com/2018/03/07/webpack01/"/>
    <id>http://yoursite.com/2018/03/07/webpack01/</id>
    <published>2018-03-07T14:14:28.000Z</published>
    <updated>2018-03-20T08:59:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>看了Webpack官方文档, 力求有些产出, 此篇文章将学习所得知识总结记录, 力求得到学习的正反馈</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="全局npm安装路径"><a href="#全局npm安装路径" class="headerlink" title="全局npm安装路径"></a>全局npm安装路径</h3><p><code>/usr/local/lib/node_modules</code></p><h3 id="nvm管理的Node中npm安装路径"><a href="#nvm管理的Node中npm安装路径" class="headerlink" title="nvm管理的Node中npm安装路径"></a>nvm管理的Node中npm安装路径</h3><p><code>/Users/choteewang/.nvm/versions/node/@Node使用版本号(v8.9.4)/lib/node_modules</code></p><h3 id="UMD-规范"><a href="#UMD-规范" class="headerlink" title="UMD 规范"></a>UMD 规范</h3><p>UMD规范: 先检查模块是否是AMD(requireJS), 再检查是否是commonJS(node), 若都不是, 输出一个全局变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">root, factory</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">    define([], factory);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> exports === <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="built_in">module</span>.exports = factory();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Browswer globals (root is window)</span></span><br><span class="line">    root .returnExports = factory();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Just return a value to define the module export.</span></span><br><span class="line">  <span class="comment">// This example returns an object, but the module </span></span><br><span class="line">  <span class="comment">// can return a function as the exported value.</span></span><br><span class="line">  <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="webpack-cli-命令"><a href="#webpack-cli-命令" class="headerlink" title="webpack cli 命令"></a>webpack cli 命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 显示进度, 带颜色, 显示详细信息</span><br><span class="line">webpack --progress --color --display-reasons</span><br></pre></td></tr></table></figure><h3 id="package-json中的browserslist字段"><a href="#package-json中的browserslist字段" class="headerlink" title="package.json中的browserslist字段"></a>package.json中的browserslist字段</h3><p>在package.json中定义的brwoserslist后, 所有webpack配置中需要兼容浏览器的polyfill规则都会以此字段为标准进行垫片</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">"browserslist": [</span><br><span class="line">  "&gt;= 1%",</span><br><span class="line">  <span class="string">"last 2 versions"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="chunk-Bundle-Module-分别是什么"><a href="#chunk-Bundle-Module-分别是什么" class="headerlink" title="chunk, Bundle, Module 分别是什么?"></a>chunk, Bundle, Module 分别是什么?</h3><ul><li><code>Chunk</code> 是指webpack由代码分割出来的代码块, 出现在webpack打包的过程中, 最终被打进bundle里</li><li><code>bundle</code> 是webpack打包出的文件</li><li><code>module</code> 是开发中的单个模块, import和require进来的模块</li></ul><h2 id="编译ES6"><a href="#编译ES6" class="headerlink" title="编译ES6"></a>编译ES6</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-loader babel-core babel-preset-env --save-dev</span><br></pre></td></tr></table></figure><h3 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./app.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].[hash:8].js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="string">'/node_modules/'</span>,</span><br><span class="line">        use: <span class="string">'babel-loader'</span></span><br><span class="line">        <span class="comment">// 若在.babelrc中已经配置了, 下面内容不用配置i</span></span><br><span class="line">        options: &#123;</span><br><span class="line">          preset: [<span class="string">'env'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="安装Babel-loader"><a href="#安装Babel-loader" class="headerlink" title="安装Babel-loader"></a>安装Babel-loader</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 最新webpack</span><br><span class="line">npm install @babel/preset-env --save-dev</span><br><span class="line">// 普通webpack</span><br><span class="line">npm install babel-preset-env --save-dev</span><br><span class="line">// 使用见下面.babelrc节</span><br></pre></td></tr></table></figure><h3 id="Babel-Polyfill-与-Babel-Runtime-Transform-区别"><a href="#Babel-Polyfill-与-Babel-Runtime-Transform-区别" class="headerlink" title="Babel Polyfill 与 Babel Runtime Transform 区别"></a>Babel Polyfill 与 Babel Runtime Transform 区别</h3><p><code>Babel Polyfill</code>是全局垫片, 会引入全局污染, 为开发应用(比如开发一个网站)准备</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-polyfill --save</span><br><span class="line">// 在整个应用入口处</span><br><span class="line">import <span class="string">'babel-polyfill'</span></span><br></pre></td></tr></table></figure><p>相对的, <code>Babel-Runtime Transform</code>是局部垫片, 为开发框架(比如开发一个组件库等需要别人引用的代码)准备, 不会引入全局污染</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 对应上面babelloader的安装版本, 安装命令略有不同</span><br><span class="line">npm install @babel/runtime --save</span><br><span class="line">npm install @babel/plugin-transform-runtime --save-dev</span><br><span class="line"></span><br><span class="line">npm install babel-plugin-transform-runtime --save-dev</span><br><span class="line">npm install babel-runtime --save</span><br><span class="line">// 配置需在.babelrc中配置</span><br></pre></td></tr></table></figure><h3 id="babelrc"><a href="#babelrc" class="headerlink" title=".babelrc"></a>.babelrc</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"@babel/preset-env"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        // targets属性可以指定构建目标是browsers或node之类</span><br><span class="line">        "targets": &#123;</span><br><span class="line">          "browsers": [</span><br><span class="line">            <span class="string">"last 2 versions"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  "plugins": ["@babel/transform-runtime"]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提取公共代码-CommonsChunkPlugin"><a href="#提取公共代码-CommonsChunkPlugin" class="headerlink" title="提取公共代码 CommonsChunkPlugin"></a>提取公共代码 CommonsChunkPlugin</h2><h3 id="目的和方法"><a href="#目的和方法" class="headerlink" title="目的和方法"></a>目的和方法</h3><p>减少代码冗余, 提高加载速度, 减少重复代码的下载, 增高代码复用率</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(options)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="string">'pageA'</span>: <span class="string">'./src/pageA'</span>,</span><br><span class="line">    <span class="string">'pageB'</span>: <span class="string">'./src/pageB'</span>,</span><br><span class="line">    <span class="string">'vendor'</span>: [<span class="string">'lodash'</span>, <span class="string">'jquery'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    chunkFilename: <span class="string">'[name].chunk.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 提取公共代码</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// 通过指定 entry 配置中未用到的名称'manifest',将 webpack 样板(boilerplate)和 manifest 提取出来</span></span><br><span class="line">    <span class="comment">// 提取公共代码只有在多entry时才有效</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      names: [<span class="string">'vendor'</span>, <span class="string">'manifest'</span>],</span><br><span class="line">      <span class="comment">// 在传入  公共chunk(commons chunk) 之前所需要包含的最少数量的 chunks 。</span></span><br><span class="line">      <span class="comment">// 数量必须大于等于2，或者少于等于 chunks的数量</span></span><br><span class="line">      <span class="comment">// 传入 `Infinity` 会马上生成 公共chunk，但里面没有模块。</span></span><br><span class="line">      <span class="comment">// (随着 entry chunk 越来越多，</span></span><br><span class="line">      <span class="comment">// 这个配置保证没其它的模块会打包进 vendor chunk)</span></span><br><span class="line">      <span class="comment">// 你可以传入一个 `function` ，以添加定制的逻辑（默认是 chunk 的数量）</span></span><br><span class="line">      minChunks: <span class="literal">Infinity</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码分割-和-懒加载"><a href="#代码分割-和-懒加载" class="headerlink" title="代码分割 和 懒加载"></a>代码分割 和 懒加载</h2><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>分离业务代码和第三方依赖, 分离业务代码和业务公共代码和第三方依赖, 分离首次加载和访问后加载的代码</p><h3 id="webpack-config-js-1"><a href="#webpack-config-js-1" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="string">'pageA'</span>: <span class="string">'./src/pageA'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    publicPath: <span class="string">'./dist/'</span>,</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    chunkFilename: <span class="string">'[name].chunk.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法1-Dynamic-Import-Magic-Comment"><a href="#方法1-Dynamic-Import-Magic-Comment" class="headerlink" title="方法1: Dynamic Import, Magic Comment"></a>方法1: Dynamic Import, Magic Comment</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> page = <span class="string">'subpageA'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (page === <span class="string">'subpageA'</span>) &#123;</span><br><span class="line">  <span class="comment">// magicComment的值决定了打包出的bundle的name</span></span><br><span class="line">  <span class="keyword">import</span>(<span class="comment">/* webpackChunkName:'subpageA' */</span><span class="string">'./subPageA'</span>)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">subPageA</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(subPageA)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (page === <span class="string">'subPageB'</span>) &#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="comment">/* webpackChunkName:'subpageB' */</span><span class="string">'./subPageB'</span>)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">subPageB</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(subPageB)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'pageA'</span></span><br></pre></td></tr></table></figure><h3 id="方法2-require-ensure-require-include"><a href="#方法2-require-ensure-require-include" class="headerlink" title="方法2: require.ensure(), require.include()"></a>方法2: require.ensure(), require.include()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pageA.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用 require.include 将 subPageA 与 subPageB 都依赖的moduleA引入</span></span><br><span class="line"><span class="comment">// moduleA的代码不会再在subPageA与subPageB中各打包一份,而会打包在pageA的代码中</span></span><br><span class="line"><span class="comment">// 这里不用commonChunkPlugin的原因是webpack配置为单entry,其不起作用</span></span><br><span class="line"><span class="built_in">require</span>.include(<span class="string">'./moduleA'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> page = <span class="string">'subPageA'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (page === <span class="string">'subPageA'</span>) &#123;</span><br><span class="line">  <span class="comment">// 实现懒加载的require.ensure方法</span></span><br><span class="line">  <span class="built_in">require</span>.ensure([<span class="comment">/* 这里是依赖项数组, 本来可以写'./moduleA' */</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> subPageA = <span class="built_in">require</span>(<span class="string">'./subPageA'</span>)</span><br><span class="line">  &#125;, <span class="string">'subPageA'</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (page === <span class="string">'subPageB'</span>) &#123;</span><br><span class="line">  <span class="built_in">require</span>.ensure([<span class="comment">/* 这里是依赖项数组, 本来可以写'./moduleA' */</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> subPageB = <span class="built_in">require</span>(<span class="string">'./subPageB'</span>)</span><br><span class="line">  &#125;, <span class="string">'subPageB'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>.ensure([], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>)</span><br><span class="line">  _.join([<span class="string">'1'</span>, <span class="string">'2'</span>], <span class="string">'3'</span>)</span><br><span class="line">&#125;, <span class="string">'vendor'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'pageA'</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/03/07/5a9ff39de8c6b.jpg" alt=""></p><h3 id="提取多entry中的共同异步模块"><a href="#提取多entry中的共同异步模块" class="headerlink" title="提取多entry中的共同异步模块"></a>提取多entry中的共同异步模块</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="string">'pageA'</span>: <span class="string">'./src/pageA'</span>,</span><br><span class="line">    <span class="string">'pageB'</span>: <span class="string">'./src/pageB'</span>,</span><br><span class="line">    <span class="string">'vendor'</span>: [<span class="string">'lodash'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    publicPath: <span class="string">'./dist/'</span>,</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    chunkFilename: <span class="string">'[name].chunk.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// 提取异步模块，如果好几个模块是异步加载的</span></span><br><span class="line">    <span class="comment">// 就提取这些异步加载的模块之间的公共代码</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      <span class="comment">// 异步模块名称</span></span><br><span class="line">      <span class="keyword">async</span>: <span class="string">'async-common'</span>,</span><br><span class="line">      <span class="comment">// 在子代subPageA与subPageB中找</span></span><br><span class="line">      children: <span class="literal">true</span>,</span><br><span class="line">      minChunks: <span class="number">2</span></span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单独打包 vendor 和 webpack runtime(manifest)</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      names: [<span class="string">'vendor'</span>, <span class="string">'manifest'</span>],</span><br><span class="line">      minChunks: <span class="literal">Infinity</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pageA.js/pageB.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步模块subPageA与subPageB都依赖于./moduleA, moduleA会被打入async-common中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> page = <span class="string">'subpageA/B'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (page === <span class="string">'subpageA'</span>) &#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="comment">/* webpackChunkName:'subpageA' */</span><span class="string">'./subPageA'</span>)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">subPageA</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(subPageA)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (page === <span class="string">'subPageB'</span>) &#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="comment">/* webpackChunkName:'subpageB' */</span><span class="string">'./subPageB'</span>)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">subPageB</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(subPageB)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'pageA/B'</span></span><br></pre></td></tr></table></figure><h2 id="处理-CSS"><a href="#处理-CSS" class="headerlink" title="处理 CSS"></a>处理 CSS</h2><h3 id="行为"><a href="#行为" class="headerlink" title="行为"></a>行为</h3><ul><li><code>style-loader</code> 在html中创建style标签</li><li><code>css-loader</code> 使js中可以import css, 压缩css</li><li><code>css-loader/url</code> 用file-loader替换掉css-loader, 可以创建link标签引入一个构建的css文件, 由于会生成多个link标签引起多次http请求, 不推荐</li><li><code>css-loader/useable</code> 可以将import出的css赋值给一个变量, 这个变量有<code>use</code>与<code>unuse</code>方法, 控制css的插入与不插入</li></ul><h3 id="配置Sass-less-CSS-Modules"><a href="#配置Sass-less-CSS-Modules" class="headerlink" title="配置Sass, less, CSS-Modules"></a>配置Sass, less, CSS-Modules</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install less-loader less --save-dev</span><br><span class="line">npm install sass-loader node-sass --save-dev</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/app.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    publicPath: <span class="string">'./dist/'</span>,</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    <span class="comment">// 动态打包文件名输出规则</span></span><br><span class="line">    chunkFilename: <span class="string">'[name].bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'style-loader'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">// 后面的loader先use</span></span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'css-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              <span class="comment">// 开启css压缩</span></span><br><span class="line">              minimize: <span class="literal">true</span>,</span><br><span class="line">              <span class="comment">// CSS Module</span></span><br><span class="line">              modules: <span class="literal">true</span>,</span><br><span class="line">              <span class="comment">// CSS module 打包出来的class名规则</span></span><br><span class="line">              <span class="comment">// local代表类名</span></span><br><span class="line">              localIdentName: <span class="string">'[path][name]_[local]_[hash:base64:5]'</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'less-loader'</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="提取样式文件-ExtractTextWebpackPlugin"><a href="#提取样式文件-ExtractTextWebpackPlugin" class="headerlink" title="提取样式文件, ExtractTextWebpackPlugin"></a>提取样式文件, ExtractTextWebpackPlugin</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/app.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    publicPath: <span class="string">'./dist/'</span>,</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    <span class="comment">// 动态打包文件名输出规则</span></span><br><span class="line">    chunkFilename: <span class="string">'[name].bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: ExtractTextWebpackPlugin.extract(&#123;</span><br><span class="line">          <span class="comment">// fallback定义没有被提取的css要如何处理</span></span><br><span class="line">          fallback: &#123;</span><br><span class="line">            loader: <span class="string">'style-loader'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          use: [</span><br><span class="line">            &#123;</span><br><span class="line">              loader: <span class="string">'css-loader'</span>,</span><br><span class="line">              options: &#123;</span><br><span class="line">                <span class="comment">// CSS Module</span></span><br><span class="line">                modules: <span class="literal">true</span>,</span><br><span class="line">                <span class="comment">// CSS module 打包出来的class名规则</span></span><br><span class="line">                <span class="comment">// local代表类名</span></span><br><span class="line">                localIdentName: <span class="string">'[path][name]_[local]_[hash:base64:5]'</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              loader: <span class="string">'less-loader'</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// 提取 css 到指定的文件</span></span><br><span class="line">    <span class="keyword">new</span> ExtractTextWebpackPlugin(&#123;</span><br><span class="line">      <span class="comment">// 指定文件名</span></span><br><span class="line">      filename: <span class="string">'[name].min.css'</span>,</span><br><span class="line">      <span class="comment">// 动态加载的样式不放在提取出的文件中(放在js模块代码中,按照上面的fallback属性在style标签中输出)</span></span><br><span class="line">      allChunks: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PostCss"><a href="#PostCss" class="headerlink" title="PostCss"></a>PostCss</h3><p><strong>A tool for transforming CSS with JavaScript</strong></p><ul><li><code>autoprefixer</code> 加前缀</li><li><code>CSS-nano</code> css压缩</li><li><code>CSS-next</code> 使用未来的css语法, CSS变量, 自定义选择器, 动态计算</li><li><code>postcss-import</code></li><li><code>postcss-url</code></li><li><code>postcss-assets</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install postcss postcss-loader autofrefixer cssnano postcss-cssnext --save-dev</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// postcss-loader插入位置在less-loader与css-loader之间</span></span><br><span class="line">  loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    <span class="comment">// 表明下面plugins属性引入的插件是给postcss使用的</span></span><br><span class="line">    ident: <span class="string">'postcss'</span>,</span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="comment">// 自动加浏览器前缀</span></span><br><span class="line">      <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)(),</span><br><span class="line">      <span class="comment">// 使用未来的css</span></span><br><span class="line">      <span class="comment">// require('postcss-cssnext')()</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="Tree-Shaking-去除冗余代码"><a href="#Tree-Shaking-去除冗余代码" class="headerlink" title="Tree Shaking (去除冗余代码)"></a>Tree Shaking (去除冗余代码)</h2><h3 id="场景-1"><a href="#场景-1" class="headerlink" title="场景"></a>场景</h3><ul><li>常规优化</li><li>引入第三方库的某一个功能, 只用这一个功能, 其他代码都是冗余的</li></ul><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ul><li><code>js-tree-shaking</code> webpack.optimize.uglifyJS</li><li><code>css-tree-shaking</code> Purifycss-webpack</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// glob-all 加载多路径工具</span><br><span class="line">npm install purifycss-webpack glob-all --save-dev</span><br></pre></td></tr></table></figure><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">var</span> Webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">var</span> PurifyCSS = <span class="built_in">require</span>(<span class="string">'purifycss-webpack'</span>)</span><br><span class="line"><span class="comment">// glob-all 加载多路径工具</span></span><br><span class="line"><span class="keyword">var</span> glob = <span class="built_in">require</span>(<span class="string">'glob-all'</span>)</span><br><span class="line"><span class="keyword">var</span> ExtractTextWebpackPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/app.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    publicPath: <span class="string">'./dist/'</span>,</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    chunkFilename: <span class="string">'[name].bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: ExtractTextWebpackPlugin.extract(&#123;</span><br><span class="line">          fallback: &#123;</span><br><span class="line">            loader: <span class="string">'style-loader'</span>,</span><br><span class="line">            options: &#123;<span class="attr">singleton</span>: <span class="literal">true</span>&#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          use: [</span><br><span class="line">            &#123;</span><br><span class="line">              loader: <span class="string">'css-loader'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              loader: <span class="string">'less-loader'</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> ExtractTextWebpackPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'[name].min.css'</span>,</span><br><span class="line">      allChunks: <span class="literal">false</span></span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CSS Tree shaking</span></span><br><span class="line">    <span class="comment">// 必须在ExtractTextWebpackPlugin的后面</span></span><br><span class="line">    <span class="comment">// 无法与CSS-Modules一起使用</span></span><br><span class="line">    <span class="keyword">new</span> PurifyCSS(&#123;</span><br><span class="line">      <span class="comment">// glob-all 加载多路径工具</span></span><br><span class="line">      paths: glob.sync([</span><br><span class="line">        path.join(__dirname, <span class="string">'./*.html'</span>),</span><br><span class="line">        path.join(__dirname, <span class="string">'./src/*.js'</span>)</span><br><span class="line">      ])</span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// JS Tree shaking</span></span><br><span class="line">    <span class="keyword">new</span> Webpack.optimize.UglifyJsPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;看了Webpack官方文档, 力求有些产出, 此篇文章将学习所得知识总结记录, 力求得到学习的正反馈&lt;/p&gt;
&lt;h2 id=&quot;前置知识&quot;&gt;&lt;a href=&quot;#前置知识&quot; class=&quot;headerlink&quot; title=&quot;前置知识&quot;&gt;&lt;/a&gt;前置知识&lt;/h2&gt;&lt;h3 id=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue全家桶实现一个 &quot;云音乐&quot; webApp</title>
    <link href="http://yoursite.com/2018/02/20/vue-player/"/>
    <id>http://yoursite.com/2018/02/20/vue-player/</id>
    <published>2018-02-20T08:49:33.000Z</published>
    <updated>2018-05-05T08:51:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue全家桶实现模拟qq音乐webApp"><a href="#Vue全家桶实现模拟qq音乐webApp" class="headerlink" title="Vue全家桶实现模拟qq音乐webApp"></a>Vue全家桶实现模拟qq音乐webApp</h2><h3 id="界面解构"><a href="#界面解构" class="headerlink" title="界面解构"></a>界面解构</h3><p><img src="https://i.loli.net/2018/05/04/5aeba36318ee3.jpg" alt=""><br><img src="https://i.loli.net/2018/05/04/5aeba3633737d.jpg" alt=""><br><img src="https://i.loli.net/2018/05/04/5aeba36334d63.png" alt="1525086370137"><br><img src="https://i.loli.net/2018/05/04/5aeba36342c86.png" alt="1525165273551"></p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">src/</span><br><span class="line">|- api/ //服务器请求接口</span><br><span class="line">  |- config.js (请求qq音乐接口公用参数封装, ERR_OK)</span><br><span class="line">  |- rank.js (请求rank排行榜与排行榜详情数据接口)</span><br><span class="line">  |- recommend.js (请求轮播图和推荐歌单列表接口)</span><br><span class="line">  |- singer.js (歌手列表接口,特定歌手100首歌列表接口)</span><br><span class="line">  |- search.js (获取热词和搜索接口)</span><br><span class="line">  |- song.js (获取歌词的接口)  </span><br><span class="line">|- common/ </span><br><span class="line">  |- fonts/</span><br><span class="line">  |- image/</span><br><span class="line">  |- stylus/</span><br><span class="line">  |- js/ </span><br><span class="line">    |- cache.js (封装与localStorage相关)</span><br><span class="line">    |- mixin.js (所有mixin)</span><br><span class="line">    |- dom.js (封装dom操作)</span><br><span class="line">    |- jsonp.js (封装jsonp Promise)</span><br><span class="line">    |- singer.js (封装Singer类)</span><br><span class="line">    |- song.js (封装song类)</span><br><span class="line">    |- util.js (封装工具算法)</span><br><span class="line">    |- config.js (播放模式常量)</span><br><span class="line">|- base/ (base-components)</span><br><span class="line">|- components/ (vue-components)</span><br><span class="line">|- router/ (vue-router)</span><br><span class="line">|- store/ (vuex)</span><br><span class="line">  |- index.js </span><br><span class="line">  |- state.js </span><br><span class="line">  |- getters.js </span><br><span class="line">  |- actions.js</span><br><span class="line">  |- mutations.js </span><br><span class="line">  |- mutations-types.js </span><br><span class="line">App.vue</span><br><span class="line">main.js</span><br></pre></td></tr></table></figure><h3 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h3><p><img src="https://i.loli.net/2018/05/04/5aeba36343d58.jpg" alt=""></p><p><img src="https://i.loli.net/2018/05/04/5aeba36356580.jpg" alt="-w1500"></p><h3 id="github地址"><a href="#github地址" class="headerlink" title="github地址"></a>github地址</h3><p><a href="https://github.com/choteewang/vue-player" target="_blank" rel="noopener">https://github.com/choteewang/vue-player</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vue全家桶实现模拟qq音乐webApp&quot;&gt;&lt;a href=&quot;#Vue全家桶实现模拟qq音乐webApp&quot; class=&quot;headerlink&quot; title=&quot;Vue全家桶实现模拟qq音乐webApp&quot;&gt;&lt;/a&gt;Vue全家桶实现模拟qq音乐webApp&lt;/h2&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>async函数 (二): 异步分块处理典型案例</title>
    <link href="http://yoursite.com/2018/02/14/async2/"/>
    <id>http://yoursite.com/2018/02/14/async2/</id>
    <published>2018-02-14T14:20:46.000Z</published>
    <updated>2018-05-11T01:25:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="async函数-二-典型案例"><a href="#async函数-二-典型案例" class="headerlink" title="async函数 (二): 典型案例"></a>async函数 (二): 典型案例</h1><p><a href="https://choteewang.github.io/2018/02/10/async1/" target="_blank" rel="noopener">上篇</a>总结了Async函数的基本用法, 和一些典型例子, 本篇接着解决上篇遗留下来的面试题:</p><p><strong><code>统计一到400亿之间的数字含有多少个1? (1, 10, 21, 12中各含有一个1)</code></strong></p><p>显然这道题用<code>for</code>循环做会直接导致内存溢出, 需要用异步方法分批解决, 借由上篇<code>async函数</code>的知识, 可以慢慢理出思路.</p><h3 id="计算单个数字含1的个数"><a href="#计算单个数字含1的个数" class="headerlink" title="计算单个数字含1的个数"></a>计算单个数字含1的个数</h3><p>将<code>Number</code>显示转化为<code>String</code>, 用正则替换所有的<code>1</code>, 与原字符串长度的差值即<code>1</code>的个数, 直接上代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算当前数字中有几个1</span></span><br><span class="line"><span class="keyword">const</span> countOne = <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> len1 = (num + <span class="string">''</span>).length</span><br><span class="line">  <span class="keyword">var</span> len2 = (num + <span class="string">''</span>).replace(<span class="regexp">/1/g</span>, <span class="string">''</span>).length</span><br><span class="line">  <span class="keyword">return</span> len1 - len2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="计算一个批量-step-中1的个数"><a href="#计算一个批量-step-中1的个数" class="headerlink" title="计算一个批量(step)中1的个数"></a>计算一个批量(step)中1的个数</h3><p>不难想到, 由于400亿实在太大, 直接用<code>for</code>循环会导致内存溢出, 分批异步处理任务肯定是核心思路.</p><p>假设已经切割好的<strong>“一批”</strong>任务的开始和结束数字分别是<code>start</code>和<code>end</code>, 也就是一批需处理<code>end-start</code>个数字, 这个操作有可能比较耗时, 外界可以将其做一个需要等待的异步操作.</p><p>虽然处理过程是同步的, 但这项耗时的任务, 对外的表现是异步的, 要用<code>Promise</code>封装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 循环一个step的数字, 循环调用countOne,返回这段step中一共有几个1</span></span><br><span class="line"><span class="keyword">const</span> process = <span class="function">(<span class="params">start, end</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">    result += countOne(i)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码也可写成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> process = <span class="function">(<span class="params">start, end</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">      result += countOne(i)</span><br><span class="line">    &#125;</span><br><span class="line">    resolve(result)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="初级版async解决方案"><a href="#初级版async解决方案" class="headerlink" title="初级版async解决方案"></a>初级版async解决方案</h3><p>有了处理<strong>“一批”</strong>的处理函数, 需要做的只有分批调用, 并返回结果了, 下面是一个简单的<code>async</code>函数用来计算出结果</p><p><strong>注意: 为了省时我改小了数字, 原理都一样, 我不会真的用计算机算400亿</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 定义起,止,步幅常量,计算和</span></span><br><span class="line">  <span class="keyword">const</span> START = <span class="number">1</span></span><br><span class="line">  <span class="keyword">const</span> END = <span class="number">4000000</span> <span class="comment">// 为了省时改小数字, 原理一样</span></span><br><span class="line">  <span class="keyword">const</span> step = <span class="number">20000</span></span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 分批调用方法</span></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">reduce</span>(<span class="params">start</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 定义本次process终点</span></span><br><span class="line">    <span class="keyword">let</span> end = start + step</span><br><span class="line">    <span class="comment">// 如果是最后一次, 将Promise状态置为"已解决"并返回</span></span><br><span class="line">    <span class="keyword">if</span> (end &gt; END) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`最后一次,从<span class="subst">$&#123;start&#125;</span>开始,到<span class="subst">$&#123;END&#125;</span>结束`</span>)</span><br><span class="line">      sum += <span class="keyword">await</span> process(start, END)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果不是最后一次, 异步计算sum的值</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`现在要开始从<span class="subst">$&#123;start&#125;</span>开始`</span>)</span><br><span class="line">    sum += <span class="keyword">await</span> process(start, end)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// start后移为下次调用设置起点</span></span><br><span class="line">    start = end + <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 递归调用一个返回值是promise的reduce异步方法, 当前函数体的promise在下层promise没有resolve之前永远是pendding状态</span></span><br><span class="line">    <span class="keyword">await</span> reduce(start) <span class="comment">// 从start等于1开始</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 设置开始时间</span></span><br><span class="line">  <span class="keyword">var</span> startTime = <span class="built_in">Date</span>.now()</span><br><span class="line">  <span class="comment">// 调用入口</span></span><br><span class="line">  <span class="keyword">await</span> reduce(START)</span><br><span class="line">  <span class="comment">// 打印控制台</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;START&#125;</span>-<span class="subst">$&#123;END&#125;</span>,共用时<span class="subst">$&#123;(<span class="built_in">Date</span>.now() - startTime) <span class="regexp">/ 1000&#125; 秒, 结果是$&#123;sum&#125;`)</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">&#125;)()</span></span></span></span><br></pre></td></tr></table></figure><p>上述方法之所以简单, 是因为每次异步处理都在更新闭包内的全局变量<code>sum</code>, 不涉及<code>async reduce</code>方法在递归调用时<code>Promise</code>的层层嵌套</p><p>下面上一个更完善更复杂的</p><h3 id="进阶版async解决方案"><a href="#进阶版async解决方案" class="headerlink" title="进阶版async解决方案"></a>进阶版async解决方案</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> START = <span class="number">1</span></span><br><span class="line">  <span class="keyword">const</span> END = <span class="number">4000000</span></span><br><span class="line">  <span class="keyword">const</span> step = <span class="number">20000</span></span><br><span class="line">  <span class="keyword">const</span> SUM_START = <span class="number">0</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">reduce</span>(<span class="params">sum, start</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> end = start + step</span><br><span class="line">    <span class="comment">// 最后一次process</span></span><br><span class="line">    <span class="keyword">if</span> (end &gt; END) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`最后一次,从<span class="subst">$&#123;start&#125;</span>开始,到<span class="subst">$&#123;END&#125;</span>结束`</span>)</span><br><span class="line">      sum += <span class="keyword">await</span> process(start, END)</span><br><span class="line">      <span class="comment">// 这里return的才是promise的终止状态</span></span><br><span class="line">      <span class="comment">// 这个状态sum会变成Promise.resolve(sum)层层向外层pending状态的Promise传递</span></span><br><span class="line">      <span class="keyword">return</span> sum</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 开始本次process</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`现在要开始从<span class="subst">$&#123;start&#125;</span>开始`</span>)</span><br><span class="line">    sum += <span class="keyword">await</span> process(start, end)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// start后移,进行下次循环</span></span><br><span class="line">    start = end + <span class="number">1</span></span><br><span class="line">    <span class="comment">// 从新调用一个返回值是promise的异步方法,当前函数体的promise在下层promise没有resolve之前永远是pendding状态</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> reduce(sum, start)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 设置开始时间</span></span><br><span class="line">  <span class="keyword">var</span> startTime = <span class="built_in">Date</span>.now()</span><br><span class="line">  <span class="comment">// 调用入口</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> reduce(SUM_START, START) <span class="comment">// sum=0,start=1,开始</span></span><br><span class="line">  <span class="comment">// 控制台输出结果</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;START&#125;</span>-<span class="subst">$&#123;END&#125;</span>,共用时<span class="subst">$&#123;(<span class="built_in">Date</span>.now() - startTime) <span class="regexp">/ 1000&#125; 秒, 结果是$&#123;result&#125;`)</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">&#125;)()</span></span></span></span><br></pre></td></tr></table></figure><p>可以仔细想一下上述代码的逻辑和改动: </p><ul><li>每次递归调用都传入第一个参数sum, 用于传递刚被更新的<code>sum</code>值</li><li><code>async function reduce</code>运行后直接产生一个<code>Promise</code>, 这个<code>Promise</code>一直在<code>pending</code>(<code>async reduce</code>也一直没有返回值), 直到最后一次<code>process</code>, <code>return sum</code>后, 递归最里层<code>Promise</code>的状态变为<code>fulfilled</code>, 这个状态和<code>sum</code>的值, 层层向外层的<code>Promise</code>传递, 最终通过最外层的<code>reduce</code>方法中<code>return</code>的<code>Promise</code>, 将<code>sum</code>的值返回给<code>result</code>.</li></ul><p>在浏览器中运行可看到结果</p><p><img src="https://i.loli.net/2018/05/11/5af4f06d8f5e1.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;async函数-二-典型案例&quot;&gt;&lt;a href=&quot;#async函数-二-典型案例&quot; class=&quot;headerlink&quot; title=&quot;async函数 (二): 典型案例&quot;&gt;&lt;/a&gt;async函数 (二): 典型案例&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https:/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>async函数 (一): 基础 &amp;&amp; 并发</title>
    <link href="http://yoursite.com/2018/02/10/async1/"/>
    <id>http://yoursite.com/2018/02/10/async1/</id>
    <published>2018-02-10T01:20:43.000Z</published>
    <updated>2018-05-11T01:25:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="async函数-一-基础-amp-amp-并发"><a href="#async函数-一-基础-amp-amp-并发" class="headerlink" title="async函数 (一): 基础 &amp;&amp; 并发"></a>async函数 (一): 基础 &amp;&amp; 并发</h1><p>早就通读了阮一峰老师的<a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">&lt;<ecmascript6入门>&gt;</ecmascript6入门></a>, 今天来说说<code>Async</code>方法</p><h3 id="抛出问题"><a href="#抛出问题" class="headerlink" title="抛出问题"></a>抛出问题</h3><p>来看这么一道算法题:</p><p><strong>统计一到400亿之间的数字含有多少个1? (1, 10, 21, 12中各含有一个1)</strong></p><p>这道题用<code>for</code>循环做会直接导致内存溢出, 需要用异步方法分批解决, 由此引出今天要说的<code>async</code>函数</p><h3 id="async函数快速入门"><a href="#async函数快速入门" class="headerlink" title="async函数快速入门"></a>async函数快速入门</h3><p><code>Async</code>函数是<code>ES6</code>语法, 完整使用方法请移步<a href="http://es6.ruanyifeng.com/#docs/async" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/async</a>, 阮一峰老师讲的很清楚, 这里去繁化简, 说下其中最重要的</p><ul><li><strong>异步方法前面加async</strong></li></ul><p><code>async</code>函数完全可以看作多个异步操作，包装成的一个 Promise 对象.</p><p>函数前面加<code>async</code>关键字，表明该函数内部有异步操作。调用该函数时，会立即返回一个<code>Promise</code>对象。</p><ul><li><strong>await后面跟Promise, 按顺序依次执行</strong></li></ul><p><code>async</code>函数的<code>await</code>命令后面，可以是 <code>Promise</code> 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）。</p><ul><li><strong>await是then命令语法糖</strong></li></ul><p><code>await</code>命令就是内部<code>then</code>命令的语法糖, 如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ... 省略异步操作</span></span><br><span class="line">    <span class="comment">// resolve(data)</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 此data相当于下面的data</span></span><br><span class="line">  <span class="keyword">let</span> data = promise()</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">promise().then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data) <span class="comment">// </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong>async函数返回Promise对象</strong></li></ul><p><code>async</code>函数的返回值是 <code>Promise</code> 对象, 若返回基本值相当于 <code>return Promise.resolve(data)</code></p><ul><li><strong>Promise 对象的状态变化</strong></li></ul><p><code>async</code>函数返回的 Promise 对象，必须等到内部所有<code>await</code>命令后面的 Promise 对象执行完，才会发生状态改变，除非遇到<code>return</code>语句或者抛出错误。也就是说，只有<code>async</code>函数内部的异步操作执行完，才会执行<code>then</code>方法指定的回调函数。</p><ul><li><strong>await的reject中断async函数的执行, try-catch解决</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">Promise</span>.reject(<span class="string">'出错了'</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">Promise</span>.resolve(<span class="string">'hello world'</span>); <span class="comment">// 不会执行</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决方法 try catch</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">Promise</span>.reject(<span class="string">'出错了'</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123; <span class="built_in">console</span>.log(e) &#125;  </span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">Promise</span>.resolve(<span class="string">'hello world'</span>); <span class="comment">// 会执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h3><p>先来一个典型形式:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getStockPriceByName</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> symbol = <span class="keyword">await</span> getStockSymbol(name);</span><br><span class="line">  <span class="keyword">const</span> stockPrice = <span class="keyword">await</span> getStockPrice(symbol);</span><br><span class="line">  <span class="keyword">return</span> stockPrice;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getStockPriceByName(<span class="string">'goog'</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>50毫秒后, 输出<code>hello world</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(resolve, ms);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncPrint</span>(<span class="params">value, ms</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> timeout(ms);</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncPrint(<span class="string">'hello world'</span>, <span class="number">50</span>);</span><br></pre></td></tr></table></figure><p>各种使用形式的<code>async</code>关键字书写位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数表达式</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象的方法</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="keyword">async</span> foo() &#123;&#125; &#125;;</span><br><span class="line">obj.foo().then(...)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Class 的方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Storage</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.cachePromise = caches.open(<span class="string">'avatars'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> getAvatar(name) &#123;</span><br><span class="line">    <span class="keyword">const</span> cache = <span class="keyword">await</span> <span class="keyword">this</span>.cachePromise;</span><br><span class="line">    <span class="keyword">return</span> cache.match(<span class="string">`/avatars/<span class="subst">$&#123;name&#125;</span>.jpg`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> storage = <span class="keyword">new</span> Storage();</span><br><span class="line">storage.getAvatar(<span class="string">'jake'</span>).then(…);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">async</span> () =&gt; &#123;&#125;;</span><br></pre></td></tr></table></figure><p>返回普通值, 会成为<code>then</code>方法回调的参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'hello world'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f().then(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(v))</span><br><span class="line"><span class="comment">// "hello world"</span></span><br></pre></td></tr></table></figure><h3 id="处理并发"><a href="#处理并发" class="headerlink" title="处理并发"></a>处理并发</h3><p>多个<code>await</code>命令后面的异步操作，如果不存在继发关系，最好让它们同时触发。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继发</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">await</span> getFoo();</span><br><span class="line"><span class="keyword">let</span> bar = <span class="keyword">await</span> getBar();</span><br></pre></td></tr></table></figure><p>上面代码中，<code>getFoo</code>和<code>getBar</code>是两个独立的异步操作（即互不依赖），被写成继发关系。这样比较耗时，因为只有<code>getFoo</code>完成以后，才会执行<code>getBar</code>，完全可以让它们同时触发。</p><p>下面两种写法，<code>getFoo</code>和<code>getBar</code>都是同时触发，这样就会缩短程序的执行时间。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">let</span> [foo, bar] = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([getFoo(), getBar()]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">let</span> fooPromise = getFoo();</span><br><span class="line"><span class="keyword">let</span> barPromise = getBar();</span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">await</span> fooPromise;</span><br><span class="line"><span class="keyword">let</span> bar = <span class="keyword">await</span> barPromise;</span><br></pre></td></tr></table></figure><p>将<code>forEach</code>方法的参数改成<code>async</code>函数，有问题, 下面代码可能不会正常工作，原因是这时三个<code>db.post</code>操作将是并发执行(async内部异步, async本身对外不异步)，也就是同时执行，而不是继发执行。正确的写法是采用<code>for</code>循环。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dbFuc</span>(<span class="params">db</span>) </span>&#123; <span class="comment">//这里不需要 async</span></span><br><span class="line">  <span class="keyword">let</span> docs = [&#123;&#125;, &#123;&#125;, &#123;&#125;];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 可能得到错误结果</span></span><br><span class="line">  docs.forEach(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">doc</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">await</span> db.post(doc);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确做法</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">dbFuc</span>(<span class="params">db</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> docs = [&#123;&#125;, &#123;&#125;, &#123;&#125;];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> doc <span class="keyword">of</span> docs) &#123;</span><br><span class="line">    <span class="keyword">await</span> db.post(doc);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果确实希望多个请求并发执行，可以使用<code>Promise.all</code>方法。当三个请求都会<code>resolved</code>时，下面两种写法效果相同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">dbFuc</span>(<span class="params">db</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> docs = [&#123;&#125;, &#123;&#125;, &#123;&#125;];</span><br><span class="line">  <span class="keyword">let</span> promises = docs.map(<span class="function">(<span class="params">doc</span>) =&gt;</span> db.post(doc));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> results = <span class="keyword">await</span> <span class="built_in">Promise</span>.all(promises);</span><br><span class="line">  <span class="built_in">console</span>.log(results);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者使用下面的写法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">dbFuc</span>(<span class="params">db</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> docs = [&#123;&#125;, &#123;&#125;, &#123;&#125;];</span><br><span class="line">  <span class="keyword">let</span> promises = docs.map(<span class="function">(<span class="params">doc</span>) =&gt;</span> db.post(doc));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> results = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> promise <span class="keyword">of</span> promises) &#123;</span><br><span class="line">    results.push(<span class="keyword">await</span> promise);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(results);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="综合应用-按顺序完成异步操作"><a href="#综合应用-按顺序完成异步操作" class="headerlink" title="综合应用: 按顺序完成异步操作"></a>综合应用: 按顺序完成异步操作</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">logInOrder</span>(<span class="params">urls</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> url <span class="keyword">of</span> urls) &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(url);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">await</span> response.text());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的写法可以实现需求, 但问题是所有远程操作都是继发。只有前一个 <code>URL</code> 返回结果，才会去读取下一个 <code>URL</code>，这样做效率很差，非常浪费时间。我们需要的是并发发出远程请求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">logInOrder</span>(<span class="params">urls</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 并发读取远程URL</span></span><br><span class="line">  <span class="keyword">const</span> textPromises = urls.map(<span class="keyword">async</span> url =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(url);</span><br><span class="line">    <span class="keyword">return</span> response.text();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 按次序输出</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> textPromise <span class="keyword">of</span> textPromises) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">await</span> textPromise);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，虽然<code>map</code>方法的参数是<code>async</code>函数，但它是并发执行的，因为只有<code>async</code>函数内部是继发执行，外部不受影响。后面的<code>for..of</code>循环内部使用了<code>await</code>，因此实现了按顺序输出。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本篇总结了<code>async函数</code>使用的典型例子, 涵盖了<code>async函数</code>学习过程中的各个关键点, 省略了错误处理部分(这部分需好好阅读阮一峰老师的书), <a href="https://choteewang.github.io/2018/02/14/async2/" target="_blank" rel="noopener">下篇</a>将用<code>async函数</code>解决之前抛出的复杂面试题</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;async函数-一-基础-amp-amp-并发&quot;&gt;&lt;a href=&quot;#async函数-一-基础-amp-amp-并发&quot; class=&quot;headerlink&quot; title=&quot;async函数 (一): 基础 &amp;amp;&amp;amp; 并发&quot;&gt;&lt;/a&gt;async函数 (一)
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue 2.5+ 外卖 webapp</title>
    <link href="http://yoursite.com/2018/01/27/vue2-5-%E5%A4%96%E5%8D%96app/"/>
    <id>http://yoursite.com/2018/01/27/vue2-5-外卖app/</id>
    <published>2018-01-27T09:16:18.000Z</published>
    <updated>2018-04-25T09:20:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue-2-5-外卖-webapp"><a href="#vue-2-5-外卖-webapp" class="headerlink" title="vue 2.5+ 外卖 webapp"></a>vue 2.5+ 外卖 webapp</h1><h3 id="presentation"><a href="#presentation" class="headerlink" title="presentation"></a>presentation</h3><p><img src="https://i.loli.net/2018/01/27/5a6c4030d5043.gif" alt="pre1"><br><img src="https://i.loli.net/2018/01/27/5a6c42ac6c4bb.gif" alt="pre2"><br><img src="https://i.loli.net/2018/01/27/5a6c42a8e08a0.gif" alt="3"><br><img src="https://i.loli.net/2018/01/27/5a6c42a88b9af.gif" alt="4"><br><img src="https://i.loli.net/2018/01/27/5a6c42a864868.gif" alt="5"></p><h3 id="tech"><a href="#tech" class="headerlink" title="tech"></a>tech</h3><ul><li>Vue 2.5+</li><li>Vue-router 3.0+</li><li>Full-ES6-Syntax-Cover</li><li>stylus css预处理器</li><li>axios</li><li>better-scroll</li><li>eslint</li><li>移动端flex布局, inline-block布局, css-sticky-footer</li><li>media query 实现移动端1px边框和背景图片切换</li></ul><h2 id="High-Light"><a href="#High-Light" class="headerlink" title="High Light"></a>High Light</h2><h3 id="两侧同步滚动-算法实现"><a href="#两侧同步滚动-算法实现" class="headerlink" title="两侧同步滚动,算法实现"></a>两侧同步滚动,算法实现</h3><h4 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h4><p><img src="https://i.loli.net/2018/01/27/5a6c42ac6c4bb.gif" alt="pre2"></p><h4 id="goods-vue中的code"><a href="#goods-vue中的code" class="headerlink" title="goods.vue中的code"></a>goods.vue中的code</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu-wrapper"</span> <span class="attr">ref</span>=<span class="string">"menuWrapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in goods"</span> <span class="attr">:key</span>=<span class="string">"index"</span> <span class="attr">class</span>=<span class="string">"menu-item"</span> <span class="attr">:class</span>=<span class="string">"&#123; current : currentIndex === index &#125;"</span> @<span class="attr">click</span>=<span class="string">"selectMenu(index,$event)"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"foods-wrapper"</span> <span class="attr">ref</span>=<span class="string">"foodsWrapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in goods"</span> <span class="attr">:key</span>=<span class="string">"index"</span> <span class="attr">class</span>=<span class="string">"food-list"</span> <span class="attr">ref</span>=<span class="string">"foodList"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 存放所有dom高度的数组</span></span><br><span class="line">    listHeight: [],</span><br><span class="line">    <span class="comment">// 存放</span></span><br><span class="line">    scrollY: <span class="number">0</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br><span class="line">created() &#123;</span><br><span class="line">  axios.get(<span class="string">'/api/goods'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.data.errno === ERR_OK) &#123;</span><br><span class="line">      <span class="keyword">this</span>.goods = res.data.data;</span><br><span class="line">      <span class="comment">// 先让this.goods更新template中的dom后,iscroll才能准确计算出dom高度,dom的更新在vue中是异步的,所以在nextTick异步更新后再用iScroll算高度</span></span><br><span class="line">      <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>._initScroll();</span><br><span class="line">        <span class="keyword">this</span>._calculateHeight();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  _initScroll() &#123;</span><br><span class="line">    <span class="comment">// 用BScroll初始化左侧栏</span></span><br><span class="line">    <span class="keyword">this</span>.menuScroll = <span class="keyword">new</span> BScroll(<span class="keyword">this</span>.$refs.menuWrapper, &#123;</span><br><span class="line">      click: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 用BScroll初始化右侧栏</span></span><br><span class="line">    <span class="keyword">this</span>.foodScroll = <span class="keyword">new</span> BScroll(<span class="keyword">this</span>.$refs.foodsWrapper, &#123;</span><br><span class="line">      click: <span class="literal">true</span>,</span><br><span class="line">      probeType: <span class="number">3</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 右侧栏滚动时实时返回y值</span></span><br><span class="line">    <span class="keyword">this</span>.foodScroll.on(<span class="string">'scroll'</span>, pos =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.scrollY = <span class="built_in">Math</span>.abs(<span class="built_in">Math</span>.round(pos.y));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 将 ref为foodList li标签 累加高度 组成数组</span></span><br><span class="line">  _calculateHeight() &#123;</span><br><span class="line">    <span class="keyword">const</span> listHeight = <span class="keyword">this</span>.listHeight;</span><br><span class="line">    <span class="keyword">const</span> foodList = <span class="keyword">this</span>.$refs.foodList;</span><br><span class="line">    <span class="keyword">var</span> height = <span class="number">0</span>;</span><br><span class="line">    listHeight.push(height);</span><br><span class="line">    foodList.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">      height += v.clientHeight;</span><br><span class="line">      listHeight.push(height);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 左侧li点击时传入index,滚动到index对应的右侧menu</span></span><br><span class="line">  selectMenu(index) &#123;</span><br><span class="line">    <span class="keyword">const</span> el = <span class="keyword">this</span>.$refs.foodList[index];</span><br><span class="line">    <span class="comment">// BScorll库方法Bscroll.ScrollToElement(el,time)</span></span><br><span class="line">    <span class="keyword">this</span>.foodScroll.scrollToElement(el, <span class="number">300</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">    <span class="comment">// 根据 外层容器foodsWrapper的scrollTop值 所处于 listHeight数组 的区间,来返回当前左侧栏被选中的index</span></span><br><span class="line">    currentIndex() &#123;</span><br><span class="line">      <span class="keyword">let</span> scrollY = <span class="keyword">this</span>.scrollY;</span><br><span class="line">      <span class="keyword">const</span> listHeight = <span class="keyword">this</span>.listHeight;</span><br><span class="line">      <span class="keyword">const</span> length = listHeight.length;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> top = listHeight[i];</span><br><span class="line">        <span class="keyword">const</span> bottom = listHeight[i + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (!bottom || (scrollY &gt;= top &amp;&amp; scrollY &lt; bottom)) &#123;</span><br><span class="line">          <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h3 id="购物车-数据流实现"><a href="#购物车-数据流实现" class="headerlink" title="购物车 - 数据流实现"></a>购物车 - 数据流实现</h3><p><img src="https://i.loli.net/2018/01/27/5a6c34653fb80.png" alt="vue-sell购物车"></p><h3 id="购物小球-数据结构实现"><a href="#购物小球-数据结构实现" class="headerlink" title="购物小球 - 数据结构实现"></a>购物小球 - 数据结构实现</h3><h4 id="效果演示-1"><a href="#效果演示-1" class="headerlink" title="效果演示"></a>效果演示</h4><p><img src="https://i.loli.net/2018/01/27/5a6c4030d5043.gif" alt="pre1"></p><h4 id="事件派发数据流"><a href="#事件派发数据流" class="headerlink" title="事件派发数据流"></a>事件派发数据流</h4><p><img src="https://i.loli.net/2018/01/27/5a6c3467ed132.png" alt="vue-sell小球缓落动画"></p><h4 id="shopcart中的数据结构"><a href="#shopcart中的数据结构" class="headerlink" title="shopcart中的数据结构"></a>shopcart中的数据结构</h4><p>shopcart中采用一个<code>balls</code>数组用来沟通<code>cartcontrol.vue</code>传递的<code>event.target</code>的dom元素与动画小球dom元素的联系</p><p><img src="https://i.loli.net/2018/01/27/5a6c34694efe5.jpg" alt=""></p><h4 id="shopcart-vue中的code"><a href="#shopcart-vue中的code" class="headerlink" title="shopcart.vue中的code"></a>shopcart.vue中的code</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ball-container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"drop"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">"(ball,index) in balls"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">:key</span>=<span class="string">"index"</span> </span></span><br><span class="line"><span class="tag">    @<span class="attr">before-enter</span>=<span class="string">"beforeDrop"</span> </span></span><br><span class="line"><span class="tag">    @<span class="attr">enter</span>=<span class="string">"dropping"</span> </span></span><br><span class="line"><span class="tag">    @<span class="attr">after-enter</span>=<span class="string">"endDropping"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ball-outer"</span> <span class="attr">v-show</span>=<span class="string">"ball.show"</span> <span class="attr">:num</span>=<span class="string">"ball.num"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ball-inner"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      balls: [</span><br><span class="line">        &#123;</span><br><span class="line">          num: <span class="number">1</span>,</span><br><span class="line">          show: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          num: <span class="number">2</span>,</span><br><span class="line">          show: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          num: <span class="number">3</span>,</span><br><span class="line">          show: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          num: <span class="number">4</span>,</span><br><span class="line">          show: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          num: <span class="number">5</span>,</span><br><span class="line">          show: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    对goods页面调用的$refs.shopcart.drop(el)做反应,开始小球掉落</span></span><br><span class="line"><span class="comment">    找到this.balls中第一个ball.show == false的项</span></span><br><span class="line"><span class="comment">    将此项开始的show置为true,el属性设置为传入的el-dom</span></span><br><span class="line"><span class="comment">    开始掉落此球</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    drop(el) &#123;</span><br><span class="line">      <span class="keyword">let</span> ballSelected = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">const</span> truth = <span class="keyword">this</span>.balls.some(<span class="function"><span class="keyword">function</span>(<span class="params">ball</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ball.show === <span class="literal">false</span>) &#123;</span><br><span class="line">          ballSelected = ball;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (truth) &#123;</span><br><span class="line">        ballSelected.el = el;</span><br><span class="line">        ballSelected.show = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeDrop(el) &#123;</span><br><span class="line">      <span class="comment">// Start通过绑定自定义属性拿到event.target,改进了原版算法</span></span><br><span class="line">      <span class="keyword">const</span> elNum = <span class="built_in">parseInt</span>(el.getAttribute(<span class="string">'num'</span>));</span><br><span class="line">      <span class="keyword">let</span> ballEl = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">this</span>.balls.some(<span class="function"><span class="keyword">function</span>(<span class="params">ball</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ball.num === elNum) &#123;</span><br><span class="line">          ballEl = ball.el;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// End通过绑定自定义属性拿到event.target,改进了原版算法</span></span><br><span class="line">      <span class="keyword">let</span> rect = ballEl.getBoundingClientRect();</span><br><span class="line">      <span class="keyword">let</span> x = rect.left - <span class="number">22</span>;</span><br><span class="line">      <span class="keyword">let</span> y = -(<span class="built_in">window</span>.innerHeight - rect.top - <span class="number">42</span>);</span><br><span class="line">      el.style.display = <span class="string">'block'</span>;</span><br><span class="line">      el.style.webkitTransform = <span class="string">`translate3d(0,<span class="subst">$&#123;y&#125;</span>px,0)`</span>;</span><br><span class="line">      el.style.transform = <span class="string">`translate3d(0,<span class="subst">$&#123;y&#125;</span>px,0)`</span>;</span><br><span class="line">      <span class="keyword">let</span> inner = el.firstElementChild;</span><br><span class="line">      inner.style.webkitTransform = <span class="string">`translate3d(<span class="subst">$&#123;x&#125;</span>px,0,0)`</span>;</span><br><span class="line">      inner.style.transform = <span class="string">`translate3d(<span class="subst">$&#123;x&#125;</span>px,0,0)`</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    dropping(el, done) &#123;</span><br><span class="line">      <span class="comment">// 强制浏览器重绘</span></span><br><span class="line">      <span class="comment">/* eslint-disable no-unused-vars */</span></span><br><span class="line">      <span class="keyword">let</span> rf = el.offsetHeight;</span><br><span class="line">      <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        el.style.webkitTransform = <span class="string">'translate3d(0,0,0)'</span>;</span><br><span class="line">        el.style.transform = <span class="string">'translate3d(0,0,0)'</span>;</span><br><span class="line">        <span class="keyword">let</span> inner = el.firstElementChild;</span><br><span class="line">        inner.style.webkitTransform = <span class="string">'translate3d(0,0,0)'</span>;</span><br><span class="line">        inner.style.transform = <span class="string">'translate3d(0,0,0)'</span>;</span><br><span class="line">        el.addEventListener(<span class="string">'transitionend'</span>, done);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    endDropping(el) &#123;</span><br><span class="line">      <span class="comment">// Start通过绑定自定义属性拿到el,改进了原版算法</span></span><br><span class="line">      <span class="keyword">const</span> elNum = <span class="built_in">parseInt</span>(el.getAttribute(<span class="string">'num'</span>));</span><br><span class="line">      <span class="keyword">this</span>.balls.some(<span class="function"><span class="keyword">function</span>(<span class="params">ball</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ball.num === elNum) &#123;</span><br><span class="line">          ball.show = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      el.style.display = <span class="string">'none'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// End通过绑定自定义属性拿到el,改进了原版算法</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 外层负责纵向y轴位移</span></span><br><span class="line">.ball-container</span><br><span class="line">  .ball-outer</span><br><span class="line">    <span class="attribute">position</span> fixed</span><br><span class="line">    <span class="attribute">left</span> <span class="number">32px</span></span><br><span class="line">    <span class="attribute">bottom</span> <span class="number">32px</span></span><br><span class="line">    <span class="attribute">z-index</span> <span class="number">200</span></span><br><span class="line">    <span class="attribute">transition</span> all <span class="number">0.4s</span> cubic-bezier(<span class="number">0.17</span>, -<span class="number">0.34</span>, <span class="number">0.75</span>, <span class="number">0.46</span>)</span><br><span class="line">    <span class="comment">// 内层负责横向x轴位移</span></span><br><span class="line">    .ball-inner</span><br><span class="line">      <span class="attribute">width</span> <span class="number">16px</span></span><br><span class="line">      <span class="attribute">height</span> <span class="number">16px</span></span><br><span class="line">      <span class="attribute">border-radius</span> <span class="number">50%</span></span><br><span class="line">      <span class="attribute">background</span> rgb(<span class="number">0</span>, <span class="number">160</span>, <span class="number">220</span>)</span><br><span class="line">      <span class="attribute">transition</span> all <span class="number">0.4s</span></span><br></pre></td></tr></table></figure><h3 id="根据scroll时动态获取的y轴偏移值设置back按钮的位置和颜色"><a href="#根据scroll时动态获取的y轴偏移值设置back按钮的位置和颜色" class="headerlink" title="根据scroll时动态获取的y轴偏移值设置back按钮的位置和颜色"></a>根据scroll时动态获取的y轴偏移值设置back按钮的位置和颜色</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// food.vue</span></span><br><span class="line">show() &#123;</span><br><span class="line">  <span class="keyword">this</span>.showFlag = <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">// 每次打开food页面默认显示所有有评论的评价</span></span><br><span class="line">  <span class="keyword">this</span>.selectType = ALL;</span><br><span class="line">  <span class="keyword">this</span>.onlyContent = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 每次打开food页面初始化betterScroll</span></span><br><span class="line">  <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.scroll) &#123;</span><br><span class="line">      <span class="keyword">this</span>.scroll = <span class="keyword">new</span> BScroll(<span class="keyword">this</span>.$refs.foodWrapper, &#123;</span><br><span class="line">        click: <span class="literal">true</span>,</span><br><span class="line">        probeType: <span class="number">3</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.scroll.refresh();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 每次进入food页面时,先定义一次back元素位置</span></span><br><span class="line">    <span class="keyword">let</span> transform = <span class="built_in">window</span>.getComputedStyle(</span><br><span class="line">      <span class="keyword">this</span>.$refs.foodWrapper.firstElementChild,</span><br><span class="line">      <span class="literal">null</span></span><br><span class="line">    ).transform;</span><br><span class="line">    <span class="comment">//截取字符串,找到被滚动的.food-content元素的y偏移量</span></span><br><span class="line">    <span class="comment">//这个值相当于translateY的值</span></span><br><span class="line">    <span class="comment">//console.log(transform); // matrix(1, 0, 0, 1, 0, -55.7028)</span></span><br><span class="line">    <span class="keyword">if</span> (transform.indexOf(<span class="string">'-'</span>) === <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$refs.back.style.transform = <span class="string">`translate3d(0,0,0)`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      transform = transform.slice(transform.indexOf(<span class="string">'-'</span>) + <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">this</span>.$refs.back.style.transform = <span class="string">`translate3d(0,<span class="subst">$&#123;transform&#125;</span>px,0)`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 根据scroll时动态获取的y轴偏移值设置back按钮的位置和颜色</span></span><br><span class="line">    <span class="keyword">this</span>.scroll.on(<span class="string">'scroll'</span>, pos =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (pos.y &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> transform = <span class="built_in">window</span>.getComputedStyle(</span><br><span class="line">          <span class="keyword">this</span>.$refs.foodWrapper.firstElementChild,</span><br><span class="line">          <span class="literal">null</span></span><br><span class="line">        ).transform;</span><br><span class="line">        <span class="built_in">console</span>.log(transform); <span class="comment">//</span></span><br><span class="line">        <span class="keyword">this</span>.$refs.back.style.transform = <span class="string">`translate3d(0,<span class="subst">$&#123;-pos.y&#125;</span>px,0)`</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> style = <span class="keyword">this</span>.$refs.back.firstElementChild.style;</span><br><span class="line">      style.color = pos.y &lt; -<span class="built_in">window</span>.innerWidth + <span class="number">30</span> ? <span class="string">'#000'</span> : <span class="string">'#fff'</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="seller-vue页面的页面dom初始化"><a href="#seller-vue页面的页面dom初始化" class="headerlink" title="seller.vue页面的页面dom初始化"></a>seller.vue页面的页面dom初始化</h3><p>在<code>seller.vue</code>初始化BScroll中遇到的问题,页面必须拿到<code>seller</code>才能初始化dom</p><p><code>seller</code>是在app.vue中发ajax请求异步得到后通过<code>v-bind</code>传入<code>seller.vue</code>中的</p><p>在刷新页面时要使用<code>watch</code>监视传递的<code>seller</code>异步获取完成</p><p>在切换路由时<code>app.vue</code>不会进行ajax请求,但vue实例的生命周期会重新加载一次, 所以会在<code>created</code>或<code>mounted</code>里再写入初始化<code>BScroll</code>代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// seller.vue</span></span><br><span class="line">props: &#123;</span><br><span class="line">  seller: &#123;</span><br><span class="line">    type: <span class="built_in">Object</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">created() &#123;</span><br><span class="line">  <span class="keyword">this</span>.$nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 若刷新,触发顺序1</span></span><br><span class="line">    <span class="comment">// 在不刷新只切换路由时由于app.vue不再触发ajax请求只触发此步</span></span><br><span class="line">    <span class="comment">// console.log('created initScroll'); </span></span><br><span class="line">    <span class="keyword">this</span>._initScroll();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br><span class="line">watch: &#123;</span><br><span class="line">  seller: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 若刷新,触发顺序2,因为app.vue的ajax是异步请求</span></span><br><span class="line">    <span class="comment">//console.log('watch initScroll'); </span></span><br><span class="line">    <span class="keyword">this</span>._initScroll();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  _initScroll() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(); <span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.scroll) &#123;</span><br><span class="line">      <span class="keyword">this</span>.scroll = <span class="keyword">new</span> BScroll(<span class="keyword">this</span>.$refs.sellerWrapper, &#123;</span><br><span class="line">        click: <span class="literal">true</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.scroll.refresh();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="Tips-amp-Util"><a href="#Tips-amp-Util" class="headerlink" title="Tips &amp; Util"></a>Tips &amp; Util</h2><h3 id="视网膜屏1px边框实现"><a href="#视网膜屏1px边框实现" class="headerlink" title="视网膜屏1px边框实现"></a>视网膜屏1px边框实现</h3><p>前置知识:<a href="http://www.zhangxinxu.com/wordpress/2012/08/window-devicepixelratio/" target="_blank" rel="noopener">设备像素比devicePixelRatio简单介绍</a></p><p>移动端的1px边框到了视网膜屏因为要乘以像素比,所以实际大小要几倍大于1px(比如iphone6的像素比是2,则2*1px=2px)</p><p>因此, 1px边框可以由<code>after伪类</code>加上,然后用<code>@media</code>根据不同的像素比查询来缩放<code>after伪类</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个mixin加给要添加伪类的父类</span></span><br><span class="line"><span class="function"><span class="title">border-1px</span><span class="params">(<span class="variable">$color</span>)</span></span></span><br><span class="line">   <span class="attribute">position</span>: relative</span><br><span class="line">   &amp;::after</span><br><span class="line">     <span class="attribute">position</span>: absolute</span><br><span class="line">     <span class="attribute">left</span>: <span class="number">0</span></span><br><span class="line">     <span class="attribute">bottom</span>: <span class="number">0</span></span><br><span class="line">     <span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line">     <span class="attribute">content</span>:<span class="string">''</span></span><br><span class="line">     <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="variable">$color</span></span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@media (min-device-pixel-ratio : <span class="number">1.5</span>),(-webkit-min-device-pixel-ratio : <span class="number">1.5</span>)</span><br><span class="line">  <span class="comment">/* 1.5*7 ~= 1 */</span></span><br><span class="line">  .<span class="attribute">border</span>-<span class="number">1px</span></span><br><span class="line">    &amp;::after</span><br><span class="line">      <span class="attribute">transform</span>: scaleY(<span class="number">0.7</span>)</span><br><span class="line">      -webkit-<span class="attribute">transform</span>: scaleY(<span class="number">0.7</span>)</span><br><span class="line"></span><br><span class="line">@media (min-device-pixel-ratio : <span class="number">2.0</span>),(-webkit-min-device-pixel-ratio : <span class="number">2.0</span>)</span><br><span class="line">  <span class="comment">/* 2.0*5 = 1 */</span></span><br><span class="line">  .<span class="attribute">border</span>-<span class="number">1px</span></span><br><span class="line">    &amp;::after</span><br><span class="line">      <span class="attribute">transform</span>: scaleY(<span class="number">0.5</span>)</span><br><span class="line">      -webkit-<span class="attribute">transform</span>: scaleY(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><h3 id="根据不同的设备像素比应用不同图片"><a href="#根据不同的设备像素比应用不同图片" class="headerlink" title="根据不同的设备像素比应用不同图片"></a>根据不同的设备像素比应用不同图片</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">bg-image</span><span class="params">(<span class="variable">$url</span>)</span></span></span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="variable">$url</span> + <span class="string">'@2x.png'</span>)</span><br><span class="line"></span><br><span class="line">  @media (-webkit-min-device-pixel-ratio: <span class="number">3</span>), (min-device-pixel-ratio: <span class="number">3</span>)</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="variable">$url</span> + <span class="string">'@3x.png'</span>)</span><br></pre></td></tr></table></figure><h3 id="多行文本的垂直居中"><a href="#多行文本的垂直居中" class="headerlink" title="多行文本的垂直居中"></a>多行文本的垂直居中</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.menu-wrapper</span><br><span class="line">    <span class="attribute">display</span> table</span><br><span class="line">    .text</span><br><span class="line">    <span class="attribute">display</span> table-cell</span><br><span class="line">    <span class="attribute">vertical-align</span> middle</span><br></pre></td></tr></table></figure><h3 id="背景模糊-iPhone独占"><a href="#背景模糊-iPhone独占" class="headerlink" title="背景模糊(iPhone独占)"></a>背景模糊(iPhone独占)</h3><p><code>backdrop-filter blur(10px)</code></p><h3 id="padding-margin-百分比实现高度自适应"><a href="#padding-margin-百分比实现高度自适应" class="headerlink" title="padding,margin 百分比实现高度自适应"></a>padding,margin 百分比实现高度自适应</h3><p>当margin/padding取形式为百分比的值时，无论是left/right，还是top/bottom，都是以父元素的width为参照物的</p><p>自适应设备宽度的方形图片</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.image-header</span><br><span class="line">  <span class="attribute">position</span> relative</span><br><span class="line">  <span class="attribute">width</span> <span class="number">100%</span></span><br><span class="line">  <span class="attribute">height</span> <span class="number">0</span></span><br><span class="line">  <span class="comment">// padding设置100%时按宽度计算</span></span><br><span class="line">  <span class="attribute">padding-top</span> <span class="number">100%</span></span><br><span class="line">  img</span><br><span class="line">    <span class="comment">// 图像设置position:absolute的原因是父元素height是0</span></span><br><span class="line">    <span class="attribute">position</span> absolute</span><br><span class="line">    <span class="attribute">top</span> <span class="number">0</span></span><br><span class="line">    <span class="attribute">left</span> <span class="number">0</span></span><br><span class="line">    <span class="attribute">width</span> <span class="number">100%</span></span><br><span class="line">    <span class="attribute">height</span> <span class="number">100%</span></span><br></pre></td></tr></table></figure><h3 id="inline-block布局代替float布局"><a href="#inline-block布局代替float布局" class="headerlink" title="inline-block布局代替float布局"></a>inline-block布局代替float布局</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.father</span><br><span class="line">    <span class="comment">// 父元素设置字体为0避免son1与son2的html代码换行造成的空格</span></span><br><span class="line">    <span class="attribute">font-size</span> <span class="number">0</span></span><br><span class="line">    .son1</span><br><span class="line">        <span class="attribute">display</span> inline-block</span><br><span class="line">        <span class="attribute">vertical-align</span> top</span><br><span class="line">        <span class="attribute">margin-right</span> <span class="number">8px</span></span><br><span class="line">    .son2</span><br><span class="line">        <span class="attribute">display</span> inline-block</span><br><span class="line">        <span class="attribute">vertical-align</span> top</span><br></pre></td></tr></table></figure><h3 id="css-sticky-footer"><a href="#css-sticky-footer" class="headerlink" title="css-sticky-footer"></a>css-sticky-footer</h3><p>永远固定在底端的footer,在内容高度不足时依然固定在底端</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"body"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.body</span><br><span class="line">    <span class="attribute">display</span> flex</span><br><span class="line">    <span class="attribute">min-height</span> <span class="number">100%</span></span><br><span class="line">    .<span class="attribute">content</span></span><br><span class="line">    <span class="attribute">flex</span> <span class="number">1</span></span><br><span class="line">    .footer</span><br><span class="line">    <span class="attribute">height</span> <span class="number">50px</span></span><br></pre></td></tr></table></figure><h3 id="格式化日期的工具方法"><a href="#格式化日期的工具方法" class="headerlink" title="格式化日期的工具方法"></a>格式化日期的工具方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">formatDate</span>(<span class="params">timestamp, formatType</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> str = formatType <span class="comment">// YYYY-MM-DD HH:mm</span></span><br><span class="line">  <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(timestamp)</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/(Y+)/</span>.test(str)) &#123;</span><br><span class="line">    str = str.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, date.getFullYear().toString().slice(<span class="number">4</span> - <span class="built_in">RegExp</span>.$<span class="number">1.</span>length))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> transObj = &#123;</span><br><span class="line">    <span class="string">'M+'</span>: date.getMonth() + <span class="number">1</span>,</span><br><span class="line">    <span class="string">'D+'</span>: date.getDate(),</span><br><span class="line">    <span class="string">'H+'</span>: date.getHours(),</span><br><span class="line">    <span class="string">'m+'</span>: date.getMinutes()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> transObj) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`(<span class="subst">$&#123;key&#125;</span>)`</span>).test(str)) &#123;</span><br><span class="line">      <span class="keyword">const</span> value = transObj[key].toString()</span><br><span class="line">      str = str.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, padLeftZero(value))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 补0函数,传入12-&gt;12,传入2-&gt;02</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">padLeftZero</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="string">'00'</span>+value).slice(value.length)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LocalStorage"><a href="#LocalStorage" class="headerlink" title="LocalStorage"></a>LocalStorage</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">saveToLocalStorage</span>(<span class="params">id, key, value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// __seller__可替换为其他命名空间名</span></span><br><span class="line">  <span class="keyword">let</span> seller = <span class="built_in">JSON</span>.parse(<span class="built_in">window</span>.localStorage.getItem(<span class="string">'__seller__'</span>))</span><br><span class="line">  <span class="keyword">if</span> (!seller) &#123;</span><br><span class="line">    seller = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!seller[id]) &#123;</span><br><span class="line">    seller[id] = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  seller[id][key] = value</span><br><span class="line">  <span class="built_in">window</span>.localStorage.setItem(<span class="string">'__seller__'</span>, <span class="built_in">JSON</span>.stringify(seller))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">readFromLocalStorage</span>(<span class="params">id, key, def</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// __seller__可替换为其他命名空间名</span></span><br><span class="line">  <span class="keyword">const</span> seller = <span class="built_in">JSON</span>.parse(<span class="built_in">window</span>.localStorage.getItem(<span class="string">'__seller__'</span>))</span><br><span class="line">  <span class="keyword">if</span> (!seller) &#123;</span><br><span class="line">    <span class="keyword">return</span> def</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!seller[id]) &#123;</span><br><span class="line">    <span class="keyword">return</span> def</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> seller[id][key] || def</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="queryString-to-Object"><a href="#queryString-to-Object" class="headerlink" title="queryString to Object"></a>queryString to Object</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">urlSerialize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> search = <span class="built_in">window</span>.location.search</span><br><span class="line">  <span class="comment">// ?id=123&amp;a=b</span></span><br><span class="line">  <span class="keyword">const</span> regExp = <span class="regexp">/[?&amp;][^?&amp;]+=[^?&amp;]+/g</span></span><br><span class="line">  <span class="keyword">const</span> matches = search.match(regExp)</span><br><span class="line">  <span class="comment">// ['?id=123','&amp;a=b']</span></span><br><span class="line">  <span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> (matches) &#123;</span><br><span class="line">    matches.forEach(<span class="function">(<span class="params">match</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> tempArr = match.slice(<span class="number">1</span>).split(<span class="string">'='</span>)</span><br><span class="line">      <span class="keyword">const</span> key = <span class="built_in">decodeURIComponent</span>(tempArr[<span class="number">0</span>])</span><br><span class="line">      <span class="keyword">const</span> value = <span class="built_in">decodeURIComponent</span>(tempArr[<span class="number">1</span>])</span><br><span class="line">      obj[key] = value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h3><p><a href="https://github.com/choteewang/vue-sell" target="_blank" rel="noopener">https://github.com/choteewang/vue-sell</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue-2-5-外卖-webapp&quot;&gt;&lt;a href=&quot;#vue-2-5-外卖-webapp&quot; class=&quot;headerlink&quot; title=&quot;vue 2.5+ 外卖 webapp&quot;&gt;&lt;/a&gt;vue 2.5+ 外卖 webapp&lt;/h1&gt;&lt;h3 id=&quot;pre
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>由 &quot;元素居中&quot; 这个需求说开来</title>
    <link href="http://yoursite.com/2018/01/10/%E5%85%83%E7%B4%A0%E5%B1%85%E4%B8%AD/"/>
    <id>http://yoursite.com/2018/01/10/元素居中/</id>
    <published>2018-01-10T08:42:23.000Z</published>
    <updated>2018-05-05T08:44:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>“元素居中”: 是一个常见的页面布局需求, 乍一看简单, 实际却因不同<code>CSS</code>代码的场景, 展现出了各自的特殊性. </p><p>下面根据不同需求总结一下, 由简入繁, 逐步提升. <strong>注意: 为了表意清晰, 省略了不必要的CSS样式代码</strong></p><h3 id="普通元素的居中"><a href="#普通元素的居中" class="headerlink" title="普通元素的居中"></a>普通元素的居中</h3><h4 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h4><ul><li>行内元素</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// inline</span></span><br><span class="line"><span class="attribute">text-align</span> center</span><br></pre></td></tr></table></figure><ul><li>块级元素</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// block</span></span><br><span class="line"><span class="attribute">margin</span> <span class="number">0</span> auto</span><br></pre></td></tr></table></figure><h4 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h4><ul><li>行内元素</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// inline</span></span><br><span class="line"><span class="attribute">height</span> <span class="number">10px</span></span><br><span class="line"><span class="attribute">line-height</span> <span class="number">10px</span></span><br></pre></td></tr></table></figure><ul><li>块级元素</li></ul><blockquote><p>高度固定的块级元素</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// block 高度固定 法1</span></span><br><span class="line"><span class="selector-class">.father</span> </span><br><span class="line">  <span class="attribute">height</span> <span class="number">100px</span></span><br><span class="line">  <span class="attribute">line-height</span> <span class="number">100px</span></span><br><span class="line">.son</span><br><span class="line">  <span class="attribute">display</span> inline-block</span><br><span class="line">  <span class="attribute">vertical-align</span> middle</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// block 高度固定 法2</span></span><br><span class="line">.father</span><br><span class="line">  <span class="attribute">display</span> table-cell</span><br><span class="line">  <span class="attribute">vertical-align</span> middle</span><br><span class="line">.son</span><br><span class="line">  <span class="attribute">display</span> inline-block</span><br></pre></td></tr></table></figure><blockquote><p>高度不固定的块级元素</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// block 高度不固定</span></span><br><span class="line">.father</span><br><span class="line">  <span class="comment">// 只能通过设置父元素相同的上下padding值实现</span></span><br><span class="line">  <span class="attribute">padding-top</span> <span class="number">10px</span></span><br><span class="line">  <span class="attribute">padding-bottom</span> <span class="number">10px</span></span><br></pre></td></tr></table></figure><h3 id="浮动元素的居中"><a href="#浮动元素的居中" class="headerlink" title="浮动元素的居中"></a>浮动元素的居中</h3><ul><li>已知宽高</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浮动元素 已知宽高 法1</span></span><br><span class="line">.father</span><br><span class="line">  <span class="attribute">position</span> relative</span><br><span class="line">.son</span><br><span class="line">  <span class="attribute">float</span> left</span><br><span class="line">  <span class="attribute">position</span> absolute</span><br><span class="line">  <span class="attribute">width</span> <span class="number">160px</span></span><br><span class="line">  <span class="attribute">height</span> <span class="number">160px</span></span><br><span class="line">  <span class="attribute">top</span> <span class="number">50%</span></span><br><span class="line">  <span class="attribute">left</span> <span class="number">50%</span></span><br><span class="line">  <span class="attribute">margin-top</span> -<span class="number">80px</span></span><br><span class="line">  <span class="attribute">margin-left</span> -<span class="number">80px</span></span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浮动元素 已知宽高 法2</span></span><br><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>未知宽高(<strong>注意: 这种情况只能水平居中, 做不到垂直居中</strong>)</li></ul><p>需要在被居中元素<code>son</code>与包含<code>son</code>的<code>father</code>元素中间加一个<code>container</code>元素, html结构如:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>原理如图所示:</p><p><img src="https://i.loli.net/2018/05/05/5aed6e3dcd703.jpg" alt="15245342250065"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="comment">// 由于子元素是浮动元素脱离基本流</span></span><br><span class="line">  <span class="comment">// 外层容器要想包含脱离基本流的元素, 必须也脱离基本流</span></span><br><span class="line">  <span class="comment">// 这行也可换成 clear:both;display:inline-block;同样能包含脱离基本流的元素</span></span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">position</span>: relative; </span><br><span class="line">  <span class="comment">// container先向右走father宽度的50%</span></span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="comment">// son再向左走container宽度的50%</span></span><br><span class="line">  <span class="attribute">right</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="绝对定位元素的居中"><a href="#绝对定位元素的居中" class="headerlink" title="绝对定位元素的居中"></a>绝对定位元素的居中</h3><p>原理同浮动元素固定宽高的法2</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浮动元素 已知宽高 法2</span></span><br><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;“元素居中”: 是一个常见的页面布局需求, 乍一看简单, 实际却因不同&lt;code&gt;CSS&lt;/code&gt;代码的场景, 展现出了各自的特殊性. &lt;/p&gt;
&lt;p&gt;下面根据不同需求总结一下, 由简入繁, 逐步提升. &lt;strong&gt;注意: 为了表意清晰, 省略了不必要的CSS样式代
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>自定义事件的应用: 在全局拖放对象中添加自定义事件</title>
    <link href="http://yoursite.com/2018/01/04/%E5%B0%81%E8%A3%85%E6%8B%96%E6%94%BE%E5%AF%B9%E8%B1%A1-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/01/04/封装拖放对象-自定义事件/</id>
    <published>2018-01-04T02:24:17.000Z</published>
    <updated>2018-01-04T02:24:47.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="做什么"><a href="#做什么" class="headerlink" title="做什么"></a>做什么</h3><p>之前两篇博客讲述了观察者模式实现自定义事件的思维步骤, 但自定义事件还未真正用到实际DOM操作中, 我们的最终目的是真正使用<code>观察者模式</code>与<code>DOM操作</code>融合, 实现一个自定义事件.</p><p>这篇博客先来封装一个全局拖放对象, 作为自定义事件的场景, 然后再在这个场景下添加自定义事件</p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><ul><li><a href="https://choteewang.github.io/2017/12/20/17-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3javaScript%E7%BB%A7%E6%89%BF/" target="_blank" rel="noopener">深入理解javaScript继承机制</a></li><li><a href="https://choteewang.github.io/2017/12/23/javascript-%E4%B8%8E-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">javascript 与 “发布/订阅(观察者)模式”</a></li><li><a href="https://choteewang.github.io/2018/01/04/javascript%E4%B8%8E%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F2/" target="_blank" rel="noopener">javascript 与 ‘发布订阅(观察者)模式’ 2: 自定义事件</a></li></ul><h3 id="鼠标拖尾"><a href="#鼠标拖尾" class="headerlink" title="鼠标拖尾"></a>鼠标拖尾</h3><p>拖放的基本概念: 创建一个绝对定位的元素，使其可以用鼠标移动, 先从最简单的<code>鼠标拖尾</code>开始</p><p><img src="https://i.loli.net/2018/01/04/5a4d9021a03f1.jpg" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;div id="myDiv" style="background:red;width:100px;height:100px;position:absolute"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"mousemove"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> myDiv = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line">  myDiv.style.left = event.clientX + <span class="string">"px"</span>;</span><br><span class="line">  myDiv.style.top = event.clientY + <span class="string">"px"</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="封装拖放对象"><a href="#封装拖放对象" class="headerlink" title="封装拖放对象"></a>封装拖放对象</h3><p>由于<code>mousedown</code>,<code>mousemove</code>,<code>mouseup</code>全是冒泡的,所以可以封装一个全局拖放对象,注册在<code>document</code>对象上,用来管理界面的所有拖放功能,初始代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;div id="myDiv" style="background:red;width:100px;height:100px;position:absolute" class="draggable"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="keyword">var</span> DragDrop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//单例模式</span></span><br><span class="line">  <span class="keyword">var</span> dragging = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleEvent</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target = event.target</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (event.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mousedown"</span>:</span><br><span class="line">        <span class="keyword">if</span> (target.className.indexOf(<span class="string">"draggable"</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">          dragging = target;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mousemove"</span>:</span><br><span class="line">        <span class="keyword">if</span> (dragging !== <span class="literal">null</span>) &#123;</span><br><span class="line">          dragging.style.left = event.clientX + <span class="string">"px"</span>;</span><br><span class="line">          dragging.style.top = event.clientY + <span class="string">"px"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mouseup"</span>:</span><br><span class="line">        dragging = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    enable: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">document</span>.addEventListener(<span class="string">"mousedown"</span>, handleEvent);</span><br><span class="line">      <span class="built_in">document</span>.addEventListener(<span class="string">"mousemove"</span>, handleEvent);</span><br><span class="line">      <span class="built_in">document</span>.addEventListener(<span class="string">"mouseup"</span>, handleEvent);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    disable: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">document</span>.removeEventListener(<span class="string">"mousedown"</span>, handleEvent);</span><br><span class="line">      <span class="built_in">document</span>.removeEventListener(<span class="string">"mousemove"</span>, handleEvent);</span><br><span class="line">      <span class="built_in">document</span>.removeEventListener(<span class="string">"mouseup"</span>, handleEvent);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;();</span><br><span class="line">DragDrop.enable()</span><br></pre></td></tr></table></figure><blockquote><p>上述代码先用一个闭包return出<code>DragDrop</code>对象,这个对象有两个方法<code>DragDrop.enable</code>与<code>DragDrop.disable()</code>,分别向外暴露注册在<code>document</code>对象上的全局鼠标事件接口.<br>在闭包内部,使用一个单例<code>dragging</code>,在<code>mousedown</code>时,将<code>event.target</code>赋值给<code>dragging</code>从而在<code>mousemove</code>的过程中改变<code>dragging</code>也就是<code>event.target</code>对象的位置,在<code>mouseup</code>时将<code>dragging</code>置空,使<code>mousemove</code>事件不再影响<code>dragging</code></p></blockquote><h3 id="修改拖放时的鼠标位置"><a href="#修改拖放时的鼠标位置" class="headerlink" title="修改拖放时的鼠标位置"></a>修改拖放时的鼠标位置</h3><p>之前的代码有一个小bug,如图:</p><blockquote><p><code>mousemove</code>发生之前</p></blockquote><p><img src="https://i.loli.net/2018/01/04/5a4d9021c078a.jpg" alt=""></p><blockquote><p><code>mousemove</code>发生之后</p></blockquote><p><img src="https://i.loli.net/2018/01/04/5a4d9021c0da2.jpg" alt=""></p><blockquote><p>产生此问题的原因是在<code>mousemove</code>发生后,直接将<code>event.clientX</code>与<code>event.clientY</code>赋值给了<code>div</code>的<code>left</code>和<code>top</code><br>解决方法如下图所示,计算出<code>event.clientX-element.offsetLeft</code>与<code>event.clientY-element.offsetTop</code>这两个定值(在mousemove的过程中不会改变,所以是定值),并从<code>element</code>的<code>left</code>与<code>top</code>中减去即可</p></blockquote><p> <img src="https://i.loli.net/2018/01/04/5a4d9021ccb55.jpg" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;div id="myDiv" style="background:red;width:100px;height:100px;position:absolute" class="draggable"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="keyword">var</span> DragDrop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//单例模式</span></span><br><span class="line">  <span class="keyword">var</span> dragging = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">var</span> distanceX = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> distanceY = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleEvent</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target = event.target</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (event.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mousedown"</span>:</span><br><span class="line">        <span class="keyword">if</span> (target.className.indexOf(<span class="string">"draggable"</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">          dragging = target;</span><br><span class="line">          distanceX = event.clientX - dragging.offsetLeft;</span><br><span class="line">          distanceY = event.clientY - dragging.offsetTop;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mousemove"</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dragging !== <span class="literal">null</span>) &#123;</span><br><span class="line">          dragging.style.left = (event.clientX - distanceX) + <span class="string">"px"</span>;</span><br><span class="line">          dragging.style.top = (event.clientY - distanceY) + <span class="string">"px"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mouseup"</span>:</span><br><span class="line">        dragging = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    enable: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">document</span>.addEventListener(<span class="string">"mousedown"</span>, handleEvent);</span><br><span class="line">      <span class="built_in">document</span>.addEventListener(<span class="string">"mousemove"</span>, handleEvent);</span><br><span class="line">      <span class="built_in">document</span>.addEventListener(<span class="string">"mouseup"</span>, handleEvent);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    disable: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">document</span>.removeEventListener(<span class="string">"mousedown"</span>, handleEvent);</span><br><span class="line">      <span class="built_in">document</span>.removeEventListener(<span class="string">"mousemove"</span>, handleEvent);</span><br><span class="line">      <span class="built_in">document</span>.removeEventListener(<span class="string">"mouseup"</span>, handleEvent);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;();</span><br><span class="line">DragDrop.enable()</span><br></pre></td></tr></table></figure><h3 id="添加自定义事件"><a href="#添加自定义事件" class="headerlink" title="添加自定义事件"></a>添加自定义事件</h3><p>之前, 我们封装了一个全局拖放对象, 但它只是能”拖”, 还不能有真正的功能让其和拖动功能交互, 用之前总结的<code>自定义事件</code>来完善功能.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PubEvent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.listener = &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PubEvent.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: PubEvent,</span><br><span class="line">  addListener: function (key, listenerFuction) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span>.listener)[key]) &#123;</span><br><span class="line">      <span class="keyword">this</span>.listener[key] = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.listener[key].push(listenerFuction)</span><br><span class="line">  &#125;,</span><br><span class="line">  trigger: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!event.target) &#123;</span><br><span class="line">      event.target = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.listener[event.type] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> listener = <span class="keyword">this</span>.listener[event.type]</span><br><span class="line">      listener.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">v, i</span>) </span>&#123;</span><br><span class="line">        v(event);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  removeListener: <span class="function"><span class="keyword">function</span> (<span class="params">key, listenerFuction</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> listenerKey = <span class="keyword">this</span>.listener[key]</span><br><span class="line">    <span class="keyword">if</span> (!listenerKey) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!listenerFuction) &#123;</span><br><span class="line">      listenerKey = []</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      listenerKey.some(<span class="function"><span class="keyword">function</span> (<span class="params">v, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (v === listenerFuction) &#123;</span><br><span class="line">          listenerKey.splice(i, <span class="number">1</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;div id="myDiv" style="background:red;width:100px;height:100px;position:absolute" class="draggable"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="keyword">var</span> DragDrop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> dragdrop = <span class="keyword">new</span> PubEvent();</span><br><span class="line">  <span class="comment">//单例模式</span></span><br><span class="line">  <span class="keyword">var</span> dragging = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">var</span> distanceX = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> distanceY = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleEvent</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target = event.target</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (event.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mousedown"</span>:</span><br><span class="line">        <span class="keyword">if</span> (target.className.indexOf(<span class="string">"draggable"</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">          dragging = target;</span><br><span class="line">          distanceX = event.clientX - dragging.offsetLeft;</span><br><span class="line">          distanceY = event.clientY - dragging.offsetTop;</span><br><span class="line">          dragdrop.trigger(&#123;</span><br><span class="line">            type: <span class="string">"dragstart"</span>,</span><br><span class="line">            target: dragging</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mousemove"</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dragging !== <span class="literal">null</span>) &#123;</span><br><span class="line">          dragging.style.left = (event.clientX - distanceX) + <span class="string">"px"</span>;</span><br><span class="line">          dragging.style.top = (event.clientY - distanceY) + <span class="string">"px"</span>;</span><br><span class="line">          dragdrop.trigger(&#123;</span><br><span class="line">            type: <span class="string">"drag"</span>,</span><br><span class="line">            target: dragging,</span><br><span class="line">            x: event.clientX - distanceX,</span><br><span class="line">            y: event.clientY - distanceY</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mouseup"</span>:</span><br><span class="line">        </span><br><span class="line">        dragdrop.trigger(&#123;</span><br><span class="line">          type: <span class="string">"end"</span>,</span><br><span class="line">          target: dragging</span><br><span class="line">        &#125;)</span><br><span class="line">        dragging = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  dragdrop.enable = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">"mousedown"</span>, handleEvent);</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">"mousemove"</span>, handleEvent);</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">"mouseup"</span>, handleEvent);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  dragdrop.disable = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.removeEventListener(<span class="string">"mousedown"</span>, handleEvent);</span><br><span class="line">    <span class="built_in">document</span>.removeEventListener(<span class="string">"mousemove"</span>, handleEvent);</span><br><span class="line">    <span class="built_in">document</span>.removeEventListener(<span class="string">"mouseup"</span>, handleEvent);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dragdrop</span><br><span class="line">&#125;();</span><br><span class="line">DragDrop.enable()</span><br></pre></td></tr></table></figure><blockquote><p>注册<code>dragstart</code>,<code>drag</code>,<code>dragend</code>自定义事件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;div id="myDiv" style="background:red;width:100px;height:100px;position:absolute" class="draggable"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">//&lt;div id="status" style="width:600px;height:600px;background-color:pink;overflow:hidden;"&gt;&lt;/div&gt;</span></span><br><span class="line">DragDrop.addListener(<span class="string">'dragstart'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> status = <span class="built_in">document</span>.getElementById(<span class="string">'status'</span>);</span><br><span class="line">  status.innerHTML = <span class="string">"drag start "</span> + event.target.id</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">DragDrop.addListener(<span class="string">'drag'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> status = <span class="built_in">document</span>.getElementById(<span class="string">'status'</span>);</span><br><span class="line">  status.innerHTML += <span class="string">"&lt;br&gt;drag move "</span> + event.target.id + <span class="string">" to ("</span> + event.x + <span class="string">" , "</span> + event.y + <span class="string">")"</span></span><br><span class="line">&#125;)</span><br><span class="line">DragDrop.addListener(<span class="string">'dragend'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> status = <span class="built_in">document</span>.getElementById(<span class="string">'status'</span>);</span><br><span class="line">  status.innerHTML += <span class="string">"&lt;br&gt;drag drop "</span> + event.target.id</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/01/04/5a4d902219154.jpg" alt=""></p><p>至此,我们事先了三个自定义事件<code>dragstart</code>,<code>drag</code>,<code>dragend</code>,它们分别在拖放行为的不同阶段向<code>div</code>中输出拖放动作的详细信息. 这只是个简单的例子, 添加自定义事件可以使对象更健壮, 可以在网络应用中处理复杂的拖放功能.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;做什么&quot;&gt;&lt;a href=&quot;#做什么&quot; class=&quot;headerlink&quot; title=&quot;做什么&quot;&gt;&lt;/a&gt;做什么&lt;/h3&gt;&lt;p&gt;之前两篇博客讲述了观察者模式实现自定义事件的思维步骤, 但自定义事件还未真正用到实际DOM操作中, 我们的最终目的是真正使用&lt;cod
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>javascript 与 &#39;发布订阅(观察者)模式&#39; vol.2 : 自定义事件</title>
    <link href="http://yoursite.com/2018/01/04/javascript%E4%B8%8E%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F2/"/>
    <id>http://yoursite.com/2018/01/04/javascript与发布订阅模式2/</id>
    <published>2018-01-04T00:29:28.000Z</published>
    <updated>2018-01-04T01:13:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>上次的<a href="https://choteewang.github.io/2017/12/23/javascript-%E4%B8%8E-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">博客</a>里写了发布订阅模式的实现, 这次的目的是用发布订阅模式实现一个自定义事件</p><h3 id="之前的代码"><a href="#之前的代码" class="headerlink" title="之前的代码"></a>之前的代码</h3><p>这里放上上篇博客: <a href="https://choteewang.github.io/2017/12/23/javascript-%E4%B8%8E-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">javascript 与 “发布订阅(观察者)模式”</a> 中最后总结的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pubEvent = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> listener = &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> addListener = <span class="function"><span class="keyword">function</span> (<span class="params">key, listenerFuction</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!listener[key]) &#123;</span><br><span class="line">      listener[key] = []</span><br><span class="line">    &#125;</span><br><span class="line">    listener[key].push(listenerFuction)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> trigger = <span class="function"><span class="keyword">function</span> (<span class="params">key, args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!listener[key] || listener[key].length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    listener[key].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">v, i</span>) </span>&#123;</span><br><span class="line">      v.call(<span class="literal">null</span>, &#123; key, ...args &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> removeListener = <span class="function"><span class="keyword">function</span> (<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> listenerKey = listener[key]</span><br><span class="line">    <span class="keyword">if</span> (!listenerKey) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">      listenerKey = []</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      listenerKey.some(<span class="function"><span class="keyword">function</span> (<span class="params">v, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (v === fn) &#123;</span><br><span class="line">          listenerKey.splice(i, <span class="number">1</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    addListener,</span><br><span class="line">    trigger,</span><br><span class="line">    removeListener</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>我们上次将上述代码作为了一个<code>全局工具对象</code>, 用闭包的方式向外return出一个对象接口, 操纵比包内的数据. 若要使用这个<code>全局工具对象</code>, 可以如此调用:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册事件</span></span><br><span class="line">pubEvent.addListener(<span class="string">'countAdd'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'dv'</span>).innerHTML = data.count</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发事件</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  count++</span><br><span class="line">  <span class="comment">// 触发"countAdd"事件</span></span><br><span class="line">  pubEvent.trigger(<span class="string">'countAdd'</span>, &#123;</span><br><span class="line">    count</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>但这样的调用方式和原生js事件还有些差异, 原生js的事件的注册对象应是<code>元素element</code>,数据应由<code>事件参数对象event</code>传递, 为了兼容各种浏览器, 我们今天将之前的ES6代码改为ES5表现, 再利用之前总结的<code>javascript寄生组合式继承</code>知识, 打造<code>自定义事件</code></p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><ul><li><a href="https://choteewang.github.io/2017/12/20/17-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3javaScript%E7%BB%A7%E6%89%BF/" target="_blank" rel="noopener">深入理解javaScript继承机制</a></li><li><a href="https://choteewang.github.io/2017/12/23/javascript-%E4%B8%8E-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">javascript 与 “发布/订阅(观察者)模式”</a></li></ul><h3 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 改造为构造函数和原型,使其可以被继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PubEvent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.listener = &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PubEvent.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: PubEvent,</span><br><span class="line">  addListener: function (key, listenerFuction) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span>.listener)[key]) &#123;</span><br><span class="line">      <span class="keyword">this</span>.listener[key] = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.listener[key].push(listenerFuction)</span><br><span class="line">  &#125;,</span><br><span class="line">  trigger: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!event.target) &#123;</span><br><span class="line">      event.target = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.listener[event.type] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> listener = <span class="keyword">this</span>.listener[event.type]</span><br><span class="line">      listener.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">v, i</span>) </span>&#123;</span><br><span class="line">        v(event);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  removeListener: <span class="function"><span class="keyword">function</span> (<span class="params">key, listenerFuction</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> listenerKey = <span class="keyword">this</span>.listener[key]</span><br><span class="line">    <span class="keyword">if</span> (!listenerKey) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!listenerFuction) &#123;</span><br><span class="line">      listenerKey = []</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      listenerKey.some(<span class="function"><span class="keyword">function</span> (<span class="params">v, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (v === listenerFuction) &#123;</span><br><span class="line">          listenerKey.splice(i, <span class="number">1</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> abc = <span class="keyword">new</span> PubEvent()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> handler = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(event.message); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abc.addListener(<span class="string">'click'</span>,handler)</span><br><span class="line">abc.trigger(&#123;<span class="attr">type</span>:<span class="string">'click'</span>,<span class="attr">message</span>:<span class="string">'this is a click'</span>&#125;) <span class="comment">//this is a click</span></span><br><span class="line">abc.removeListener(<span class="string">'click'</span>,handler)</span><br><span class="line">abc.trigger(&#123;<span class="attr">type</span>:<span class="string">'click'</span>,<span class="attr">message</span>:<span class="string">'this is a click'</span>&#125;) <span class="comment">//无输出</span></span><br></pre></td></tr></table></figure><blockquote><p>初级调用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> abc = <span class="keyword">new</span> PubEvent()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> handler = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(event.message); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abc.addListener(<span class="string">'click'</span>,handler)</span><br><span class="line">abc.trigger(&#123;<span class="attr">type</span>:<span class="string">'click'</span>,<span class="attr">message</span>:<span class="string">'this is a click'</span>&#125;) <span class="comment">//this is a click</span></span><br><span class="line">abc.removeListener(<span class="string">'click'</span>,handler)</span><br><span class="line">abc.trigger(&#123;<span class="attr">type</span>:<span class="string">'click'</span>,<span class="attr">message</span>:<span class="string">'this is a click'</span>&#125;) <span class="comment">//无输出</span></span><br></pre></td></tr></table></figure><h3 id="结合寄生组合继承"><a href="#结合寄生组合继承" class="headerlink" title="结合寄生组合继承"></a>结合寄生组合继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  F.prototype = o;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">subType, superType</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> prototype = object(superType.prototype); </span><br><span class="line">  prototype.constructor = subType; </span><br><span class="line">  subType.prototype = prototype; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shoes</span>(<span class="params">model, size</span>) </span>&#123;</span><br><span class="line">  PubEvent.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.model = model;</span><br><span class="line">  <span class="keyword">this</span>.size = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inheritPrototype(Shoes, PubEvent);</span><br><span class="line"></span><br><span class="line">Shoes.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.trigger(&#123;</span><br><span class="line">    type: <span class="string">"message"</span>,</span><br><span class="line">    message: message</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleMessage</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"model is "</span>+ event.target.model + <span class="string">" size is "</span> + event.target.size + <span class="string">" message is "</span> + event.message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aj3 = <span class="keyword">new</span> Shoes(<span class="string">"aj3"</span>, <span class="number">42</span>);</span><br><span class="line">aj3.addListener(<span class="string">"message"</span>, handleMessage);</span><br><span class="line">aj3.say(<span class="string">"which is chotee\'s favorite"</span>); <span class="comment">//model is aj3 size is 42 message is which is chotee's favorite</span></span><br></pre></td></tr></table></figure><p>在上面的例子里, 使用寄生组合继承使<code>Shoes</code>的原型继承自<code>PubEvent</code>的原型, 在<code>Shoes</code>构造函数内部使用借用构造函数继承了<code>PubEvent</code>构造函数内的<code>listener</code>对象,使<code>Shoes</code>的实例<code>shoes</code>可以触发自己订阅的事件<code>message</code>.</p><p>在数据流方面,<code>say</code>方法把<code>message</code>字符串传递给调用<code>trigger</code>时内部包装的<code>event</code>对象,这个对象在<code>trigger</code>方法执行时将<code>event</code>对象传递给实例放在<code>this.listener</code>对象中的订阅方法<code>handleMessage</code>并立即调用.所以在订阅的方法中可以显示<code>trigger</code>时传递的数据</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上次的&lt;a href=&quot;https://choteewang.github.io/2017/12/23/javascript-%E4%B8%8E-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正反馈系列:《JavaScript高级程序设计》最佳实践,新兴API</title>
    <link href="http://yoursite.com/2018/01/03/%E9%AB%98%E7%A8%8B13-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-%E6%96%B0%E5%85%B4API/"/>
    <id>http://yoursite.com/2018/01/03/高程13-最佳实践-新兴API/</id>
    <published>2018-01-03T15:42:26.000Z</published>
    <updated>2018-03-21T10:28:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><h2 id="可维护性"><a href="#可维护性" class="headerlink" title="可维护性"></a>可维护性</h2><h3 id="代码约定"><a href="#代码约定" class="headerlink" title="代码约定"></a>代码约定</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过初始化指定变量类型 </span></span><br><span class="line"><span class="keyword">var</span> found = <span class="literal">false</span>; <span class="comment">//布尔型 </span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">-1</span>; <span class="comment">//数字 </span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">""</span>; <span class="comment">//字符串 </span></span><br><span class="line"><span class="keyword">var</span> person = <span class="literal">null</span>; <span class="comment">//对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用于指定数据类型的匈牙利标记法 </span></span><br><span class="line"><span class="keyword">var</span> bFound; <span class="comment">//布尔型 </span></span><br><span class="line"><span class="keyword">var</span> iCount; <span class="comment">//整数 </span></span><br><span class="line"><span class="keyword">var</span> sName; <span class="comment">//字符串 </span></span><br><span class="line"><span class="keyword">var</span> oPerson; <span class="comment">//对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用于指定类型的类型注释 </span></span><br><span class="line"><span class="keyword">var</span> found <span class="comment">/*:Boolean*/</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> count <span class="comment">/*:int*/</span> = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> name <span class="comment">/*:String*/</span> = <span class="string">"Nicholas"</span>;</span><br><span class="line"><span class="keyword">var</span> person <span class="comment">/*:Object*/</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h3 id="松散耦合"><a href="#松散耦合" class="headerlink" title="松散耦合"></a>松散耦合</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleKeyPress</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  <span class="keyword">if</span> (event.keyCode == <span class="number">13</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line">    <span class="keyword">var</span> value = <span class="number">5</span> * <span class="built_in">parseInt</span>(target.value);</span><br><span class="line">    <span class="keyword">if</span> (value &gt; <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">"error-msg"</span>).style.display = <span class="string">"block"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 改变为</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validateValue</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  value = <span class="number">5</span> * <span class="built_in">parseInt</span>(value);</span><br><span class="line">  <span class="keyword">if</span> (value &gt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"error-msg"</span>).style.display = <span class="string">"block"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleKeyPress</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  <span class="keyword">if</span> (event.keyCode == <span class="number">13</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line">    validateValue(target.value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="避免与-null-进行比较"><a href="#避免与-null-进行比较" class="headerlink" title="避免与 null 进行比较"></a>避免与 null 进行比较</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortArray</span>(<span class="params">values</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (values != <span class="literal">null</span>) &#123; <span class="comment">//避免</span></span><br><span class="line">    values.sort(comparator);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortArray</span>(<span class="params">values</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (values <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123; <span class="comment">// 推荐</span></span><br><span class="line">    values.sort(comparator);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果看到了与 null 比较的代码，尝试使用以下技术替换：</p><ul><li>如果值应为一个引用类型，使用instanceof操作符检查其构造函数；</li><li>如果值应为一个基本类型，使用typeof检查其类型；</li><li>如果是希望对象包含某个特定的方法名，则使用typeof操作符确保指定</li></ul><h3 id="使用常量"><a href="#使用常量" class="headerlink" title="使用常量"></a>使用常量</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validate</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!value) &#123;</span><br><span class="line">    alert(<span class="string">"Invalid value!"</span>);</span><br><span class="line">    location.href = <span class="string">"/errors/invalid.php"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换为</span></span><br><span class="line"><span class="keyword">var</span> Constants = &#123;</span><br><span class="line">  INVALID_VALUE_MSG: <span class="string">"Invalid value!"</span>,</span><br><span class="line">  INVALID_VALUE_URL: <span class="string">"/errors/invalid.php"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validate</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!value) &#123;</span><br><span class="line">    alert(Constants.INVALID_VALUE_MSG);</span><br><span class="line">    location.href = Constants.INVALID_VALUE_URL;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重复值——任何在多处用到的值都应抽取为一个常量。这就限制了当一个值变了而另一个没变的时候会造成的错误。这也包含了CSS类名。</li><li>用户界面字符串——任何用于显示给用户的字符串，都应被抽取出来以方便国际化。</li><li>URLs——在Web应用中，资源位置很容易变更，所以推荐用一个公共地方存放所有的URL。</li><li>任意可能会更改的值——每当你在用到字面量值的时候，你都要问一下自己这个值在未来是不是会变化。如果答案是“是”，那么这个值就应该被提取出来作为一个常量。</li></ul><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><h3 id="避免全局查找"><a href="#避免全局查找" class="headerlink" title="避免全局查找"></a>避免全局查找</h3><p>下例中,第一种方法<code>document</code>对象每被引用一次,就会在变量作用域链上层层向上找直到找到<code>document</code>对象,但第二种只需在具备创建一次对<code>document</code>对象的引用,后续无需再进行全局作用域链查找</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateUI</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> imgs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = imgs.length; i &lt; len; i++) &#123;</span><br><span class="line">    imgs[i].title = <span class="built_in">document</span>.title + <span class="string">" image "</span> + i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> msg = <span class="built_in">document</span>.getElementById(<span class="string">"msg"</span>);</span><br><span class="line">  msg.innerHTML = <span class="string">"Update complete."</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改为</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateUI</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> doc = <span class="built_in">document</span>;</span><br><span class="line">  <span class="keyword">var</span> imgs = doc.getElementsByTagName(<span class="string">"img"</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = imgs.length; i &lt; len; i++) &#123;</span><br><span class="line">    imgs[i].title = doc.title + <span class="string">" image "</span> + i;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> msg = doc.getElementById(<span class="string">"msg"</span>);</span><br><span class="line">  msg.innerHTML = <span class="string">"Update complete."</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="避免使用with语句"><a href="#避免使用with语句" class="headerlink" title="避免使用with语句"></a>避免使用with语句</h3><p>在性能非常重要的地方必须避免使用<code>with</code>语句。和函数类似，<code>with</code>语句会创建自己的作用域，因此会增加其中执行的代码的作用域链的长度。由于额外的作用域链查找，在<code>with</code>语句中执行的代码肯定会比外面执行的代码要慢。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBody</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">with</span>(<span class="built_in">document</span>.body) &#123;</span><br><span class="line">    alert(tagName);</span><br><span class="line">    innerHTML = <span class="string">"Hello world!"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//替换为</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBody</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> body = <span class="built_in">document</span>.body</span><br><span class="line">  alert(body.tagName);</span><br><span class="line">  body.innerHTML = <span class="string">"Hello world!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择正确的方法"><a href="#选择正确的方法" class="headerlink" title="选择正确的方法"></a>选择正确的方法</h3><p>使用变量和数组要比访问对象上的属性更有效率，后者是一个<code>O(n)</code>操作。对象上的任何属性查找都要比访问变量或者数组花费更长时间，因为必须在原型链中对拥有该名称的属性进行一次搜索。简而言之，属性查找越多，执行时间就越长。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 效率是O(1)</span></span><br><span class="line"><span class="keyword">var</span> value = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">10</span> + value;</span><br><span class="line">alert(sum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> values = [<span class="number">5</span>, <span class="number">10</span>];</span><br><span class="line"><span class="keyword">var</span> sum = values[<span class="number">0</span>] + values[<span class="number">1</span>];</span><br><span class="line">alert(sum);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 效率是O(n) </span></span><br><span class="line"><span class="keyword">var</span> values = &#123;</span><br><span class="line">  first: <span class="number">5</span>,</span><br><span class="line">  second: <span class="number">10</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> sum = values.first + values.second;</span><br><span class="line">alert(sum);</span><br></pre></td></tr></table></figure><h3 id="Duff算法"><a href="#Duff算法" class="headerlink" title="Duff算法"></a>Duff算法</h3><p>比for循环一次次与length比较快,以8为运行单位,每次运行8次,这里<code>values</code>是一个数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> iterations = <span class="built_in">Math</span>.floor(values.length / <span class="number">8</span>); </span><br><span class="line"><span class="keyword">var</span> leftover = values.length % <span class="number">8</span>; </span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (leftover &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    process(values[i++]);</span><br><span class="line">  &#125; <span class="keyword">while</span> (--leftover &gt; <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  process(values[i++]);</span><br><span class="line">  process(values[i++]);</span><br><span class="line">  process(values[i++]);</span><br><span class="line">  process(values[i++]);</span><br><span class="line">  process(values[i++]);</span><br><span class="line">  process(values[i++]);</span><br><span class="line">  process(values[i++]);</span><br><span class="line">  process(values[i++]);</span><br><span class="line">&#125; <span class="keyword">while</span> (--iterations &gt; <span class="number">0</span>);</span><br></pre></td></tr></table></figure><blockquote><p>小数据集用处不大,大数据集再采用</p></blockquote><h3 id="优化DOM交互"><a href="#优化DOM交互" class="headerlink" title="优化DOM交互"></a>优化DOM交互</h3><h4 id="最小化现场更新"><a href="#最小化现场更新" class="headerlink" title="最小化现场更新"></a>最小化现场更新</h4><p>一旦你需要访问的DOM部分是已经显示的页面的一部分，那么你就是在进行一个现场更新。之所以叫现场更新，是因为需要立即（现场）对页面对用户的显示进行更新。每一个更改，不管是插入单个字符，还是移除整个片段，都有一个性能惩罚，因为浏览器要重新计算无数尺寸以进行更新。现场更新进行得越多，代码完成执行所花的时间就越长；完成一个操作所需的现场更新越少，代码就越快。</p><p>下面这段代码为列表添加了10个项目。添加每个项目时，都有2个现场更新：一个添加<code>&lt;li&gt;</code>元素，另一个给它添加文本节点。这样添加10个项目，这个操作总共要完成20个现场更新。</p><p>要修正这个性能瓶颈，需要减少现场更新的数量。一般有2种方法。第一种是将列表从页面上移除，最后进行更新，最后再将列表插回到同样的位置。这个方法不是非常理想，因为在每次页面更新的时候它会不必要的闪烁。第二个方法是使用文档片段来构建DOM结构，接着将其添加到List元素中。这个方式避免了现场更新和页面闪烁问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">"myList"</span>),</span><br><span class="line">  item, i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  item = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">  list.appendChild(item);</span><br><span class="line">  item.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">"Item "</span> + i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换为</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">"myList"</span>),</span><br><span class="line">  fragment = <span class="built_in">document</span>.createDocumentFragment(),</span><br><span class="line">  item,</span><br><span class="line">  i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  item = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">  fragment.appendChild(item);</span><br><span class="line">  item.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">"Item "</span> + i));</span><br><span class="line">&#125;</span><br><span class="line">list.appendChild(fragment);</span><br></pre></td></tr></table></figure><p>在这个例子中只有一次现场更新，它发生在所有项目都创建好之后。文档片段用作一个临时的占位符，放置新创建的项目。然后使用<code>appendChild()</code>将所有项目添加到列表中。记住，当给<code>appendChild()</code>传入文档片段时，只有片段中的子节点被添加到目标，片段本身不会被添加的。一旦需要更新DOM，请考虑使用文档片段来构建DOM结构，然后再将其添加到现存的文档中。</p><h4 id="使用-innerHTML"><a href="#使用-innerHTML" class="headerlink" title="使用 innerHTML"></a>使用 innerHTML</h4><p>有两种在页面上创建DOM节点的方法：使用诸如<code>createElement()</code>和<code>appendChild()</code>之类的DOM方法，以及使用<code>innerHTML</code>。对于小的DOM更改而言，两种方法效率都差不多。然而，<strong>对于大的DOM更改</strong>，使用<code>innerHTML</code>要比使用标准DOM方法创建同样的DOM结构快得多。</p><p>当把<code>innerHTML</code>设置为某个值时，后台会创建一个HTML解析器，然后使用内部的DOM调用来创建DOM结构，而非基于JavaScript的DOM调用。由于内部方法是编译好的而非解释执行的，所以执行快得多。</p><h1 id="新兴API"><a href="#新兴API" class="headerlink" title="新兴API"></a>新兴API</h1><h2 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame()"></a>requestAnimationFrame()</h2><p><code>window.requestAnimationFrame(callback) return id</code> 方法接收一个参数，即在下次重绘屏幕前调用的一个函数,返回一个id,用<code>window.cancelAnimationFrame(id)</code>可取消调用.<code>callback</code>也有一个参数<code>timestamp</code>,which indicates the current time (the time returned from <code>performance.now()</code> ) for when requestAnimationFrame() starts to fire callbacks.</p><blockquote><p>利用上述特性,可以封装一个<code>requestAnimationFrame()</code>的动画函数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> RAFid;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RAFBundle</span>(<span class="params">callback, interval</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> startTime = <span class="built_in">Date</span>.now()</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">timestamp</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> currentTime = <span class="built_in">Date</span>.now()</span><br><span class="line">    <span class="keyword">if</span> (currentTime - startTime &gt;= interval) &#123;</span><br><span class="line">      callback()</span><br><span class="line">      startTime = currentTime</span><br><span class="line">    &#125;</span><br><span class="line">    RAFid = <span class="built_in">window</span>.requestAnimationFrame(render)</span><br><span class="line">  &#125;</span><br><span class="line">  render();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止绘制</span></span><br><span class="line"><span class="built_in">window</span>.cancelAnimationFrame(RAFid)</span><br></pre></td></tr></table></figure><h2 id="File-API"><a href="#File-API" class="headerlink" title="File API"></a>File API</h2><p>File API在表单中的文件输入字段的基础上，又添加了一些直接访问文件信息的接口。HTML5在DOM中为文件输入元素添加了一个<code>element.files</code>属性,它是一个集合。在通过文件输入字段选择了一或多个文件时，<code>element.files</code>集合中将包含一组<code>File</code>对象，每个<code>File</code>对象对应着一个文件。每个File对象都有下列只读属性。</p><ul><li><code>name</code>：本地文件系统中的文件名。</li><li><code>size</code>：文件的字节大小。</li><li><code>type</code>：字符串，文件的MIME类型。</li><li><code>lastModifiedDate</code>：字符串，文件上一次被修改的时间（只有Chrome实现了这个属性）。</li></ul><p>举个例子，通过侦听<code>change</code>事件并读取<code>element.files</code>集合就可以知道选择的每个文件的信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;input type="file" multiple id="files-list"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> filesList = <span class="built_in">document</span>.getElementById(<span class="string">"files-list"</span>);</span><br><span class="line">EventUtil.addHandler(filesList, <span class="string">"change"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> info = <span class="string">""</span>,</span><br><span class="line">    output = <span class="built_in">document</span>.getElementById(<span class="string">"output"</span>),</span><br><span class="line">    files = EventUtil.getTarget(event).files,</span><br><span class="line">    i = <span class="number">0</span>,</span><br><span class="line">    len = files.length;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">    info += files[i].name + <span class="string">" ("</span> + files[i].type + <span class="string">", "</span> + files[i].size + <span class="string">" bytes)&lt;br&gt;"</span>;</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  output.innerHTML = info;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="FileReader-类型"><a href="#FileReader-类型" class="headerlink" title="FileReader 类型"></a>FileReader 类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader()</span><br></pre></td></tr></table></figure><p><code>FileReader</code>类型实现的是一种异步文件读取机制。可以把<code>FileReader</code>想象成<code>XMLHttpRequest</code>，区别只是它读取的是文件系统，而不是远程服务器。为了读取文件中的数据，<code>FileReader</code>提供了如下几个方法。</p><ul><li><code>reader.readAsText(file,encoding)</code>：以纯文本形式读取文件，将读取到的文本保存在<code>reader.result</code>属性中。第二个参数用于指定编码类型，是可选的。</li><li><code>reader.readAsDataURL(file)</code>：读取文件并将文件以数据URI的形式保存在<code>reader.result</code>属性中。</li><li><code>reader.readAsBinaryString(file)</code>：读取文件并将一个字符串保存在<code>reader.result</code>属性中，字符串中的每个字符表示一字节。</li><li><code>reader.readAsArrayBuffer(file)</code>：读取文件并将一个包含文件内容的ArrayBuffer保存在<code>reader.result</code>属性中。</li></ul><p>由于读取过程是异步的，因此<code>FileReader</code>也提供了几个事件。其中最有用的三个事件是<code>progress</code>、<code>error</code>和<code>load</code>，分别表示是否又读取了新数据、是否发生了错误以及是否已经读完了整个文件。</p><p>每过50ms左右，就会触发一次<code>progress</code>事件，通过事件对象可以获得与XHR的<code>progress</code>事件类似的属性：<code>lengthComputable</code>(布尔值,表示进度信息是否可见)、<code>loaded</code>(已读取完成数量)和<code>total</code>(总共需读取数量)。另外，尽管可能没有包含全部数据，但每次<code>progress</code>事件中都可以通过<code>FileReader</code>的<code>reader.result</code>属性读取到文件内容。</p><p>由于种种原因无法读取文件，就会触发<code>error</code>事件。触发<code>error</code>事件时，相关的信息将保存到<code>FileReader</code>的<code>error</code>属性中。这个属性中将保存一个对象，该对象只有一个属性<code>code</code>，即错误码。这个错误码是<code>1</code>表示未找到文件，是<code>2</code>表示安全性错误，是<code>3</code>表示读取中断，是<code>4</code>表示文件不可读，是<code>5</code>表示编码错误。</p><p>文件成功加载后会触发<code>load</code>事件；如果发生了<code>error</code>事件，就不会发生<code>load</code>事件</p><p>下面是一个全面的例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> filesList = <span class="built_in">document</span>.getElementById(<span class="string">"files-list"</span>);</span><br><span class="line">EventUtil.addHandler(filesList, <span class="string">"change"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> info = <span class="string">""</span>,</span><br><span class="line">    output = <span class="built_in">document</span>.getElementById(<span class="string">"output"</span>),</span><br><span class="line">    progress = <span class="built_in">document</span>.getElementById(<span class="string">"progress"</span>),</span><br><span class="line">    files = EventUtil.getTarget(event).files,</span><br><span class="line">    type = <span class="string">"default"</span>,</span><br><span class="line">    reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/image/</span>.test(files[<span class="number">0</span>].type)) &#123;</span><br><span class="line">    reader.readAsDataURL(files[<span class="number">0</span>]);</span><br><span class="line">    type = <span class="string">"image"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reader.readAsText(files[<span class="number">0</span>]);</span><br><span class="line">    type = <span class="string">"text"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  reader.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    output.innerHTML = <span class="string">"Could not read file, error code is "</span> + reader.error.code;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  reader.onprogress = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.lengthComputable) &#123;</span><br><span class="line">      progress.innerHTML = event.loaded + <span class="string">"/"</span> + event.total;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> html = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"image"</span>:</span><br><span class="line">        html = <span class="string">"&lt;img src=\""</span> + reader.result + <span class="string">"\"&gt;"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"text"</span>:</span><br><span class="line">        html = reader.result;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    output.innerHTML = html;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果想中断读取过程，可以调用 <code>reader.abort()</code>方法，这样就会触发 <code>abort</code> 事件。在触发 <code>load</code>、<code>error</code> 或 <code>abort</code> 事件后，会触发另一个事件 <code>loadend</code>。<code>loadend</code> 事件发生就意味着已经读取完整个文件，或者读取时发生了错误，或者读取过程被中断。</p><h3 id="读取部分内容"><a href="#读取部分内容" class="headerlink" title="读取部分内容"></a>读取部分内容</h3><p>我们只想读取文件的一部分而不是全部内容。为此，File对象还支持一个<code>slice()</code>方法，这个方法在Firefox中的实现叫<code>mozSlice()</code>，在Chrome中的实现叫<code>webkitSlice()</code>，Safari的5.1及之前版本不支持这个方法。<code>slice()</code>方法接收两个参数：起始字节,要读取的字节数。这个方法返回一个<code>Blob</code>的实例，<code>Blob</code>是File类型的父类型。</p><p>Blob类型有一个<code>size</code>属性和一个<code>type</code>属性，而且它也支持<code>slice()</code>方法，以便进一步切割数据。通过<code>FileReader</code>也可以从<code>Blob</code>中读取数据。下面这个例子只读取文件的32B内容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blobSlice</span>(<span class="params">blob, startByte, length</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (blob.slice) &#123;</span><br><span class="line">    <span class="keyword">return</span> blob.slice(startByte, length);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (blob.webkitSlice) &#123;</span><br><span class="line">    <span class="keyword">return</span> blob.webkitSlice(startByte, length);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (blob.mozSlice) &#123;</span><br><span class="line">    <span class="keyword">return</span> blob.mozSlice(startByte, length);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> filesList = <span class="built_in">document</span>.getElementById(<span class="string">"files-list"</span>);</span><br><span class="line">EventUtil.addHandler(filesList, <span class="string">"change"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> info = <span class="string">""</span>,</span><br><span class="line">    output = <span class="built_in">document</span>.getElementById(<span class="string">"output"</span>),</span><br><span class="line">    progress = <span class="built_in">document</span>.getElementById(<span class="string">"progress"</span>),</span><br><span class="line">    files = EventUtil.getTarget(event).files,</span><br><span class="line">    reader = <span class="keyword">new</span> FileReader(),</span><br><span class="line">    blob = blobSlice(files[<span class="number">0</span>], <span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">  <span class="keyword">if</span> (blob) &#123;</span><br><span class="line">    reader.readAsText(blob);</span><br><span class="line">    reader.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      output.innerHTML = <span class="string">"Could not read file, error code is "</span> + reader.error.code;</span><br><span class="line">    &#125;;</span><br><span class="line">    reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      output.innerHTML = reader.result;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">"Your browser doesn' t support slice()."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="对象-URL"><a href="#对象-URL" class="headerlink" title="对象 URL"></a>对象 URL</h3><p>对象URL也被称为<code>blob URL</code>，指的是引用保存在<code>File</code>或<code>Blob</code>中数据的URL。使用对象URL的好处是可以不必把文件内容读取到JavaScript中而直接使用文件内容。为此，只要在需要文件内容的地方提供对象URL即可。要创建对象URL，可以使用<code>window.URL.createObjectURL(blob) return url</code>方法，并传入<code>File</code>或<code>Blob</code>对象。这个方法在Chrome中的实现叫<code>window.webkitURL.createObjectURL()</code>，因此可以通过如下函数来消除命名的差异：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObjectURL</span>(<span class="params">blob</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.URL) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.URL.createObjectURL(blob);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.webkitURL) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.webkitURL.createObjectURL(blob);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数的返回值是一个字符串，指向一块内存的地址。因为这个字符串是URL，所以在DOM中也能使用。例如，以下代码可以在页面中显示一个图像文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> filesList = <span class="built_in">document</span>.getElementById(<span class="string">"files-list"</span>);</span><br><span class="line">EventUtil.addHandler(filesList, <span class="string">"change"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> info = <span class="string">""</span>,</span><br><span class="line">    output = <span class="built_in">document</span>.getElementById(<span class="string">"output"</span>),</span><br><span class="line">    progress = <span class="built_in">document</span>.getElementById(<span class="string">"progress"</span>),</span><br><span class="line">    files = EventUtil.getTarget(event).files,</span><br><span class="line">    reader = <span class="keyword">new</span> FileReader(),</span><br><span class="line">    url = createObjectURL(files[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (url) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/image/</span>.test(files[<span class="number">0</span>].type)) &#123;</span><br><span class="line">      output.innerHTML = <span class="string">"&lt;img src=\""</span> + url + <span class="string">"\"&gt;"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      output.innerHTML = <span class="string">"Not an image."</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    output.innerHTML = <span class="string">"Your browser doesn't support object URLs."</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>直接把对象URL放在<code>&lt;img&gt;</code>标签中，就省去了把数据先读到JavaScript中的麻烦。另一方面，<img>标签则会找到相应的内存地址，直接读取数据并将图像显示在页面中。如果不再需要相应的数据，最好释放它占用的内容。但只要有代码在引用对象URL，内存就不会释放。要手工释放内存，可以把对象URL传给<code>window.URL.revokeOjbectURL(url)</code>（在Chrome中是<code>window.webkitURL.revokeObjectURL()</code>）。要兼容这两种方法的实现，可以使用以下函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">revokeObjectURL</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.URL) &#123;</span><br><span class="line">    <span class="built_in">window</span>.URL.revokeObjectURL(url);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.webkitURL) &#123;</span><br><span class="line">    <span class="built_in">window</span>.webkitURL.revokeObjectURL(url);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>页面卸载时会自动释放对象URL占用的内存。不过，为了确保尽可能少地占用内存，最好在不需要某个对象URL时，就马上手工释放其占用的内存。</p></blockquote><h3 id="读取拖放的文件"><a href="#读取拖放的文件" class="headerlink" title="读取拖放的文件"></a>读取拖放的文件</h3><p>围绕读取文件信息，结合使用HTML5拖放API和文件API，能够创造出令人瞩目的用户界面：在页面上创建了自定义的放置目标之后，你可以从桌面上把文件拖放到该目标。与拖放一张图片或者一个链接类似，从桌面上把文件拖放到浏览器中也会触发<code>drop</code>事件。而且可以在<code>event.dataTransfer.files</code>中读取到被放置的文件，当然此时它是一个<code>File</code>对象，与通过文件输入字段取得的<code>File</code>对象一样。</p><p>下面这个例子会将放置到页面中自定义的放置目标中的文件信息显示出来：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> droptarget = <span class="built_in">document</span>.getElementById(<span class="string">"droptarget"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleEvent</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> info = <span class="string">""</span>,</span><br><span class="line">    output = <span class="built_in">document</span>.getElementById(<span class="string">"output"</span>),</span><br><span class="line">    files, i, len;</span><br><span class="line"></span><br><span class="line">  EventUtil.preventDefault(event);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (event.type == <span class="string">"drop"</span>) &#123;</span><br><span class="line">    files = event.dataTransfer.files;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    len = files.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">      info += files[i].name + <span class="string">" ("</span> + files[i].type + <span class="string">", "</span> + files[i].size + <span class="string">" bytes)&lt;br&gt;"</span>;</span><br><span class="line"></span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    output.innerHTML = info;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EventUtil.addHandler(droptarget, <span class="string">"dragenter"</span>, handleEvent);</span><br><span class="line">EventUtil.addHandler(droptarget, <span class="string">"dragover"</span>, handleEvent);</span><br><span class="line">EventUtil.addHandler(droptarget, <span class="string">"drop"</span>, handleEvent);</span><br></pre></td></tr></table></figure><blockquote><p>与之前展示的拖放示例一样，这里也必须取消<code>dragenter</code>、<code>dragover</code>和<code>drop</code>的默认行为。在<code>drop</code>事件中，可以通过<code>event.dataTransfer.files</code>读取文件信息。还有一种利用这个功能的流行做法，即结合<code>XMLHttpRequest</code>和拖放文件来实现上传。</p></blockquote><h3 id="使用-XHR-上传文件"><a href="#使用-XHR-上传文件" class="headerlink" title="使用 XHR 上传文件"></a>使用 XHR 上传文件</h3><p>通过<code>File API</code>能够访问到文件内容，利用这一点就可以通过XHR直接把文件上传到服务器。当然啦，把文件内容放到<code>xhr.send()</code>方法中，再通过POST请求，的确很容易就能实现上传。但这样做传递的是文件内容，因而服务器端必须收集提交的内容，然后再把它们保存到另一个文件中。</p><p>其实，更好的做法是以表单提交的方式来上传文件。这样使用<code>FormData</code>类型就很容易做到了。首先，要创建一个<code>FormData</code>对象，通过它调用<code>formdata.append()</code>方法并传入相应的<code>File</code>对象作为参数。然后，再把<code>FormData</code>对象传递给XHR的<code>xhr.send()</code>方法，结果与通过表单上传一模一样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> droptarget = <span class="built_in">document</span>.getElementById(<span class="string">"droptarget"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleEvent</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> info = <span class="string">""</span>,</span><br><span class="line">    output = <span class="built_in">document</span>.getElementById(<span class="string">"output"</span>),</span><br><span class="line">    data, xhr, files, i, len;</span><br><span class="line">  EventUtil.preventDefault(event);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (event.type == <span class="string">"drop"</span>) &#123;</span><br><span class="line">    data = <span class="keyword">new</span> FormData();</span><br><span class="line">    files = event.dataTransfer.files;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    len = files.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">      data.append(<span class="string">"file"</span> + i, files[i]);</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">"post"</span>, <span class="string">"FileAPIExample06Upload.php"</span>, <span class="literal">true</span>);</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">        alert(xhr.responseText);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.send(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EventUtil.addHandler(droptarget, <span class="string">"dragenter"</span>, handleEvent);</span><br><span class="line">EventUtil.addHandler(droptarget, <span class="string">"dragover"</span>, handleEvent);</span><br><span class="line">EventUtil.addHandler(droptarget, <span class="string">"drop"</span>, handleEvent);</span><br></pre></td></tr></table></figure><blockquote><p>这个例子创建一个<code>FormData</code>对象，与每个文件对应的键分别是<code>file0</code>、<code>file1</code>、<code>file2</code>这样的格式。注意，不用额外写任何代码，这些文件就可以作为表单的值提交。而且，也不必使用<code>FileReader</code>，只要传入<code>File</code>对象即可。</p><p>使用<code>FormData</code>上传文件，在服务器端就好像是接收到了常规的表单数据一样，一切按部就班地处理即可。换句话说，如果服务器端使用的是PHP，那么<code>$_FILES</code>数组中就会保存着上传的文件。</p></blockquote><h2 id="Web计时"><a href="#Web计时" class="headerlink" title="Web计时"></a>Web计时</h2><p>Web计时机制的核心是<code>window.performance</code>对象。对页面的所有度量信息，包括那些规范中已经定义的和将来才能确定的，都包含在这个对象里面。WebTiming规范一开始就为performance对象定义了两个属性。</p><h3 id="window-performance-navigation"><a href="#window-performance-navigation" class="headerlink" title="window.performance.navigation"></a>window.performance.navigation</h3><p><code>performance.navigation</code>属性是一个对象，包含着与页面导航有关的多个属性，如下所示</p><ul><li><code>redirectCount</code>：页面加载前的重定向次数。</li><li><code>type</code>：数值常量，表示刚刚发生的导航类型。<ul><li><code>performance.navigation.TYPE_NAVIGATE (0)</code>：页面第一次加载。 </li><li><code>performance.navigation.TYPE_RELOAD (1)</code>：页面重载过。 </li><li><code>performance.navigation.TYPE_BACK_FORWARD (2)</code>：页面是通过“后退”或“前进”按 钮打开的。</li></ul></li></ul><h3 id="window-performance-timing"><a href="#window-performance-timing" class="headerlink" title="window.performance.timing"></a>window.performance.timing</h3><p><code>performance.timing</code>属性是一个对象,这个对象的属性都是时间戳（从软件纪元开始经过的毫秒数），不同的事件会产生不同的时间值</p><ul><li><code>navigationStart</code>：开始导航到当前页面的时间。</li><li><code>unloadEventStart</code>：前一个页面的unload事件开始的时间。但只有在前一个页面与当前页面来自同一个域时这个属性才会有值；否则，值为0。</li><li><code>unloadEventEnd</code>：前一个页面的unload事件结束的时间。但只有在前一个页面与当前页面来自同一个域时这个属性才会有值；否则，值为0。</li><li><code>redirectStart</code>：到当前页面的重定向开始的时间。但只有在重定向的页面来自同一个域时这个属性才会有值；否则，值为0。</li><li><code>redirectEnd</code>：到当前页面的重定向结束的时间。但只有在重定向的页面来自同一个域时这个属性才会有值；否则，值为0。</li><li><code>fetchStart</code>：开始通过HTTPGET取得页面的时间。</li><li><code>domainLookupStart</code>：开始查询当前页面DNS的时间。</li><li><code>domainLookupEnd</code>：查询当前页面DNS结束的时间。</li><li><code>connectStart</code>：浏览器尝试连接服务器的时间。</li><li><code>connectEnd</code>：浏览器成功连接到服务器的时间。</li><li><code>secureConnectionStart</code>：浏览器尝试以SSL方式连接服务器的时间。不使用SSL方式连接时，这个属性的值为0。</li><li><code>requestStart</code>：浏览器开始请求页面的时间。</li><li><code>responseStart</code>：浏览器接收到页面第一字节的时间。</li><li><code>responseEnd</code>：浏览器接收到页面所有内容的时间。</li><li><code>domLoading</code>：document.readyState变为”loading”的时间。</li><li><code>domInteractive</code>：document.readyState变为”interactive”的时间。</li><li><code>domContentLoadedEventStart</code>：发生DOMContentLoaded事件的时间。</li><li><code>domContentLoadedEventEnd</code>：DOMContentLoaded事件已经发生且执行完所有事件处理程序的时间。</li><li><code>domComplete</code>：document.readyState变为”complete”的时间。</li><li><code>loadEventStart</code>：发生load事件的时间。</li><li><code>loadEventEnd</code>：load事件已经发生且执行完所有事件处理程序的时间。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;最佳实践&quot;&gt;&lt;a href=&quot;#最佳实践&quot; class=&quot;headerlink&quot; title=&quot;最佳实践&quot;&gt;&lt;/a&gt;最佳实践&lt;/h1&gt;&lt;h2 id=&quot;可维护性&quot;&gt;&lt;a href=&quot;#可维护性&quot; class=&quot;headerlink&quot; title=&quot;可维护性&quot;&gt;&lt;/a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正反馈系列:《JavaScript高级程序设计》高级技巧,客户端存储</title>
    <link href="http://yoursite.com/2018/01/03/%E9%AB%98%E7%A8%8B12-%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7-Web%E5%AD%98%E5%82%A8/"/>
    <id>http://yoursite.com/2018/01/03/高程12-高级技巧-Web存储/</id>
    <published>2018-01-03T01:07:55.000Z</published>
    <updated>2018-03-21T10:28:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h1><h2 id="高级函数"><a href="#高级函数" class="headerlink" title="高级函数"></a>高级函数</h2><h3 id="安全类型检测"><a href="#安全类型检测" class="headerlink" title="安全类型检测"></a>安全类型检测</h3><p>在任何值上调用Object原生的toString()方法，都会返回一个<code>[objec tNativeConstructorName]</code>格式的字符串。每个类在内部都有一个<code>[[Class]]</code>属性，这个属性中就指定了上述字符串中的构造函数名。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="built_in">Object</span>.prototype.toString.call(value)); <span class="comment">//"[object Array]"</span></span><br></pre></td></tr></table></figure><p>由于原生数组的构造函数名与全局作用域无关，因此使用<code>toString()</code>就能保证返回一致的值。利用这一点，可以创建如下函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测value是不是数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  returnObject.prototype.toString.call(value) == <span class="string">"[objectArray]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 检测value是不是函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFunction</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(value) == <span class="string">"[object Function]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 检测value是不是正则表达式对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isRegExp</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(value) == <span class="string">"[object RegExp]"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一技巧也广泛应用于检测原生JSON对象。<code>Object</code>的<code>toString()</code>方法不能检测非原生构造函数的构造函数名。因此，开发人员定义的任何构造函数都将返回<code>[object Object]</code>。有些JavaScript库会包含与下面类似的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isNativeJSON = <span class="built_in">window</span>.JSON &amp;&amp; <span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">JSON</span>) == <span class="string">"[object JSON]"</span>;</span><br></pre></td></tr></table></figure><blockquote><p>在Web开发中能够区分原生与非原生JavaScript对象非常重要。只有这样才能确切知道某个对象到底有哪些功能。这个技巧可以对任何对象给出正确的结论。</p></blockquote><h3 id="作用域安全的构造函数"><a href="#作用域安全的构造函数" class="headerlink" title="作用域安全的构造函数"></a>作用域安全的构造函数</h3><p>看一个例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.job = job;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = Person(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>); <span class="comment">// 没写new</span></span><br><span class="line">alert(<span class="built_in">window</span>.name); <span class="comment">//"Nicholas" </span></span><br><span class="line">alert(<span class="built_in">window</span>.age); <span class="comment">//29 </span></span><br><span class="line">alert(<span class="built_in">window</span>.job); <span class="comment">//"Software Engineer"</span></span><br></pre></td></tr></table></figure><blockquote><p>避免方法:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span> <span class="keyword">instanceof</span> Person) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.job = job;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Person(name, age, job);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = Person(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</span><br><span class="line">alert(<span class="built_in">window</span>.name); <span class="comment">//"" </span></span><br><span class="line">alert(person1.name); <span class="comment">//"Nicholas"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"Shelby"</span>, <span class="number">34</span>, <span class="string">"Ergonomist"</span>);</span><br><span class="line">alert(person2.name); <span class="comment">//"Shelby"</span></span><br></pre></td></tr></table></figure><p>再看一个例子,该例使用了借用构造函数模式,且不使用原型链,用刚才的方法会出问题,这时就需要加一行<code>Rectangle.prototype = new Polygon();</code>,就解决了这个问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Polygon</span>(<span class="params">sides</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span> <span class="keyword">instanceof</span> Polygon) &#123;</span><br><span class="line">    <span class="keyword">this</span>.sides = sides;</span><br><span class="line">    <span class="keyword">this</span>.getArea = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Polygon(sides);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rectangle</span>(<span class="params">width, height</span>) </span>&#123;</span><br><span class="line">  Polygon.call(<span class="keyword">this</span>, <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">this</span>.width = width;</span><br><span class="line">  <span class="keyword">this</span>.height = height;</span><br><span class="line">  <span class="keyword">this</span>.getArea = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.width * <span class="keyword">this</span>.height;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Rectangle.prototype = new Polygon();</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rect = <span class="keyword">new</span> Rectangle(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">alert(rect.sides); <span class="comment">//undefined //2</span></span><br></pre></td></tr></table></figure><h3 id="惰性载入函数"><a href="#惰性载入函数" class="headerlink" title="惰性载入函数"></a>惰性载入函数</h3><p>看一个例子,之前的xhr对象创建兼容函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXHR</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> XMLHttpRequest != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> ActiveXObject != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">arguments</span>.callee.activeXString != <span class="string">"string"</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> versions = [<span class="string">"MSXML2.XMLHttp.6.0"</span>, <span class="string">"MSXML2.XMLHttp.3.0"</span>, <span class="string">"MSXML2.XMLHttp"</span>],</span><br><span class="line">        i, len;</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>, len = versions.length; i &lt; len; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">new</span> ActiveXObject(versions[i]);</span><br><span class="line">          <span class="built_in">arguments</span>.callee.activeXString = versions[i];</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">          <span class="comment">//跳过 </span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="built_in">arguments</span>.callee.activeXString);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"No XHR object available."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>该函数每次创建一个xhr对象都要进行能力检测,但其实能力检测执行一次就够了,有两种惰性载入方式解决这个问题</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXHR</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> XMLHttpRequest != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    createXHR = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> ActiveXObject != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    createXHR = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">arguments</span>.callee.activeXString != <span class="string">"string"</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> versions = [<span class="string">"MSXML2.XMLHttp.6.0"</span>, <span class="string">"MSXML2.XMLHttp.3.0"</span>,</span><br><span class="line">            <span class="string">"MSXML2.XMLHttp"</span></span><br><span class="line">          ],</span><br><span class="line">          i, len;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>, len = versions.length; i &lt; len; i++) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> ActiveXObject(versions[i]);</span><br><span class="line">            <span class="built_in">arguments</span>.callee.activeXString = versions[i];</span><br><span class="line">          &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">            <span class="comment">//skip</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="built_in">arguments</span>.callee.activeXString);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    createXHR = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"No XHR object available."</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> createXHR();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第二种方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createXHR = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> XMLHttpRequest != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> ActiveXObject != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">arguments</span>.callee.activeXString != <span class="string">"string"</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> versions = [<span class="string">"MSXML2.XMLHttp.6.0"</span>, <span class="string">"MSXML2.XMLHttp.3.0"</span>,</span><br><span class="line">            <span class="string">"MSXML2.XMLHttp"</span></span><br><span class="line">          ],</span><br><span class="line">          i, len;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>, len = versions.length; i &lt; len; i++) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> ActiveXObject(versions[i]);</span><br><span class="line">            <span class="built_in">arguments</span>.callee.activeXString = versions[i];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">            <span class="comment">//skip</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="built_in">arguments</span>.callee.activeXString);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"No XHR object available."</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="函数绑定"><a href="#函数绑定" class="headerlink" title="函数绑定"></a>函数绑定</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">fn, context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fn.apply(context, <span class="built_in">arguments</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述方法等同于原生bind方法<code>fn.bind(context,arg1,arg2,arg3...)</code>,不会像<code>call</code>与<code>apply</code>一样立即执行.</p><h3 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h3><blockquote><p>柯里化 Curry<br>概念: 只传递函数的一部分参数来调用它,让它返回一个函数去处理剩下的参数<br>函数签名:func(params)(otherParams)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单小例子</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> array = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>,<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  array.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">v,i</span>) </span>&#123;</span><br><span class="line">    sum += v;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params">add</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> add.apply(<span class="literal">null</span>,<span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(outer(add)(<span class="number">2</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure><blockquote><p>用柯里化改造上一节的自定义bind()函数,使其变为类似原生.bind一样支持后续参数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">fn, context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> innerArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">var</span> finalArgs = args.concat(innerArgs);</span><br><span class="line">    <span class="keyword">return</span> fn.apply(context, finalArgs);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="防篡改对象"><a href="#防篡改对象" class="headerlink" title="防篡改对象"></a>防篡改对象</h2><h3 id="不可扩展对象-一级防篡改"><a href="#不可扩展对象-一级防篡改" class="headerlink" title="不可扩展对象(一级防篡改)"></a>不可扩展对象(一级防篡改)</h3><h4 id="Object-preventExtensions"><a href="#Object-preventExtensions" class="headerlink" title="Object.preventExtensions()"></a>Object.preventExtensions()</h4><p><code>Object.preventExtensions(obj)</code>,让你不能再给obj添加属性和方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">"Nicholas"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(person);</span><br><span class="line"></span><br><span class="line">person.age = <span class="number">29</span>;</span><br><span class="line">alert(person.age); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><h4 id="Object-istExtensible"><a href="#Object-istExtensible" class="headerlink" title="Object.istExtensible()"></a>Object.istExtensible()</h4><p><code>Object.istExtensible(obj) return boolean</code>,判断对象是否可以扩展</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">"Nicholas"</span></span><br><span class="line">&#125;;</span><br><span class="line">alert(<span class="built_in">Object</span>.isExtensible(person));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(person);</span><br><span class="line">alert(<span class="built_in">Object</span>.isExtensible(person));<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="密封对象-二级防篡改"><a href="#密封对象-二级防篡改" class="headerlink" title="密封对象(二级防篡改)"></a>密封对象(二级防篡改)</h3><p>是<code>密封对象</code>（sealed object）不可扩展，而且已有成员的<code>[[Configurable]]</code>特性将被设置为<code>false</code>。这就意味着不能删除属性和方法，因为不能使用<code>Object.defineProperty()</code>把数据属性修改为访问器属性。属性值是可以修改的。</p><h4 id="Object-seal"><a href="#Object-seal" class="headerlink" title="Object.seal()"></a>Object.seal()</h4><p><code>Object.seal(obj)</code>, 密封对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">"Nicholas"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.seal(person);</span><br><span class="line"></span><br><span class="line">person.age = <span class="number">29</span>;</span><br><span class="line">alert(person.age); <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> person.name;</span><br><span class="line">alert(person.name); <span class="comment">//"Nicholas"</span></span><br></pre></td></tr></table></figure><h4 id="Object-isSealed"><a href="#Object-isSealed" class="headerlink" title="Object.isSealed()"></a>Object.isSealed()</h4><p><code>Object.isSealed(obj) return boolean</code> 检测对象是否被密封了,因为被密封的对象不可扩展，所以用<code>Object.isExtensible(obj)</code>检测密封的对象也会返回false。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">"Nicholas"</span></span><br><span class="line">&#125;;</span><br><span class="line">alert(<span class="built_in">Object</span>.isExtensible(person)); <span class="comment">//true </span></span><br><span class="line">alert(<span class="built_in">Object</span>.isSealed(person)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.seal(person);</span><br><span class="line">alert(<span class="built_in">Object</span>.isExtensible(person)); <span class="comment">//false </span></span><br><span class="line">alert(<span class="built_in">Object</span>.isSealed(person)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="冻结的对象-顶级防篡改"><a href="#冻结的对象-顶级防篡改" class="headerlink" title="冻结的对象(顶级防篡改)"></a>冻结的对象(顶级防篡改)</h3><p>最严格的防篡改级别是<code>冻结对象</code>（frozen object）。冻结的对象既不可扩展，又是密封的，而且对象数据属性的<code>[[Writable]]</code>特性会被设置为<code>false</code>。如果定义<code>[[Set]]</code>函数，访问器属性仍然是可写的。</p><h4 id="Object-freeze"><a href="#Object-freeze" class="headerlink" title="Object.freeze()"></a>Object.freeze()</h4><p><code>Object.freeze(obj)</code> 冻结对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">"Nicholas"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.freeze(person);</span><br><span class="line"></span><br><span class="line">person.age = <span class="number">29</span>;</span><br><span class="line">alert(person.age); <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> person.name;</span><br><span class="line">alert(person.name);  <span class="comment">//"Nicholas"</span></span><br><span class="line"></span><br><span class="line">person.name = <span class="string">"Greg"</span>;</span><br><span class="line">alert(person.name); <span class="comment">//"Nicholas"</span></span><br></pre></td></tr></table></figure><h4 id="Object-isFrozen"><a href="#Object-isFrozen" class="headerlink" title="Object.isFrozen()"></a>Object.isFrozen()</h4><p><code>Object.isFrozen(obj) return boolean</code> 判断对象是否冻结</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">"Nicholas"</span></span><br><span class="line">&#125;;</span><br><span class="line">alert(<span class="built_in">Object</span>.isExtensible(person)); <span class="comment">//true</span></span><br><span class="line">alert(<span class="built_in">Object</span>.isSealed(person)); <span class="comment">//false</span></span><br><span class="line">alert(<span class="built_in">Object</span>.isFrozen(person)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.freeze(person);</span><br><span class="line">alert(<span class="built_in">Object</span>.isExtensible(person)); <span class="comment">//false</span></span><br><span class="line">alert(<span class="built_in">Object</span>.isSealed(person)); <span class="comment">//true</span></span><br><span class="line">alert(<span class="built_in">Object</span>.isFrozen(person)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="高级定时器"><a href="#高级定时器" class="headerlink" title="高级定时器"></a>高级定时器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"my-btn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"message"</span>).style.visibility = <span class="string">"visible"</span>;</span><br><span class="line">  &#125;, <span class="number">250</span>);</span><br><span class="line">  <span class="comment">//其他代码</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>假设上述代码<code>onclick</code>处理程序共执行300ms,执行到第5ms时,创建了250ms的定时器,250ms后,将定时器中的回调函数放入了执行队列,但必须等到<code>onlick</code>处理程序执行完(300ms)后,队列中的代码才开始排队执行,所以定时器中的回调函数最早的执行事件也在300ms后</p></blockquote><p><img src="https://i.loli.net/2018/01/03/5a4c2ca14189b.jpg" alt=""></p><h3 id="重复的定时器"><a href="#重复的定时器" class="headerlink" title="重复的定时器"></a>重复的定时器</h3><p><code>setInterval</code>这种重复定时器的规则有两个问题：(1)某些间隔会被跳过；(2)多个定时器的代码执行之间的间隔可能会比预期的小。假设，某个<code>onclick</code>事件处理程序使用<code>setInterval()</code>设置了一个200ms间隔的重复定时器。如果事件处理程序花了300ms多一点的时间完成，同时定时器代码也花了差不多的时间，就会同时出现跳过间隔且连续运行定时器代码的情况</p><p><img src="https://i.loli.net/2018/01/03/5a4c2ca161b1f.jpg" alt=""></p><blockquote><p>这个例子中的第1个定时器是在205ms处添加到队列中的，但是直到过了300ms处才能够执行。当执行这个定时器代码时，在405ms处又给队列添加了另外一个副本。在下一个间隔，即605ms处，第一个定时器代码仍在运行，同时在队列中已经有了一个定时器代码的实例。结果是，在这个时间点上的定时器代码不会被添加到队列中。结果在5ms处添加的定时器代码结束之后，405ms处添加的定时器代码就立刻执行。</p></blockquote><p>解决办法是用链式调用的<code>setTimeout</code>替代。这样做的好处是，在前一个定时器代码执行完之前，不会向队列插入新的定时器代码，确保不会有任何缺失的间隔。而且，它可以保证在下一次定时器代码执行之前，至少要等待指定的间隔，避免了连续的运行。这个模式主要用于重复定时器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//处理中 </span></span><br><span class="line">  setTimeout(<span class="built_in">arguments</span>.callee, interval);</span><br><span class="line">&#125;, interval);</span><br></pre></td></tr></table></figure><h3 id="Yielding-Processes"><a href="#Yielding-Processes" class="headerlink" title="Yielding Processes"></a>Yielding Processes</h3><p>一旦某个函数需要花 50ms 以上的时间完成，那么最好看看能否将任务分割为一系列可以使用定时器的小任务。可以使用定时器分割任务。这是一种叫做<code>数组分块</code>（arraychunking）的技术，小块小块地处理数组，通常每次一小块。基本的思路是为要处理的项目创建一个队列，然后使用定时器取出下一个要处理的项目进行处理，接着再设置另一个定时器。基本的模式如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chunk</span>(<span class="params">array, process, context</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> item = array.shift();</span><br><span class="line">    process.call(context, item);</span><br><span class="line">    <span class="keyword">if</span> (array.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      setTimeout(<span class="built_in">arguments</span>.callee, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [<span class="number">12</span>, <span class="number">123</span>, <span class="number">1234</span>, <span class="number">453</span>, <span class="number">436</span>, <span class="number">23</span>, <span class="number">23</span>, <span class="number">5</span>, <span class="number">4123</span>, <span class="number">45</span>, <span class="number">346</span>, <span class="number">5634</span>, <span class="number">2234</span>, <span class="number">345</span>, <span class="number">342</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printValue</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line">  div.innerHTML += item + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chunk(data, printValue);</span><br></pre></td></tr></table></figure><blockquote><p>必须当心的地方是，传递给<code>chunk()</code>的数组是用作一个队列的，因此当处理数据的同时，数组中的条目也在改变。如果你想保持原数组不变，则应该将该数组的克隆传递给<code>chunk()</code>，如下例所示：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chunk(data.concat(), printValue);</span><br></pre></td></tr></table></figure><h3 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h3><p>函数节流背后的基本思想是指，某些代码不可以在没有间断的情况连续重复执行。第一次调用函数，创建一个定时器，在指定的时间间隔之后运行代码。当第二次调用该函数时，它会清除前一次的定时器并设置另一个。如果前一个定时器已经执行过了，这个操作就没有任何意义。然而，如果前一个定时器尚未执行，其实就是将其替换为一个新的定时器。目的是只有在执行函数的请求停止了一段时间之后才执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">method, context</span>) </span>&#123;</span><br><span class="line">  clearTimeout(method.tId);</span><br><span class="line">  method.tId = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    method.call(context);</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>应用,在<code>window.onresize</code>这种耗费资源的事件中,事件节流效果显著</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resizeDiv</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line">  div.style.height = div.offsetWidth + <span class="string">"px"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  throttle(resizeDiv);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>只要代码是周期性执行的，都应该使用节流，但是你不能控制请求执行的速率。这里展示的<code>throttle()</code>函数用了100ms作为间隔，你当然可以根据你的需要来修改它。</p></blockquote><h2 id="自定义事件-观察者模式"><a href="#自定义事件-观察者模式" class="headerlink" title="自定义事件,观察者模式"></a>自定义事件,观察者模式</h2><blockquote><p>DOM元素是主题,事件处理程序是观察者</p><p>自定义事件背后的概念是创建一个管理事件的对象，让其他对象监听那些事件。如下:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EventTarget</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.handlers = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EventTarget.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: EventTarget,</span><br><span class="line"></span><br><span class="line">  addHandler: function (type, handler) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.handlers[type] == <span class="string">"undefined"</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.handlers[type] = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.handlers[type].push(handler);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  fire: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!event.target) &#123;</span><br><span class="line">      event.target = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.handlers[event.type] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> handlers = <span class="keyword">this</span>.handlers[event.type];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = handlers.length; i &lt; len; i++) &#123;</span><br><span class="line">        handlers[i](event);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  removeHandler: <span class="function"><span class="keyword">function</span> (<span class="params">type, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.handlers[type] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> handlers = <span class="keyword">this</span>.handlers[type];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = handlers.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (handlers[i] === handler) &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      handlers.splice(i, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>初级调用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleMessage</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Message received: "</span> + event.message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> target = <span class="keyword">new</span> EventTarget();</span><br><span class="line"></span><br><span class="line">target.addHandler(<span class="string">"message"</span>, handleMessage);</span><br><span class="line"></span><br><span class="line">target.fire(&#123;</span><br><span class="line">  type: <span class="string">"message"</span>,</span><br><span class="line">  message: <span class="string">"Hello world!"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">target.removeHandler(<span class="string">"message"</span>, handleMessage);</span><br><span class="line"></span><br><span class="line">target.fire(&#123;</span><br><span class="line">  type: <span class="string">"message"</span>,</span><br><span class="line">  message: <span class="string">"Hello world!"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>高级调用,结合寄生组合继承</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  F.prototype = o;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">subType, superType</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> prototype = object(superType.prototype); <span class="comment">//create object</span></span><br><span class="line">  prototype.constructor = subType; <span class="comment">//augment object</span></span><br><span class="line">  subType.prototype = prototype; <span class="comment">//assign object</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  EventTarget.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inheritPrototype(Person, EventTarget);</span><br><span class="line"></span><br><span class="line">Person.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.fire(&#123;</span><br><span class="line">    type: <span class="string">"message"</span>,</span><br><span class="line">    message: message</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleMessage</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(event.target.name + <span class="string">" says: "</span> + event.message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">"Nicholas"</span>, <span class="number">29</span>);</span><br><span class="line">person.addHandler(<span class="string">"message"</span>, handleMessage);</span><br><span class="line">person.say(<span class="string">"Hi there."</span>);</span><br></pre></td></tr></table></figure><h2 id="拖放"><a href="#拖放" class="headerlink" title="拖放"></a>拖放</h2><h3 id="鼠标拖尾"><a href="#鼠标拖尾" class="headerlink" title="鼠标拖尾"></a>鼠标拖尾</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;div id="myDiv" style="background:red;width:100px;height:100px;position:absolute"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"mousemove"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> myDiv = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line">  myDiv.style.left = event.clientX + <span class="string">"px"</span>;</span><br><span class="line">  myDiv.style.top = event.clientY + <span class="string">"px"</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="拖放接口"><a href="#拖放接口" class="headerlink" title="拖放接口"></a>拖放接口</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;div class="draggable" style="position:absolute; background:red"&gt; &lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> DragDrop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//单例模式</span></span><br><span class="line">  <span class="keyword">var</span> dragging = <span class="literal">null</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleEvent</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//get event and target</span></span><br><span class="line">    event = EventUtil.getEvent(event);</span><br><span class="line">    <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line">    <span class="comment">//determine the type of event</span></span><br><span class="line">    <span class="keyword">switch</span> (event.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mousedown"</span>:</span><br><span class="line">        <span class="keyword">if</span> (target.className.indexOf(<span class="string">"draggable"</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">          dragging = target;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mousemove"</span>:</span><br><span class="line">        <span class="keyword">if</span> (dragging !== <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//assign location</span></span><br><span class="line">          dragging.style.left = event.clientX + <span class="string">"px"</span>;</span><br><span class="line">          dragging.style.top = event.clientY + <span class="string">"px"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mouseup"</span>:</span><br><span class="line">        dragging = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//public interface</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    enable: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"mousedown"</span>, handleEvent);</span><br><span class="line">      EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"mousemove"</span>, handleEvent);</span><br><span class="line">      EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"mouseup"</span>, handleEvent);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    disable: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      EventUtil.removeHandler(<span class="built_in">document</span>, <span class="string">"mousedown"</span>, handleEvent);</span><br><span class="line">      EventUtil.removeHandler(<span class="built_in">document</span>, <span class="string">"mousemove"</span>, handleEvent);</span><br><span class="line">      EventUtil.removeHandler(<span class="built_in">document</span>, <span class="string">"mouseup"</span>, handleEvent);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">DragDrop.enable();</span><br></pre></td></tr></table></figure><blockquote><p><code>DragDrop</code>对象封装了拖放的所有基本功能。这是一个单例对象，并使用了模块模式来隐藏某些实现细节。<code>dragging</code>变量起初是null，将会存放被拖动的元素，所以当该变量不为null时，就知道正在拖动某个东西。<code>handleEvent()</code>函数处理拖放功能中的所有的三个鼠标事件。它首先获取<code>event</code>对象和事件目标的引用。之后，用一个switch语句确定要触发哪个事件样式。当<code>mousedown</code>事件发生时，会检查<code>target</code>的class是否包含”draggable”类，如果是，那么将<code>target</code>存放到<code>dragging</code>中。这个技巧可以很方便地通过标记语言而非JavaScript脚本来确定可拖动的元素。<code>handleEvent()</code>的mousemove情况和前面的代码一样，不过要检查<code>dragging</code>是否为null。当它不是null，就知道dragging就是要拖动的元素，这样就会把它放到恰当的位置上。<code>mouseup</code>情况就仅仅是将dragging重置为null，让mousemove事件中的判断失效。<code>DragDrop</code>还有两个公共方法：<code>DragDrop.enable()</code>和<code>DragDrop.disable()</code>，它们只是相应添加和删除所有的事件处理程序。这两个函数提供了额外的对拖放功能的控制手段。要使用DragDrop对象，只要在页面上包含这些代码并调用<code>DragDrop.enable()</code>。</p></blockquote><h3 id="修缮拖动功能"><a href="#修缮拖动功能" class="headerlink" title="修缮拖动功能"></a>修缮拖动功能</h3><p><img src="https://i.loli.net/2018/01/03/5a4c2ca156296.jpg" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> DragDrop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> dragging = <span class="literal">null</span>,</span><br><span class="line">    diffX = <span class="number">0</span>,</span><br><span class="line">    diffY = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleEvent</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get event and target</span></span><br><span class="line">    event = EventUtil.getEvent(event);</span><br><span class="line">    <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//determine the type of event</span></span><br><span class="line">    <span class="keyword">switch</span> (event.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mousedown"</span>:</span><br><span class="line">        <span class="keyword">if</span> (target.className.indexOf(<span class="string">"draggable"</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">          dragging = target;</span><br><span class="line">          diffX = event.clientX - target.offsetLeft;</span><br><span class="line">          diffY = event.clientY - target.offsetTop;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mousemove"</span>:</span><br><span class="line">        <span class="keyword">if</span> (dragging !== <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//assign location</span></span><br><span class="line">          dragging.style.left = (event.clientX - diffX) + <span class="string">"px"</span>;</span><br><span class="line">          dragging.style.top = (event.clientY - diffY) + <span class="string">"px"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mouseup"</span>:</span><br><span class="line">        dragging = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//public interface</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    enable: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"mousedown"</span>, handleEvent);</span><br><span class="line">      EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"mousemove"</span>, handleEvent);</span><br><span class="line">      EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"mouseup"</span>, handleEvent);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    disable: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      EventUtil.removeHandler(<span class="built_in">document</span>, <span class="string">"mousedown"</span>, handleEvent);</span><br><span class="line">      EventUtil.removeHandler(<span class="built_in">document</span>, <span class="string">"mousemove"</span>, handleEvent);</span><br><span class="line">      EventUtil.removeHandler(<span class="built_in">document</span>, <span class="string">"mouseup"</span>, handleEvent);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><h3 id="添加自定义事件"><a href="#添加自定义事件" class="headerlink" title="添加自定义事件"></a>添加自定义事件</h3><p>拖放功能还不能真正应用起来，除非能知道什么时候拖动开始了。从这点上看，前面的代码没有提供任何方法表示拖动开始、正在拖动或者已经结束。这时，可以使用自定义事件来指示这几个事件的发生，让应用的其他部分与拖动功能进行交互。</p><p>由于<code>DragDrop</code>对象是一个使用了模块模式的<strong>单例</strong>，所以需要进行一些更改来使用<code>EventTarget</code>类型。首先，创建一个新的<code>EventTarget</code>对象，然后添加<code>enable()</code>和<code>disable()</code>方法，最后返回这个对象。看以下内容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> DragDrop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> dragdrop = <span class="keyword">new</span> EventTarget(),</span><br><span class="line">    dragging = <span class="literal">null</span>,</span><br><span class="line">    diffX = <span class="number">0</span>,</span><br><span class="line">    diffY = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleEvent</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get event and target</span></span><br><span class="line">    event = EventUtil.getEvent(event);</span><br><span class="line">    <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//determine the type of event</span></span><br><span class="line">    <span class="keyword">switch</span> (event.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mousedown"</span>:</span><br><span class="line">        <span class="keyword">if</span> (target.className.indexOf(<span class="string">"draggable"</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">          dragging = target;</span><br><span class="line">          diffX = event.clientX - target.offsetLeft;</span><br><span class="line">          diffY = event.clientY - target.offsetTop;</span><br><span class="line">          dragdrop.fire(&#123;</span><br><span class="line">            type: <span class="string">"dragstart"</span>,</span><br><span class="line">            target: dragging,</span><br><span class="line">            x: event.clientX,</span><br><span class="line">            y: event.clientY</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mousemove"</span>:</span><br><span class="line">        <span class="keyword">if</span> (dragging !== <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//assign location</span></span><br><span class="line">          dragging.style.left = (event.clientX - diffX) + <span class="string">"px"</span>;</span><br><span class="line">          dragging.style.top = (event.clientY - diffY) + <span class="string">"px"</span>;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//fire custom event</span></span><br><span class="line">          dragdrop.fire(&#123;</span><br><span class="line">            type: <span class="string">"drag"</span>,</span><br><span class="line">            target: dragging,</span><br><span class="line">            x: event.clientX,</span><br><span class="line">            y: event.clientY</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mouseup"</span>:</span><br><span class="line">        dragdrop.fire(&#123;</span><br><span class="line">          type: <span class="string">"dragend"</span>,</span><br><span class="line">          target: dragging,</span><br><span class="line">          x: event.clientX,</span><br><span class="line">          y: event.clientY</span><br><span class="line">        &#125;);</span><br><span class="line">        dragging = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//public interface</span></span><br><span class="line">  dragdrop.enable = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"mousedown"</span>, handleEvent);</span><br><span class="line">    EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"mousemove"</span>, handleEvent);</span><br><span class="line">    EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"mouseup"</span>, handleEvent);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  dragdrop.disable = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    EventUtil.removeHandler(<span class="built_in">document</span>, <span class="string">"mousedown"</span>, handleEvent);</span><br><span class="line">    EventUtil.removeHandler(<span class="built_in">document</span>, <span class="string">"mousemove"</span>, handleEvent);</span><br><span class="line">    EventUtil.removeHandler(<span class="built_in">document</span>, <span class="string">"mouseup"</span>, handleEvent);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dragdrop;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">DragDrop.enable();</span><br><span class="line"></span><br><span class="line">DragDrop.addHandler(<span class="string">"dragstart"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> status = <span class="built_in">document</span>.getElementById(<span class="string">"status"</span>);</span><br><span class="line">  status.innerHTML = <span class="string">"Started dragging "</span> + event.target.id;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">DragDrop.addHandler(<span class="string">"drag"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> status = <span class="built_in">document</span>.getElementById(<span class="string">"status"</span>);</span><br><span class="line">  status.innerHTML += <span class="string">"&lt;br&gt;Dragged "</span> + event.target.id + <span class="string">" to ("</span> + event.x + <span class="string">","</span> + event.y + <span class="string">")"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">DragDrop.addHandler(<span class="string">"dragend"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> status = <span class="built_in">document</span>.getElementById(<span class="string">"status"</span>);</span><br><span class="line">  status.innerHTML += <span class="string">"&lt;br&gt;Dropped "</span> + event.target.id + <span class="string">" at ("</span> + event.x + <span class="string">","</span> + event.y + <span class="string">")"</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="离线应用与客户端存储"><a href="#离线应用与客户端存储" class="headerlink" title="离线应用与客户端存储"></a>离线应用与客户端存储</h1><h2 id="离线检测"><a href="#离线检测" class="headerlink" title="离线检测"></a>离线检测</h2><h3 id="navigator-onLine属性"><a href="#navigator-onLine属性" class="headerlink" title="navigator.onLine属性"></a>navigator.onLine属性</h3><p>HTML5为此定义了一个<code>navigator.onLine</code>属性，这个属性值为true表示设备能上网，值为false表示设备离线。这个属性的关键是浏览器必须知道设备能否访问网络，从而返回正确的值。</p><p>除<code>navigator.onLine</code>属性之外，为了更好地确定网络是否可用，HTML5还定义了两个事件：<code>online</code>和<code>offline</code>。当网络从离线变为在线或者从在线变为离线时，分别触发这两个事件。这两个事件在<code>window</code>对象上触发。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"online"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Online"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"offline"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Offline"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="应用缓存"><a href="#应用缓存" class="headerlink" title="应用缓存"></a>应用缓存</h2><p>HTML5的应用缓存（applicationcache），或者简称为<code>appcache</code>，是专门为开发离线Web应用而设计的。<code>Appcache</code>就是从浏览器的缓存中分出来的一块缓存区。要想在这个缓存中保存数据，可以使用一个描述文件（<code>manifestfile</code>），列出要下载和缓存的资源。下面是一个简单的描述文件示例。</p><p>CACHE MANIFEST </p><p> #Comment</p><p>file.js file.css</p><blockquote><p>在最简单的情况下，描述文件中列出的都是需要下载的资源，以备离线时使用。</p></blockquote><p>要将描述文件与页面关联起来，可以在<code>&lt;html&gt;</code>中的 manifest 属性中指定这个文件的路径，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">manifest</span>=<span class="string">"/offline.manifest"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上代码告诉页面，<code>/offline.manifest</code>中包含着描述文件。这个文件的MIME类型必须是<code>text/cache-manifest</code>。</p><p>应用缓存还有一些属性和方法,更多详情查阅高程p628</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>HTTP Cookie，通常直接叫做<code>cookie</code>，最初是在客户端用于存储会话信息的。该标准要求服务器对任意HTTP请求发送<code>Set-Cookie</code> HTTP头作为响应的一部分,这种服务器响应的头可能如下：</p><blockquote><p>HTTP/1.1 200 OK<br>Content-type: text/html<br>Set-Cookie: name=value<br>Other-header: other-header-value</p></blockquote><p>这个HTTP响应设置以<code>name</code>为名称、以<code>value</code>为值的一个<code>cookie</code>，名称和值在传送时都必须是URL编码的。浏览器会存储这样的会话信息，并在这之后，通过为每个请求添加<code>Cookie HTTP头</code>将信息发送回服务器，如下所示：</p><blockquote><p>GET /index.html HTTP/1.1<br>Cookie: name=value<br>Other-header: other-header-value</p></blockquote><p><code>cookie</code>在性质上是绑定在特定的域名下的。当设定了一个<code>cookie</code>后，再给创建它的域名发送请求时，都会包含这个<code>cookie</code>。这个限制确保了储存在cookie中的信息只能让批准的接受者访问</p><p>cookie由浏览器保存的以下几块信息构成</p><ul><li><code>名称</code>：一个唯一确定cookie的名称。cookie名称是不区分大小写的，所以myCookie和MyCookie被认为是同一个cookie。然而，实践中最好将cookie名称看作是区分大小写的，因为某些服务器会这样处理 cookie。cookie 的名称必须是经过 URL 编码的。</li><li><code>值</code>：储存在cookie中的字符串值。值必须被URL编码。</li><li><code>域</code>：cookie对于哪个域是有效的。所有向该域发送的请求中都会包含这个cookie信息。这个值可以包含子域（subdomain，如www.wrox.com），也可以不包含它（如.wrox.com，则对于wrox.com的所有子域都有效）。如果没有明确设定，那么这个域会被认作来自设置cookie的那个域。</li><li><code>路径</code>：对于指定域中的那个路径，应该向服务器发送cookie。例如，你可以指定cookie只有从<a href="http://www.wrox.com/books/中才能访问，那么http://www.wrox.com的页面就不会发送cookie信息，即使请求都是来自同一个域的。" target="_blank" rel="noopener">http://www.wrox.com/books/中才能访问，那么http://www.wrox.com的页面就不会发送cookie信息，即使请求都是来自同一个域的。</a></li><li><code>失效时间</code>：表示cookie何时应该被删除的时间戳（也就是，何时应该停止向服务器发送这个cookie）。默认情况下，浏览器会话结束时即将所有cookie删除；不过也可以自己设置删除时间。这个值是个GMT格式的日期（Wdy,DD-Mon-YYYYHH:MM:SSGMT），用于指定应该删除cookie的准确时间。因此，cookie可在浏览器关闭后依然保存在用户的机器上。如果你设置的失效日期是个以前的时间，则cookie会被立刻删除。</li><li><code>安全标志</code>：指定后，cookie只有在使用SSL连接的时候才发送到服务器。例如，cookie信息只能发送给<a href="https://www.wrox.com，而http://www.wrox.com的请求则不能发送cookie。" target="_blank" rel="noopener">https://www.wrox.com，而http://www.wrox.com的请求则不能发送cookie。</a></li></ul><blockquote><p>HTTP/1.1 200 OK<br>Content-type: text/html<br>Set-Cookie: name=value; expires=Mon, 22-Jan-07 07:10:24 GMT; domain=.wrox.com<br>Other-header: other-header-value</p></blockquote><p>该头信息指定了一个叫做name的cookie，它会在格林威治时间2007年1月22日7:10:24失效，同时对于www.wrox.com和wrox.com的任何子域（如p2p.wrox.com）都有效。</p><p>secure标志是cookie中唯一一个非名值对儿的部分，直接包含一个secure单词</p><blockquote><p>HTTP/1.1 200 OK<br>Content-type: text/html<br>Set-Cookie: name=value; domain=.wrox.com; path=/; secure<br>Other-header: other-header-value</p></blockquote><p>这里，创建了一个对于所有wrox.com的子域和域名下（由path参数指定的）所有页面都有效的cookie。因为设置了secure标志，这个cookie只能通过SSL连接才能传输。</p><h3 id="JavaScript中的cookie"><a href="#JavaScript中的cookie" class="headerlink" title="JavaScript中的cookie"></a>JavaScript中的cookie</h3><p>即BOM的<code>document.cookie</code>属性。。当用来获取属性值时，<code>document.cookie</code>返回当前页面可用的（根据cookie的域、路径、失效时间和安全设置）所有cookie的字符串，一系列由分号隔开的名值对儿，如下例所示</p><p>name1=value1;name2=value2;name3=value3</p><p>所有名字和值都是经过URL编码的，所以必须使用<code>decodeURIComponent()</code>来解码。当用于设置值的时候，<code>document.cookie</code>属性可以设置为一个新的<code>cookie</code>字符串。这个<code>cookie</code>字符串会被解释并添加到现有的<code>cookie</code>集合中。设置document.cookie并不会覆盖cookie，除非设置的<code>cookie</code>的名称已经存在。</p><p>name=value;expires=expiration_time;path=domain_path;domain=domain_name;secure</p><p>这些参数中，只有<code>cookie</code>的名字和值是必需的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie=<span class="string">"name=Nicholas"</span>;</span><br></pre></td></tr></table></figure><p>这段代码创建了一个叫<code>name</code>的<code>cookie</code>，值为Nicholas。当客户端每次向服务器端发送请求的时候，都会发送这个<code>cookie</code>；当浏览器关闭的时候，它就会被删除。虽然这段代码没问题，但因为这里正好名称和值都无需编码，所以最好每次设置<code>cookie</code>时都像下面这个例子中一样使用<code>encodeURIComponent()</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = <span class="built_in">encodeURIComponent</span>(<span class="string">"name"</span>) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(<span class="string">"Nicholas"</span>);</span><br></pre></td></tr></table></figure><p>要给被创建的<code>cookie</code>指定额外的信息，只要将参数追加到该字符串，和<code>Set-Cookie</code>头中的格式一样，如下所示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = <span class="built_in">encodeURIComponent</span>(<span class="string">"name"</span>) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(<span class="string">"Nicholas"</span>) + <span class="string">"; domain=.wrox.com; path=/"</span>;</span><br></pre></td></tr></table></figure><h3 id="CookieUtil-js"><a href="#CookieUtil-js" class="headerlink" title="CookieUtil.js"></a>CookieUtil.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CookieUtil = &#123;</span><br><span class="line"></span><br><span class="line">  get: <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cookieName = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">"="</span>,</span><br><span class="line">      cookieStart = <span class="built_in">document</span>.cookie.indexOf(cookieName),</span><br><span class="line">      cookieValue = <span class="literal">null</span>,</span><br><span class="line">      cookieEnd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cookieStart &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      cookieEnd = <span class="built_in">document</span>.cookie.indexOf(<span class="string">";"</span>, cookieStart);</span><br><span class="line">      <span class="keyword">if</span> (cookieEnd == <span class="number">-1</span>) &#123;</span><br><span class="line">        cookieEnd = <span class="built_in">document</span>.cookie.length;</span><br><span class="line">      &#125;</span><br><span class="line">      cookieValue = <span class="built_in">decodeURIComponent</span>(<span class="built_in">document</span>.cookie.substring(cookieStart + cookieName.length, cookieEnd));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cookieValue;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  set: <span class="function"><span class="keyword">function</span> (<span class="params">name, value, expires, path, domain, secure</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cookieText = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(value);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (expires <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">      cookieText += <span class="string">"; expires="</span> + expires.toGMTString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (path) &#123;</span><br><span class="line">      cookieText += <span class="string">"; path="</span> + path;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (domain) &#123;</span><br><span class="line">      cookieText += <span class="string">"; domain="</span> + domain;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (secure) &#123;</span><br><span class="line">      cookieText += <span class="string">"; secure"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.cookie = cookieText;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  unset: <span class="function"><span class="keyword">function</span> (<span class="params">name, path, domain, secure</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.set(name, <span class="string">""</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>), path, domain, secure);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>调用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置 cookie </span></span><br><span class="line">CookieUtil.set(<span class="string">"name"</span>, <span class="string">"Nicholas"</span>);</span><br><span class="line">CookieUtil.set(<span class="string">"book"</span>, <span class="string">"Professional JavaScript"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取 cookie 的值 </span></span><br><span class="line">alert(CookieUtil.get(<span class="string">"name"</span>)); <span class="comment">//"Nicholas" </span></span><br><span class="line">alert(CookieUtil.get(<span class="string">"book"</span>)); <span class="comment">//"Professional JavaScript"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除 cookie </span></span><br><span class="line">CookieUtil.unset(<span class="string">"name"</span>);</span><br><span class="line">CookieUtil.unset(<span class="string">"book"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置 cookie，包括它的路径、域、失效日期 </span></span><br><span class="line">CookieUtil.set(<span class="string">"name"</span>, <span class="string">"Nicholas"</span>, <span class="string">"/books/projs/"</span>, <span class="string">"www.wrox.com"</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"January 1, 2010"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除刚刚设置的 cookie </span></span><br><span class="line">CookieUtil.unset(<span class="string">"name"</span>, <span class="string">"/books/projs/"</span>, <span class="string">"www.wrox.com"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置安全的 cookie </span></span><br><span class="line">CookieUtil.set(<span class="string">"name"</span>, <span class="string">"Nicholas"</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><blockquote><p>没有删除已有<code>cookie</code>的直接方法。所以，需要使用相同的路径、域和安全选项再次设置<code>cookie</code>，并将失效时间设置为过去的时间。<code>CookieUtil.unset()</code>方法可以处理这种事情。它接收4个参数：要删除的<code>cookie</code>的名称、可选的路径参数、可选的域参数和可选的安全参数。这些参数加上空字符串并设置失效时间为1970年1月1日（初始化为0ms的<code>Date</code>对象的值），传给<code>CookieUtil.set()</code>。这样就能确保删除<code>cookie</code>。</p></blockquote><h3 id="子cookie"><a href="#子cookie" class="headerlink" title="子cookie"></a>子cookie</h3><p>为了绕开浏览器的单域名下的cookie数限制，一些开发人员使用了一种称为子cookie（<code>subcookie</code>）的概念。子cookie是存放在单个cookie中的更小段的数据。也就是使用cookie值来存储多个名称值对儿。子cookie最常见的的格式如下所示。</p><p><code>name=name1=value1&amp;name2=value2&amp;name3=value3&amp;name4=value4&amp;name5=value5</code></p><p>子cookie一般也以查询字符串的格式进行格式化。然后这些值可以使用单个cookie进行存储和访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> SubCookieUtil = &#123;</span><br><span class="line">  </span><br><span class="line">  get: <span class="function"><span class="keyword">function</span> (<span class="params">name, subName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> subCookies = <span class="keyword">this</span>.getAll(name);</span><br><span class="line">    <span class="keyword">if</span> (subCookies) &#123;</span><br><span class="line">      <span class="keyword">return</span> subCookies[subName];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  getAll: <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cookieName = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">"="</span>,</span><br><span class="line">      cookieStart = <span class="built_in">document</span>.cookie.indexOf(cookieName),</span><br><span class="line">      cookieValue = <span class="literal">null</span>,</span><br><span class="line">      cookieEnd,</span><br><span class="line">      subCookies,</span><br><span class="line">      i,</span><br><span class="line">      parts,</span><br><span class="line">      result = &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (cookieStart &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      cookieEnd = <span class="built_in">document</span>.cookie.indexOf(<span class="string">";"</span>, cookieStart)</span><br><span class="line">      <span class="keyword">if</span> (cookieEnd == <span class="number">-1</span>) &#123;</span><br><span class="line">        cookieEnd = <span class="built_in">document</span>.cookie.length;</span><br><span class="line">      &#125;</span><br><span class="line">      cookieValue = <span class="built_in">document</span>.cookie.substring(cookieStart + cookieName.length, cookieEnd);</span><br><span class="line">      <span class="keyword">if</span> (cookieValue.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        subCookies = cookieValue.split(<span class="string">"&amp;"</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>, len = subCookies.length; i &lt; len; i++) &#123;</span><br><span class="line">          parts = subCookies[i].split(<span class="string">"="</span>);</span><br><span class="line">          result[<span class="built_in">decodeURIComponent</span>(parts[<span class="number">0</span>])] = <span class="built_in">decodeURIComponent</span>(parts[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  set: <span class="function"><span class="keyword">function</span> (<span class="params">name, subName, value, expires, path, domain, secure</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> subcookies = <span class="keyword">this</span>.getAll(name) || &#123;&#125;;</span><br><span class="line">    subcookies[subName] = value;</span><br><span class="line">    <span class="keyword">this</span>.setAll(name, subcookies, expires, path, domain, secure);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  setAll: <span class="function"><span class="keyword">function</span> (<span class="params">name, subcookies, expires, path, domain, secure</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cookieText = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">"="</span>,</span><br><span class="line">      subcookieParts = <span class="keyword">new</span> <span class="built_in">Array</span>(),</span><br><span class="line">      subName;</span><br><span class="line">    <span class="keyword">for</span> (subName <span class="keyword">in</span> subcookies) &#123;</span><br><span class="line">      <span class="keyword">if</span> (subName.length &gt; <span class="number">0</span> &amp;&amp; subcookies.hasOwnProperty(subName)) &#123;</span><br><span class="line">        subcookieParts.push(<span class="built_in">encodeURIComponent</span>(subName) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(subcookies[subName]));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (subcookieParts.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      cookieText += subcookieParts.join(<span class="string">"&amp;"</span>);</span><br><span class="line">      <span class="keyword">if</span> (expires <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">        cookieText += <span class="string">"; expires="</span> + expires.toGMTString();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (path) &#123;</span><br><span class="line">        cookieText += <span class="string">"; path="</span> + path;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (domain) &#123;</span><br><span class="line">        cookieText += <span class="string">"; domain="</span> + domain;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (secure) &#123;</span><br><span class="line">        cookieText += <span class="string">"; secure"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      cookieText += <span class="string">"; expires="</span> + (<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>)).toGMTString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.cookie = cookieText;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  unset: <span class="function"><span class="keyword">function</span> (<span class="params">name, subName, path, domain, secure</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> subcookies = <span class="keyword">this</span>.getAll(name);</span><br><span class="line">    <span class="keyword">if</span> (subcookies) &#123;</span><br><span class="line">      <span class="keyword">delete</span> subcookies[subName];</span><br><span class="line">      <span class="keyword">this</span>.setAll(name, subcookies, <span class="literal">null</span>, path, domain, secure);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  unsetAll: <span class="function"><span class="keyword">function</span> (<span class="params">name, path, domain, secure</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setAll(name, <span class="literal">null</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>), path, domain, secure);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>调用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设 document.cookie=data=name=Nicholas&amp;book=Professional%20JavaScript</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//取得全部子 cookie </span></span><br><span class="line"><span class="keyword">var</span> data = SubCookieUtil.getAll(<span class="string">"data"</span>); </span><br><span class="line">alert(data.name); <span class="comment">//"Nicholas" </span></span><br><span class="line">alert(data.book); <span class="comment">//"Professional JavaScript"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//逐个获取子 cookie </span></span><br><span class="line">alert(SubCookieUtil.get(<span class="string">"data"</span>, <span class="string">"name"</span>)); <span class="comment">//"Nicholas" </span></span><br><span class="line">alert(SubCookieUtil.get(<span class="string">"data"</span>, <span class="string">"book"</span>)); <span class="comment">//"Professional JavaScript"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//假设 document.cookie=data=name=Nicholas&amp;book=Professional%20JavaScript</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置两个 cookie </span></span><br><span class="line">SubCookieUtil.set(<span class="string">"data"</span>, <span class="string">"name"</span>, <span class="string">"Nicholas"</span>);</span><br><span class="line">SubCookieUtil.set(<span class="string">"data"</span>, <span class="string">"book"</span>, <span class="string">"Professional JavaScript"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置全部子 cookie 和失效日期 </span></span><br><span class="line">SubCookieUtil.setAll(<span class="string">"data"</span>, &#123;</span><br><span class="line">  name: <span class="string">"Nicholas"</span>,</span><br><span class="line">  book: <span class="string">"Professional JavaScript"</span></span><br><span class="line">&#125;, <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"January 1, 2010"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改名字的值，并修改 cookie 的失效日期 </span></span><br><span class="line">SubCookieUtil.set(<span class="string">"data"</span>, <span class="string">"name"</span>, <span class="string">"Michael"</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"February 1, 2010"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//仅删除名为 name 的子 cookie </span></span><br><span class="line">SubCookieUtil.unset(<span class="string">"data"</span>, <span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除整个 cookie </span></span><br><span class="line">SubCookieUtil.unsetAll(<span class="string">"data"</span>);</span><br></pre></td></tr></table></figure><h2 id="Web存储机制"><a href="#Web存储机制" class="headerlink" title="Web存储机制"></a>Web存储机制</h2><p>cookies兼容所有的浏览器，Html5提供的storage存储方式。<br><code>Document.cookie</code><br><code>Window.localstorage</code><br><code>Window.sessionstorage</code><br><code>cookie</code>数据始终在同源的http请求中携带（即使不需要），即<code>cookie</code>在浏览器和服务器间来回传递。而<code>sessionStorage</code>和<code>localStorage</code>不会自动把数据发给服务器，仅在本地保存。<br>存储大小限制也不同，<code>cookie</code>数据不能超过4k，同时因为每次http请求都会携带<code>cookie</code>，所以<code>cookie</code>只适合保存很小的数据，如会话标识。<code>sessionStorage</code>和<code>localStorage</code> 虽然也有存储大小的限制，但比<code>cookie</code>大得多，可以达到5M或更大。<br>数据有效期不同，<code>sessionStorage</code>：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持；<code>localStorage</code>：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；<code>cookie</code>只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。<br>作用域不同，<code>sessionStorage</code>不在不同的浏览器窗口中共享，即使是同一个页面；<code>localStorage</code> 在所有同源窗口中都是共享的；<code>cookie</code>也是在所有同源窗口中都是共享的。</p><h3 id="Storage类型"><a href="#Storage类型" class="headerlink" title="Storage类型"></a>Storage类型</h3><p><code>Storage</code>类型提供最大的存储空间（因浏览器而异）来存储名值对儿。<code>Storage</code>的实例与其他对象类似，有如下方法。</p><ul><li><code>storage.clear()</code>：删除所有值；Firefox中没有实现。</li><li><code>storage.getItem(name)</code>：根据指定的名字name获取对应的值。</li><li><code>storage.key(index)</code>：获得index位置处的值的名字。</li><li><code>storage.removeItem(name)</code>：删除由name指定的名值对儿。</li><li><code>storage.setItem(name,value)</code>：为指定的name设置一个对应的值。</li></ul><blockquote><p>因为每个项目都是作为属性存储在该对象上的，所以可以通过点语法或者方括号语法访问属性来读取值，设置也一样，或者通过<code>delete</code>操作符进行删除。不过，<strong>建议使用方法而不是属性来访问数据</strong>，以免某个键会意外重写该对象上已经存在的成员。还可以使用<code>storage.length</code>属性来判断有多少名值对儿存放在<code>Storage</code>对象中。但无法判断对象中所有数据的大小，</p></blockquote><h3 id="sessionStorage-对象"><a href="#sessionStorage-对象" class="headerlink" title="sessionStorage 对象"></a>sessionStorage 对象</h3><p><code>session Storage</code>对象存储特定于某个会话的数据，也就是该数据只保持到浏览器关闭。这个对象就像会话<code>cookie</code>，也会在浏览器关闭后消失。存储在<code>session Storage</code>中的数据可以跨越页面刷新而存在，同时如果浏览器支持，浏览器崩溃并重启之后依然可用</p><p>因为<code>seesion Storage</code>对象绑定于某个服务器会话，所以当文件在本地运行的时候是不可用的。存储在<code>session Storage</code>中的数据只能由最初给对象存储数据的页面访问到，所以对多页面应用有限制。</p><p>由于<code>session Storage</code>对象其实是<code>Storage</code>的一个实例，所以可以使用<code>setItem()</code>或者直接设置新的属性来存储数据。下面是这两种方法的例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用方法存储数据 </span></span><br><span class="line">sessionStorage.setItem(<span class="string">"name"</span>, <span class="string">"Nicholas"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用属性存储数据 </span></span><br><span class="line">sessionStorage.book = <span class="string">"Professional JavaScript"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用方法读取数据 </span></span><br><span class="line"><span class="keyword">var</span> name = sessionStorage.getItem(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用属性读取数据 </span></span><br><span class="line"><span class="keyword">var</span> book = sessionStorage.book;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 delete 删除一个值——在 WebKit 中无效 </span></span><br><span class="line"><span class="keyword">delete</span> sessionStorage.name;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用方法删除一个值 </span></span><br><span class="line">sessionStorage.removeItem(<span class="string">"book"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还可以通过结合 length 属性和 key()方法来迭代 sessionStorage 中的值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> sessionStorage) &#123;</span><br><span class="line">  <span class="keyword">var</span> value = sessionStorage.getItem(key);</span><br><span class="line">  alert(key + <span class="string">"="</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在撰写本书时，<code>delete</code>操作符在WebKit中无法删除数据，<code>removeItem()</code>则可以在各种支持的浏览器中正确运行。</p></blockquote><h3 id="localStorage对象"><a href="#localStorage对象" class="headerlink" title="localStorage对象"></a>localStorage对象</h3><p><code>localStorage</code>的目的是跨越会话存储数据,要访问同一个<code>localStorage</code>对象，页面必须来自同一个域名（子域名无效），使用同一种协议，在同一个端口上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用方法存储数据 </span></span><br><span class="line">localStorage.setItem(<span class="string">"name"</span>, <span class="string">"Nicholas"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用属性存储数据 </span></span><br><span class="line">localStorage.book = <span class="string">"Professional JavaScript"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用方法读取数据 </span></span><br><span class="line"><span class="keyword">var</span> name = localStorage.getItem(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用属性读取数据 </span></span><br><span class="line"><span class="keyword">var</span> book = localStorage.book;</span><br></pre></td></tr></table></figure><h3 id="storage事件"><a href="#storage事件" class="headerlink" title="storage事件"></a>storage事件</h3><p>对<code>Storage</code>对象进行任何修改，都会在文档上触发<code>storage</code>事件。当通过属性或<code>setItem()</code>方法保存数据，使用<code>delete</code>操作符或<code>removeItem()</code>删除数据，或者调用<code>clear()</code>方法时，都会发生该事件。这个事件的<code>event</code>对象有以下属性。</p><ul><li><code>domain</code>：发生变化的存储空间的域名。</li><li><code>key</code>：设置或者删除的键名。</li><li><code>newValue</code>：如果是设置值，则是新值；如果是删除键，则是null。</li><li><code>oldValue</code>：键被更改之前的值。</li></ul><blockquote><p>在这四个属性中，IE8和Firefox只实现了<code>domain</code>属性。在撰写本书的时候，WebKit尚不支持<code>storage</code>事件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"storage"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Storage changed for "</span> + event.domain);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;高级技巧&quot;&gt;&lt;a href=&quot;#高级技巧&quot; class=&quot;headerlink&quot; title=&quot;高级技巧&quot;&gt;&lt;/a&gt;高级技巧&lt;/h1&gt;&lt;h2 id=&quot;高级函数&quot;&gt;&lt;a href=&quot;#高级函数&quot; class=&quot;headerlink&quot; title=&quot;高级函数&quot;&gt;&lt;/a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正反馈系列:《JavaScript高级程序设计》AJAX,Comet,JSON</title>
    <link href="http://yoursite.com/2018/01/02/%E9%AB%98%E7%A8%8B11-ajax-json/"/>
    <id>http://yoursite.com/2018/01/02/高程11-ajax-json/</id>
    <published>2018-01-01T23:32:30.000Z</published>
    <updated>2018-03-21T10:28:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AJAX-Comet"><a href="#AJAX-Comet" class="headerlink" title="AJAX,Comet"></a>AJAX,Comet</h1><h2 id="XMLHttpRequest对象"><a href="#XMLHttpRequest对象" class="headerlink" title="XMLHttpRequest对象"></a>XMLHttpRequest对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br></pre></td></tr></table></figure><p>兼容代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXHR</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> XMLHttpRequest != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> ActiveXObject != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="comment">// 在IE7之前的浏览器中创建xhr对象</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">arguments</span>.callee.activeXString != <span class="string">"string"</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> versions = [<span class="string">"MSXML2.XMLHttp.6.0"</span>, <span class="string">"MSXML2.XMLHttp.3.0"</span>, <span class="string">"MSXML2.XMLHttp"</span>],</span><br><span class="line">        i, len;</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>, len = versions.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">new</span> ActiveXObject(versions[i]);</span><br><span class="line">          <span class="built_in">arguments</span>.callee.activeXString = versions[i];</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">          <span class="comment">//跳过 </span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="built_in">arguments</span>.callee.activeXString);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"No XHR object available."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="xhr-open-xhr-send"><a href="#xhr-open-xhr-send" class="headerlink" title="xhr.open(),xhr.send()"></a>xhr.open(),xhr.send()</h3><p><code>xhr.open(type,url,boolean)</code> <code>type</code>是请求类型<code>get</code>或<code>post</code>,<code>boolean</code>是否异步请求的布尔值, 不会发送请求,而是启动一个请求以备发送</p><p><code>xhr.send(请求主体)</code></p><p>在使用<code>xhr.send()</code>发送请求后,在收到响应后，响应的数据会自动填充XHR对象的属性，相关的属性简介如下。</p><ul><li><code>responseText</code>：作为响应主体被返回的文本。</li><li><code>responseXML</code>：如果响应的内容类型是”text/xml”或”application/xml”，这个属性中将保存包含着响应数据的XMLDOM文档。</li><li><code>status</code>：响应的HTTP状态码。</li><li><code>statusText</code>：HTTP状态的说明。</li></ul><p>第一步是检查<code>xhr.status</code>属性，以确定响应已经成功返回。一般来说，可以将HTTP状态代码为200作为成功的标志。此时，<code>xhr.responseText</code>属性的内容已经就绪，状态代码为304表示请求的资源并没有被修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"example.txt"</span>, <span class="literal">false</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">  alert(xhr.responseText);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  alert(<span class="string">"Request was unsuccessful: "</span> + xhr.status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>建议要通过检测<code>xhr.status</code>来决定下一步的操作，不要依赖<code>xhr.statusText</code>，因为后者在跨浏览器使用时不太可靠。另外，无论内容类型是什么，响应主体的内容都会保存到<code>xhr.responseText</code>属性中</p></blockquote><p>若发送为异步,则应该检测<code>xhr.readyState</code>属性,该属性表示请求/响应过程的当前活动阶段。这个属性可取的值如下。</p><ul><li><code>0</code>：未初始化。尚未调用<code>xhr.open()</code>方法。</li><li><code>1</code>：启动。已经调用open()方法，但尚未调用<code>xhr.send()</code>方法。</li><li><code>2</code>：发送。已经调用<code>xhr.send()</code>方法，但尚未接收到响应。</li><li><code>3</code>：接收。已经接收到部分响应数据。</li><li><code>4</code>：完成。已经接收到全部响应数据，而且已经可以在客户端使用了。</li></ul><p>只要<code>xhr.readyState</code>属性的值由一个值变成另一个值，都会触发一次<code>readystatechange</code>事件。可以利用这个事件来检测每次状态变化后<code>xhr.readyState</code>的值。通常，我们只对<code>xhr.readyState</code>值为4的阶段感兴趣，因为这时所有数据都已经就绪。不过，必须在调用<code>xhr.open()</code>之前指定<code>onreadystatechange</code>事件处理程序才能确保跨浏览器兼容性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = createXHR();</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">      alert(xhr.responseText);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      alert(<span class="string">"Request was unsuccessful: "</span> + xhr.status);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"example.txt"</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><blockquote><p>在接收到响应之前还可以调用 <code>xhr.abort()</code>方法来取消异步请求</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.abort();</span><br></pre></td></tr></table></figure><blockquote><p>在终止请求之后，还应该对XHR对象进行解引用操作。由于内存原因，不建议重用XHR对象。</p></blockquote><h3 id="HTTP头部信息"><a href="#HTTP头部信息" class="headerlink" title="HTTP头部信息"></a>HTTP头部信息</h3><p>在发送 XHR 请求的同时，还会发送下列HTTP头部信息。</p><ul><li><code>Accept</code>：浏览器能够处理的内容类型。</li><li><code>Accept-Charset</code>：浏览器能够显示的字符集。</li><li><code>Accept-Encoding</code>：浏览器能够处理的压缩编码。</li><li><code>Accept-Language</code>：浏览器当前设置的语言。</li><li><code>Connection</code>：浏览器与服务器之间连接的类型。</li><li><code>Cookie</code>：当前页面设置的任何Cookie。</li><li><code>Host</code>：发出请求的页面所在的域。</li><li><code>Referer</code>：发出请求的页面的URI。注意，HTTP规范将这个头部字段拼写错了，而为保证与规范一致，也只能将错就错了。（这个英文单词的正确拼法应该是referrer。）</li><li><code>User-Agent</code>：浏览器的用户代理字符串。</li></ul><h3 id="xhr-setRequestHeader"><a href="#xhr-setRequestHeader" class="headerlink" title="xhr.setRequestHeader()"></a>xhr.setRequestHeader()</h3><p><code>xhr.setRequestHeader(name,value)</code>方法,设置自定义请求头部信息, 这个方法接受两个参数: 头部字段的名称和头部字段的值,必须在<code>xhr.open()</code>方法之后,<code>xhr.send()</code>方法之前调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = createXHR();</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">      alert(xhr.responseText);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      alert(<span class="string">"Request was unsuccessful: "</span> + xhr.status);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"example.php"</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">"MyHeader"</span>, <span class="string">"MyValue"</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><blockquote><p>服务器在接收到这种自定义的头部信息之后，可以执行相应的后续操作。</p></blockquote><h3 id="xhr-getResponseHeader-xhr-getAllResponseHeaders"><a href="#xhr-getResponseHeader-xhr-getAllResponseHeaders" class="headerlink" title="xhr.getResponseHeader(),xhr.getAllResponseHeaders()"></a>xhr.getResponseHeader(),xhr.getAllResponseHeaders()</h3><p>取得相应的响应头部信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myHeader = xhr.getResponseHeader(<span class="string">"MyHeader"</span>); </span><br><span class="line"><span class="keyword">var</span> allHeaders = xhr.getAllResponseHeaders();</span><br></pre></td></tr></table></figure><h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"example.php?name1=value1&amp;name2=value2"</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><blockquote><p>查询字符串的键值必须经过<code>encodeURIComponent()</code>编码,然后才能放在URL的末尾</p></blockquote><h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">"post"</span>, <span class="string">"example.php"</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>POST请求应该把数据作为请求的主体提交,首先将<code>Content-Type</code>头部信息设置为<code>application/x-www-form-urlencoded</code>，也就是表单提交时的内容类型，其次是以适当的格式创建一个字符串。POST数据的格式与查询字符串格式相同。</p><blockquote><p>这里创建字符串的过程可以用之前总结的<code>serialize(form)</code>方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">serialize</span>(<span class="params">form</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> parts = [],</span><br><span class="line">    field = <span class="literal">null</span>,</span><br><span class="line">    i,</span><br><span class="line">    len,</span><br><span class="line">    j,</span><br><span class="line">    optLen,</span><br><span class="line">    option,</span><br><span class="line">    optValue;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>, len = form.elements.length; i &lt; len; i++) &#123;</span><br><span class="line">    field = form.elements[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (field.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"select-one"</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"select-multiple"</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (field.name.length) &#123;</span><br><span class="line">          <span class="keyword">for</span> (j = <span class="number">0</span>, optLen = field.options.length; j &lt; optLen; j++) &#123;</span><br><span class="line">            option = field.options[j];</span><br><span class="line">            <span class="keyword">if</span> (option.selected) &#123;</span><br><span class="line">              optValue = <span class="string">""</span>;</span><br><span class="line">              <span class="keyword">if</span> (option.hasAttribute) &#123;</span><br><span class="line">                optValue = (option.hasAttribute(<span class="string">"value"</span>) ? option.value : option.text);</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                optValue = (option.attributes[<span class="string">"value"</span>].specified ? option.value : option.text);</span><br><span class="line">              &#125;</span><br><span class="line">              parts.push(<span class="built_in">encodeURIComponent</span>(field.name) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(optValue));</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="literal">undefined</span>: <span class="comment">//fieldset</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"file"</span>: <span class="comment">//file input</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"submit"</span>: <span class="comment">//submit button</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"reset"</span>: <span class="comment">//reset button</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"button"</span>: <span class="comment">//custom button</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"radio"</span>: <span class="comment">//radio button</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"checkbox"</span>: <span class="comment">//checkbox</span></span><br><span class="line">        <span class="keyword">if</span> (!field.checked) &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* falls through */</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">//don't include form fields without names</span></span><br><span class="line">        <span class="keyword">if</span> (field.name.length) &#123;</span><br><span class="line">          parts.push(<span class="built_in">encodeURIComponent</span>(field.name) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(field.value));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> parts.join(<span class="string">"&amp;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">submitData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> xhr = createXHR();</span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">        alert(xhr.responseText);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">"Request was unsuccessful: "</span> + xhr.status);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  xhr.open(<span class="string">"post"</span>, <span class="string">"postexample.php"</span>, <span class="literal">true</span>);</span><br><span class="line">  xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">  <span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"user-info"</span>);</span><br><span class="line">  xhr.send(serialize(form));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="XMLHttpRequest-2级"><a href="#XMLHttpRequest-2级" class="headerlink" title="XMLHttpRequest 2级"></a>XMLHttpRequest 2级</h2><h3 id="FormData"><a href="#FormData" class="headerlink" title="FormData"></a>FormData</h3><p>，XMLHttpRequest2级为此定义了<code>FormData</code>类型。<code>FormData</code>为序列化表单以及创建与表单格式相同的数据（用于通过XHR传输）提供了便利。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formdata = <span class="keyword">new</span> FormData(); </span><br><span class="line">formdata.append(<span class="string">"name"</span>, <span class="string">"Nicholas"</span>);</span><br></pre></td></tr></table></figure><p><code>formdata</code>对象的<code>formdata.append()</code>方法接收两个参数：键和值，分别对应表单字段的名字和字段中包含的值。可以像这样添加任意多个键值对儿。而通过向<code>FormData</code>构造函数中传入表单元素，也可以用表单元素的数据预先向其中填入键值对儿：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formdata = <span class="keyword">new</span> FormData(<span class="built_in">document</span>.forms[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p>使用 <code>FormData</code> 的方便之处体现在不必明确地在 XHR 对象上设置请求头部的<code>Content-type</code>。XHR 对象能够识别传 入的数据类型是 <code>FormData</code> 的实例, 配置适当的头部信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = createXHR();</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">      alert(xhr.responseText);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      alert(<span class="string">"Request was unsuccessful: "</span> + xhr.status);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.open(<span class="string">"post"</span>, <span class="string">"postexample.php"</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"user-info"</span>);</span><br><span class="line">xhr.send(<span class="keyword">new</span> FormData(form));</span><br></pre></td></tr></table></figure><h3 id="超时设定-xhr-timeout"><a href="#超时设定-xhr-timeout" class="headerlink" title="超时设定 xhr.timeout"></a>超时设定 xhr.timeout</h3><p><code>xhr.timeout</code> 属性，表示请求在等待响应多少毫秒之后就终止。 在给 <code>xhr.timeout</code> 设置一个数值后，如果在规定的时间内浏览器还没有接收到响应，那么就会触发 <code>xhr.timeout</code> 事件，进而会调用 <code>ontimeout</code> 事件处理程序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = createXHR();</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">        alert(xhr.responseText);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">"Request was unsuccessful: "</span> + xhr.status);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">      <span class="comment">//假设由 ontimeout 事件处理程序处理 </span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"timeout.php"</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.timeout = <span class="number">1000</span>; <span class="comment">//将超时设置为 1 秒钟（仅适用于 IE8+） </span></span><br><span class="line">xhr.ontimeout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Request did not return in a second."</span>);</span><br><span class="line">&#125;;</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><blockquote><p>这个例子示范了如何使用<code>timeout</code>属性。将这个属性设置为1000毫秒，意味着如果请求在1秒钟内还没有返回，就会自动终止。请求终止时，会调用<code>ontimeout</code>事件处理程序。但此时<code>xhr.readyState</code>可能已经改变为4了，这意味着会调用<code>onreadystatechange</code>事件处理程序。可是，如果在超时终止请求之后再访问<code>xhr.status</code>属性，就会导致错误。为避免浏览器报告错误，可以将检查<code>status</code>属性的语句封装在一个<code>try-catch</code>语句当中。</p></blockquote><h3 id="xhr-overrideMimeType"><a href="#xhr-overrideMimeType" class="headerlink" title="xhr.overrideMimeType()"></a>xhr.overrideMimeType()</h3><p>此方法能够重写服务器返回的MIME类型。比如，服务器返回的MIME类型是text/plain，但数据中实际包含的是XML。根据MIME类型，即使数据是XML，<code>xhr.responseXML</code>属性中仍然是null。通过调用overrideMimeType()方法，可以保证把响应当作XML而非纯文本来处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = createXHR();</span><br><span class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"text.php"</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.overrideMimeType(<span class="string">"text/xml"</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><blockquote><p>这个例子强迫XHR对象将响应当作XML而非纯文本来处理。调用<code>xhr.overrideMimeType()</code>必须在xhr.send()`方法之前，才能保证重写响应的MIME类型。</p></blockquote><h2 id="进度事件"><a href="#进度事件" class="headerlink" title="进度事件"></a>进度事件</h2><p><code>ProgressEvents</code>规范是W3C的一个工作草案，定义了与客户端服务器通信有关的事件,这些事件最早其实只针对XHR操作，但目前也被其他API借鉴。有以下6个进度事件。</p><ul><li><code>loadstart</code>：在接收到响应数据的第一个字节时触发。</li><li><code>progress</code>：在接收响应期间持续不断地触发。</li><li><code>error</code>：在请求发生错误时触发。</li><li><code>abort</code>：在因为调用<code>xhr.abort()</code>方法而终止连接时触发。</li><li><code>load</code>：在接收到完整的响应数据时触发。</li><li><code>loadend</code>：在通信完成或者触发error、abort或load事件后触发。</li></ul><h4 id="load事件"><a href="#load事件" class="headerlink" title="load事件"></a>load事件</h4><p><code>xhr.load</code>事件用以替代<code>xhr.readystatechange</code>事件。响应接收完毕后将触发load事件，因此也就没有必要去检查readyState属性了。</p><p><code>onload</code>事件处理程序会接收到一个<code>event</code>对象，其<code>event.target</code>属性就指向XHR对象实例，因而可以访问到XHR对象的所有方法和属性。然而，并非所有浏览器都为这个事件实现了适当的事件对象。结果，开发人员还是要像下面这样被迫使用 XHR 对象变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = createXHR();</span><br><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">    alert(xhr.responseText);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">"Request was unsuccessful: "</span> + xhr.status);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"altevents.php"</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><blockquote><p>只要浏览器接收到服务器的响应，不管其状态如何，都会触发load事件。而这意味着你必须要检查<code>xhr.status</code>属性，才能确定数据是否真的已经可用了</p></blockquote><h4 id="progress事件"><a href="#progress事件" class="headerlink" title="progress事件"></a>progress事件</h4><p><code>progress</code>事件，这个事件会在浏览器接收新数据期间周期性地触发。</p><p>而<code>onprogress</code>事件处理程序会接收到一个<code>event</code>对象，其<code>event.target</code>属性是XHR对象，但包含着三个额外的属性：</p><ul><li><code>event.lengthComputable</code> 是一个表示进度信息是否可用的布尔值</li><li><code>event.position</code> 表示已经接收的字节数 </li><li><code>event.totalSize</code> 表示根据<code>Content-Length</code>响应头部确定的预期字节数。有了这些信息，我们就可以为用户创建一个进度指示器了。下面展示了为用户创建进度指示器的一个示例。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = createXHR();</span><br><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">    alert(xhr.responseText);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">"Request was unsuccessful: "</span> + xhr.status);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.onprogress = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> divStatus = <span class="built_in">document</span>.getElementById(<span class="string">"status"</span>);</span><br><span class="line">  <span class="keyword">if</span> (event.lengthComputable) &#123;</span><br><span class="line">    divStatus.innerHTML = <span class="string">"Received "</span> + event.position + <span class="string">" of "</span> + event.totalSize + <span class="string">" bytes"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"altevents.php"</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h2 id="跨源资源共享-CORS"><a href="#跨源资源共享-CORS" class="headerlink" title="跨源资源共享 CORS"></a>跨源资源共享 CORS</h2><p>CORS（Cross-OriginResourceSharing，跨源资源共享）是W3C的一个工作草案，定义了在必须访问跨源资源时，浏览器与服务器应该如何沟通。CORS背后的基本思想，就是使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功，还是应该失败。</p><p>在发送HTTP请求时，需要给它附加一个额外的<code>Origin</code>头部，其中包含请求页面的源信息（协议、域名和端口），以便服务器根据这个头部信息来决定是否给予响应。下面是<code>Origin</code>头部的一个示例：</p><blockquote><p>Origin: <a href="http://www.nczonline.net" target="_blank" rel="noopener">http://www.nczonline.net</a></p></blockquote><p>如果服务器认为这个请求可以接受，就在<code>Access-Control-Allow-Origin</code>头部中回发相同的源信息（如果是公共资源，可以回发”*”）。例如：</p><blockquote><p>Access-Control-Allow-Origin:<a href="http://www.nczonline.net" target="_blank" rel="noopener">http://www.nczonline.net</a></p></blockquote><p>如果没有这个头部，或者有这个头部但源信息不匹配，浏览器就会驳回请求。正常情况下，浏览器会处理请求。注意，请求和响应都不包含cookie信息。</p><blockquote><p>使用CORS的HTTP请求有以下限制</p></blockquote><ul><li>不能使用setRequestHeader()设置自定义头部。</li><li>不能发送和接收cookie。</li><li>调用getAllResponseHeaders()方法总会返回空字符串。</li></ul><h3 id="Preflighted-Requests"><a href="#Preflighted-Requests" class="headerlink" title="Preflighted Requests"></a>Preflighted Requests</h3><p>CORS通过一种叫做PreflightedRequests的透明服务器验证机制支持开发人员使用自定义的头部、GET或POST之外的方法，以及不同类型的主体内容。在使用下列高级选项来发送请求时，就会向服务器发送一个Preflight请求。该请求会发送下列头部。</p><ul><li><code>Origin</code>：与简单的请求相同。</li><li><code>Access-Control-Request-Method</code>：请求自身使用的方法。</li><li><code>Access-Control-Request-Headers</code>：（可选）自定义的头部信息，多个头部以逗号分隔。</li></ul><p>例如:</p><blockquote><p>Origin: <a href="http://www.nczonline.net" target="_blank" rel="noopener">http://www.nczonline.net</a><br>Access-Control-Request-Method: POST<br>Access-Control-Request-Headers: NCZ</p></blockquote><p>发送这个请求后，服务器可以决定是否允许这种类型的请求。服务器通过在响应中发送如下头部与浏览器进行沟通。</p><ul><li><code>Access-Control-Allow-Origin</code>：与简单的请求相同。</li><li><code>Access-Control-Allow-Methods</code>：允许的方法，多个方法以逗号分隔。</li><li><code>Access-Control-Allow-Headers</code>：允许的头部，多个头部以逗号分隔。</li><li><code>Access-Control-Max-Age</code>：应该将这个Preflight请求缓存多长时间（以秒表示）。</li></ul><p>例如:</p><blockquote><p>Access-Control-Allow-Origin: <a href="http://www.nczonline.net" target="_blank" rel="noopener">http://www.nczonline.net</a><br>Access-Control-Allow-Methods: POST, GET<br>Access-Control-Allow-Headers: NCZ<br>Access-Control-Max-Age: 1728000</p></blockquote><p><code>Preflight</code>请求结束后，结果将按照响应中指定的时间缓存起来。而为此付出的代价只是第一次发送这种请求时会多一次HTTP请求。</p><blockquote><p>IE10及更早版本不支持</p></blockquote><h3 id="带凭据的请求"><a href="#带凭据的请求" class="headerlink" title="带凭据的请求"></a>带凭据的请求</h3><p>默认情况下，跨源请求不提供凭据（cookie、HTTP认证及客户端SSL证明等）。<code>xhr.withCredentials</code>属性设置为true，可以指定某个请求应该发送凭据。如果服务器接受带凭据的请求，会用下面的HTTP头部来响应。</p><blockquote><p>Access-Control-Allow-Credentials: true</p></blockquote><p>如果发送的是带凭据的请求，但服务器的响应中没有包含这个头部，那么浏览器就不会把响应交给JavaScript（于是，<code>xhr.responseText</code>中将是空字符串，<code>xhr.status</code>的值为0，而且会调用<code>onerror()</code>事件处理程序）。</p><p>另外，服务器还可以在<code>Preflight</code>响应中发送这个HTTP头部，表示允许源发送带凭据的请求。</p><blockquote><p>IE10及更早版本不支持</p></blockquote><h3 id="IE浏览器中CORS的实现"><a href="#IE浏览器中CORS的实现" class="headerlink" title="IE浏览器中CORS的实现"></a>IE浏览器中CORS的实现</h3><p>关于IE浏览器中CORS的实现以及兼容代码查阅高程p582,p585</p><h2 id="其他跨域技术"><a href="#其他跨域技术" class="headerlink" title="其他跨域技术"></a>其他跨域技术</h2><h3 id="图像PING"><a href="#图像PING" class="headerlink" title="图像PING"></a>图像PING</h3><p>浏览器得不到任何具体的数据，但通过侦听<code>img.onload</code>和<code>img.onerror</code>事件，它能知道响应是什么时候接收到的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.onload = img.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Done!"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">img.src = <span class="string">"http://www.example.com/test?name=Nicholas"</span>;</span><br></pre></td></tr></table></figure><blockquote><p>只能发送GET请求，无法访问服务器的响应文本</p></blockquote><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//queryString中对应的callback:对应的要在本地页面运行的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myJsonp</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"myjsonp is "</span>+response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//动态加载script标签的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">letsJsonp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">  script.src=<span class="string">'http://nba.hupu.com/?callback=myJsonp'</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line">letsJsonp();</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务端拿到请求后解析queryString看到callback后,拿到callback的值,按约定响应myJsonp("Jordan");</span></span><br><span class="line">此时相当于在网页上加了一个<span class="string">"&lt;script&gt;myJsonp(Jordan)&lt;/script&gt;"</span>;于是<span class="built_in">console</span>输出<span class="string">"myjsonp is Jordan"</span></span><br></pre></td></tr></table></figure><h3 id="Comet"><a href="#Comet" class="headerlink" title="Comet"></a>Comet</h3><p><code>Ajax</code>是一种从页面向服务器请求数据的技术，而<code>Comet</code>则是一种服务器向页面推送数据的技术。</p><p><code>Comet</code>能够让信息近乎实时地被推送到页面上，非常适合处理体育比赛的分数和股票报价。</p><h3 id="长轮询-短轮询"><a href="#长轮询-短轮询" class="headerlink" title="长轮询,短轮询"></a>长轮询,短轮询</h3><p>有两种实现<code>Comet</code>的方式：长轮询和流。长轮询是传统轮询（也称为短轮询）的一个翻版，即浏览器定时向服务器发送请求，看有没有更新的数据。</p><p><img src="https://i.loli.net/2018/01/02/5a4ac4c90462a.jpg" alt=""></p><p>长轮询把短轮询颠倒了一下。页面发起一个到服务器的请求，然后服务器一直保持连接打开，直到有数据可发送。发送完数据之后，浏览器关闭连接，随即又发起一个到服务器的新请求。这一过程在页面打开期间一直持续不断</p><p><img src="https://i.loli.net/2018/01/02/5a4ac4c918eae.jpg" alt=""></p><p>无论是短轮询还是长轮询，浏览器都要在接收数据之前，先发起对服务器的连接。两者最大的区别在于服务器如何发送数据。短轮询是服务器立即发送响应，无论数据是否有效，而长轮询是等待发送响应。轮询的优势是所有浏览器都支持，因为使用XHR对象和<code>setTimeout()</code>就能实现。而你要做的就是决定什么时候发送请求。</p><h3 id="HTTP流"><a href="#HTTP流" class="headerlink" title="HTTP流"></a>HTTP流</h3><p>第二种流行的Comet实现是HTTP流. 它在页面的整个生命周期内只使用一个HTTP连接。具体来说，就是浏览器向服务器发送一个请求，而服务器保持连接打开，然后周期性地向浏览器发送数据。</p><p>所有服务器端语言都支持打印到输出缓存然后刷新（将输出缓存中的内容一次性全部发送到客户端）的功能。而这正是实现HTTP流的关键所在。</p><p>通过侦听<code>readystatechange</code>事件及检测<code>xhr.readyState</code>的值是否为3，就可以利用XHR对象实现HTTP流。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStreamingClient</span>(<span class="params">url, progress, finished</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest(),</span><br><span class="line">    received = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  xhr.open(<span class="string">"get"</span>, url, <span class="literal">true</span>);</span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="comment">//只取得最新数据并调整计数器 </span></span><br><span class="line">      result = xhr.responseText.substring(received);</span><br><span class="line">      received += result.length;</span><br><span class="line">      <span class="comment">//调用 progress 回调函数 </span></span><br><span class="line">      progress(result);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">      finished(xhr.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  xhr.send(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">return</span> xhr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> client = createStreamingClient(<span class="string">"streaming.php"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Received: "</span> + data);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Done!"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="服务器发送事件-SSE-Servser-Sent-Events"><a href="#服务器发送事件-SSE-Servser-Sent-Events" class="headerlink" title="服务器发送事件 SSE(Servser-Sent Events)"></a>服务器发送事件 SSE(Servser-Sent Events)</h3><p><code>SSE</code>（<code>Server-SentEvents</code>，服务器发送事件）是围绕只读<code>Comet</code>交互推出的API或者模式。<code>SSEAPI</code>用于创建到服务器的单向连接，服务器通过这个连接可以发送任意数量的数据。服务器响应的MIME类型必须是<code>text/event-stream</code>，而且是浏览器中的JavaScriptAPI能解析格式输出。<code>SSE</code>支持短轮询、长轮询和HTTP流，而且能在断开连接时自动确定何时重新连接。有了这么简单实用的API，再实现Comet就容易多了。</p><h4 id="SSE-API"><a href="#SSE-API" class="headerlink" title="SSE API"></a>SSE API</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> eventsource = <span class="keyword">new</span> EventSource(<span class="string">"myevents.php"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>传入的URL必须与创建对象的页面同源（相同的URL模式、域及端口）。<code>EventSource</code>的实例有一个<code>eventsource.readyState</code>属性，值为0表示正连接到服务器，值为1表示打开了连接，值为2表示关闭了连接。<br>还有三个事件</p></blockquote><ul><li><code>open</code>：在建立连接时触发。</li><li><code>message</code>：在从服务器接收到新事件时触发。</li><li><code>error</code>：在无法建立连接时触发。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">source.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data = event.data;</span><br><span class="line">  <span class="comment">//处理数据 </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>服务器发回的数据以字符串形式保存在 <code>event.data</code> 中。</p><p><code>EventSource</code>对象会保持与服务器的活动连接。如果连接断开，还会重新连接。这就意味着SSE适合长轮询和HTTP流。如果想强制立即断开连接并且不再重新连接，可以调用<code>eventsource.close()</code>方法。</p><h4 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h4><p>所谓的服务器事件会通过一个持久的HTTP响应发送，这个响应的MIME类型为<code>text/event-stream</code>。响应的格式是纯文本，最简单的情况是每个数据项都带有前缀<code>data:</code>，例如：</p><p>data: foo </p><p>data: bar </p><p>data: foo<br>data: bar</p><p>对以上响应而言，事件流中的第一个<code>message</code>事件返回的<code>event.data</code>值为”foo”，第二个<code>message</code>事件返回的<code>event.data</code>值为”bar”，第三个<code>message</code>事件返回的<code>event.data</code>值为”foo\nbar”（注意中间的换行符）。对于多个连续的以<code>data:</code>开头的数据行，将作为多段数据解析，每个值之间以一个换行符分隔。只有在包含<code>data:</code>的数据行后面有空行时，才会触发<code>message</code>事件，因此在服务器上生成事件流时不能忘了多添加这一行。通过<code>id:</code>前缀可以给特定的事件指定一个关联的ID，这个ID行位于<code>data:</code>行前面或后面皆可：</p><p>data: foo<br>id: 1</p><p>设置了ID后，<code>EventSource</code>对象会跟踪上一次触发的事件。如果连接断开，会向服务器发送一个包含名为<code>Last-Event-ID</code>的特殊HTTP头部的请求，以便服务器知道下一次该触发哪个事件。在多次连接的事件流中，这种机制可以确保浏览器以正确的顺序收到连接的数据段。</p><h3 id="Web-Sockets"><a href="#Web-Sockets" class="headerlink" title="Web Sockets"></a>Web Sockets</h3><p><code>WebSockets</code>的目标是在一个单独的持久连接上提供全双工、双向通信。在JavaScript中创建了<code>WebSocket</code>之后，会有一个HTTP请求发送到浏览器以发起连接。在取得服务器响应后，建立的连接会使用HTTP升级从HTTP协议交换为<code>WebSocket</code>协议。</p><p>由于<code>WebSockets</code>使用了自定义的协议，所以URL模式也略有不同。未加密的连接不再是<code>http://</code>，而是<code>ws://</code>；加密的连接也不是<code>https://</code>，而是<code>wss://</code></p><p>使用自定义协议而非HTTP协议的好处是，能够在客户端和服务器之间发送非常少量的数据，而不必担心HTTP那样字节级的开销。由于传递的数据包很小，因此<code>WebSockets</code>非常适合移动应用。</p><blockquote><p>注意，必须给<code>WebSocket</code>构造函数传入绝对URL。同源策略对<code>WebSockets</code>不适用，因此可以通过它打开到任何站点的连接。至于是否会与某个域中的页面通信，则完全取决于服务器。（通过握手信息就可以知道请求来自何方。）</p></blockquote><h4 id="Web-Sockets-API"><a href="#Web-Sockets-API" class="headerlink" title="Web Sockets API"></a>Web Sockets API</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://www.example.com/server.php"</span>);</span><br></pre></td></tr></table></figure><p>实例化了<code>WebSocket</code>对象后，浏览器就会马上尝试创建连接。与XHR类似，<code>WebSocket</code>也有一个表示当前状态的<code>readyState</code>属性。不过，这个属性的值与XHR并不相同，而是如下所示。</p><ul><li><code>WebSocket.OPENING(0)</code>：正在建立连接。</li><li><code>WebSocket.OPEN(1)</code>：已经建立连接。</li><li><code>WebSocket.CLOSING(2)</code>：正在关闭连接。</li><li><code>WebSocket.CLOSE(3)</code>：已经关闭连接。</li></ul><p><code>WebSocket</code>没有<code>readystatechange</code>事件；不过，它有其他事件，对应着不同的状态。<code>readyState</code>的值永远从0开始。</p><p>要关闭<code>WebSocket</code>连接，可以在任何时候调用<code>socket.close()</code>方法。调用了<code>socket.close()</code>之后，<code>readyState</code>的值立即变为2（正在关闭），而在关闭连接后就会变成3。</p><h4 id="发送和接收数据"><a href="#发送和接收数据" class="headerlink" title="发送和接收数据"></a>发送和接收数据</h4><p><code>WebSocket</code>只能接收和发送字符串数据.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://www.example.com/server.php"</span>); </span><br><span class="line">socket.send(<span class="string">"Hello world!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> message = &#123;</span><br><span class="line">  time: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">  text: <span class="string">"Hello world!"</span>,</span><br><span class="line">  clientId: <span class="string">"asdfp8734rew"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">socket.send(<span class="built_in">JSON</span>.stringify(message));</span><br></pre></td></tr></table></figure><blockquote><p>当服务器向客户端发来消息时,<code>WebSocket</code>对象会触发<code>message</code>事件,这个<code>message</code>事件与其他传递消息的协议类似，也是把返回的数据保存在<code>event.data</code>属性中。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">socket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data = event.data;</span><br><span class="line">  <span class="comment">//处理数据</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="其他事件"><a href="#其他事件" class="headerlink" title="其他事件"></a>其他事件</h4><p><code>WebSocket</code>对象还有其他三个事件，在连接生命周期的不同阶段触发。</p><ul><li><code>open</code>：在成功建立连接时触发。</li><li><code>error</code>：在发生错误时触发，连接不能持续。</li><li><code>close</code>：在连接关闭时触发。</li></ul><p><code>WebSocket</code>对象不支持DOM2级事件侦听器，因此必须使用DOM0级语法分别定义每个事件处理程序。</p><p>在这三个事件中，只有<code>socket.close</code>事件的<code>event</code>对象有额外的信息。这个事件的事件对象有三个额外的属性：</p><ul><li><code>event.wasClean</code>是一个布尔值，表示连接是否已经明确地关闭；</li><li><code>event.code</code>是服务器返回的数值状态码；</li><li><code>event.reason</code>是一个字符串，包含服务器发回的消息。可以把这些信息显示给用户，也可以记录到日志中以便将来分析。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://www.example.com/server.php"</span>);</span><br><span class="line"></span><br><span class="line">socket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Connection established."</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">socket.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Connection error."</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">socket.onclose = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Was clean? "</span> + event.wasClean + <span class="string">" Code="</span> + event.code + <span class="string">" Reason="</span> + event.reason);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><h3 id="早期浏览器的shim"><a href="#早期浏览器的shim" class="headerlink" title="早期浏览器的shim"></a>早期浏览器的shim</h3><p><a href="https://github.com/douglascrockford/JSON-js" target="_blank" rel="noopener">JSON.js</a></p><h3 id="JSON-stringify"><a href="#JSON-stringify" class="headerlink" title="JSON.stringify()"></a>JSON.stringify()</h3><p><code>JSON.stringify(json[,filter,number]) return string</code>,<code>filter</code>是一个过滤器,可以是一个数组或函数, <code>number</code>代表缩进字符数,表示是否在返回的<code>string</code>中保持缩进,同时也会插入换行符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">  <span class="string">"title"</span>: <span class="string">"Professional JavaScript"</span>,</span><br><span class="line">  <span class="string">"authors"</span>: [<span class="string">"Nicholas C. Zakas"</span>],</span><br><span class="line">  edition: <span class="number">3</span>,</span><br><span class="line">  year: <span class="number">2011</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jsonText = <span class="built_in">JSON</span>.stringify(book, [<span class="string">"title"</span>, <span class="string">"edition"</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//&#123;"title":"Professional JavaScript","edition":3&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>若<code>filter</code>是一个函数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">  <span class="string">"title"</span>: <span class="string">"Professional JavaScript"</span>,</span><br><span class="line">  <span class="string">"authors"</span>: [<span class="string">"Nicholas C. Zakas"</span>],</span><br><span class="line">  edition: <span class="number">3</span>,</span><br><span class="line">  year: <span class="number">2011</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jsonText = <span class="built_in">JSON</span>.stringify(book, <span class="function"><span class="keyword">function</span> (<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"authors"</span>:</span><br><span class="line">      <span class="keyword">return</span> value.join(<span class="string">","</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"year"</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">5000</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"edition"</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>; <span class="comment">//返回undefined,相应的属性会被忽略</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;"title":"Professional JavaScript","authors":"Nicholas C. Zakas","year":5000&#125;</span></span><br></pre></td></tr></table></figure><h3 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse()"></a>JSON.parse()</h3><p><code>JSON.parse(string,reviver) return json</code> 关于<code>reviver</code>函数如何定义看下面的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">  <span class="string">"title"</span>: <span class="string">"Professional JavaScript"</span>,</span><br><span class="line">  <span class="string">"authors"</span>: [<span class="string">"Nicholas C. Zakas"</span>],</span><br><span class="line">  edition: <span class="number">3</span>,</span><br><span class="line">  year: <span class="number">2011</span>,</span><br><span class="line">  releaseDate: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2011</span>, <span class="number">11</span>, <span class="number">1</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jsonText = <span class="built_in">JSON</span>.stringify(book);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bookCopy = <span class="built_in">JSON</span>.parse(jsonText, <span class="function"><span class="keyword">function</span> (<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (key == <span class="string">"releaseDate"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">alert(bookCopy.releaseDate.getFullYear());</span><br></pre></td></tr></table></figure><blockquote><p>若<code>reviver</code>函数返回<code>undefined</code>,则表示要从结果中删除相应的键</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;AJAX-Comet&quot;&gt;&lt;a href=&quot;#AJAX-Comet&quot; class=&quot;headerlink&quot; title=&quot;AJAX,Comet&quot;&gt;&lt;/a&gt;AJAX,Comet&lt;/h1&gt;&lt;h2 id=&quot;XMLHttpRequest对象&quot;&gt;&lt;a href=&quot;#XMLHt
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正反馈系列:《JavaScript高级程序设计》HTML5脚本编程,错误处理</title>
    <link href="http://yoursite.com/2017/12/31/%E9%AB%98%E7%A8%8B10-h5-error/"/>
    <id>http://yoursite.com/2017/12/31/高程10-h5-error/</id>
    <published>2017-12-31T09:53:47.000Z</published>
    <updated>2018-03-21T10:23:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML5-脚本编程-第16章"><a href="#HTML5-脚本编程-第16章" class="headerlink" title="HTML5 脚本编程 (第16章)"></a>HTML5 脚本编程 (第16章)</h1><h2 id="原生拖放"><a href="#原生拖放" class="headerlink" title="原生拖放"></a>原生拖放</h2><h3 id="拖放事件"><a href="#拖放事件" class="headerlink" title="拖放事件"></a>拖放事件</h3><blockquote><p><code>element</code>元素开始被拖放时:</p></blockquote><ol><li><code>element.dragstart</code></li><li><code>element.drag</code> 持续发生</li><li><code>element.dragend</code></li></ol><blockquote><p>拖动到一个有效放置目标<code>target</code>上时:</p></blockquote><ol><li><code>target.dragenter</code></li><li><code>target.dragover</code> 持续发生</li><li><code>target.dragleave</code> 或 <code>drop</code> 不会同时触发</li></ol><h3 id="自定义配置目标"><a href="#自定义配置目标" class="headerlink" title="自定义配置目标"></a>自定义配置目标</h3><p>如果拖动元素经过不允许放置的元素，无论用户如何操作，都不会发生<code>drop</code>事件。不过，你可以把任何元素变成有效的放置目标，方法是重写<code>dragenter</code>和<code>dragover</code>事件的默认行为。例如，假设有一个ID为”droptarget”的<code>&lt;div&gt;</code>元素，可以用如下代码将它变成一个放置目标。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> droptarget = <span class="built_in">document</span>.getElementById(<span class="string">"droptarget"</span>);</span><br><span class="line">EventUtil.addHandler(droptarget, <span class="string">"dragover"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  EventUtil.preventDefault(event);</span><br><span class="line">&#125;);</span><br><span class="line">EventUtil.addHandler(droptarget, <span class="string">"dragenter"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  EventUtil.preventDefault(event);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>在Firefox3.5+中，放置事件的默认行为是打开被放到放置目标上的URL。换句话说，如果是把图像拖放到放置目标上，页面就会转向图像文件；而如果是把文本拖放到放置目标上，则会导致无效URL错误。因此，为了让Firefox支持正常的拖放，还要取消drop事件的默认行为，阻止它打开URL：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取消drop事件原生行为(新窗口打开图片等)</span></span><br><span class="line">EventUtil.addHandler(droptarget, <span class="string">"drop"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  EventUtil.preventDefault(event);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="dataTransfer对象"><a href="#dataTransfer对象" class="headerlink" title="dataTransfer对象"></a>dataTransfer对象</h3><p>HTML5引入了<code>dataTransfer对象</code>,它是<code>event</code>事件对象的一个属性，用于从被拖动元素向放置目标传递字符串格式的数据。只能在拖放事件的事件处理程序中访问dataTransfer对象。</p><p>dataTransfer对象有两个主要方法：<code>event.dataTransfer.getData()</code>和<code>event.dataTransfer.setData()</code>。<code>getData()</code>可以取得由<code>setData()</code>保存的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置和接收文本数据 </span></span><br><span class="line">event.dataTransfer.setData(<span class="string">"text"</span>, <span class="string">"some text"</span>);</span><br><span class="line"><span class="keyword">var</span> text = event.dataTransfer.getData(<span class="string">"text"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置和接收 URL </span></span><br><span class="line">event.dataTransfer.setData(<span class="string">"URL"</span>, <span class="string">"http://www.wrox.com/"</span>);</span><br><span class="line"><span class="keyword">var</span> url = event.dataTransfer.getData(<span class="string">"URL"</span>);</span><br></pre></td></tr></table></figure><p>IE只定义了”text”和”URL”两种有效的数据类型，而HTML5则对此加以扩展，允许指定各种MIME类型。考虑到向后兼容，HTML5也支持”text”和”URL”，但这两种类型会被映射为”text/plain”和”text/uri-list”。</p><p>实际上，<code>dataTransfer对象</code>可以为每种MIME类型都保存一个值。换句话说，同时在这个对象中保存一段文本和一个URL不会有任何问题。不过，保存在<code>dataTransfer对象</code>中的数据只能在<code>drop</code>事件处理程序中读取。如果在ondrop处理程序中没有读到数据，那就是<code>dataTransfer对象</code>已经被销毁，数据也丢失了。</p><p>在拖动<strong>文本框</strong>中的文本时，浏览器会调用<code>event.dataTransfer.setData()</code>方法，将拖动的文本以”text”格式保存在dataTransfer对象中。类似地，在拖放<strong>链接</strong>或<strong>图像</strong>时，会调用<code>event.dataTransfer.setData()</code>方法并保存URL。然后，在这些元素被拖放到放置目标时，就可以通过<code>event.dataTransfer.getData()</code>读到这些数据。当然，作为开发人员，你也可以在<code>dragstart</code>事件处理程序中调用<code>event.dataTransfer.setData()</code>，手工保存自己要传输的数据</p><h3 id="dropEffect与effectAllowed"><a href="#dropEffect与effectAllowed" class="headerlink" title="dropEffect与effectAllowed"></a>dropEffect与effectAllowed</h3><p>dataTransfer 对象的两个属性：<code>event.dataTransfer.dropEffect</code> 和 <code>event.dataTransfer.effectAllowed</code></p><p><code>event.dataTransfer.dropEffect</code> 是针对放置目标<code>target</code>的事件处理程序<code>dragenter</code>设置的.可以知道被拖动的元素能够执行哪种放置行为,可能有4个值:</p><ul><li><code>&quot;none&quot;</code>：不能把拖动的元素放在这里。这是除文本框之外所有元素的默认值。</li><li><code>&quot;move&quot;</code>：应该把拖动的元素移动到放置目标。</li><li><code>&quot;copy&quot;</code>：应该把拖动的元素复制到放置目标。</li><li><code>&quot;link&quot;</code>：表示放置目标会打开拖动的元素（但拖动的元素必须是一个链接，有URL）。</li></ul><blockquote><p><code>dropEffect</code> 属性只有搭配 <code>effectAllowed</code> 属性才有用。</p></blockquote><p><code>event.dataTransfer.effectAllowed</code>属性表示允许拖动元素的哪种<code>dropEffect</code>，是针对被拖动目标<code>element</code>的<code>dragstart</code>事件设置的, <code>effectAllowed</code>属性可能的值如下</p><ul><li><code>&quot;uninitialized&quot;</code>：没有给被拖动的元素设置任何放置行为。</li><li><code>&quot;none&quot;</code>：被拖动的元素不能有任何行为。</li><li><code>&quot;copy&quot;</code>：只允许值为”copy”的dropEffect。</li><li><code>&quot;link&quot;</code>：只允许值为”link”的dropEffect。</li><li><code>&quot;move&quot;</code>：只允许值为”move”的dropEffect。</li><li><code>&quot;copyLink&quot;</code>：允许值为”copy”和”link”的dropEffect。</li><li><code>&quot;copyMove&quot;</code>：允许值为”copy”和”move”的dropEffect。</li><li><code>&quot;linkMove&quot;</code>：允许值为”link”和”move”的dropEffect。</li><li><code>&quot;all&quot;</code>：允许任意dropEffect。</li></ul><blockquote><p>假设你想允许用户把文本框中的文本拖放到一个<code>&lt;div&gt;</code>元素中。首先，必须将<strong>div元素的dragenter事件</strong>中<code>dropEffect</code>和<strong>文本框的dragstart事件</strong>中<code>effectAllowed</code>设置为”move”。但是，由于<code>&lt;div&gt;</code>元素的放置事件的默认行为是什么也不做，所以文本不可能自动移动。重写这个默认行为，就能从文本框中移走文本。然后你就可以自己编写代码将文本插入到<code>&lt;div&gt;</code>中，这样整个拖放操作就完成了。如果你将<code>dropEffect</code>和<code>effectAllowed</code>的值设置为”copy”，那就不会自动移走文本框中的文本。</p></blockquote><h3 id="可拖动"><a href="#可拖动" class="headerlink" title="可拖动"></a>可拖动</h3><p>默认情况下，图像、链接和文本是可以拖动的，也就是说，不用额外编写代码，用户就可以拖动它们。文本只有在被选中的情况下才能拖动，而图像和链接在任何时候都可以拖动。让其他元素可以拖动也是可能的。</p><p>HTML5为所有HTML元素规定了一个<code>draggable</code>属性，表示元素是否可以拖动。图像和链接的<code>draggable</code>属性自动被设置成了true，而其他元素这个属性的默认值都是false。要想让其他元素可拖动，或者让图像或链接不能拖动，都可以设置这个属性。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 让这个图像不可以拖动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"smile.gif"</span> <span class="attr">draggable</span>=<span class="string">"false"</span> <span class="attr">alt</span>=<span class="string">"Smiley face"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 让这个元素可以拖动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="其他成员"><a href="#其他成员" class="headerlink" title="其他成员"></a>其他成员</h3><blockquote><p>HTML5 规范规定 <code>dataTransfer对象</code>还应该包含下列方法和属性。</p></blockquote><ul><li><code>addElement(element)</code>：为拖动操作添加一个元素。添加这个元素只影响数据（即增加作为拖动源而响应回调的对象），不会影响拖动操作时页面元素的外观。在写作本书时，只有Firefox3.5+实现了这个方法。</li><li><code>clearData(format)</code>：清除以特定格式保存的数据。实现这个方法的浏览器有IE、Fireforx3.5+、Chrome和Safari4+。</li><li><code>setDragImage(element,x,y)</code>：指定一幅图像，当拖动发生时，显示在光标下方。这个方法接收的三个参数分别是要显示的HTML元素和光标在图像中的x、y坐标。其中，HTML元素可以是一幅图像，也可以是其他元素。是图像则显示图像，是其他元素则显示渲染后的元素。实现这个方法的浏览器有Firefox3.5+、Safari4+和Chrome。</li><li><code>types</code>：当前保存的数据类型。这是一个类似数组的集合，以”text”这样的字符串形式保存着数据类型。实现这个属性的浏览器有IE10+、Firefox3.5+和Chrome。</li></ul><h2 id="媒体元素"><a href="#媒体元素" class="headerlink" title="媒体元素"></a>媒体元素</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 嵌入视频 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"conference.mpg"</span> <span class="attr">id</span>=<span class="string">"myVideo"</span>&gt;</span>Video player not available.<span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 嵌入音频 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"song.mp3"</span> <span class="attr">id</span>=<span class="string">"myAudio"</span>&gt;</span>Audio player not available.<span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用这两个元素时，至少要在标签中包含<code>src</code>属性，指向要加载的媒体文件。还可以设置<code>width</code>和<code>height</code>属性以指定视频播放器的大小，</p><p>如果标签中有<code>controls</code>特性，则意味着浏览器应该显示UI控件，以便用户直接操作媒体。位于开始和结束标签之间的任何内容都将作为后备内容，在浏览器不支持这两个媒体元素的情况下显示。</p><p>因为并非所有浏览器都支持所有媒体格式，所以可以指定多个不同的媒体来源, 使用一或多个<code>&lt;source&gt;</code>元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 嵌入视频 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"myVideo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"conference.webm"</span> <span class="attr">type</span>=<span class="string">"video/webm; codecs='vp8, vorbis'"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"conference.ogv"</span> <span class="attr">type</span>=<span class="string">"video/ogg; codecs='theora, vorbis'"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"conference.mpg"</span>&gt;</span> Video player not available.</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 嵌入音频 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">id</span>=<span class="string">"myAudio"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"song.ogg"</span> <span class="attr">type</span>=<span class="string">"audio/ogg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"song.mp3"</span> <span class="attr">type</span>=<span class="string">"audio/mpeg"</span>&gt;</span> Audio player not available.</span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p><code>&lt;video&gt;</code>和<code>&lt;audio&gt;</code>元素都提供了完善的 JavaScript 接口。下表列出了这两个元素共有的属性，</p><p><img src="https://i.loli.net/2017/12/31/5a48b37a19ab3.jpg" alt=""></p><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p><img src="https://i.loli.net/2017/12/31/5a48b37a3ab84.jpg" alt=""></p><h3 id="自定义媒体"><a href="#自定义媒体" class="headerlink" title="自定义媒体"></a>自定义媒体</h3><p>使用<code>&lt;audio&gt;</code>和<code>&lt;video&gt;</code>元素的<code>element.play()</code>和<code>element.pause()</code>方法，可以手工控制媒体文件的播放。组合使用属性、事件和这两个方法，很容易创建一个自定义的媒体播放器，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mediaplayer"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"video"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"player"</span> <span class="attr">src</span>=<span class="string">"movie.mov"</span> <span class="attr">poster</span>=<span class="string">"mymovie.jpg"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"200"</span>&gt;</span> Video player not available.</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"controls"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Play"</span> <span class="attr">id</span>=<span class="string">"video-btn"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"curtime"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span>/</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"duration"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">video.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//get references to the elements</span></span><br><span class="line">  <span class="keyword">var</span> player = <span class="built_in">document</span>.getElementById(<span class="string">"player"</span>);</span><br><span class="line">  <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"video-btn"</span>);</span><br><span class="line">  <span class="keyword">var</span> curtime = <span class="built_in">document</span>.getElementById(<span class="string">"curtime"</span>);</span><br><span class="line">  <span class="keyword">var</span> duration = <span class="built_in">document</span>.getElementById(<span class="string">"duration"</span>);</span><br><span class="line">  duration.innerHTML = player.duration;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//attach event handler to button</span></span><br><span class="line">  EventUtil.addHandler(btn, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (player.paused) &#123;</span><br><span class="line">      player.play();</span><br><span class="line">      btn.value = <span class="string">"Pause"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      player.pause();</span><br><span class="line">      btn.value = <span class="string">"Play"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//update the current time periodically</span></span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    curtime.innerHTML = player.currentTime;</span><br><span class="line">  &#125;, <span class="number">250</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="检测编解码器支持情况"><a href="#检测编解码器支持情况" class="headerlink" title="检测编解码器支持情况"></a>检测编解码器支持情况</h3><p>有一个JavaScriptAPI能够检测浏览器是否支持某种格式和编解码器</p><p>这两个媒体元素都有一个<code>element.canPlayType()</code>方法，该方法接收一种格式/编解码器字符串，返回”probably”、”maybe”或””（空字符串）。空字符串是假值，因此可以像下面这样在if语句中使用<code>element.canPlayType()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (audio.canPlayType(<span class="string">"audio/mpeg"</span>)) &#123;</span><br><span class="line">  <span class="comment">//进一步处理 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>“probably”和”maybe”都是真值，因此在 if 语句的条件测试中可以转换成 true。<br>在同时传入MIME类型和编解码器的情况下，可能性就会增加，返回的字符串会变成”probably”。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> audio = <span class="built_in">document</span>.getElementById(<span class="string">"audio-player"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//很可能"maybe" </span></span><br><span class="line"><span class="keyword">if</span> (audio.canPlayType(<span class="string">"audio/mpeg"</span>)) &#123;</span><br><span class="line">  <span class="comment">//进一步处理 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可能是"probably" </span></span><br><span class="line"><span class="keyword">if</span> (audio.canPlayType(<span class="string">"audio/ogg; codecs=\"vorbis\""</span>)) &#123;</span><br><span class="line">  <span class="comment">//进一步处理 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>编解码器必须用引号引起来才行。下表列出了已知的已得到支持的音频格式和编解码器。</p></blockquote><p><img src="https://i.loli.net/2017/12/31/5a48b37a1b202.jpg" alt=""></p><h2 id="历史状态管理"><a href="#历史状态管理" class="headerlink" title="历史状态管理"></a>历史状态管理</h2><h3 id="history-pushState"><a href="#history-pushState" class="headerlink" title="history.pushState()"></a>history.pushState()</h3><p><code>history.pushState(state,title,url)</code>方法，该方法可以接收三个参数：状态对象、新状态的标题,可选的相对 URL,能够在不加载新页面的情况下改变浏览器的URL</p><p>执行<code>history.pushState()</code>方法后，新的状态信息就会被加入历史状态栈，而浏览器地址栏也会变成新的相对URL。但是，浏览器并不会真的向服务器发送请求，即使状态改变之后查询<code>location.href</code>也会返回与地址栏中相同的地址。</p><p>因为pushState()会创建新的历史状态，所以你会发现“后退”按钮也能使用了。按下“后退”按钮，会触发window对象的<code>window.onpopstate</code>事件。事件的事件对象有一个<code>event.state</code>属性，这个属性就包含着当初以第一个参数传递给<code>history.pushState()</code>的状态对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">history.pushState(&#123;<span class="attr">name</span>:<span class="string">"Nicholas"</span>&#125;, <span class="string">"Nicholas page"</span>, <span class="string">"nicholas.html"</span>);</span><br></pre></td></tr></table></figure><h3 id="history-replaceState"><a href="#history-replaceState" class="headerlink" title="history.replaceState()"></a>history.replaceState()</h3><p><code>history.replaceState(state,title,url)</code> 和<code>history.pushState</code>的区别是不是往历史记录里添加一条记录,而是更新当前记录</p><h3 id="window-onpopstate"><a href="#window-onpopstate" class="headerlink" title="window.onpopstate()"></a>window.onpopstate()</h3><p><code>window.onpopstate</code>是<code>popstate</code>事件在<code>window</code>对象上的事件处理程序.</p><p>每当处于激活状态的历史记录条目发生变化时,<code>popstate</code>事件就会在对应<code>window</code>对象上触发. 如果当前处于激活状态的历史记录条目是由<code>history.pushState()</code>方法创建,或者由<code>history.replaceState()</code>方法修改过的, 则<code>popstate</code>事件对象的<code>event.state</code>属性包含了这个历史记录条目的state对象的一个拷贝.</p><p>调用<code>history.pushState()</code>或者<code>history.replaceState()</code>不会触发<code>popstate</code>事件. <code>popstate</code>事件只会在浏览器某些行为下触发, 比如点击后退、前进按钮(或者在JavaScript中调用<code>history.back()</code>、<code>history.forward()</code>、<code>history.go()</code>方法).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onpopstate = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"location: "</span> + <span class="built_in">document</span>.location + <span class="string">", state: "</span> + <span class="built_in">JSON</span>.stringify(event.state));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//绑定事件处理函数. </span></span><br><span class="line">history.pushState(&#123;<span class="attr">page</span>: <span class="number">1</span>&#125;, <span class="string">"title 1"</span>, <span class="string">"?page=1"</span>);    <span class="comment">//添加并激活一个历史记录条目 http://example.com/example.html?page=1,条目索引为1</span></span><br><span class="line">history.pushState(&#123;<span class="attr">page</span>: <span class="number">2</span>&#125;, <span class="string">"title 2"</span>, <span class="string">"?page=2"</span>);    <span class="comment">//添加并激活一个历史记录条目 http://example.com/example.html?page=2,条目索引为2</span></span><br><span class="line">history.replaceState(&#123;<span class="attr">page</span>: <span class="number">3</span>&#125;, <span class="string">"title 3"</span>, <span class="string">"?page=3"</span>); <span class="comment">//修改当前激活的历史记录条目 http://ex..?page=2 变为 http://ex..?page=3,条目索引为3</span></span><br><span class="line">        history.back(); <span class="comment">// 弹出 "location: http://example.com/example.html?page=1, state: &#123;"page":1&#125;"</span></span><br><span class="line">history.back(); <span class="comment">// 弹出 "location: http://example.com/example.html, state: null</span></span><br><span class="line">history.go(<span class="number">2</span>);  <span class="comment">// 弹出 "location: http://example.com/example.html?page=3, state: &#123;"page":3&#125;</span></span><br></pre></td></tr></table></figure><h1 id="错误处理-第17章"><a href="#错误处理-第17章" class="headerlink" title="错误处理 (第17章)"></a>错误处理 (第17章)</h1><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><h3 id="try-catch语句"><a href="#try-catch语句" class="headerlink" title="try-catch语句"></a>try-catch语句</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// 可能会导致错误的代码 </span></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="comment">// 在错误发生时怎么处理 </span></span><br><span class="line">  <span class="built_in">console</span>.log(error.message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果<code>try</code>块中的任何代码发生了错误，就会立即退出代码执行过程，然后接着执行<code>catch</code>块。此时，<code>catch</code>块会接收到一个包含错误信息的对象。与在其他语言中不同的是，即使你不想使用这个错误对象，也要给它起个名字。这个对象中包含的实际信息会因浏览器而异，但共同的是有一个保存着错误消息的<code>error.message</code>属性,一个保存错误类型的<code>error.name</code>属性；</p><h3 id="finally子句"><a href="#finally子句" class="headerlink" title="finally子句"></a>finally子句</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFinally</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>; <span class="comment">// 不会执行</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 不会执行</span></span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 只会return 0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然在<code>try-catch</code>语句中是可选的，但<code>finally</code>子句一经使用，其代码无论如何都会执行。换句话说，<code>try</code>语句块中的代码全部正常执行，<code>finally</code>子句会执行；如果因为出错而执行了<code>catch</code>语句块，<code>finally</code>子句照样还会执行。只要代码中包含<code>finally</code>子句，则无论try或catch语句块中包含什么代码——甚至<code>return</code>语句，都不会阻止<code>finally</code>子句的执行。来看下面这个函数。</p><blockquote><p>如果提供finally子句，则catch子句就成了可选的（catch或finally有一个即可）。<br>请读者务必要记住，只要代码中包含finally子句，那么无论try还是catch语句块中的return语句都将被忽略。</p></blockquote><h3 id="错误类型"><a href="#错误类型" class="headerlink" title="错误类型"></a>错误类型</h3><p>7种错误类型:</p><ul><li><code>Error</code></li><li><code>EvalError</code></li><li><code>RangeError</code></li><li><code>ReferenceError</code></li><li><code>SyntaxError</code></li><li><code>TypeError</code></li><li><code>URIError</code></li></ul><blockquote><p>针对错误类型的编程处理</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  someFunction();</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="keyword">if</span> (error <span class="keyword">instanceof</span> <span class="built_in">TypeError</span>) &#123;</span><br><span class="line">    <span class="comment">//处理类型错误 </span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error <span class="keyword">instanceof</span> <span class="built_in">ReferenceError</span>) &#123;</span><br><span class="line">    <span class="comment">//处理引用错误 </span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//处理其他类型的错误 </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用<code>try-catch</code>最适合处理那些我们无法控制的错误。假设你在使用一个大型<code>JavaScript库</code>中的函数，该函数可能会有意无意地抛出一些错误。由于我们不能修改这个库的源代码，所以大可将对该函数的调用放在<code>try-catch</code>语句当中，万一有什么错误发生，也好恰当地处理它们。<br>在明明白白地知道自己的代码会发生错误时，再使用<code>try-catch</code>语句就不太合适了。例如，如果传递给函数的参数是字符串而非数值，就会造成函数出错，那么就应该先检查参数的类型，然后再决定如何去做。在这种情况下，不应用使用<code>try-catch</code>语句。</p></blockquote><h3 id="抛出错误-throw"><a href="#抛出错误-throw" class="headerlink" title="抛出错误 throw"></a>抛出错误 throw</h3><p>与<code>try-catch</code>语句相配的还有一个<code>throw</code>操作符，用于随时抛出自定义错误。抛出错误时，必须要给<code>throw</code>操作符指定一个值，这个值是什么类型，没有要求。下列代码都是有效的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="number">12345</span>;</span><br><span class="line"><span class="keyword">throw</span> <span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="keyword">throw</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">throw</span> &#123;</span><br><span class="line">  name: <span class="string">"JavaScript"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在遇到<code>throw</code>操作符时，代码会立即停止执行。仅当有<code>try-catch</code>语句捕获到被抛出的值时，代码才会继续执行。通过使用某种内置错误类型，可以更真实地模拟浏览器错误。每种错误类型的构造函数接收一个参数，即实际的错误消息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Something bad happened."</span>);</span><br></pre></td></tr></table></figure><p>这行代码抛出了一个通用错误，带有一条自定义错误消息。浏览器会像处理自己生成的错误一样，来处理这行代码抛出的错误。换句话说，浏览器会以常规方式报告这一错误，并且会显示这里的自定义错误消息。像下面使用其他错误类型，也可以模拟出类似的浏览器错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">SyntaxError</span>(<span class="string">"I don’t like your syntax."</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"What type of variable do you take me for?"</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RangeError</span>(<span class="string">"Sorry, you just don’t have the range."</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">EvalError</span>(<span class="string">"That doesn’t evaluate."</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">URIError</span>(<span class="string">"Uri, is that you?"</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">ReferenceError</span>(<span class="string">"You didn’t cite your references properly."</span>);</span><br></pre></td></tr></table></figure><p>另外，利用原型链还可以通过继承Error来创建自定义错误类型（原型链在第6章中介绍）。此时，需要为新创建的错误类型指定name和message属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CustomError</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">"CustomError"</span>;</span><br><span class="line">  <span class="keyword">this</span>.message = message;</span><br><span class="line">&#125;</span><br><span class="line">CustomError.prototype = <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> CustomError(<span class="string">"My message"</span>);</span><br></pre></td></tr></table></figure><h3 id="错误事件-error"><a href="#错误事件-error" class="headerlink" title="错误事件 error"></a>错误事件 error</h3><p>任何没有通过try-catch处理的错误都会触发<code>window</code>对象的<code>window.onerror(message,url,line)</code>事件。在任何Web浏览器中，<code>onerror</code>事件处理程序都不会创建<code>event</code>事件参数对象，但它可以接收三个参数：错误消息<code>message</code>、错误所在的URL<code>url</code>, 行号<code>line</code>。多数情况下，只有错误消息有用，因为URL只是给出了文档的位置，而行号所指的代码行既可能出自嵌入的JavaScript代码，也可能出自外部的文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">message, url, line</span>) </span>&#123;</span><br><span class="line">  alert(message);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>只要发生错误，无论是不是浏览器生成的，都会触发<code>error</code>事件，并执行这个事件处理程序。然后，浏览器默认的机制发挥作用，像往常一样显示出错误消息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">message, url, line</span>) </span>&#123;</span><br><span class="line">  alert(message);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过return false，这个函数实际上就充当了整个文档中的<code>try-catch</code>语句，可以捕获所有无代码处理的运行时错误。这个事件处理程序是避免浏览器报告错误的最后一道防线，理想情况下，只要可能就不应该使用它。只要能够适当地使用<code>try-catch</code>语句，就不会有错误交给浏览器，也就不会触发<code>error</code>事件。</p><p>图像也支持<code>error</code>事件。只要图像的<code>src</code>特性中的URL不能返回可以被识别的图像格式，就会触发<code>error</code>事件。此时的<code>error</code>事件遵循DOM格式，会返回一个以图像为目标的<code>event</code>对象。下面是一个例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">EventUtil.addHandler(image, <span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Image loaded!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">EventUtil.addHandler(image, <span class="string">"error"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Image not loaded!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">image.src = <span class="string">"smilex.gif"</span>; <span class="comment">//指定不存在的文件</span></span><br></pre></td></tr></table></figure><h3 id="添加查询字符串工具函数"><a href="#添加查询字符串工具函数" class="headerlink" title="添加查询字符串工具函数"></a>添加查询字符串工具函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addQueryStringArg</span>(<span class="params">url, name, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (url.indexOf(<span class="string">"?"</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">    url += <span class="string">"?"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    url += <span class="string">"&amp;"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  url += <span class="built_in">encodeURIComponent</span>(name) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(value);</span><br><span class="line">  <span class="keyword">return</span> url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="把错误记录到服务器"><a href="#把错误记录到服务器" class="headerlink" title="把错误记录到服务器"></a>把错误记录到服务器</h3><p>要建立这样一种JavaScript错误记录系统，首先需要在服务器上创建一个页面（或者一个服务器入口点），用于处理错误数据。这个页面的作用无非就是从查询字符串中取得数据，然后再将数据写入错误日志中。这个页面可能会使用如下所示的函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logError</span>(<span class="params">sev, msg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">  img.src = <span class="string">"log.php?sev="</span> + <span class="built_in">encodeURIComponent</span>(sev) + <span class="string">"&amp;msg="</span> + <span class="built_in">encodeURIComponent</span>(msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个<code>logError()</code>函数接收两个参数：表示严重程度的数值或字符串（视所用系统而异）及错误消息。其中，使用了Image对象来发送请求，这样做非常灵活，主要表现如下几方面。</p><ul><li>所有浏览器都支持Image对象，包括那些不支持XMLHttpRequest对象的浏览器。</li><li>可以避免跨域限制。通常都是一台服务器要负责处理多台服务器的错误，而这种情况下使用XMLHttpRequest是不行的。</li><li>在记录错误的过程中出问题的概率比较低。大多数Ajax通信都是由JavaScript库提供的包装函数来处理的，如果库代码本身有问题，而你还在依赖该库记录错误，可想而知，错误消息是不可能得到记录的。</li></ul><p>只要是使用try-catch语句，就应该把相应错误记录到日志中。来看下面的例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = mods.length; i &lt; len; i++) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    mods[i].init();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">    logError(<span class="string">"nonfatal"</span>, <span class="string">"Module init failed: "</span> + ex.message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调试技术"><a href="#调试技术" class="headerlink" title="调试技术"></a>调试技术</h2><h3 id="console"><a href="#console" class="headerlink" title="console"></a>console</h3><ul><li><code>error(message)</code>：将错误消息记录到控制台</li><li><code>info(message)</code>：将信息性消息记录到控制台</li><li><code>log(message)</code>：将一般消息记录到控制台</li><li><code>warn(message)</code>：将警告消息记录到控制台</li></ul><h3 id="抛出错误-assert"><a href="#抛出错误-assert" class="headerlink" title="抛出错误 assert()"></a>抛出错误 assert()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> num1 != <span class="string">"number"</span> || <span class="keyword">typeof</span> num2 != <span class="string">"number"</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"divide(): Both arguments must be numbers."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> num1 / num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于大型应用程序来说，自定义的错误通常都使用<code>assert(condition,errMessage)</code>函数抛出。这个函数接受两个参数，一个是求值结果应该为true的条件，另一个是条件为false时要抛出的错误信息。以下就是一个非常基本的<code>assert()</code>函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assert</span>(<span class="params">condition, message</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!condition) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以用这个<code>assert()</code>函数代替某些函数中需要调试的if语句，以便输出错误消息。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  assert(<span class="keyword">typeof</span> num1 == <span class="string">"number"</span> &amp;&amp; <span class="keyword">typeof</span> num2 == <span class="string">"number"</span>, <span class="string">"divide(): Both arguments must be numbers."</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> num1 / num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTML5-脚本编程-第16章&quot;&gt;&lt;a href=&quot;#HTML5-脚本编程-第16章&quot; class=&quot;headerlink&quot; title=&quot;HTML5 脚本编程 (第16章)&quot;&gt;&lt;/a&gt;HTML5 脚本编程 (第16章)&lt;/h1&gt;&lt;h2 id=&quot;原生拖放&quot;&gt;&lt;a 
      
    
    </summary>
    
    
  </entry>
  
</feed>
